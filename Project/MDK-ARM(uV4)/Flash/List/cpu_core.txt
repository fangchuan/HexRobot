; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\cpu_core.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\cpu_core.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\cpu_core.crf ..\..\uCOS-III\uC-CPU\cpu_core.c]
                          THUMB

                          AREA ||i.CPU_CntLeadZeros08||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros08 PROC
;;;1209   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1210   CPU_DATA  CPU_CntLeadZeros08 (CPU_INT08U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1211   {
000002  4605              MOV      r5,r0
;;;1212   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1213           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1214       CPU_DATA  ix;
;;;1215   #endif
;;;1216       CPU_DATA  nbr_lead_zeros;
;;;1217   
;;;1218                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1219   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1220        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1221       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1222       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_08) * DEF_OCTET_NBR_BITS;
00000c  3c18              SUBS     r4,r4,#0x18
;;;1223   
;;;1224   
;;;1225   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1226                                                                                   /* Chk bits [07:00] :                   */
;;;1227                                                                                   /* .. Nbr lead zeros =               .. */
;;;1228       ix              = (CPU_DATA)(val >>  0u);                                   /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1229       nbr_lead_zeros  = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);                /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1230   #endif
;;;1231   
;;;1232   
;;;1233       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1234   }
000010  bd70              POP      {r4-r6,pc}
;;;1235   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros16||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros16 PROC
;;;1277   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1278   CPU_DATA  CPU_CntLeadZeros16 (CPU_INT16U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1279   {
000002  4605              MOV      r5,r0
;;;1280   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1281           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1282       CPU_DATA  ix;
;;;1283   #endif
;;;1284       CPU_DATA  nbr_lead_zeros;
;;;1285   
;;;1286                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1287   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1288        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1289       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1290       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_16) * DEF_OCTET_NBR_BITS;
00000c  3c10              SUBS     r4,r4,#0x10
;;;1291   
;;;1292   
;;;1293   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1294       if (val > 0x00FFu) {                                                        /* Chk bits [15:08] :                   */
;;;1295                                                                                   /* .. Nbr lead zeros =               .. */
;;;1296           ix             = (CPU_DATA)(val >>  8u);                                /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1297           nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);             /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1298   
;;;1299       } else {                                                                    /* Chk bits [07:00] :                   */
;;;1300                                                                                   /* .. Nbr lead zeros =               .. */
;;;1301           ix             = (CPU_DATA)(val >>  0u);                                /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1302           nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);             /* .. plus nbr msb lead zeros =  8 bits.*/
;;;1303       }
;;;1304   #endif
;;;1305   
;;;1306   
;;;1307       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1308   }
000010  bd70              POP      {r4-r6,pc}
;;;1309   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros32||, CODE, READONLY, ALIGN=1

                  CPU_CntLeadZeros32 PROC
;;;1351   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1352   CPU_DATA  CPU_CntLeadZeros32 (CPU_INT32U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1353   {
000002  4605              MOV      r5,r0
;;;1354   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1355           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1356       CPU_DATA  ix;
;;;1357   #endif
;;;1358       CPU_DATA  nbr_lead_zeros;
;;;1359   
;;;1360                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1361   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1362        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1363       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       CPU_CntLeadZeros
00000a  4604              MOV      r4,r0
;;;1364       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_32) * DEF_OCTET_NBR_BITS;
00000c  bf00              NOP      
;;;1365   
;;;1366   
;;;1367   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1368       if (val > 0x0000FFFFu) {
;;;1369           if (val > 0x00FFFFFFu) {                                                /* Chk bits [31:24] :                   */
;;;1370                                                                                   /* .. Nbr lead zeros =               .. */
;;;1371               ix             = (CPU_DATA)(val >> 24u);                            /* .. lookup tbl ix  = 'val' >> 24 bits */
;;;1372               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);         /* .. plus nbr msb lead zeros =  0 bits.*/
;;;1373   
;;;1374           } else {                                                                /* Chk bits [23:16] :                   */
;;;1375                                                                                   /* .. Nbr lead zeros =               .. */
;;;1376               ix             = (CPU_DATA)(val >> 16u);                            /* .. lookup tbl ix  = 'val' >> 16 bits */
;;;1377               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);         /* .. plus nbr msb lead zeros =  8 bits.*/
;;;1378           }
;;;1379   
;;;1380       } else {
;;;1381           if (val > 0x000000FFu) {                                                /* Chk bits [15:08] :                   */
;;;1382                                                                                   /* .. Nbr lead zeros =               .. */
;;;1383               ix             = (CPU_DATA)(val >>  8u);                            /* .. lookup tbl ix  = 'val' >>  8 bits */
;;;1384               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);         /* .. plus nbr msb lead zeros = 16 bits.*/
;;;1385   
;;;1386           } else {                                                                /* Chk bits [07:00] :                   */
;;;1387                                                                                   /* .. Nbr lead zeros =               .. */
;;;1388               ix             = (CPU_DATA)(val >>  0u);                            /* .. lookup tbl ix  = 'val' >>  0 bits */
;;;1389               nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);         /* .. plus nbr msb lead zeros = 24 bits.*/
;;;1390           }
;;;1391       }
;;;1392   #endif
;;;1393   
;;;1394   
;;;1395       return (nbr_lead_zeros);
00000e  4620              MOV      r0,r4
;;;1396   }
000010  bd70              POP      {r4-r6,pc}
;;;1397   #endif
                          ENDP


                          AREA ||i.CPU_CntLeadZeros64||, CODE, READONLY, ALIGN=2

                  CPU_CntLeadZeros64 PROC
;;;1439   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;1440   CPU_DATA  CPU_CntLeadZeros64 (CPU_INT64U  val)
000000  b530              PUSH     {r4,r5,lr}
;;;1441   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1442   #if  (!((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1443           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;1444       CPU_DATA  ix;
;;;1445   #endif
;;;1446       CPU_DATA  nbr_lead_zeros;
;;;1447   
;;;1448                                                                                   /* ---------- ASM-OPTIMIZED ----------- */
;;;1449   #if ((defined(CPU_CFG_LEAD_ZEROS_ASM_PRESENT)) && \
;;;1450        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;1451       nbr_lead_zeros  =  CPU_CntLeadZeros((CPU_DATA)val);
;;;1452       nbr_lead_zeros -= (CPU_CFG_DATA_SIZE - CPU_WORD_SIZE_64) * DEF_OCTET_NBR_BITS;
;;;1453   
;;;1454   
;;;1455   #else                                                                           /* ----------- C-OPTIMIZED ------------ */
;;;1456       if (val > 0x00000000FFFFFFFFu) {
000006  2400              MOVS     r4,#0
000008  f1d235ff          RSBS     r5,r2,#0xffffffff
00000c  419c              SBCS     r4,r4,r3
00000e  d226              BCS      |L4.94|
;;;1457           if (val > 0x0000FFFFFFFFFFFFu) {
000010  f64f74ff          MOV      r4,#0xffff
000014  f1d235ff          RSBS     r5,r2,#0xffffffff
000018  419c              SBCS     r4,r4,r3
00001a  d20f              BCS      |L4.60|
;;;1458               if (val > 0x00FFFFFFFFFFFFFFu) {                                    /* Chk bits [63:56] :                   */
00001c  f06f447f          MVN      r4,#0xff000000
000020  f1d235ff          RSBS     r5,r2,#0xffffffff
000024  419c              SBCS     r4,r4,r3
000026  d203              BCS      |L4.48|
;;;1459                                                                                   /* .. Nbr lead zeros =               .. */
;;;1460                   ix             = (CPU_DATA)(val >> 56u);                        /* .. lookup tbl ix  = 'val' >> 56 bits */
000028  0e19              LSRS     r1,r3,#24
;;;1461                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  0u);     /* .. plus nbr msb lead zeros =  0 bits.*/
00002a  4c24              LDR      r4,|L4.188|
00002c  5c60              LDRB     r0,[r4,r1]
00002e  e044              B        |L4.186|
                  |L4.48|
;;;1462   
;;;1463               } else {                                                            /* Chk bits [55:48] :                   */
;;;1464                                                                                   /* .. Nbr lead zeros =               .. */
;;;1465                   ix             = (CPU_DATA)(val >> 48u);                        /* .. lookup tbl ix  = 'val' >> 48 bits */
000030  0c19              LSRS     r1,r3,#16
;;;1466                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] +  8u);     /* .. plus nbr msb lead zeros =  8 bits.*/
000032  4c22              LDR      r4,|L4.188|
000034  5c64              LDRB     r4,[r4,r1]
000036  f1040008          ADD      r0,r4,#8
00003a  e03e              B        |L4.186|
                  |L4.60|
;;;1467               }
;;;1468   
;;;1469           } else {
;;;1470               if (val > 0x000000FFFFFFFFFFu) {                                    /* Chk bits [47:40] :                   */
00003c  24ff              MOVS     r4,#0xff
00003e  f1d235ff          RSBS     r5,r2,#0xffffffff
000042  419c              SBCS     r4,r4,r3
000044  d205              BCS      |L4.82|
;;;1471                                                                                   /* .. Nbr lead zeros =               .. */
;;;1472                   ix             = (CPU_DATA)(val >> 40u);                        /* .. lookup tbl ix  = 'val' >> 40 bits */
000046  0a19              LSRS     r1,r3,#8
;;;1473                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 16u);     /* .. plus nbr msb lead zeros = 16 bits.*/
000048  4c1c              LDR      r4,|L4.188|
00004a  5c64              LDRB     r4,[r4,r1]
00004c  f1040010          ADD      r0,r4,#0x10
000050  e033              B        |L4.186|
                  |L4.82|
;;;1474   
;;;1475               } else {                                                            /* Chk bits [39:32] :                   */
;;;1476                                                                                   /* .. Nbr lead zeros =               .. */
;;;1477                   ix             = (CPU_DATA)(val >> 32u);                        /* .. lookup tbl ix  = 'val' >> 32 bits */
000052  4619              MOV      r1,r3
;;;1478                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 24u);     /* .. plus nbr msb lead zeros = 24 bits.*/
000054  4c19              LDR      r4,|L4.188|
000056  5c64              LDRB     r4,[r4,r1]
000058  f1040018          ADD      r0,r4,#0x18
00005c  e02d              B        |L4.186|
                  |L4.94|
;;;1479               }
;;;1480           }
;;;1481   
;;;1482       } else {
;;;1483           if (val > 0x000000000000FFFFu) {
00005e  f64f75ff          MOV      r5,#0xffff
000062  2400              MOVS     r4,#0
000064  1aad              SUBS     r5,r5,r2
000066  419c              SBCS     r4,r4,r3
000068  d215              BCS      |L4.150|
;;;1484               if (val > 0x0000000000FFFFFFu) {                                    /* Chk bits [31:24] :                   */
00006a  f06f457f          MVN      r5,#0xff000000
00006e  2400              MOVS     r4,#0
000070  1aad              SUBS     r5,r5,r2
000072  419c              SBCS     r4,r4,r3
000074  d207              BCS      |L4.134|
;;;1485                                                                                   /* .. Nbr lead zeros =               .. */
;;;1486                   ix             = (CPU_DATA)(val >> 24u);                        /* .. lookup tbl ix  = 'val' >> 24 bits */
000076  0e14              LSRS     r4,r2,#24
000078  ea442103          ORR      r1,r4,r3,LSL #8
;;;1487                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 32u);     /* .. plus nbr msb lead zeros = 32 bits.*/
00007c  4c0f              LDR      r4,|L4.188|
00007e  5c64              LDRB     r4,[r4,r1]
000080  f1040020          ADD      r0,r4,#0x20
000084  e019              B        |L4.186|
                  |L4.134|
;;;1488   
;;;1489               } else {                                                            /* Chk bits [23:16] :                   */
;;;1490                                                                                   /* .. Nbr lead zeros =               .. */
;;;1491                   ix             = (CPU_DATA)(val >> 16u);                        /* .. lookup tbl ix  = 'val' >> 16 bits */
000086  0c14              LSRS     r4,r2,#16
000088  ea444103          ORR      r1,r4,r3,LSL #16
;;;1492                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 40u);     /* .. plus nbr msb lead zeros = 40 bits.*/
00008c  4c0b              LDR      r4,|L4.188|
00008e  5c64              LDRB     r4,[r4,r1]
000090  f1040028          ADD      r0,r4,#0x28
000094  e011              B        |L4.186|
                  |L4.150|
;;;1493               }
;;;1494   
;;;1495           } else {
;;;1496               if (val > 0x00000000000000FFu) {                                    /* Chk bits [15:08] :                   */
000096  2400              MOVS     r4,#0
000098  f1d205ff          RSBS     r5,r2,#0xff
00009c  419c              SBCS     r4,r4,r3
00009e  d207              BCS      |L4.176|
;;;1497                                                                                   /* .. Nbr lead zeros =               .. */
;;;1498                   ix             = (CPU_DATA)(val >>  8u);                        /* .. lookup tbl ix  = 'val' >>  8 bits */
0000a0  0a14              LSRS     r4,r2,#8
0000a2  ea446103          ORR      r1,r4,r3,LSL #24
;;;1499                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 48u);     /* .. plus nbr msb lead zeros = 48 bits.*/
0000a6  4c05              LDR      r4,|L4.188|
0000a8  5c64              LDRB     r4,[r4,r1]
0000aa  f1040030          ADD      r0,r4,#0x30
0000ae  e004              B        |L4.186|
                  |L4.176|
;;;1500   
;;;1501               } else {                                                            /* Chk bits [07:00] :                   */
;;;1502                                                                                   /* .. Nbr lead zeros =               .. */
;;;1503                   ix             = (CPU_DATA)(val >>  0u);                        /* .. lookup tbl ix  = 'val' >>  0 bits */
0000b0  4611              MOV      r1,r2
;;;1504                   nbr_lead_zeros = (CPU_DATA)(CPU_CntLeadZerosTbl[ix] + 56u);     /* .. plus nbr msb lead zeros = 56 bits.*/
0000b2  4c02              LDR      r4,|L4.188|
0000b4  5c64              LDRB     r4,[r4,r1]
0000b6  f1040038          ADD      r0,r4,#0x38
                  |L4.186|
;;;1505               }
;;;1506           }
;;;1507       }
;;;1508   #endif
;;;1509   
;;;1510   
;;;1511       return (nbr_lead_zeros);
;;;1512   }
0000ba  bd30              POP      {r4,r5,pc}
;;;1513   #endif
                          ENDP

                  |L4.188|
                          DCD      CPU_CntLeadZerosTbl

                          AREA ||i.CPU_CntTrailZeros08||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros08 PROC
;;;1721   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_08)
;;;1722   CPU_DATA  CPU_CntTrailZeros08 (CPU_INT08U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1723   {
000002  4604              MOV      r4,r0
;;;1724   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1725           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08)))
;;;1726       CPU_INT08U  val_bit_mask;
;;;1727       CPU_DATA    nbr_lead_zeros;
;;;1728   #endif
;;;1729       CPU_DATA    nbr_trail_zeros;
;;;1730   
;;;1731   
;;;1732       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L5.10|
;;;1733           return (CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS);
000006  2008              MOVS     r0,#8
                  |L5.8|
;;;1734       }
;;;1735   
;;;1736                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1737   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1738        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_08))
;;;1739       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1740   
;;;1741   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1742       val_bit_mask    = val & ((CPU_INT08U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1743       nbr_lead_zeros  = CPU_CntLeadZeros08(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1744                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1745       nbr_trail_zeros = ((CPU_WORD_SIZE_08 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1746   #endif
;;;1747   
;;;1748   
;;;1749       return (nbr_trail_zeros);
;;;1750   }
000008  bd70              POP      {r4-r6,pc}
                  |L5.10|
00000a  4620              MOV      r0,r4                 ;1739
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1739
000012  4628              MOV      r0,r5                 ;1749
000014  e7f8              B        |L5.8|
;;;1751   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros16||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros16 PROC
;;;1826   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_16)
;;;1827   CPU_DATA  CPU_CntTrailZeros16 (CPU_INT16U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1828   {
000002  4604              MOV      r4,r0
;;;1829   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1830           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16)))
;;;1831       CPU_INT16U  val_bit_mask;
;;;1832       CPU_DATA    nbr_lead_zeros;
;;;1833   #endif
;;;1834       CPU_DATA    nbr_trail_zeros;
;;;1835   
;;;1836   
;;;1837       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L6.10|
;;;1838           return (CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS);
000006  2010              MOVS     r0,#0x10
                  |L6.8|
;;;1839       }
;;;1840   
;;;1841                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1842   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1843        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_16))
;;;1844       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1845   
;;;1846   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1847       val_bit_mask    = val & ((CPU_INT16U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1848       nbr_lead_zeros  = CPU_CntLeadZeros16(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1849                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1850       nbr_trail_zeros = ((CPU_WORD_SIZE_16 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1851   #endif
;;;1852   
;;;1853   
;;;1854       return (nbr_trail_zeros);
;;;1855   }
000008  bd70              POP      {r4-r6,pc}
                  |L6.10|
00000a  4620              MOV      r0,r4                 ;1844
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1844
000012  4628              MOV      r0,r5                 ;1854
000014  e7f8              B        |L6.8|
;;;1856   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros32||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros32 PROC
;;;1931   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_32)
;;;1932   CPU_DATA  CPU_CntTrailZeros32 (CPU_INT32U  val)
000000  b570              PUSH     {r4-r6,lr}
;;;1933   {
000002  4604              MOV      r4,r0
;;;1934   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1935           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32)))
;;;1936       CPU_INT32U  val_bit_mask;
;;;1937       CPU_DATA    nbr_lead_zeros;
;;;1938   #endif
;;;1939       CPU_DATA    nbr_trail_zeros;
;;;1940   
;;;1941   
;;;1942       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000004  b90c              CBNZ     r4,|L7.10|
;;;1943           return (CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS);
000006  2020              MOVS     r0,#0x20
                  |L7.8|
;;;1944       }
;;;1945   
;;;1946                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;1947   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;1948        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_32))
;;;1949       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;1950   
;;;1951   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;1952       val_bit_mask    = val & ((CPU_INT32U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;1953       nbr_lead_zeros  = CPU_CntLeadZeros32(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;1954                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;1955       nbr_trail_zeros = ((CPU_WORD_SIZE_32 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;1956   #endif
;;;1957   
;;;1958   
;;;1959       return (nbr_trail_zeros);
;;;1960   }
000008  bd70              POP      {r4-r6,pc}
                  |L7.10|
00000a  4620              MOV      r0,r4                 ;1949
00000c  f7fffffe          BL       CPU_CntTrailZeros
000010  4605              MOV      r5,r0                 ;1949
000012  4628              MOV      r0,r5                 ;1959
000014  e7f8              B        |L7.8|
;;;1961   #endif
                          ENDP


                          AREA ||i.CPU_CntTrailZeros64||, CODE, READONLY, ALIGN=1

                  CPU_CntTrailZeros64 PROC
;;;2036   #if (CPU_CFG_DATA_SIZE_MAX >= CPU_WORD_SIZE_64)
;;;2037   CPU_DATA  CPU_CntTrailZeros64 (CPU_INT64U  val)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;2038   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;2039   #if  (!((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2040           (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64)))
;;;2041       CPU_INT64U  val_bit_mask;
;;;2042       CPU_DATA    nbr_lead_zeros;
;;;2043   #endif
;;;2044       CPU_DATA    nbr_trail_zeros;
;;;2045   
;;;2046   
;;;2047       if (val == 0u) {                                            /* Rtn ALL val bits as zero'd (see Note #3).            */
000008  2100              MOVS     r1,#0
00000a  ea840001          EOR      r0,r4,r1
00000e  4069              EORS     r1,r1,r5
000010  4308              ORRS     r0,r0,r1
000012  d102              BNE      |L8.26|
;;;2048           return (CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS);
000014  2040              MOVS     r0,#0x40
                  |L8.22|
;;;2049       }
;;;2050   
;;;2051                                                                   /* ------------------ ASM-OPTIMIZED ------------------- */
;;;2052   #if ((defined(CPU_CFG_TRAIL_ZEROS_ASM_PRESENT)) && \
;;;2053        (CPU_CFG_DATA_SIZE >= CPU_WORD_SIZE_64))
;;;2054       nbr_trail_zeros = CPU_CntTrailZeros((CPU_DATA)val);
;;;2055   
;;;2056   #else                                                           /* ------------------- C-OPTIMIZED -------------------- */
;;;2057       val_bit_mask    = val & ((CPU_INT64U)~val + 1u);            /* Zero/clr all bits EXCEPT least-sig set bit.          */
;;;2058       nbr_lead_zeros  = CPU_CntLeadZeros64(val_bit_mask);         /* Cnt  nbr lead  0s.                                   */
;;;2059                                                                   /* Calc nbr trail 0s = (nbr val bits - 1) - nbr lead 0s.*/
;;;2060       nbr_trail_zeros = ((CPU_WORD_SIZE_64 * DEF_OCTET_NBR_BITS) - 1u) - nbr_lead_zeros;
;;;2061   #endif
;;;2062   
;;;2063   
;;;2064       return (nbr_trail_zeros);
;;;2065   }
000016  e8bd83f0          POP      {r4-r9,pc}
                  |L8.26|
00001a  43e2              MVNS     r2,r4                 ;2057
00001c  43e8              MVNS     r0,r5                 ;2057
00001e  1c52              ADDS     r2,r2,#1              ;2057
000020  f1400100          ADC      r1,r0,#0              ;2057
000024  ea020604          AND      r6,r2,r4              ;2057
000028  ea010705          AND      r7,r1,r5              ;2057
00002c  4630              MOV      r0,r6                 ;2058
00002e  4639              MOV      r1,r7                 ;2058
000030  f7fffffe          BL       CPU_CntLeadZeros64
000034  4680              MOV      r8,r0                 ;2058
000036  f1c8093f          RSB      r9,r8,#0x3f           ;2060
00003a  4648              MOV      r0,r9                 ;2064
00003c  e7eb              B        |L8.22|
;;;2066   #endif
                          ENDP


                          AREA ||i.CPU_Init||, CODE, READONLY, ALIGN=1

                  CPU_Init PROC
;;;192    
;;;193    void  CPU_Init (void)
000000  b510              PUSH     {r4,lr}
;;;194    {
;;;195                                                                    /* --------------------- INIT TS ---------------------- */
;;;196    #if ((CPU_CFG_TS_EN     == DEF_ENABLED) || \
;;;197         (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;198        CPU_TS_Init();                                              /* See Note #3a.                                        */
000002  f7fffffe          BL       CPU_TS_Init
;;;199    #endif
;;;200                                                                    /* -------------- INIT INT DIS TIME MEAS -------------- */
;;;201    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;202        CPU_IntDisMeasInit();                                       /* See Note #3b.                                        */
;;;203    #endif
;;;204    
;;;205                                                                    /* ------------------ INIT CPU NAME ------------------- */
;;;206    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;207         CPU_NameInit();
000006  f7fffffe          BL       CPU_NameInit
;;;208    #endif
;;;209    }
00000a  bd10              POP      {r4,pc}
;;;210    
                          ENDP


                          AREA ||i.CPU_NameClr||, CODE, READONLY, ALIGN=2

                  CPU_NameClr PROC
;;;262    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;263    void  CPU_NameClr (void)
000000  b510              PUSH     {r4,lr}
;;;264    {
;;;265        CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;266    
;;;267    
;;;268        CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  bf00              NOP      
;;;269        Mem_Clr((void     *)&CPU_Name[0],
000012  2110              MOVS     r1,#0x10
000014  4805              LDR      r0,|L10.44|
000016  f7fffffe          BL       Mem_Clr
;;;270                (CPU_SIZE_T) CPU_CFG_NAME_SIZE);
;;;271        CPU_CRITICAL_EXIT();
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       CPU_SR_Restore
000024  bf00              NOP      
000026  bf00              NOP      
;;;272    }
000028  bd10              POP      {r4,pc}
;;;273    #endif
                          ENDP

00002a  0000              DCW      0x0000
                  |L10.44|
                          DCD      CPU_Name

                          AREA ||i.CPU_NameGet||, CODE, READONLY, ALIGN=2

                  CPU_NameGet PROC
;;;307    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;308    void  CPU_NameGet (CPU_CHAR  *p_name,
000000  b570              PUSH     {r4-r6,lr}
;;;309                       CPU_ERR   *p_err)
;;;310    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;311        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;312    
;;;313    
;;;314        if (p_err == (CPU_ERR *)0) {
000008  b914              CBNZ     r4,|L11.16|
;;;315            CPU_SW_EXCEPTION(;);
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SW_Exception
                  |L11.16|
;;;316        }
;;;317    
;;;318        if (p_name == (CPU_CHAR *)0) {
000010  b915              CBNZ     r5,|L11.24|
;;;319           *p_err = CPU_ERR_NULL_PTR;
000012  200a              MOVS     r0,#0xa
000014  8020              STRH     r0,[r4,#0]
                  |L11.22|
;;;320            return;
;;;321        }
;;;322    
;;;323        CPU_CRITICAL_ENTER();
;;;324       (void)Str_Copy_N(p_name,
;;;325                       &CPU_Name[0],
;;;326                        CPU_CFG_NAME_SIZE);
;;;327        CPU_CRITICAL_EXIT();
;;;328    
;;;329       *p_err = CPU_ERR_NONE;
;;;330    }
000016  bd70              POP      {r4-r6,pc}
                  |L11.24|
000018  bf00              NOP                            ;323
00001a  bf00              NOP                            ;323
00001c  f7fffffe          BL       CPU_SR_Save
000020  4606              MOV      r6,r0                 ;323
000022  bf00              NOP                            ;323
000024  bf00              NOP                            ;323
000026  2210              MOVS     r2,#0x10              ;324
000028  4907              LDR      r1,|L11.72|
00002a  4628              MOV      r0,r5                 ;324
00002c  f7fffffe          BL       Str_Copy_N
000030  bf00              NOP                            ;327
000032  bf00              NOP                            ;327
000034  4630              MOV      r0,r6                 ;327
000036  f7fffffe          BL       CPU_SR_Restore
00003a  bf00              NOP                            ;327
00003c  bf00              NOP                            ;327
00003e  2000              MOVS     r0,#0                 ;329
000040  8020              STRH     r0,[r4,#0]            ;329
000042  bf00              NOP      
000044  e7e7              B        |L11.22|
;;;331    #endif
                          ENDP

000046  0000              DCW      0x0000
                  |L11.72|
                          DCD      CPU_Name

                          AREA ||i.CPU_NameInit||, CODE, READONLY, ALIGN=1

                  CPU_NameInit PROC
;;;2094   #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;2095   static  void  CPU_NameInit (void)
000000  b510              PUSH     {r4,lr}
;;;2096   {
;;;2097       CPU_NameClr();
000002  f7fffffe          BL       CPU_NameClr
;;;2098   }
000006  bd10              POP      {r4,pc}
;;;2099   #endif
                          ENDP


                          AREA ||i.CPU_NameSet||, CODE, READONLY, ALIGN=2

                  CPU_NameSet PROC
;;;361    #if (CPU_CFG_NAME_EN == DEF_ENABLED)
;;;362    void  CPU_NameSet (const  CPU_CHAR  *p_name,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;363                              CPU_ERR   *p_err)
;;;364    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;365        CPU_SIZE_T  len;
;;;366        CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;367    
;;;368    
;;;369        if (p_err == (CPU_ERR *)0) {
00000a  b914              CBNZ     r4,|L13.18|
;;;370            CPU_SW_EXCEPTION(;);
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SW_Exception
                  |L13.18|
;;;371        }
;;;372    
;;;373        if (p_name == (const CPU_CHAR *)0) {
000012  b91d              CBNZ     r5,|L13.28|
;;;374           *p_err = CPU_ERR_NULL_PTR;
000014  200a              MOVS     r0,#0xa
000016  8020              STRH     r0,[r4,#0]
                  |L13.24|
;;;375            return;
;;;376        }
;;;377    
;;;378        len = Str_Len_N(p_name,
;;;379                        CPU_CFG_NAME_SIZE);
;;;380        if (len < CPU_CFG_NAME_SIZE) {                              /* If       cfg name len < max name size, ...           */
;;;381            CPU_CRITICAL_ENTER();
;;;382           (void)Str_Copy_N(&CPU_Name[0],                           /* ... copy cfg name to CPU host name.                  */
;;;383                             p_name,
;;;384                             CPU_CFG_NAME_SIZE);
;;;385            CPU_CRITICAL_EXIT();
;;;386           *p_err = CPU_ERR_NONE;
;;;387    
;;;388        } else {
;;;389           *p_err = CPU_ERR_NAME_SIZE;
;;;390        }
;;;391    }
000018  e8bd81f0          POP      {r4-r8,pc}
                  |L13.28|
00001c  2110              MOVS     r1,#0x10              ;378
00001e  4628              MOV      r0,r5                 ;378
000020  f7fffffe          BL       Str_Len_N
000024  4606              MOV      r6,r0                 ;378
000026  2e10              CMP      r6,#0x10              ;380
000028  d215              BCS      |L13.86|
00002a  bf00              NOP                            ;381
00002c  bf00              NOP                            ;381
00002e  f7fffffe          BL       CPU_SR_Save
000032  4607              MOV      r7,r0                 ;381
000034  bf00              NOP                            ;381
000036  bf00              NOP                            ;381
000038  2210              MOVS     r2,#0x10              ;382
00003a  4629              MOV      r1,r5                 ;382
00003c  4808              LDR      r0,|L13.96|
00003e  f7fffffe          BL       Str_Copy_N
000042  bf00              NOP                            ;385
000044  bf00              NOP                            ;385
000046  4638              MOV      r0,r7                 ;385
000048  f7fffffe          BL       CPU_SR_Restore
00004c  bf00              NOP                            ;385
00004e  bf00              NOP                            ;385
000050  2000              MOVS     r0,#0                 ;386
000052  8020              STRH     r0,[r4,#0]            ;386
000054  e002              B        |L13.92|
                  |L13.86|
000056  f44f707a          MOV      r0,#0x3e8             ;389
00005a  8020              STRH     r0,[r4,#0]            ;389
                  |L13.92|
00005c  bf00              NOP      
00005e  e7db              B        |L13.24|
;;;392    #endif
                          ENDP

                  |L13.96|
                          DCD      CPU_Name

                          AREA ||i.CPU_SW_Exception||, CODE, READONLY, ALIGN=1

                  CPU_SW_Exception PROC
;;;232    
;;;233    void  CPU_SW_Exception (void)
000000  bf00              NOP      
                  |L14.2|
;;;234    {
;;;235        while (DEF_ON) {
000002  e7fe              B        |L14.2|
;;;236            ;
;;;237        }
;;;238    }
;;;239    
                          ENDP


                          AREA ||i.CPU_TS_Get32||, CODE, READONLY, ALIGN=1

                  CPU_TS_Get32 PROC
;;;448    #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
;;;449    CPU_TS32  CPU_TS_Get32 (void)
000000  b510              PUSH     {r4,lr}
;;;450    {
;;;451        CPU_TS32    ts;
;;;452    #if (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)
;;;453        CPU_TS_TMR  tmr_cur;
;;;454        CPU_TS_TMR  tmr_delta;
;;;455        CPU_SR_ALLOC();
;;;456    #endif
;;;457    
;;;458    
;;;459    #if (CPU_CFG_TS_TMR_SIZE >= CPU_WORD_SIZE_32)
;;;460        ts = (CPU_TS32)CPU_TS_TmrRd();                                  /* Get cur ts tmr val (in 32-bit ts cnts).          */
000002  f7fffffe          BL       CPU_TS_TmrRd
000006  4604              MOV      r4,r0
;;;461    
;;;462    #else
;;;463        CPU_INT_DIS();
;;;464        tmr_cur            = (CPU_TS_TMR) CPU_TS_TmrRd();               /* Get cur ts tmr val (in ts tmr cnts).             */
;;;465        tmr_delta          = (CPU_TS_TMR)(tmr_cur - CPU_TS_32_TmrPrev); /* Calc      delta ts tmr cnts.                     */
;;;466        CPU_TS_32_Accum   += (CPU_TS32  ) tmr_delta;                    /* Inc ts by delta ts tmr cnts (see Note #2).       */
;;;467        CPU_TS_32_TmrPrev  = (CPU_TS_TMR) tmr_cur;                      /* Save cur ts tmr cnts for next update.            */
;;;468        ts                 = (CPU_TS32  ) CPU_TS_32_Accum;
;;;469        CPU_INT_EN();
;;;470    #endif
;;;471    
;;;472        return (ts);
000008  4620              MOV      r0,r4
;;;473    }
00000a  bd10              POP      {r4,pc}
;;;474    #endif
                          ENDP


                          AREA ||i.CPU_TS_Init||, CODE, READONLY, ALIGN=2

                  CPU_TS_Init PROC
;;;2131        (CPU_CFG_TS_TMR_EN == DEF_ENABLED))
;;;2132   static  void  CPU_TS_Init (void)
000000  b510              PUSH     {r4,lr}
;;;2133   {
;;;2134   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2135         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2136        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2137         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2138       CPU_TS_TMR  ts_tmr_cnts;
;;;2139   #endif
;;;2140   
;;;2141   
;;;2142                                                                   /* ----------------- INIT CPU TS TMR ------------------ */
;;;2143   #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;2144       CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
000002  2000              MOVS     r0,#0
000004  4902              LDR      r1,|L16.16|
000006  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;2145       CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
000008  f7fffffe          BL       CPU_TS_TmrInit
;;;2146   #endif
;;;2147   
;;;2148   
;;;2149                                                                   /* ------------------- INIT CPU TS -------------------- */
;;;2150   #if (((CPU_CFG_TS_32_EN    == DEF_ENABLED     )  && \
;;;2151         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32)) || \
;;;2152        ((CPU_CFG_TS_64_EN    == DEF_ENABLED     )  && \
;;;2153         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64)))
;;;2154       ts_tmr_cnts = CPU_TS_TmrRd();                               /* Get init ts tmr val (in ts tmr cnts).                */
;;;2155   #endif
;;;2156   
;;;2157   #if  ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;2158         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;2159       CPU_TS_32_Accum   = 0u;                                     /* Init 32-bit accum'd ts.                              */
;;;2160       CPU_TS_32_TmrPrev = ts_tmr_cnts;                            /* Init 32-bit ts prev tmr val.                         */
;;;2161   #endif
;;;2162   
;;;2163   #if  ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;2164         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;2165       CPU_TS_64_Accum   = 0u;                                     /* Init 64-bit accum'd ts.                              */
;;;2166       CPU_TS_64_TmrPrev = ts_tmr_cnts;                            /* Init 64-bit ts prev tmr val.                         */
;;;2167   #endif
;;;2168   }
00000c  bd10              POP      {r4,pc}
;;;2169   #endif
                          ENDP

00000e  0000              DCW      0x0000
                  |L16.16|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_TmrFreqGet||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrFreqGet PROC
;;;628    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;629    CPU_TS_TMR_FREQ  CPU_TS_TmrFreqGet (CPU_ERR  *p_err)
000000  b500              PUSH     {lr}
;;;630    {
000002  4601              MOV      r1,r0
;;;631        CPU_TS_TMR_FREQ  freq_hz;
;;;632    
;;;633    
;;;634        if (p_err == (CPU_ERR *)0) {
000004  b911              CBNZ     r1,|L17.12|
;;;635            CPU_SW_EXCEPTION(;);
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SW_Exception
                  |L17.12|
;;;636        }
;;;637    
;;;638        freq_hz =  CPU_TS_TmrFreq_Hz;
00000c  4a04              LDR      r2,|L17.32|
00000e  6810              LDR      r0,[r2,#0]  ; CPU_TS_TmrFreq_Hz
;;;639       *p_err   = (freq_hz != 0u) ? CPU_ERR_NONE : CPU_ERR_TS_FREQ_INVALID;
000010  b108              CBZ      r0,|L17.22|
000012  2200              MOVS     r2,#0
000014  e001              B        |L17.26|
                  |L17.22|
000016  f44f62fa          MOV      r2,#0x7d0
                  |L17.26|
00001a  800a              STRH     r2,[r1,#0]
;;;640    
;;;641        return (freq_hz);
;;;642    }
00001c  bd00              POP      {pc}
;;;643    #endif
                          ENDP

00001e  0000              DCW      0x0000
                  |L17.32|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_TmrFreqSet||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrFreqSet PROC
;;;680    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;681    void  CPU_TS_TmrFreqSet (CPU_TS_TMR_FREQ  freq_hz)
000000  4901              LDR      r1,|L18.8|
;;;682    {
;;;683        CPU_TS_TmrFreq_Hz = freq_hz;
000002  6008              STR      r0,[r1,#0]  ; CPU_TS_TmrFreq_Hz
;;;684    }
000004  4770              BX       lr
;;;685    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      CPU_TS_TmrFreq_Hz

                          AREA ||i.CPU_TS_Update||, CODE, READONLY, ALIGN=1

                  CPU_TS_Update PROC
;;;585    #if (CPU_CFG_TS_EN == DEF_ENABLED)
;;;586    void  CPU_TS_Update (void)
000000  4770              BX       lr
;;;587    {
;;;588    #if ((CPU_CFG_TS_32_EN    == DEF_ENABLED)  && \
;;;589         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_32))
;;;590       (void)CPU_TS_Get32();
;;;591    #endif
;;;592    
;;;593    #if ((CPU_CFG_TS_64_EN    == DEF_ENABLED)  && \
;;;594         (CPU_CFG_TS_TMR_SIZE <  CPU_WORD_SIZE_64))
;;;595       (void)CPU_TS_Get64();
;;;596    #endif
;;;597    }
;;;598    #endif
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  CPU_Name
                          %        16

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  CPU_CntLeadZerosTbl
000000  08070606          DCB      0x08,0x07,0x06,0x06
000004  05050505          DCB      0x05,0x05,0x05,0x05
000008  04040404          DCB      0x04,0x04,0x04,0x04
00000c  04040404          DCB      0x04,0x04,0x04,0x04
000010  03030303          DCB      0x03,0x03,0x03,0x03
000014  03030303          DCB      0x03,0x03,0x03,0x03
000018  03030303          DCB      0x03,0x03,0x03,0x03
00001c  03030303          DCB      0x03,0x03,0x03,0x03
000020  02020202          DCB      0x02,0x02,0x02,0x02
000024  02020202          DCB      0x02,0x02,0x02,0x02
000028  02020202          DCB      0x02,0x02,0x02,0x02
00002c  02020202          DCB      0x02,0x02,0x02,0x02
000030  02020202          DCB      0x02,0x02,0x02,0x02
000034  02020202          DCB      0x02,0x02,0x02,0x02
000038  02020202          DCB      0x02,0x02,0x02,0x02
00003c  02020202          DCB      0x02,0x02,0x02,0x02
000040  01010101          DCB      0x01,0x01,0x01,0x01
000044  01010101          DCB      0x01,0x01,0x01,0x01
000048  01010101          DCB      0x01,0x01,0x01,0x01
00004c  01010101          DCB      0x01,0x01,0x01,0x01
000050  01010101          DCB      0x01,0x01,0x01,0x01
000054  01010101          DCB      0x01,0x01,0x01,0x01
000058  01010101          DCB      0x01,0x01,0x01,0x01
00005c  01010101          DCB      0x01,0x01,0x01,0x01
000060  01010101          DCB      0x01,0x01,0x01,0x01
000064  01010101          DCB      0x01,0x01,0x01,0x01
000068  01010101          DCB      0x01,0x01,0x01,0x01
00006c  01010101          DCB      0x01,0x01,0x01,0x01
000070  01010101          DCB      0x01,0x01,0x01,0x01
000074  01010101          DCB      0x01,0x01,0x01,0x01
000078  01010101          DCB      0x01,0x01,0x01,0x01
00007c  01010101          DCB      0x01,0x01,0x01,0x01
000080  00000000          DCB      0x00,0x00,0x00,0x00
000084  00000000          DCB      0x00,0x00,0x00,0x00
000088  00000000          DCB      0x00,0x00,0x00,0x00
00008c  00000000          DCB      0x00,0x00,0x00,0x00
000090  00000000          DCB      0x00,0x00,0x00,0x00
000094  00000000          DCB      0x00,0x00,0x00,0x00
000098  00000000          DCB      0x00,0x00,0x00,0x00
00009c  00000000          DCB      0x00,0x00,0x00,0x00
0000a0  00000000          DCB      0x00,0x00,0x00,0x00
0000a4  00000000          DCB      0x00,0x00,0x00,0x00
0000a8  00000000          DCB      0x00,0x00,0x00,0x00
0000ac  00000000          DCB      0x00,0x00,0x00,0x00
0000b0  00000000          DCB      0x00,0x00,0x00,0x00
0000b4  00000000          DCB      0x00,0x00,0x00,0x00
0000b8  00000000          DCB      0x00,0x00,0x00,0x00
0000bc  00000000          DCB      0x00,0x00,0x00,0x00
0000c0  00000000          DCB      0x00,0x00,0x00,0x00
0000c4  00000000          DCB      0x00,0x00,0x00,0x00
0000c8  00000000          DCB      0x00,0x00,0x00,0x00
0000cc  00000000          DCB      0x00,0x00,0x00,0x00
0000d0  00000000          DCB      0x00,0x00,0x00,0x00
0000d4  00000000          DCB      0x00,0x00,0x00,0x00
0000d8  00000000          DCB      0x00,0x00,0x00,0x00
0000dc  00000000          DCB      0x00,0x00,0x00,0x00
0000e0  00000000          DCB      0x00,0x00,0x00,0x00
0000e4  00000000          DCB      0x00,0x00,0x00,0x00
0000e8  00000000          DCB      0x00,0x00,0x00,0x00
0000ec  00000000          DCB      0x00,0x00,0x00,0x00
0000f0  00000000          DCB      0x00,0x00,0x00,0x00
0000f4  00000000          DCB      0x00,0x00,0x00,0x00
0000f8  00000000          DCB      0x00,0x00,0x00,0x00
0000fc  00000000          DCB      0x00,0x00,0x00,0x00

                          AREA ||.data||, DATA, ALIGN=2

                  CPU_TS_TmrFreq_Hz
                          DCD      0x00000000
