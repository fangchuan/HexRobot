; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_ra8875_flash.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_ra8875_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_ra8875_flash.crf ..\..\User\bsp_stm32f4xx\src\bsp_ra8875_flash.c]
                          THUMB

                          AREA ||i.bsp_CfgSPIForW25||, CODE, READONLY, ALIGN=2

                  bsp_CfgSPIForW25 PROC
;;;186    */
;;;187    static void bsp_CfgSPIForW25(void)
000000  b500              PUSH     {lr}
;;;188    {
000002  b085              SUB      sp,sp,#0x14
;;;189    	SPI_InitTypeDef  SPI_InitStructure;
;;;190    
;;;191    	/* 配置SPI硬件参数 */
;;;192    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 数据方向：2线全双工 */
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;193    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* STM32的SPI工作模式 ：主机模式 */
00000a  f44f7082          MOV      r0,#0x104
00000e  f8ad0002          STRH     r0,[sp,#2]
;;;194    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 数据位长度 ： 8位 */
000012  2000              MOVS     r0,#0
000014  f8ad0004          STRH     r0,[sp,#4]
;;;195    	/* SPI_CPOL和SPI_CPHA结合使用决定时钟和数据采样点的相位关系、
;;;196    	   本例配置: 总线空闲是高电平,第2个边沿（上升沿采样数据)
;;;197    	*/
;;;198    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			/* 时钟上升沿采样数据 */
000018  2002              MOVS     r0,#2
00001a  f8ad0006          STRH     r0,[sp,#6]
;;;199    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		/* 时钟的第2个边沿采样数据 */
00001e  2001              MOVS     r0,#1
000020  f8ad0008          STRH     r0,[sp,#8]
;;;200    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			/* 片选控制方式：软件控制 */
000024  0240              LSLS     r0,r0,#9
000026  f8ad000a          STRH     r0,[sp,#0xa]
;;;201    
;;;202    	/* 设置波特率预分频系数 */
;;;203    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_8;
00002a  2010              MOVS     r0,#0x10
00002c  f8ad000c          STRH     r0,[sp,#0xc]
;;;204    
;;;205    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 数据位传输次序：高位先传 */
000030  2000              MOVS     r0,#0
000032  f8ad000e          STRH     r0,[sp,#0xe]
;;;206    	SPI_InitStructure.SPI_CRCPolynomial = 7;			/* CRC多项式寄存器，复位后为7。本例程不用 */
000036  2007              MOVS     r0,#7
000038  f8ad0010          STRH     r0,[sp,#0x10]
;;;207    	SPI_Init(SPI1, &SPI_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4806              LDR      r0,|L1.88|
000040  f7fffffe          BL       SPI_Init
;;;208    
;;;209    	SPI_Cmd(SPI1, DISABLE);			/* 先禁止SPI  */
000044  2100              MOVS     r1,#0
000046  4804              LDR      r0,|L1.88|
000048  f7fffffe          BL       SPI_Cmd
;;;210    
;;;211    	SPI_Cmd(SPI1, ENABLE);				/* 使能SPI  */
00004c  2101              MOVS     r1,#1
00004e  4802              LDR      r0,|L1.88|
000050  f7fffffe          BL       SPI_Cmd
;;;212    }
000054  b005              ADD      sp,sp,#0x14
000056  bd00              POP      {pc}
;;;213    
                          ENDP

                  |L1.88|
                          DCD      0x40013000

                          AREA ||i.bsp_InitRA8875Flash||, CODE, READONLY, ALIGN=1

                  bsp_InitRA8875Flash PROC
;;;130    */
;;;131    void bsp_InitRA8875Flash(void)
000000  b510              PUSH     {r4,lr}
;;;132    {
;;;133    	w25_ConfigGPIO();
000002  f7fffffe          BL       w25_ConfigGPIO
;;;134    
;;;135    	/* 配置SPI硬件参数用于访问串行Flash */
;;;136    	bsp_CfgSPIForW25();
000006  f7fffffe          BL       bsp_CfgSPIForW25
;;;137    
;;;138    	/* 识别串行FLASH型号 */
;;;139    	w25_CtrlByMCU();	/* (必须先执行w25_CtrlByMCU()设置PWM=1切换SPI控制权)  */
00000a  f7fffffe          BL       w25_CtrlByMCU
;;;140    	w25_ReadInfo();
00000e  f7fffffe          BL       w25_ReadInfo
;;;141    	w25_CtrlByRA8875();
000012  f7fffffe          BL       w25_CtrlByRA8875
;;;142    }
000016  bd10              POP      {r4,pc}
;;;143    
                          ENDP


                          AREA ||i.w25_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  w25_ConfigGPIO PROC
;;;151    */
;;;152    static void w25_ConfigGPIO(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;153    {
;;;154    	GPIO_InitTypeDef GPIO_InitStructure;
;;;155    
;;;156    	/* 使能GPIO 时钟 */
;;;157    	RCC_AHB1PeriphClockCmd(RCC_W25, ENABLE);
000002  2101              MOVS     r1,#1
000004  f44f7090          MOV      r0,#0x120
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;158    
;;;159    	/* 配置片选口线为推挽输出模式 */
;;;160    	w25_SetCS(1);		/* 片选置高，不选中 */
00000c  2001              MOVS     r0,#1
00000e  f7fffffe          BL       w25_SetCS
;;;161    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000012  2001              MOVS     r0,#1
000014  f88d0004          STRB     r0,[sp,#4]
;;;162    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000018  2000              MOVS     r0,#0
00001a  f88d0006          STRB     r0,[sp,#6]
;;;163    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001e  2002              MOVS     r0,#2
000020  f88d0005          STRB     r0,[sp,#5]
;;;164    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000024  2000              MOVS     r0,#0
000026  f88d0007          STRB     r0,[sp,#7]
;;;165    	GPIO_InitStructure.GPIO_Pin = W25_CS_PIN;
00002a  f44f6080          MOV      r0,#0x400
00002e  9000              STR      r0,[sp,#0]
;;;166    	GPIO_Init(W25_CS_GPIO, &GPIO_InitStructure);
000030  4669              MOV      r1,sp
000032  480b              LDR      r0,|L3.96|
000034  f7fffffe          BL       GPIO_Init
;;;167    
;;;168    	/* 配置TFT接口中的PWM脚为为推挽输出模式，PWM = 1时 用于写RA8875外挂的串行Flash */
;;;169    	/* PF6/LCD_PWM  不用于调节RA8875屏的背光 */
;;;170    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
000038  2001              MOVS     r0,#1
00003a  f88d0004          STRB     r0,[sp,#4]
;;;171    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00003e  2000              MOVS     r0,#0
000040  f88d0006          STRB     r0,[sp,#6]
;;;172    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000044  2002              MOVS     r0,#2
000046  f88d0005          STRB     r0,[sp,#5]
;;;173    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00004a  2000              MOVS     r0,#0
00004c  f88d0007          STRB     r0,[sp,#7]
;;;174    	GPIO_InitStructure.GPIO_Pin = W25_PWM_PIN;
000050  2040              MOVS     r0,#0x40
000052  9000              STR      r0,[sp,#0]
;;;175    	GPIO_Init(W25_PWM_GPIO, &GPIO_InitStructure);
000054  4669              MOV      r1,sp
000056  4803              LDR      r0,|L3.100|
000058  f7fffffe          BL       GPIO_Init
;;;176    }
00005c  bd1c              POP      {r2-r4,pc}
;;;177    
                          ENDP

00005e  0000              DCW      0x0000
                  |L3.96|
                          DCD      0x40022000
                  |L3.100|
                          DCD      0x40021400

                          AREA ||i.w25_CtrlByMCU||, CODE, READONLY, ALIGN=2

                  w25_CtrlByMCU PROC
;;;256    */
;;;257    void w25_CtrlByMCU(void)
000000  2040              MOVS     r0,#0x40
;;;258    {
;;;259    	/*
;;;260    		PWM口线置低选中
;;;261    		PWM = 1  这个模式支持STM32读写RA8875外挂的串行Flash
;;;262    		PWM = 0 这是正常工作模式，由RA8875 DMA读取外挂的串行Flash
;;;263    	*/
;;;264    	W25_PWM_1();
000002  4901              LDR      r1,|L4.8|
000004  8008              STRH     r0,[r1,#0]
;;;265    }
000006  4770              BX       lr
;;;266    
                          ENDP

                  |L4.8|
                          DCD      0x40021418

                          AREA ||i.w25_CtrlByRA8875||, CODE, READONLY, ALIGN=2

                  w25_CtrlByRA8875 PROC
;;;274    */
;;;275    void w25_CtrlByRA8875(void)
000000  2040              MOVS     r0,#0x40
;;;276    {
;;;277    	/*
;;;278    		PWM口线置低选中
;;;279    		PWM = 1  这个模式支持STM32读写RA8875外挂的串行Flash
;;;280    		PWM = 0 这是正常工作模式，由RA8875 DMA读取外挂的串行Flash
;;;281    	*/
;;;282    	W25_PWM_0();
000002  4901              LDR      r1,|L5.8|
000004  8008              STRH     r0,[r1,#0]
;;;283    }
000006  4770              BX       lr
;;;284    
                          ENDP

                  |L5.8|
                          DCD      0x4002141a

                          AREA ||i.w25_EraseChip||, CODE, READONLY, ALIGN=1

                  w25_EraseChip PROC
;;;355    */
;;;356    void w25_EraseChip(void)
000000  b510              PUSH     {r4,lr}
;;;357    {
;;;358    	w25_WriteEnable();								/* 发送写使能命令 */
000002  f7fffffe          BL       w25_WriteEnable
;;;359    
;;;360    	/* 擦除扇区操作 */
;;;361    	w25_SetCS(0);									/* 使能片选 */
000006  2000              MOVS     r0,#0
000008  f7fffffe          BL       w25_SetCS
;;;362    	bsp_spiWrite1(CMD_BE);							/* 发送整片擦除命令 */
00000c  20c7              MOVS     r0,#0xc7
00000e  f7fffffe          BL       bsp_spiWrite1
;;;363    	w25_SetCS(1);									/* 禁能片选 */
000012  2001              MOVS     r0,#1
000014  f7fffffe          BL       w25_SetCS
;;;364    
;;;365    	w25_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000018  f7fffffe          BL       w25_WaitForWriteEnd
;;;366    }
00001c  bd10              POP      {r4,pc}
;;;367    
                          ENDP


                          AREA ||i.w25_EraseSector||, CODE, READONLY, ALIGN=1

                  w25_EraseSector PROC
;;;332    */
;;;333    void w25_EraseSector(uint32_t _uiSectorAddr)
000000  b510              PUSH     {r4,lr}
;;;334    {
000002  4604              MOV      r4,r0
;;;335    	w25_WriteEnable();								/* 发送写使能命令 */
000004  f7fffffe          BL       w25_WriteEnable
;;;336    
;;;337    	/* 擦除扇区操作 */
;;;338    	w25_SetCS(0);									/* 使能片选 */
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       w25_SetCS
;;;339    	bsp_spiWrite1(CMD_SE);								/* 发送擦除命令 */
00000e  2020              MOVS     r0,#0x20
000010  f7fffffe          BL       bsp_spiWrite1
;;;340    	bsp_spiWrite1((_uiSectorAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
000014  f3c44007          UBFX     r0,r4,#16,#8
000018  f7fffffe          BL       bsp_spiWrite1
;;;341    	bsp_spiWrite1((_uiSectorAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
00001c  f3c42007          UBFX     r0,r4,#8,#8
000020  f7fffffe          BL       bsp_spiWrite1
;;;342    	bsp_spiWrite1(_uiSectorAddr & 0xFF);				/* 发送扇区地址低8bit */
000024  b2e0              UXTB     r0,r4
000026  f7fffffe          BL       bsp_spiWrite1
;;;343    	w25_SetCS(1);									/* 禁能片选 */
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       w25_SetCS
;;;344    
;;;345    	w25_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
000030  f7fffffe          BL       w25_WaitForWriteEnd
;;;346    }
000034  bd10              POP      {r4,pc}
;;;347    
                          ENDP


                          AREA ||i.w25_ReadBuffer||, CODE, READONLY, ALIGN=2

                  w25_ReadBuffer PROC
;;;464    */
;;;465    void w25_ReadBuffer(uint8_t * _pBuf, uint32_t _uiReadAddr, uint32_t _uiSize)
000000  b570              PUSH     {r4-r6,lr}
;;;466    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;467    	/* 如果读取的数据长度为0或者超出串行Flash地址空间，则直接返回 */
;;;468    	if ((_uiSize == 0) ||(_uiReadAddr + _uiSize) > g_tW25.TotalSize)
000008  b125              CBZ      r5,|L8.20|
00000a  1960              ADDS     r0,r4,r5
00000c  4911              LDR      r1,|L8.84|
00000e  6849              LDR      r1,[r1,#4]  ; g_tW25
000010  4288              CMP      r0,r1
000012  d900              BLS      |L8.22|
                  |L8.20|
;;;469    	{
;;;470    		return;
;;;471    	}
;;;472    
;;;473    	/* 擦除扇区操作 */
;;;474    	w25_SetCS(0);									/* 使能片选 */
;;;475    	bsp_spiWrite1(CMD_READ);							/* 发送读命令 */
;;;476    	bsp_spiWrite1((_uiReadAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;477    	bsp_spiWrite1((_uiReadAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;478    	bsp_spiWrite1(_uiReadAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;479    	while (_uiSize--)
;;;480    	{
;;;481    		*_pBuf++ = bsp_spiRead1();			/* 读一个字节并存储到pBuf，读完后指针自加1 */
;;;482    	}
;;;483    	w25_SetCS(1);									/* 禁能片选 */
;;;484    }
000014  bd70              POP      {r4-r6,pc}
                  |L8.22|
000016  2000              MOVS     r0,#0                 ;474
000018  f7fffffe          BL       w25_SetCS
00001c  2003              MOVS     r0,#3                 ;475
00001e  f7fffffe          BL       bsp_spiWrite1
000022  f3c44007          UBFX     r0,r4,#16,#8          ;476
000026  f7fffffe          BL       bsp_spiWrite1
00002a  f3c42007          UBFX     r0,r4,#8,#8           ;477
00002e  f7fffffe          BL       bsp_spiWrite1
000032  b2e0              UXTB     r0,r4                 ;478
000034  f7fffffe          BL       bsp_spiWrite1
000038  e003              B        |L8.66|
                  |L8.58|
00003a  f7fffffe          BL       bsp_spiRead1
00003e  f8060b01          STRB     r0,[r6],#1            ;481
                  |L8.66|
000042  0028              MOVS     r0,r5                 ;479
000044  f1a50501          SUB      r5,r5,#1              ;479
000048  d1f7              BNE      |L8.58|
00004a  2001              MOVS     r0,#1                 ;483
00004c  f7fffffe          BL       w25_SetCS
000050  bf00              NOP      
000052  e7df              B        |L8.20|
;;;485    
                          ENDP

                  |L8.84|
                          DCD      g_tW25

                          AREA ||i.w25_ReadID||, CODE, READONLY, ALIGN=1

                  w25_ReadID PROC
;;;493    */
;;;494    uint32_t w25_ReadID(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;495    {
;;;496    	uint32_t uiID;
;;;497    	uint8_t id1, id2, id3;
;;;498    
;;;499    	w25_SetCS(0);									/* 使能片选 */
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       w25_SetCS
;;;500    	bsp_spiWrite1(CMD_RDID);								/* 发送读ID命令 */
00000a  209f              MOVS     r0,#0x9f
00000c  f7fffffe          BL       bsp_spiWrite1
;;;501    	id1 = bsp_spiRead1();					/* 读ID的第1个字节 */
000010  f7fffffe          BL       bsp_spiRead1
000014  4605              MOV      r5,r0
;;;502    	id2 = bsp_spiRead1();					/* 读ID的第2个字节 */
000016  f7fffffe          BL       bsp_spiRead1
00001a  4606              MOV      r6,r0
;;;503    	id3 = bsp_spiRead1();					/* 读ID的第3个字节 */
00001c  f7fffffe          BL       bsp_spiRead1
000020  4607              MOV      r7,r0
;;;504    	w25_SetCS(1);									/* 禁能片选 */
000022  2001              MOVS     r0,#1
000024  f7fffffe          BL       w25_SetCS
;;;505    
;;;506    	uiID = ((uint32_t)id1 << 16) | ((uint32_t)id2 << 8) | id3;
000028  0428              LSLS     r0,r5,#16
00002a  ea402006          ORR      r0,r0,r6,LSL #8
00002e  ea400407          ORR      r4,r0,r7
;;;507    
;;;508    	return uiID;
000032  4620              MOV      r0,r4
;;;509    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;510    
                          ENDP


                          AREA ||i.w25_ReadInfo||, CODE, READONLY, ALIGN=2

                  w25_ReadInfo PROC
;;;518    */
;;;519    void w25_ReadInfo(void)
000000  b510              PUSH     {r4,lr}
;;;520    {
;;;521    	/* 自动识别串行Flash型号 */
;;;522    	{
;;;523    		g_tW25.ChipID = w25_ReadID();	/* 芯片ID */
000002  f7fffffe          BL       w25_ReadID
000006  491a              LDR      r1,|L10.112|
000008  6008              STR      r0,[r1,#0]  ; g_tW25
;;;524    
;;;525    		switch (g_tW25.ChipID)
00000a  4608              MOV      r0,r1
00000c  6800              LDR      r0,[r0,#0]  ; g_tW25
00000e  4919              LDR      r1,|L10.116|
000010  4408              ADD      r0,r0,r1
000012  b140              CBZ      r0,|L10.38|
000014  4918              LDR      r1,|L10.120|
000016  4408              ADD      r0,r0,r1
000018  b160              CBZ      r0,|L10.52|
00001a  4918              LDR      r1,|L10.124|
00001c  4408              ADD      r0,r0,r1
00001e  b180              CBZ      r0,|L10.66|
000020  2801              CMP      r0,#1
000022  d11c              BNE      |L10.94|
000024  e014              B        |L10.80|
                  |L10.38|
;;;526    		{
;;;527    			case SST25VF016B:
;;;528    				g_tW25.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000026  f44f1000          MOV      r0,#0x200000
00002a  4911              LDR      r1,|L10.112|
00002c  6048              STR      r0,[r1,#4]  ; g_tW25
;;;529    				g_tW25.PageSize = 4 * 1024;			/* 页面大小 = 4K */
00002e  1240              ASRS     r0,r0,#9
000030  8108              STRH     r0,[r1,#8]
;;;530    				break;
000032  e01b              B        |L10.108|
                  |L10.52|
;;;531    
;;;532    			case MX25L1606E:
;;;533    				g_tW25.TotalSize = 2 * 1024 * 1024;	/* 总容量 = 2M */
000034  f44f1000          MOV      r0,#0x200000
000038  490d              LDR      r1,|L10.112|
00003a  6048              STR      r0,[r1,#4]  ; g_tW25
;;;534    				g_tW25.PageSize = 4 * 1024;			/* 页面大小 = 4K */
00003c  1240              ASRS     r0,r0,#9
00003e  8108              STRH     r0,[r1,#8]
;;;535    				break;
000040  e014              B        |L10.108|
                  |L10.66|
;;;536    
;;;537    			case W25Q64BV:
;;;538    				g_tW25.TotalSize = 8 * 1024 * 1024;	/* 总容量 = 8M */
000042  f44f0000          MOV      r0,#0x800000
000046  490a              LDR      r1,|L10.112|
000048  6048              STR      r0,[r1,#4]  ; g_tW25
;;;539    				g_tW25.PageSize = 4 * 1024;			/* 页面大小 = 4K */
00004a  12c0              ASRS     r0,r0,#11
00004c  8108              STRH     r0,[r1,#8]
;;;540    				break;
00004e  e00d              B        |L10.108|
                  |L10.80|
;;;541    
;;;542    			case W25Q128:
;;;543    				g_tW25.TotalSize = 16 * 1024 * 1024;	/* 总容量 = 16M */
000050  f04f7080          MOV      r0,#0x1000000
000054  4906              LDR      r1,|L10.112|
000056  6048              STR      r0,[r1,#4]  ; g_tW25
;;;544    				g_tW25.PageSize = 4 * 1024;			/* 页面大小 = 4K */
000058  1300              ASRS     r0,r0,#12
00005a  8108              STRH     r0,[r1,#8]
;;;545    				break;
00005c  e006              B        |L10.108|
                  |L10.94|
;;;546    
;;;547    			default:		/* 集通字库不支持ID读取 */
;;;548    				g_tW25.TotalSize = 2 * 1024 * 1024;
00005e  f44f1000          MOV      r0,#0x200000
000062  4903              LDR      r1,|L10.112|
000064  6048              STR      r0,[r1,#4]  ; g_tW25
;;;549    				g_tW25.PageSize = 4 * 1024;
000066  1240              ASRS     r0,r0,#9
000068  8108              STRH     r0,[r1,#8]
;;;550    				break;
00006a  bf00              NOP      
                  |L10.108|
00006c  bf00              NOP                            ;530
;;;551    		}
;;;552    	}
;;;553    }
00006e  bd10              POP      {r4,pc}
;;;554    
                          ENDP

                  |L10.112|
                          DCD      g_tW25
                  |L10.116|
                          DCD      0xff40dabf
                  |L10.120|
                          DCD      0xfffd052c
                  |L10.124|
                          DCD      0xffd2dffe

                          AREA ||i.w25_SelectChip||, CODE, READONLY, ALIGN=1

                  w25_SelectChip PROC
;;;292    */
;;;293    void w25_SelectChip(uint8_t _idex)
000000  b510              PUSH     {r4,lr}
;;;294    {
000002  4604              MOV      r4,r0
;;;295    	/*
;;;296    		PWM = 1, KOUT3 = 0 写字库芯片
;;;297    		PWM = 1, KOUT3 = 1 写图库芯片
;;;298    	*/
;;;299    	#if 1
;;;300    		if (_idex == FONT_CHIP)
000004  b924              CBNZ     r4,|L11.16|
;;;301    		{
;;;302    			RA8875_CtrlGPO(3, 0);	/* RA8875 的 KOUT3 = 0 */
000006  2100              MOVS     r1,#0
000008  2003              MOVS     r0,#3
00000a  f7fffffe          BL       RA8875_CtrlGPO
00000e  e003              B        |L11.24|
                  |L11.16|
;;;303    		}
;;;304    		else	/* BMP图片芯片 */
;;;305    		{
;;;306    			RA8875_CtrlGPO(3, 1);	/* RA8875 的 KOUT3 = 1 */
000010  2101              MOVS     r1,#1
000012  2003              MOVS     r0,#3
000014  f7fffffe          BL       RA8875_CtrlGPO
                  |L11.24|
;;;307    		}
;;;308    	#else
;;;309    		/* 对于1片 W25Q128的屏，不需要RA8875的KOUT 引脚 */
;;;310    		/* 对于外扩 图片阵列板的的屏，不需要RA8875的KOUT0 - KOUT3 四个引脚 */
;;;311    	#endif
;;;312    
;;;313    
;;;314    	w25_ReadInfo();				/* 自动识别芯片型号 */
000018  f7fffffe          BL       w25_ReadInfo
;;;315    
;;;316    	w25_SetCS(0);				/* 软件方式，使能串行Flash片选 */
00001c  2000              MOVS     r0,#0
00001e  f7fffffe          BL       w25_SetCS
;;;317    	bsp_spiWrite1(CMD_DISWR);		/* 发送禁止写入的命令,即使能软件写保护 */
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       bsp_spiWrite1
;;;318    	w25_SetCS(1);				/* 软件方式，禁能串行Flash片选 */
000028  2001              MOVS     r0,#1
00002a  f7fffffe          BL       w25_SetCS
;;;319    
;;;320    	w25_WaitForWriteEnd();		/* 等待串行Flash内部操作完成 */
00002e  f7fffffe          BL       w25_WaitForWriteEnd
;;;321    
;;;322    	w25_WriteStatus(0);			/* 解除所有BLOCK的写保护 */
000032  2000              MOVS     r0,#0
000034  f7fffffe          BL       w25_WriteStatus
;;;323    }
000038  bd10              POP      {r4,pc}
;;;324    
                          ENDP


                          AREA ||i.w25_SetCS||, CODE, READONLY, ALIGN=2

                  w25_SetCS PROC
;;;222    */
;;;223    void w25_SetCS(uint8_t _level)
000000  b510              PUSH     {r4,lr}
;;;224    {
000002  4604              MOV      r4,r0
;;;225    	if (_level == 0)
000004  b954              CBNZ     r4,|L12.28|
;;;226    	{
;;;227    		bsp_SpiBusEnter();	/* 占用SPI总线， 用于总线共享 */
000006  f7fffffe          BL       bsp_SpiBusEnter
;;;228    
;;;229    		#ifdef SOFT_SPI		/* 软件SPI */
;;;230    			bsp_SetSpiSck(1);
;;;231    			W25_CS_0();
;;;232    		#endif
;;;233    
;;;234    		#ifdef HARD_SPI		/* 硬件SPI */
;;;235    			bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
00000a  f2403017          MOV      r0,#0x317
00000e  f7fffffe          BL       bsp_SPI_Init
;;;236    				| SPI_CPOL_High | SPI_CPHA_2Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_8 | SPI_FirstBit_MSB);
;;;237    
;;;238    			W25_CS_0();
000012  f44f6080          MOV      r0,#0x400
000016  4905              LDR      r1,|L12.44|
000018  8348              STRH     r0,[r1,#0x1a]
00001a  e005              B        |L12.40|
                  |L12.28|
;;;239    		#endif
;;;240    	}
;;;241    	else
;;;242    	{
;;;243    		W25_CS_1();
00001c  f44f6080          MOV      r0,#0x400
000020  4902              LDR      r1,|L12.44|
000022  8308              STRH     r0,[r1,#0x18]
;;;244    
;;;245    		bsp_SpiBusExit();	/* 释放SPI总线， 用于总线共享 */
000024  f7fffffe          BL       bsp_SpiBusExit
                  |L12.40|
;;;246    	}
;;;247    }
000028  bd10              POP      {r4,pc}
;;;248    
                          ENDP

00002a  0000              DCW      0x0000
                  |L12.44|
                          DCD      0x40022000

                          AREA ||i.w25_WaitForWriteEnd||, CODE, READONLY, ALIGN=1

                  w25_WaitForWriteEnd PROC
;;;610    */
;;;611    static void w25_WaitForWriteEnd(void)
000000  b510              PUSH     {r4,lr}
;;;612    {
;;;613    	w25_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       w25_SetCS
;;;614    	bsp_spiWrite1(CMD_RDSR);							/* 发送命令， 读状态寄存器 */
000008  2005              MOVS     r0,#5
00000a  f7fffffe          BL       bsp_spiWrite1
;;;615    	while((bsp_spiRead1() & WIP_FLAG) == SET);	/* 判断状态寄存器的忙标志位 */
00000e  bf00              NOP      
                  |L13.16|
000010  f7fffffe          BL       bsp_spiRead1
000014  f0000001          AND      r0,r0,#1
000018  2800              CMP      r0,#0
00001a  d1f9              BNE      |L13.16|
;;;616    	w25_SetCS(1);									/* 禁能片选 */
00001c  2001              MOVS     r0,#1
00001e  f7fffffe          BL       w25_SetCS
;;;617    }
000022  bd10              POP      {r4,pc}
;;;618    
                          ENDP


                          AREA ||i.w25_WriteEnable||, CODE, READONLY, ALIGN=1

                  w25_WriteEnable PROC
;;;562    */
;;;563    static void w25_WriteEnable(void)
000000  b510              PUSH     {r4,lr}
;;;564    {
;;;565    	w25_SetCS(0);									/* 使能片选 */
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       w25_SetCS
;;;566    	bsp_spiWrite1(CMD_WREN);								/* 发送命令 */
000008  2006              MOVS     r0,#6
00000a  f7fffffe          BL       bsp_spiWrite1
;;;567    	w25_SetCS(1);									/* 禁能片选 */
00000e  2001              MOVS     r0,#1
000010  f7fffffe          BL       w25_SetCS
;;;568    }
000014  bd10              POP      {r4,pc}
;;;569    
                          ENDP


                          AREA ||i.w25_WritePage||, CODE, READONLY, ALIGN=2

                  w25_WritePage PROC
;;;377    */
;;;378    void w25_WritePage(uint8_t * _pBuf, uint32_t _uiWriteAddr, uint16_t _usSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;379    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;380    	uint32_t i, j;
;;;381    
;;;382    	if (g_tW25.ChipID == SST25VF016B)
00000a  484a              LDR      r0,|L15.308|
00000c  6800              LDR      r0,[r0,#0]  ; g_tW25
00000e  494a              LDR      r1,|L15.312|
000010  4288              CMP      r0,r1
000012  d153              BNE      |L15.188|
;;;383    	{
;;;384    		/* AAI指令要求传入的数据个数是偶数 */
;;;385    		if ((_usSize < 2) && (_usSize % 2))
000014  2d02              CMP      r5,#2
000016  da08              BGE      |L15.42|
000018  4628              MOV      r0,r5
00001a  eb0571d0          ADD      r1,r5,r0,LSR #31
00001e  1049              ASRS     r1,r1,#1
000020  eba50141          SUB      r1,r5,r1,LSL #1
000024  b109              CBZ      r1,|L15.42|
                  |L15.38|
;;;386    		{
;;;387    			return ;
;;;388    		}
;;;389    
;;;390    		w25_WriteEnable();								/* 发送写使能命令 */
;;;391    
;;;392    		w25_SetCS(0);									/* 使能片选 */
;;;393    		bsp_spiWrite1(CMD_AAI);							/* 发送AAI命令(地址自动增加编程) */
;;;394    		bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;395    		bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;396    		bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;397    		bsp_spiWrite1(*_pBuf++);							/* 发送第1个数据 */
;;;398    		bsp_spiWrite1(*_pBuf++);							/* 发送第2个数据 */
;;;399    		w25_SetCS(1);									/* 禁能片选 */
;;;400    
;;;401    		w25_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;402    
;;;403    		_usSize -= 2;									/* 计算剩余字节数 */
;;;404    
;;;405    		for (i = 0; i < _usSize / 2; i++)
;;;406    		{
;;;407    			w25_SetCS(0);								/* 使能片选 */
;;;408    			bsp_spiWrite1(CMD_AAI);						/* 发送AAI命令(地址自动增加编程) */
;;;409    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;410    			bsp_spiWrite1(*_pBuf++);						/* 发送数据 */
;;;411    			w25_SetCS(1);								/* 禁能片选 */
;;;412    			w25_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;413    		}
;;;414    
;;;415    		/* 进入写保护状态 */
;;;416    		w25_SetCS(0);
;;;417    		bsp_spiWrite1(CMD_DISWR);
;;;418    		w25_SetCS(1);
;;;419    
;;;420    		w25_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;421    	}
;;;422    	else	/* for MX25L1606E 、 W25Q64BV */
;;;423    	{
;;;424    		for (j = 0; j < _usSize / 256; j++)
;;;425    		{
;;;426    			w25_WriteEnable();								/* 发送写使能命令 */
;;;427    
;;;428    			w25_SetCS(0);									/* 使能片选 */
;;;429    			bsp_spiWrite1(0x02);								/* 发送AAI命令(地址自动增加编程) */
;;;430    			bsp_spiWrite1((_uiWriteAddr & 0xFF0000) >> 16);	/* 发送扇区地址的高8bit */
;;;431    			bsp_spiWrite1((_uiWriteAddr & 0xFF00) >> 8);		/* 发送扇区地址中间8bit */
;;;432    			bsp_spiWrite1(_uiWriteAddr & 0xFF);				/* 发送扇区地址低8bit */
;;;433    
;;;434    			for (i = 0; i < 256; i++)
;;;435    			{
;;;436    				bsp_spiWrite1(*_pBuf++);					/* 发送数据 */
;;;437    			}
;;;438    
;;;439    			w25_SetCS(1);								/* 禁止片选 */
;;;440    
;;;441    			w25_WaitForWriteEnd();						/* 等待串行Flash内部写操作完成 */
;;;442    
;;;443    			_uiWriteAddr += 256;
;;;444    		}
;;;445    
;;;446    		/* 进入写保护状态 */
;;;447    		w25_SetCS(0);
;;;448    		bsp_spiWrite1(CMD_DISWR);
;;;449    		w25_SetCS(1);
;;;450    
;;;451    		w25_WaitForWriteEnd();							/* 等待串行Flash内部写操作完成 */
;;;452    	}
;;;453    }
000026  e8bd81f0          POP      {r4-r8,pc}
                  |L15.42|
00002a  f7fffffe          BL       w25_WriteEnable
00002e  2000              MOVS     r0,#0                 ;392
000030  f7fffffe          BL       w25_SetCS
000034  20ad              MOVS     r0,#0xad              ;393
000036  f7fffffe          BL       bsp_spiWrite1
00003a  f3c64007          UBFX     r0,r6,#16,#8          ;394
00003e  f7fffffe          BL       bsp_spiWrite1
000042  f3c62007          UBFX     r0,r6,#8,#8           ;395
000046  f7fffffe          BL       bsp_spiWrite1
00004a  b2f0              UXTB     r0,r6                 ;396
00004c  f7fffffe          BL       bsp_spiWrite1
000050  f8140b01          LDRB     r0,[r4],#1            ;397
000054  f7fffffe          BL       bsp_spiWrite1
000058  f8140b01          LDRB     r0,[r4],#1            ;398
00005c  f7fffffe          BL       bsp_spiWrite1
000060  2001              MOVS     r0,#1                 ;399
000062  f7fffffe          BL       w25_SetCS
000066  f7fffffe          BL       w25_WaitForWriteEnd
00006a  1ea8              SUBS     r0,r5,#2              ;403
00006c  b285              UXTH     r5,r0                 ;403
00006e  2700              MOVS     r7,#0                 ;405
000070  e013              B        |L15.154|
                  |L15.114|
000072  2000              MOVS     r0,#0                 ;407
000074  f7fffffe          BL       w25_SetCS
000078  20ad              MOVS     r0,#0xad              ;408
00007a  f7fffffe          BL       bsp_spiWrite1
00007e  f8140b01          LDRB     r0,[r4],#1            ;409
000082  f7fffffe          BL       bsp_spiWrite1
000086  f8140b01          LDRB     r0,[r4],#1            ;410
00008a  f7fffffe          BL       bsp_spiWrite1
00008e  2001              MOVS     r0,#1                 ;411
000090  f7fffffe          BL       w25_SetCS
000094  f7fffffe          BL       w25_WaitForWriteEnd
000098  1c7f              ADDS     r7,r7,#1              ;405
                  |L15.154|
00009a  eb0571d5          ADD      r1,r5,r5,LSR #31      ;405
00009e  ebb70f61          CMP      r7,r1,ASR #1          ;405
0000a2  d3e6              BCC      |L15.114|
0000a4  2000              MOVS     r0,#0                 ;416
0000a6  f7fffffe          BL       w25_SetCS
0000aa  2004              MOVS     r0,#4                 ;417
0000ac  f7fffffe          BL       bsp_spiWrite1
0000b0  2001              MOVS     r0,#1                 ;418
0000b2  f7fffffe          BL       w25_SetCS
0000b6  f7fffffe          BL       w25_WaitForWriteEnd
0000ba  e038              B        |L15.302|
                  |L15.188|
0000bc  f04f0800          MOV      r8,#0                 ;424
0000c0  e024              B        |L15.268|
                  |L15.194|
0000c2  f7fffffe          BL       w25_WriteEnable
0000c6  2000              MOVS     r0,#0                 ;428
0000c8  f7fffffe          BL       w25_SetCS
0000cc  2002              MOVS     r0,#2                 ;429
0000ce  f7fffffe          BL       bsp_spiWrite1
0000d2  f3c64007          UBFX     r0,r6,#16,#8          ;430
0000d6  f7fffffe          BL       bsp_spiWrite1
0000da  f3c62007          UBFX     r0,r6,#8,#8           ;431
0000de  f7fffffe          BL       bsp_spiWrite1
0000e2  b2f0              UXTB     r0,r6                 ;432
0000e4  f7fffffe          BL       bsp_spiWrite1
0000e8  2700              MOVS     r7,#0                 ;434
0000ea  e004              B        |L15.246|
                  |L15.236|
0000ec  f8140b01          LDRB     r0,[r4],#1            ;436
0000f0  f7fffffe          BL       bsp_spiWrite1
0000f4  1c7f              ADDS     r7,r7,#1              ;434
                  |L15.246|
0000f6  2fff              CMP      r7,#0xff              ;434
0000f8  d9f8              BLS      |L15.236|
0000fa  2001              MOVS     r0,#1                 ;439
0000fc  f7fffffe          BL       w25_SetCS
000100  f7fffffe          BL       w25_WaitForWriteEnd
000104  f5067680          ADD      r6,r6,#0x100          ;443
000108  f1080801          ADD      r8,r8,#1              ;424
                  |L15.268|
00010c  17e9              ASRS     r1,r5,#31             ;424
00010e  eb056111          ADD      r1,r5,r1,LSR #24      ;424
000112  ebb82f21          CMP      r8,r1,ASR #8          ;424
000116  d3d4              BCC      |L15.194|
000118  2000              MOVS     r0,#0                 ;447
00011a  f7fffffe          BL       w25_SetCS
00011e  2004              MOVS     r0,#4                 ;448
000120  f7fffffe          BL       bsp_spiWrite1
000124  2001              MOVS     r0,#1                 ;449
000126  f7fffffe          BL       w25_SetCS
00012a  f7fffffe          BL       w25_WaitForWriteEnd
                  |L15.302|
00012e  bf00              NOP      
000130  e779              B        |L15.38|
;;;454    
                          ENDP

000132  0000              DCW      0x0000
                  |L15.308|
                          DCD      g_tW25
                  |L15.312|
                          DCD      0x00bf2541

                          AREA ||i.w25_WriteStatus||, CODE, READONLY, ALIGN=2

                  w25_WriteStatus PROC
;;;577    */
;;;578    static void w25_WriteStatus(uint8_t _ucValue)
000000  b510              PUSH     {r4,lr}
;;;579    {
000002  4604              MOV      r4,r0
;;;580    
;;;581    	if (g_tW25.ChipID == SST25VF016B)
000004  4813              LDR      r0,|L16.84|
000006  6800              LDR      r0,[r0,#0]  ; g_tW25
000008  4913              LDR      r1,|L16.88|
00000a  4288              CMP      r0,r1
00000c  d115              BNE      |L16.58|
;;;582    	{
;;;583    		/* 第1步：先使能写状态寄存器 */
;;;584    		w25_SetCS(0);									/* 使能片选 */
00000e  2000              MOVS     r0,#0
000010  f7fffffe          BL       w25_SetCS
;;;585    		bsp_spiWrite1(CMD_EWRSR);							/* 发送命令， 允许写状态寄存器 */
000014  2050              MOVS     r0,#0x50
000016  f7fffffe          BL       bsp_spiWrite1
;;;586    		w25_SetCS(1);									/* 禁能片选 */
00001a  2001              MOVS     r0,#1
00001c  f7fffffe          BL       w25_SetCS
;;;587    
;;;588    		/* 第2步：再写状态寄存器 */
;;;589    		w25_SetCS(0);									/* 使能片选 */
000020  2000              MOVS     r0,#0
000022  f7fffffe          BL       w25_SetCS
;;;590    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000026  2001              MOVS     r0,#1
000028  f7fffffe          BL       bsp_spiWrite1
;;;591    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       bsp_spiWrite1
;;;592    		w25_SetCS(1);									/* 禁能片选 */
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       w25_SetCS
000038  e00b              B        |L16.82|
                  |L16.58|
;;;593    	}
;;;594    	else
;;;595    	{
;;;596    		w25_SetCS(0);									/* 使能片选 */
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       w25_SetCS
;;;597    		bsp_spiWrite1(CMD_WRSR);							/* 发送命令， 写状态寄存器 */
000040  2001              MOVS     r0,#1
000042  f7fffffe          BL       bsp_spiWrite1
;;;598    		bsp_spiWrite1(_ucValue);							/* 发送数据：状态寄存器的值 */
000046  4620              MOV      r0,r4
000048  f7fffffe          BL       bsp_spiWrite1
;;;599    		w25_SetCS(1);									/* 禁能片选 */
00004c  2001              MOVS     r0,#1
00004e  f7fffffe          BL       w25_SetCS
                  |L16.82|
;;;600    	}
;;;601    }
000052  bd10              POP      {r4,pc}
;;;602    
                          ENDP

                  |L16.84|
                          DCD      g_tW25
                  |L16.88|
                          DCD      0x00bf2541

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tW25
                          %        12

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_ra8875_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_ra8875_flash_c_92090982____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_bsp_ra8875_flash_c_92090982____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_ra8875_flash_c_92090982____REVSH|
#line 144
|__asm___18_bsp_ra8875_flash_c_92090982____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_bsp_ra8875_flash_c_92090982____RRX|
#line 300
|__asm___18_bsp_ra8875_flash_c_92090982____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
