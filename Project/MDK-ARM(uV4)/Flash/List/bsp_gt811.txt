; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_gt811.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_gt811.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_gt811.crf ..\..\User\bsp_stm32f4xx\src\bsp_gt811.c]
                          THUMB

                          AREA ||i.GT811_InitHard||, CODE, READONLY, ALIGN=2

                  GT811_InitHard PROC
;;;228    */
;;;229    void GT811_InitHard(void)
000000  b510              PUSH     {r4,lr}
;;;230    {
;;;231    	/* 获取版本并打印未用到，故将其注释掉 */
;;;232    //	uint16_t ver;
;;;233    
;;;234    	g_GT811.TimerCount = 0;
000002  2000              MOVS     r0,#0
000004  4905              LDR      r1,|L1.28|
000006  7048              STRB     r0,[r1,#1]
;;;235    	
;;;236    //	ver = GT811_ReadVersion();
;;;237    //	printf("GT811 Version : %04X\r\n", ver);
;;;238    
;;;239    	/* I2C总线初始化在 bsp.c 中执行 */
;;;240    	GT811_WriteReg(GT811_CONFIG_REG, (uint8_t *)s_GT811_CfgParams, sizeof(s_GT811_CfgParams));
000008  226a              MOVS     r2,#0x6a
00000a  4905              LDR      r1,|L1.32|
00000c  f24060a2          MOV      r0,#0x6a2
000010  f7fffffe          BL       GT811_WriteReg
;;;241    	
;;;242    	g_GT811.Enable = 1;
000014  2001              MOVS     r0,#1
000016  4901              LDR      r1,|L1.28|
000018  7008              STRB     r0,[r1,#0]
;;;243    }
00001a  bd10              POP      {r4,pc}
;;;244    
                          ENDP

                  |L1.28|
                          DCD      g_GT811
                  |L1.32|
                          DCD      s_GT811_CfgParams

                          AREA ||i.GT811_OnePiontScan||, CODE, READONLY, ALIGN=2

                  GT811_OnePiontScan PROC
;;;360    extern GUI_PID_STATE State;
;;;361    void GT811_OnePiontScan(void)
000000  b57c              PUSH     {r2-r6,lr}
;;;362    {
;;;363    	uint8_t buf[6];
;;;364    	static uint8_t s_tp_down = 0;
;;;365    	uint16_t x, y;
;;;366    
;;;367    	/* 读取寄存器：0x721  R  TouchpointFlag  Sensor_ID  key  tp4  tp3  tp2  tp1  tp0 */
;;;368    	GT811_ReadReg(GT811_READ_XY_REG, buf, 1);
000002  2201              MOVS     r2,#1
000004  4669              MOV      r1,sp
000006  f2407021          MOV      r0,#0x721
00000a  f7fffffe          BL       GT811_ReadReg
;;;369    	
;;;370    	/* 判断是否按下，没有按下，直接退出 */
;;;371    	if ((buf[0] & 0x01) == 0)
00000e  f89d0000          LDRB     r0,[sp,#0]
000012  f0000001          AND      r0,r0,#1
000016  b960              CBNZ     r0,|L2.50|
;;;372    	{
;;;373    		if (s_tp_down == 1)
000018  4826              LDR      r0,|L2.180|
00001a  7800              LDRB     r0,[r0,#0]  ; s_tp_down
00001c  2801              CMP      r0,#1
00001e  d107              BNE      |L2.48|
;;;374    		{
;;;375    			/* State.x和State.y的数值无需更新，State是全局变量，保存的就是最近一次的数值 */
;;;376    			s_tp_down = 0;
000020  2000              MOVS     r0,#0
000022  4924              LDR      r1,|L2.180|
000024  7008              STRB     r0,[r1,#0]
;;;377    			State.Pressed = 0;
000026  4924              LDR      r1,|L2.184|
000028  7208              STRB     r0,[r1,#8]
;;;378    			GUI_PID_StoreState(&State);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       GUI_PID_StoreState
                  |L2.48|
;;;379    		}
;;;380    		return;
;;;381    	}
;;;382    	
;;;383    	/* 读取第一个触摸点0 */
;;;384    	GT811_ReadReg(GT811_READ_XY_REG + 1, &buf[1], 5);
;;;385    	
;;;386    	/*
;;;387    	0x721  R  TouchpointFlag  Sensor_ID  key  tp4  tp3  tp2  tp1  tp0
;;;388    	0x722  R  Touchkeystate     0  0  0  0  key4  key3  key2  key1
;;;389    
;;;390    	0x723  R  Point0Xh  触摸点 0，X 坐标高 8 位
;;;391    	0x724  R  Point0Xl  触摸点 0，X 坐标低 8 位
;;;392    	0x725  R  Point0Yh  触摸点 0，Y 坐标高 8 位
;;;393    	0x726  R  Point0Yl  触摸点 0，Y 坐标低 8 位
;;;394    	0x727  R  Point0Pressure  触摸点 0，触摸压力
;;;395    	*/
;;;396    	g_GT811.TouchpointFlag = buf[0];
;;;397    	g_GT811.Touchkeystate = buf[1];
;;;398    	
;;;399    	g_GT811.X0 = ((uint16_t)buf[2] << 8) + buf[3];
;;;400    	g_GT811.Y0 = ((uint16_t)buf[4] << 8) + buf[5];
;;;401    	
;;;402    	/* 检测按下 */
;;;403    	/* 坐标转换 :
;;;404    		电容触摸板左下角是 (0，0);  右上角是 (479，799)
;;;405    		需要转到LCD的像素坐标 (左上角是 (0，0), 右下角是 (799，479)
;;;406    	*/
;;;407    	x = g_GT811.Y0;
;;;408    	y = 479 - g_GT811.X0;
;;;409    	
;;;410    	if (s_tp_down == 0)
;;;411    	{
;;;412    		s_tp_down = 1;
;;;413    		State.x = x;
;;;414    		State.y = y;
;;;415    		State.Pressed = 1;
;;;416    		GUI_PID_StoreState(&State);
;;;417    	}
;;;418    	else
;;;419    	{
;;;420    		State.x = x;
;;;421    		State.y = y;
;;;422    		State.Pressed = 1;
;;;423    		GUI_PID_StoreState(&State);
;;;424    	}
;;;425    
;;;426    #if 0
;;;427    	printf("%5d,%5d,%3d\r\n",  g_GT811.X0, g_GT811.Y0, g_GT811.P0);
;;;428    #endif	
;;;429    }
000030  bd7c              POP      {r2-r6,pc}
                  |L2.50|
000032  2205              MOVS     r2,#5                 ;384
000034  f10d0101          ADD      r1,sp,#1              ;384
000038  f2407022          MOV      r0,#0x722             ;384
00003c  f7fffffe          BL       GT811_ReadReg
000040  f89d0000          LDRB     r0,[sp,#0]            ;396
000044  491d              LDR      r1,|L2.188|
000046  7088              STRB     r0,[r1,#2]            ;396
000048  f89d0001          LDRB     r0,[sp,#1]            ;397
00004c  70c8              STRB     r0,[r1,#3]            ;397
00004e  f89d0003          LDRB     r0,[sp,#3]            ;399
000052  f89d1002          LDRB     r1,[sp,#2]            ;399
000056  eb002001          ADD      r0,r0,r1,LSL #8       ;399
00005a  4918              LDR      r1,|L2.188|
00005c  8088              STRH     r0,[r1,#4]            ;399
00005e  f89d0005          LDRB     r0,[sp,#5]            ;400
000062  f89d1004          LDRB     r1,[sp,#4]            ;400
000066  eb002001          ADD      r0,r0,r1,LSL #8       ;400
00006a  4914              LDR      r1,|L2.188|
00006c  80c8              STRH     r0,[r1,#6]            ;400
00006e  4608              MOV      r0,r1                 ;407
000070  88c4              LDRH     r4,[r0,#6]            ;407  ; g_GT811
000072  8880              LDRH     r0,[r0,#4]            ;408  ; g_GT811
000074  f24011df          MOV      r1,#0x1df             ;408
000078  1a08              SUBS     r0,r1,r0              ;408
00007a  b285              UXTH     r5,r0                 ;408
00007c  480d              LDR      r0,|L2.180|
00007e  7800              LDRB     r0,[r0,#0]            ;410  ; s_tp_down
000080  b960              CBNZ     r0,|L2.156|
000082  2001              MOVS     r0,#1                 ;412
000084  490b              LDR      r1,|L2.180|
000086  7008              STRB     r0,[r1,#0]            ;412
000088  480b              LDR      r0,|L2.184|
00008a  6004              STR      r4,[r0,#0]            ;413  ; State
00008c  6045              STR      r5,[r0,#4]            ;414  ; State
00008e  2001              MOVS     r0,#1                 ;415
000090  4909              LDR      r1,|L2.184|
000092  7208              STRB     r0,[r1,#8]            ;415
000094  4608              MOV      r0,r1                 ;416
000096  f7fffffe          BL       GUI_PID_StoreState
00009a  e008              B        |L2.174|
                  |L2.156|
00009c  4806              LDR      r0,|L2.184|
00009e  6004              STR      r4,[r0,#0]            ;420  ; State
0000a0  6045              STR      r5,[r0,#4]            ;421  ; State
0000a2  2001              MOVS     r0,#1                 ;422
0000a4  4904              LDR      r1,|L2.184|
0000a6  7208              STRB     r0,[r1,#8]            ;422
0000a8  4608              MOV      r0,r1                 ;423
0000aa  f7fffffe          BL       GUI_PID_StoreState
                  |L2.174|
0000ae  bf00              NOP      
0000b0  e7be              B        |L2.48|
;;;430    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L2.180|
                          DCD      s_tp_down
                  |L2.184|
                          DCD      State
                  |L2.188|
                          DCD      g_GT811

                          AREA ||i.GT811_ReadReg||, CODE, READONLY, ALIGN=1

                  GT811_ReadReg PROC
;;;306    */
;;;307    static void GT811_ReadReg(uint16_t _usRegAddr, uint8_t *_pRegBuf, uint8_t _ucLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;308    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;309    	uint8_t i;
;;;310    
;;;311        i2c_Start();					/* 总线开始信号 */
00000a  f7fffffe          BL       i2c_Start
;;;312    
;;;313        i2c_SendByte(GT811_I2C_ADDR);	/* 发送设备地址+写信号 */
00000e  20ba              MOVS     r0,#0xba
000010  f7fffffe          BL       i2c_SendByte
;;;314    	i2c_WaitAck();
000014  f7fffffe          BL       i2c_WaitAck
;;;315    
;;;316        i2c_SendByte(_usRegAddr >> 8);	/* 地址高8位 */
000018  1228              ASRS     r0,r5,#8
00001a  f7fffffe          BL       i2c_SendByte
;;;317    	i2c_WaitAck();
00001e  f7fffffe          BL       i2c_WaitAck
;;;318    
;;;319        i2c_SendByte(_usRegAddr);		/* 地址低8位 */
000022  b2e8              UXTB     r0,r5
000024  f7fffffe          BL       i2c_SendByte
;;;320    	i2c_WaitAck();
000028  f7fffffe          BL       i2c_WaitAck
;;;321    
;;;322    	i2c_Start();
00002c  f7fffffe          BL       i2c_Start
;;;323        i2c_SendByte(GT811_I2C_ADDR + 0x01);	/* 发送设备地址+读信号 */
000030  20bb              MOVS     r0,#0xbb
000032  f7fffffe          BL       i2c_SendByte
;;;324    	i2c_WaitAck();
000036  f7fffffe          BL       i2c_WaitAck
;;;325    
;;;326    	for (i = 0; i < _ucLen - 1; i++)
00003a  2400              MOVS     r4,#0
00003c  e006              B        |L3.76|
                  |L3.62|
;;;327    	{
;;;328    	    _pRegBuf[i] = i2c_ReadByte();	/* 读寄存器数据 */
00003e  f7fffffe          BL       i2c_ReadByte
000042  5530              STRB     r0,[r6,r4]
;;;329    		i2c_Ack();
000044  f7fffffe          BL       i2c_Ack
000048  1c60              ADDS     r0,r4,#1              ;326
00004a  b2c4              UXTB     r4,r0                 ;326
                  |L3.76|
00004c  1e78              SUBS     r0,r7,#1              ;326
00004e  42a0              CMP      r0,r4                 ;326
000050  dcf5              BGT      |L3.62|
;;;330    	}
;;;331    
;;;332    	/* 最后一个数据 */
;;;333    	 _pRegBuf[i] = i2c_ReadByte();		/* 读寄存器数据 */
000052  f7fffffe          BL       i2c_ReadByte
000056  5530              STRB     r0,[r6,r4]
;;;334    	i2c_NAck();
000058  f7fffffe          BL       i2c_NAck
;;;335    
;;;336        i2c_Stop();							/* 总线停止信号 */
00005c  f7fffffe          BL       i2c_Stop
;;;337    }
000060  e8bd81f0          POP      {r4-r8,pc}
;;;338    
                          ENDP


                          AREA ||i.GT811_ReadVersion||, CODE, READONLY, ALIGN=1

                  GT811_ReadVersion PROC
;;;252    */
;;;253    uint16_t GT811_ReadVersion(void)
000000  b508              PUSH     {r3,lr}
;;;254    {
;;;255    	uint8_t buf[2];
;;;256    
;;;257    	GT811_ReadReg(0x717, buf, 2);
000002  2202              MOVS     r2,#2
000004  4669              MOV      r1,sp
000006  f2407017          MOV      r0,#0x717
00000a  f7fffffe          BL       GT811_ReadReg
;;;258    
;;;259    	return ((uint16_t)buf[0] << 8) + buf[1];
00000e  f89d0001          LDRB     r0,[sp,#1]
000012  f89d1000          LDRB     r1,[sp,#0]
000016  eb002001          ADD      r0,r0,r1,LSL #8
00001a  b280              UXTH     r0,r0
;;;260    }
00001c  bd08              POP      {r3,pc}
;;;261    
                          ENDP


                          AREA ||i.GT811_Scan||, CODE, READONLY, ALIGN=2

                  GT811_Scan PROC
;;;438    */
;;;439    void GT811_Scan(void)
000000  b530              PUSH     {r4,r5,lr}
;;;440    {
000002  b08d              SUB      sp,sp,#0x34
;;;441    	uint8_t buf[48];
;;;442    	//uint8_t i;
;;;443    	static uint8_t s_tp_down = 0;
;;;444    	uint16_t x, y;
;;;445    	static uint16_t x_save, y_save;
;;;446    
;;;447    	if (g_GT811.Enable == 0)
000004  4858              LDR      r0,|L5.360|
000006  7800              LDRB     r0,[r0,#0]  ; g_GT811
000008  b908              CBNZ     r0,|L5.14|
                  |L5.10|
;;;448    	{
;;;449    		return;
;;;450    	}
;;;451    	
;;;452    	/* 20ms 执行一次 */
;;;453    	if (g_GT811.TimerCount < 20)
;;;454    	{
;;;455    		return;
;;;456    	}
;;;457    
;;;458    	g_GT811.TimerCount = 0;
;;;459    	
;;;460    	GT811_ReadReg(GT811_READ_XY_REG, buf, 1);		
;;;461    	if ((buf[0] & 0x01) == 0)
;;;462    	{
;;;463    		if (s_tp_down == 1)
;;;464    		{
;;;465    			s_tp_down = 0;
;;;466    			TOUCH_PutKey(TOUCH_RELEASE, x_save, y_save);
;;;467    		}
;;;468    		return;
;;;469    	}
;;;470    					
;;;471    	GT811_ReadReg(GT811_READ_XY_REG + 1, &buf[1], 33);
;;;472    	
;;;473    	/*
;;;474    	0x721  R  TouchpointFlag  Sensor_ID  key  tp4  tp3  tp2  tp1  tp0
;;;475    	0x722  R  Touchkeystate     0  0  0  0  key4  key3  key2  key1
;;;476    
;;;477    	0x723  R  Point0Xh  触摸点 0，X 坐标高 8 位
;;;478    	0x724  R  Point0Xl  触摸点 0，X 坐标低 8 位
;;;479    	0x725  R  Point0Yh  触摸点 0，Y 坐标高 8 位
;;;480    	0x726  R  Point0Yl  触摸点 0，Y 坐标低 8 位
;;;481    	0x727  R  Point0Pressure  触摸点 0，触摸压力
;;;482    
;;;483    	0x728  R  Point1Xh  触摸点 1，X 坐标高 8 位
;;;484    	0x729  R  Point1Xl  触摸点 1，X 坐标低 8 位
;;;485    	0x72A  R  Point1Yh  触摸点 1，Y 坐标高 8 位
;;;486    	0x72B  R  Point1Yl  触摸点 1，Y 坐标低 8 位
;;;487    	0x72C  R  Point1Pressure  触摸点 1，触摸压力
;;;488    
;;;489    	0x72D  R  Point2Xh  触摸点 2，X 坐标高 8 位
;;;490    	0x72E  R  Point2Xl  触摸点 2，X 坐标低 8 位
;;;491    	0x72F  R  Point2Yh  触摸点 2，Y 坐标高 8 位
;;;492    	0x730  R  Point2Yl  触摸点 2，Y 坐标低 8 位
;;;493    	0x731  R  Point2Pressure  触摸点 2，触摸压力
;;;494    
;;;495    	0x732  R  Point3Xh  触摸点 3，X 坐标高 8 位
;;;496    	0x733-0x738  R    Reserve  none
;;;497    	0x739  R  Point3Xl  触摸点 3，X 坐标低 8 位
;;;498    	0x73A  R  Point3Yh  触摸点 3，Y 坐标高 8 位
;;;499    	0x73B  R  Point3Yl  触摸点 3，Y 坐标低 8 位
;;;500    	0x73C  R  Point3Pressure  触摸点 3，触摸压力
;;;501    
;;;502    	0x73D  R  Point4Xh  触摸点 4，X 坐标高 8 位
;;;503    	0x73E  R  Point4Xl  触摸点 4，X 坐标低 8 位
;;;504    	0x73F  R  Point4Yh  触摸点 4，Y 坐标高 8 位
;;;505    	0x740  R  Point4Yl  触摸点 4，Y 坐标低 8 位
;;;506    	0x741  R  Point4Pressure  触摸点 4，触摸压力
;;;507    
;;;508    	0x742  R  Data_check_sum  Data check Sum
;;;509    	*/
;;;510    
;;;511    	g_GT811.TouchpointFlag = buf[0];
;;;512    	g_GT811.Touchkeystate = buf[1];
;;;513    
;;;514    	g_GT811.X0 = ((uint16_t)buf[2] << 8) + buf[3];
;;;515    	g_GT811.Y0 = ((uint16_t)buf[4] << 8) + buf[5];
;;;516    	g_GT811.P0 = buf[6];
;;;517    
;;;518    	g_GT811.X1 = ((uint16_t)buf[7] << 8) + buf[8];
;;;519    	g_GT811.Y1 = ((uint16_t)buf[9] << 8) + buf[10];
;;;520    	g_GT811.P1 = buf[11];
;;;521    
;;;522    	g_GT811.X2 = ((uint16_t)buf[12] << 8) + buf[13];
;;;523    	g_GT811.Y2 = ((uint16_t)buf[14] << 8) + buf[15];
;;;524    	g_GT811.P2 = buf[16];
;;;525    
;;;526    	/* 触摸点3的地址不连续 */
;;;527    	g_GT811.X3 = ((uint16_t)buf[17] << 8) + buf[24];
;;;528    	g_GT811.Y3 = ((uint16_t)buf[25] << 8) + buf[26];
;;;529    	g_GT811.P3 = buf[27];
;;;530    
;;;531    	g_GT811.X4 = ((uint16_t)buf[28] << 8) + buf[29];
;;;532    	g_GT811.Y4 = ((uint16_t)buf[30] << 8) + buf[31];
;;;533    	g_GT811.P4 = buf[32];
;;;534    
;;;535    	/* 检测按下 */
;;;536    	{
;;;537    		/* 坐标转换 :
;;;538    			电容触摸板左下角是 (0，0);  右上角是 (479，799)
;;;539    			需要转到LCD的像素坐标 (左上角是 (0，0), 右下角是 (799，479)
;;;540    		*/
;;;541    		x = g_GT811.Y0;
;;;542    		y = 479 - g_GT811.X0;
;;;543    	}
;;;544    	
;;;545    	if (s_tp_down == 0)
;;;546    	{
;;;547    		s_tp_down = 1;
;;;548    		
;;;549    		TOUCH_PutKey(TOUCH_DOWN, x, y);
;;;550    	}
;;;551    	else
;;;552    	{
;;;553    		TOUCH_PutKey(TOUCH_MOVE, x, y);
;;;554    	}
;;;555    	x_save = x;	/* 保存坐标，用于释放事件 */
;;;556    	y_save = y;
;;;557    
;;;558    #if 0
;;;559    	for (i = 0; i < 34; i++)
;;;560    	{
;;;561    		printf("%02X ", buf[i]);
;;;562    	}
;;;563    	printf("\r\n");
;;;564    
;;;565    	printf("(%5d,%5d,%3d) ",  g_GT811.X0, g_GT811.Y0, g_GT811.P0);
;;;566    	printf("(%5d,%5d,%3d) ",  g_GT811.X1, g_GT811.Y1, g_GT811.P1);
;;;567    	printf("(%5d,%5d,%3d) ",  g_GT811.X2, g_GT811.Y2, g_GT811.P2);
;;;568    	printf("(%5d,%5d,%3d) ",  g_GT811.X3, g_GT811.Y3, g_GT811.P3);
;;;569    	printf("(%5d,%5d,%3d) ",  x, y, g_GT811.P4);
;;;570    	printf("\r\n");
;;;571    #endif	
;;;572    }
00000a  b00d              ADD      sp,sp,#0x34
00000c  bd30              POP      {r4,r5,pc}
                  |L5.14|
00000e  4856              LDR      r0,|L5.360|
000010  7840              LDRB     r0,[r0,#1]            ;453  ; g_GT811
000012  2814              CMP      r0,#0x14              ;453
000014  da00              BGE      |L5.24|
000016  e7f8              B        |L5.10|
                  |L5.24|
000018  2000              MOVS     r0,#0                 ;458
00001a  4953              LDR      r1,|L5.360|
00001c  7048              STRB     r0,[r1,#1]            ;458
00001e  2201              MOVS     r2,#1                 ;460
000020  a901              ADD      r1,sp,#4              ;460
000022  f2407021          MOV      r0,#0x721             ;460
000026  f7fffffe          BL       GT811_ReadReg
00002a  f89d0004          LDRB     r0,[sp,#4]            ;461
00002e  f0000001          AND      r0,r0,#1              ;461
000032  b970              CBNZ     r0,|L5.82|
000034  484d              LDR      r0,|L5.364|
000036  7800              LDRB     r0,[r0,#0]            ;463  ; s_tp_down
000038  2801              CMP      r0,#1                 ;463
00003a  d109              BNE      |L5.80|
00003c  2000              MOVS     r0,#0                 ;465
00003e  494b              LDR      r1,|L5.364|
000040  7008              STRB     r0,[r1,#0]            ;465
000042  484b              LDR      r0,|L5.368|
000044  8802              LDRH     r2,[r0,#0]            ;466  ; y_save
000046  484b              LDR      r0,|L5.372|
000048  8801              LDRH     r1,[r0,#0]            ;466  ; x_save
00004a  2003              MOVS     r0,#3                 ;466
00004c  f7fffffe          BL       TOUCH_PutKey
                  |L5.80|
000050  e7db              B        |L5.10|
                  |L5.82|
000052  2221              MOVS     r2,#0x21              ;471
000054  f10d0105          ADD      r1,sp,#5              ;471
000058  f2407022          MOV      r0,#0x722             ;471
00005c  f7fffffe          BL       GT811_ReadReg
000060  f89d0004          LDRB     r0,[sp,#4]            ;511
000064  4940              LDR      r1,|L5.360|
000066  7088              STRB     r0,[r1,#2]            ;511
000068  f89d0005          LDRB     r0,[sp,#5]            ;512
00006c  70c8              STRB     r0,[r1,#3]            ;512
00006e  f89d0007          LDRB     r0,[sp,#7]            ;514
000072  f89d1006          LDRB     r1,[sp,#6]            ;514
000076  eb002001          ADD      r0,r0,r1,LSL #8       ;514
00007a  493b              LDR      r1,|L5.360|
00007c  8088              STRH     r0,[r1,#4]            ;514
00007e  f89d0009          LDRB     r0,[sp,#9]            ;515
000082  f89d1008          LDRB     r1,[sp,#8]            ;515
000086  eb002001          ADD      r0,r0,r1,LSL #8       ;515
00008a  4937              LDR      r1,|L5.360|
00008c  80c8              STRH     r0,[r1,#6]            ;515
00008e  f89d000a          LDRB     r0,[sp,#0xa]          ;516
000092  7208              STRB     r0,[r1,#8]            ;516
000094  f89d000c          LDRB     r0,[sp,#0xc]          ;518
000098  f89d100b          LDRB     r1,[sp,#0xb]          ;518
00009c  eb002001          ADD      r0,r0,r1,LSL #8       ;518
0000a0  4931              LDR      r1,|L5.360|
0000a2  8148              STRH     r0,[r1,#0xa]          ;518
0000a4  f89d000e          LDRB     r0,[sp,#0xe]          ;519
0000a8  f89d100d          LDRB     r1,[sp,#0xd]          ;519
0000ac  eb002001          ADD      r0,r0,r1,LSL #8       ;519
0000b0  492d              LDR      r1,|L5.360|
0000b2  8188              STRH     r0,[r1,#0xc]          ;519
0000b4  f89d000f          LDRB     r0,[sp,#0xf]          ;520
0000b8  7388              STRB     r0,[r1,#0xe]          ;520
0000ba  f89d0011          LDRB     r0,[sp,#0x11]         ;522
0000be  f89d1010          LDRB     r1,[sp,#0x10]         ;522
0000c2  eb002001          ADD      r0,r0,r1,LSL #8       ;522
0000c6  4928              LDR      r1,|L5.360|
0000c8  8208              STRH     r0,[r1,#0x10]         ;522
0000ca  f89d0013          LDRB     r0,[sp,#0x13]         ;523
0000ce  f89d1012          LDRB     r1,[sp,#0x12]         ;523
0000d2  eb002001          ADD      r0,r0,r1,LSL #8       ;523
0000d6  4924              LDR      r1,|L5.360|
0000d8  8248              STRH     r0,[r1,#0x12]         ;523
0000da  f89d0014          LDRB     r0,[sp,#0x14]         ;524
0000de  7508              STRB     r0,[r1,#0x14]         ;524
0000e0  f89d001c          LDRB     r0,[sp,#0x1c]         ;527
0000e4  f89d1015          LDRB     r1,[sp,#0x15]         ;527
0000e8  eb002001          ADD      r0,r0,r1,LSL #8       ;527
0000ec  491e              LDR      r1,|L5.360|
0000ee  82c8              STRH     r0,[r1,#0x16]         ;527
0000f0  f89d001e          LDRB     r0,[sp,#0x1e]         ;528
0000f4  f89d101d          LDRB     r1,[sp,#0x1d]         ;528
0000f8  eb002001          ADD      r0,r0,r1,LSL #8       ;528
0000fc  491a              LDR      r1,|L5.360|
0000fe  8308              STRH     r0,[r1,#0x18]         ;528
000100  f89d001f          LDRB     r0,[sp,#0x1f]         ;529
000104  7688              STRB     r0,[r1,#0x1a]         ;529
000106  f89d0021          LDRB     r0,[sp,#0x21]         ;531
00010a  f89d1020          LDRB     r1,[sp,#0x20]         ;531
00010e  eb002001          ADD      r0,r0,r1,LSL #8       ;531
000112  4915              LDR      r1,|L5.360|
000114  8388              STRH     r0,[r1,#0x1c]         ;531
000116  f89d0023          LDRB     r0,[sp,#0x23]         ;532
00011a  f89d1022          LDRB     r1,[sp,#0x22]         ;532
00011e  eb002001          ADD      r0,r0,r1,LSL #8       ;532
000122  4911              LDR      r1,|L5.360|
000124  83c8              STRH     r0,[r1,#0x1e]         ;532
000126  f89d0024          LDRB     r0,[sp,#0x24]         ;533
00012a  f8810020          STRB     r0,[r1,#0x20]         ;533
00012e  4608              MOV      r0,r1                 ;541
000130  88c4              LDRH     r4,[r0,#6]            ;541  ; g_GT811
000132  8880              LDRH     r0,[r0,#4]            ;542  ; g_GT811
000134  f24011df          MOV      r1,#0x1df             ;542
000138  1a08              SUBS     r0,r1,r0              ;542
00013a  b285              UXTH     r5,r0                 ;542
00013c  480b              LDR      r0,|L5.364|
00013e  7800              LDRB     r0,[r0,#0]            ;545  ; s_tp_down
000140  b938              CBNZ     r0,|L5.338|
000142  2001              MOVS     r0,#1                 ;547
000144  4909              LDR      r1,|L5.364|
000146  7008              STRB     r0,[r1,#0]            ;547
000148  462a              MOV      r2,r5                 ;549
00014a  4621              MOV      r1,r4                 ;549
00014c  f7fffffe          BL       TOUCH_PutKey
000150  e004              B        |L5.348|
                  |L5.338|
000152  462a              MOV      r2,r5                 ;553
000154  4621              MOV      r1,r4                 ;553
000156  2002              MOVS     r0,#2                 ;553
000158  f7fffffe          BL       TOUCH_PutKey
                  |L5.348|
00015c  4805              LDR      r0,|L5.372|
00015e  8004              STRH     r4,[r0,#0]            ;555
000160  4803              LDR      r0,|L5.368|
000162  8005              STRH     r5,[r0,#0]            ;556
000164  bf00              NOP      
000166  e750              B        |L5.10|
;;;573    
                          ENDP

                  |L5.360|
                          DCD      g_GT811
                  |L5.364|
                          DCD      |symbol_number.24|
                  |L5.368|
                          DCD      y_save
                  |L5.372|
                          DCD      x_save

                          AREA ||i.GT811_Timer1ms||, CODE, READONLY, ALIGN=2

                  GT811_Timer1ms PROC
;;;346    */
;;;347    void GT811_Timer1ms(void)
000000  4802              LDR      r0,|L6.12|
;;;348    {
;;;349    	g_GT811.TimerCount++;
000002  7840              LDRB     r0,[r0,#1]  ; g_GT811
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L6.12|
000008  7048              STRB     r0,[r1,#1]
;;;350    }
00000a  4770              BX       lr
;;;351    
                          ENDP

                  |L6.12|
                          DCD      g_GT811

                          AREA ||i.GT811_WriteReg||, CODE, READONLY, ALIGN=1

                  GT811_WriteReg PROC
;;;272    */
;;;273    static void GT811_WriteReg(uint16_t _usRegAddr, uint8_t *_pRegBuf, uint8_t _ucLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;274    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;275    	uint8_t i;
;;;276    
;;;277        i2c_Start();					/* 总线开始信号 */
00000a  f7fffffe          BL       i2c_Start
;;;278    
;;;279        i2c_SendByte(GT811_I2C_ADDR);	/* 发送设备地址+写信号 */
00000e  20ba              MOVS     r0,#0xba
000010  f7fffffe          BL       i2c_SendByte
;;;280    	i2c_WaitAck();
000014  f7fffffe          BL       i2c_WaitAck
;;;281    
;;;282        i2c_SendByte(_usRegAddr >> 8);	/* 地址高8位 */
000018  1220              ASRS     r0,r4,#8
00001a  f7fffffe          BL       i2c_SendByte
;;;283    	i2c_WaitAck();
00001e  f7fffffe          BL       i2c_WaitAck
;;;284    
;;;285        i2c_SendByte(_usRegAddr);		/* 地址低8位 */
000022  b2e0              UXTB     r0,r4
000024  f7fffffe          BL       i2c_SendByte
;;;286    	i2c_WaitAck();
000028  f7fffffe          BL       i2c_WaitAck
;;;287    
;;;288    	for (i = 0; i < _ucLen; i++)
00002c  2500              MOVS     r5,#0
00002e  e006              B        |L7.62|
                  |L7.48|
;;;289    	{
;;;290    	    i2c_SendByte(_pRegBuf[i]);		/* 寄存器数据 */
000030  5d70              LDRB     r0,[r6,r5]
000032  f7fffffe          BL       i2c_SendByte
;;;291    		i2c_WaitAck();
000036  f7fffffe          BL       i2c_WaitAck
00003a  1c68              ADDS     r0,r5,#1              ;288
00003c  b2c5              UXTB     r5,r0                 ;288
                  |L7.62|
00003e  42bd              CMP      r5,r7                 ;288
000040  dbf6              BLT      |L7.48|
;;;292    	}
;;;293    
;;;294        i2c_Stop();                   			/* 总线停止信号 */
000042  f7fffffe          BL       i2c_Stop
;;;295    }
000046  e8bd81f0          POP      {r4-r8,pc}
;;;296    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  g_GT811
                          %        34

                          AREA ||.data||, DATA, ALIGN=1

                  s_GT811_CfgParams
000000  12100e0c          DCB      0x12,0x10,0x0e,0x0c
000004  0a080604          DCB      0x0a,0x08,0x06,0x04
000008  02000555          DCB      0x02,0x00,0x05,0x55
00000c  15552555          DCB      0x15,0x55,0x25,0x55
000010  35554555          DCB      0x35,0x55,0x45,0x55
000014  55556555          DCB      0x55,0x55,0x65,0x55
000018  75558555          DCB      0x75,0x55,0x85,0x55
00001c  9555a555          DCB      0x95,0x55,0xa5,0x55
000020  b555c555          DCB      0xb5,0x55,0xc5,0x55
000024  d555e555          DCB      0xd5,0x55,0xe5,0x55
000028  f5551b03          DCB      0xf5,0x55,0x1b,0x03
00002c  00000013          DCB      0x00,0x00,0x00,0x13
000030  13130f0f          DCB      0x13,0x13,0x0f,0x0f
000034  0a503005          DCB      0x0a,0x50,0x30,0x05
000038  036405e0          DCB      0x03,0x64,0x05,0xe0
00003c  01200300          DCB      0x01,0x20,0x03,0x00
000040  00322c34          DCB      0x00,0x32,0x2c,0x34
000044  2e000004          DCB      0x2e,0x00,0x00,0x04
000048  14220400          DCB      0x14,0x22,0x04,0x00
00004c  00000000          DCB      0x00,0x00,0x00,0x00
000050  2014ec01          DCB      0x20,0x14,0xec,0x01
000054  00000000          DCB      0x00,0x00,0x00,0x00
000058  00000000          DCB      0x00,0x00,0x00,0x00
00005c  00000c30          DCB      0x00,0x00,0x0c,0x30
000060  25281400          DCB      0x25,0x28,0x14,0x00
000064  00000000          DCB      0x00,0x00,0x00,0x00
000068  0001              DCB      0x00,0x01
                  s_tp_down
00006a  00                DCB      0x00
                  |symbol_number.24|
00006b  00                DCB      0x00
                  x_save
00006c  0000              DCB      0x00,0x00
                  y_save
00006e  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_gt811.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_gt811_c_2208b836____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_gt811_c_2208b836____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_gt811_c_2208b836____REVSH|
#line 144
|__asm___11_bsp_gt811_c_2208b836____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_gt811_c_2208b836____RRX|
#line 300
|__asm___11_bsp_gt811_c_2208b836____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
