; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tft_lcd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tft_lcd.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_tft_lcd.crf ..\..\User\bsp_stm32f4xx\src\bsp_tft_lcd.c]
                          THUMB

                          AREA ||i.LCD_Blend565||, CODE, READONLY, ALIGN=2

                  LCD_Blend565 PROC
;;;1173   */
;;;1174   uint16_t LCD_Blend565(uint16_t src, uint16_t dst, uint8_t alpha)
000000  b570              PUSH     {r4-r6,lr}
;;;1175   {
000002  4603              MOV      r3,r0
;;;1176   	uint32_t src2;
;;;1177   	uint32_t dst2;
;;;1178   
;;;1179   	src2 = ((src << 16) |src) & 0x07E0F81F;
000004  ea434003          ORR      r0,r3,r3,LSL #16
000008  4e08              LDR      r6,|L1.44|
00000a  ea000406          AND      r4,r0,r6
;;;1180   	dst2 = ((dst << 16) | dst) & 0x07E0F81F;
00000e  ea414001          ORR      r0,r1,r1,LSL #16
000012  ea000506          AND      r5,r0,r6
;;;1181   	dst2 = ((((dst2 - src2) * alpha) >> 5) + src2) & 0x07E0F81F;
000016  1b28              SUBS     r0,r5,r4
000018  4350              MULS     r0,r2,r0
00001a  eb041050          ADD      r0,r4,r0,LSR #5
00001e  ea000506          AND      r5,r0,r6
;;;1182   	return (dst2 >> 16) | dst2;
000022  ea454015          ORR      r0,r5,r5,LSR #16
000026  b280              UXTH     r0,r0
;;;1183   }
000028  bd70              POP      {r4-r6,pc}
;;;1184   
                          ENDP

00002a  0000              DCW      0x0000
                  |L1.44|
                          DCD      0x07e0f81f

                          AREA ||i.LCD_ButtonTouchDown||, CODE, READONLY, ALIGN=1

                  LCD_ButtonTouchDown PROC
;;;2076   */
;;;2077   uint8_t LCD_ButtonTouchDown(BUTTON_T *_btn, uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;2078   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2079   	if ((_usX > _btn->Left) && (_usX < _btn->Left + _btn->Width)
000008  8860              LDRH     r0,[r4,#2]
00000a  42a8              CMP      r0,r5
00000c  da13              BGE      |L2.54|
00000e  8860              LDRH     r0,[r4,#2]
000010  8921              LDRH     r1,[r4,#8]
000012  4408              ADD      r0,r0,r1
000014  42a8              CMP      r0,r5
000016  dd0e              BLE      |L2.54|
;;;2080   		&& (_usY > _btn->Top) && (_usY < _btn->Top + _btn->Height))
000018  88a0              LDRH     r0,[r4,#4]
00001a  42b0              CMP      r0,r6
00001c  da0b              BGE      |L2.54|
00001e  88a0              LDRH     r0,[r4,#4]
000020  88e1              LDRH     r1,[r4,#6]
000022  4408              ADD      r0,r0,r1
000024  42b0              CMP      r0,r6
000026  dd06              BLE      |L2.54|
;;;2081   	{
;;;2082   //		BUTTON_BEEP();	/* 按键提示音 bsp_tft_lcd.h 文件开头可以使能和关闭 */
;;;2083   		_btn->Focus = 1;
000028  2001              MOVS     r0,#1
00002a  7520              STRB     r0,[r4,#0x14]
;;;2084   		LCD_DrawButton(_btn);
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       LCD_DrawButton
;;;2085   		return 1;
000032  2001              MOVS     r0,#1
                  |L2.52|
;;;2086   	}
;;;2087   	else
;;;2088   	{
;;;2089   		return 0;
;;;2090   	}
;;;2091   }
000034  bd70              POP      {r4-r6,pc}
                  |L2.54|
000036  2000              MOVS     r0,#0                 ;2089
000038  e7fc              B        |L2.52|
;;;2092   
                          ENDP


                          AREA ||i.LCD_ButtonTouchRelease||, CODE, READONLY, ALIGN=1

                  LCD_ButtonTouchRelease PROC
;;;2101   */
;;;2102   uint8_t LCD_ButtonTouchRelease(BUTTON_T *_btn, uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;2103   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2104   	_btn->Focus = 0;
000008  2000              MOVS     r0,#0
00000a  7520              STRB     r0,[r4,#0x14]
;;;2105   	LCD_DrawButton(_btn);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LCD_DrawButton
;;;2106   
;;;2107   	if ((_usX > _btn->Left) && (_usX < _btn->Left + _btn->Width)
000012  8860              LDRH     r0,[r4,#2]
000014  42a8              CMP      r0,r5
000016  da0e              BGE      |L3.54|
000018  8860              LDRH     r0,[r4,#2]
00001a  8921              LDRH     r1,[r4,#8]
00001c  4408              ADD      r0,r0,r1
00001e  42a8              CMP      r0,r5
000020  dd09              BLE      |L3.54|
;;;2108   		&& (_usY > _btn->Top) && (_usY < _btn->Top + _btn->Height))
000022  88a0              LDRH     r0,[r4,#4]
000024  42b0              CMP      r0,r6
000026  da06              BGE      |L3.54|
000028  88a0              LDRH     r0,[r4,#4]
00002a  88e1              LDRH     r1,[r4,#6]
00002c  4408              ADD      r0,r0,r1
00002e  42b0              CMP      r0,r6
000030  dd01              BLE      |L3.54|
;;;2109   	{
;;;2110   		return 1;
000032  2001              MOVS     r0,#1
                  |L3.52|
;;;2111   	}
;;;2112   	else
;;;2113   	{
;;;2114   		return 0;
;;;2115   	}
;;;2116   }
000034  bd70              POP      {r4-r6,pc}
                  |L3.54|
000036  2000              MOVS     r0,#0                 ;2114
000038  e7fc              B        |L3.52|
;;;2117   
                          ENDP


                          AREA ||i.LCD_ClrScr||, CODE, READONLY, ALIGN=2

                  LCD_ClrScr PROC
;;;269    */
;;;270    void LCD_ClrScr(uint16_t _usColor)
000000  b510              PUSH     {r4,lr}
;;;271    {
000002  4604              MOV      r4,r0
;;;272    	if (g_ChipID == IC_8875)	/* RA8875 分支 */
000004  480a              LDR      r0,|L4.48|
000006  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000008  2875              CMP      r0,#0x75
00000a  d103              BNE      |L4.20|
;;;273    	{
;;;274    		RA8875_ClrScr(_usColor);
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       RA8875_ClrScr
000012  e00c              B        |L4.46|
                  |L4.20|
;;;275    	}
;;;276    	else if (g_ChipID == IC_9488)
000014  4806              LDR      r0,|L4.48|
000016  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000018  f2494188          MOV      r1,#0x9488
00001c  4288              CMP      r0,r1
00001e  d103              BNE      |L4.40|
;;;277    	{
;;;278    		ILI9488_ClrScr(_usColor);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       ILI9488_ClrScr
000026  e002              B        |L4.46|
                  |L4.40|
;;;279    	}
;;;280    	else	/* 5420，4001，61509 分支 */
;;;281    	{
;;;282    		SPFD5420_ClrScr(_usColor);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       SPFD5420_ClrScr
                  |L4.46|
;;;283    	}
;;;284    }
00002e  bd10              POP      {r4,pc}
;;;285    
                          ENDP

                  |L4.48|
                          DCD      g_ChipID

                          AREA ||i.LCD_CtrlLinesConfig||, CODE, READONLY, ALIGN=2

                  LCD_CtrlLinesConfig PROC
;;;1767   */
;;;1768   static void LCD_CtrlLinesConfig(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;1769   {
;;;1770   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1771   
;;;1772   	/* 使能FSMC时钟 */
;;;1773   	RCC_AHB3PeriphClockCmd(RCC_AHB3Periph_FSMC, ENABLE);
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_AHB3PeriphClockCmd
;;;1774   
;;;1775   	/* 使能 GPIO时钟 */
;;;1776   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD | RCC_AHB1Periph_GPIOE | RCC_AHB1Periph_GPIOG, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2058              MOVS     r0,#0x58
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;1777   
;;;1778   	/* 设置 PD.00(D2), PD.01(D3), PD.04(NOE), PD.05(NWE), PD.08(D13), PD.09(D14),
;;;1779   	 PD.10(D15), PD.14(D0), PD.15(D1) 为复用推挽输出 */
;;;1780   
;;;1781   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource0, GPIO_AF_FSMC);
000012  220c              MOVS     r2,#0xc
000014  2100              MOVS     r1,#0
000016  484a              LDR      r0,|L5.320|
000018  f7fffffe          BL       GPIO_PinAFConfig
;;;1782   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource1, GPIO_AF_FSMC);
00001c  220c              MOVS     r2,#0xc
00001e  2101              MOVS     r1,#1
000020  4847              LDR      r0,|L5.320|
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;1783   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource4, GPIO_AF_FSMC);
000026  220c              MOVS     r2,#0xc
000028  2104              MOVS     r1,#4
00002a  4845              LDR      r0,|L5.320|
00002c  f7fffffe          BL       GPIO_PinAFConfig
;;;1784   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_FSMC);
000030  220c              MOVS     r2,#0xc
000032  2105              MOVS     r1,#5
000034  4842              LDR      r0,|L5.320|
000036  f7fffffe          BL       GPIO_PinAFConfig
;;;1785   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource8, GPIO_AF_FSMC);
00003a  220c              MOVS     r2,#0xc
00003c  2108              MOVS     r1,#8
00003e  4840              LDR      r0,|L5.320|
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;1786   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource9, GPIO_AF_FSMC);
000044  220c              MOVS     r2,#0xc
000046  2109              MOVS     r1,#9
000048  483d              LDR      r0,|L5.320|
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;1787   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource10, GPIO_AF_FSMC);
00004e  220c              MOVS     r2,#0xc
000050  210a              MOVS     r1,#0xa
000052  483b              LDR      r0,|L5.320|
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;1788   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource14, GPIO_AF_FSMC);
000058  220c              MOVS     r2,#0xc
00005a  210e              MOVS     r1,#0xe
00005c  4838              LDR      r0,|L5.320|
00005e  f7fffffe          BL       GPIO_PinAFConfig
;;;1789   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource15, GPIO_AF_FSMC);
000062  220c              MOVS     r2,#0xc
000064  210f              MOVS     r1,#0xf
000066  4836              LDR      r0,|L5.320|
000068  f7fffffe          BL       GPIO_PinAFConfig
;;;1790   
;;;1791   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4 | GPIO_Pin_5 |
00006c  f24c7033          MOV      r0,#0xc733
000070  9000              STR      r0,[sp,#0]
;;;1792   	                            GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_14 |
;;;1793   	                            GPIO_Pin_15;
;;;1794   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000072  2002              MOVS     r0,#2
000074  f88d0004          STRB     r0,[sp,#4]
;;;1795   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000078  2003              MOVS     r0,#3
00007a  f88d0005          STRB     r0,[sp,#5]
;;;1796   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00007e  2000              MOVS     r0,#0
000080  f88d0006          STRB     r0,[sp,#6]
;;;1797   	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
000084  f88d0007          STRB     r0,[sp,#7]
;;;1798   	GPIO_Init(GPIOD, &GPIO_InitStructure);
000088  4669              MOV      r1,sp
00008a  482d              LDR      r0,|L5.320|
00008c  f7fffffe          BL       GPIO_Init
;;;1799   
;;;1800   	/* 设置 PE.07(D4), PE.08(D5), PE.09(D6), PE.10(D7), PE.11(D8), PE.12(D9), PE.13(D10),
;;;1801   	 PE.14(D11), PE.15(D12) 为复用推挽输出 */
;;;1802   
;;;1803   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource4 , GPIO_AF_FSMC);
000090  220c              MOVS     r2,#0xc
000092  2104              MOVS     r1,#4
000094  482b              LDR      r0,|L5.324|
000096  f7fffffe          BL       GPIO_PinAFConfig
;;;1804   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource5 , GPIO_AF_FSMC);
00009a  220c              MOVS     r2,#0xc
00009c  2105              MOVS     r1,#5
00009e  4829              LDR      r0,|L5.324|
0000a0  f7fffffe          BL       GPIO_PinAFConfig
;;;1805   
;;;1806   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource7 , GPIO_AF_FSMC);
0000a4  220c              MOVS     r2,#0xc
0000a6  2107              MOVS     r1,#7
0000a8  4826              LDR      r0,|L5.324|
0000aa  f7fffffe          BL       GPIO_PinAFConfig
;;;1807   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource8 , GPIO_AF_FSMC);
0000ae  220c              MOVS     r2,#0xc
0000b0  2108              MOVS     r1,#8
0000b2  4824              LDR      r0,|L5.324|
0000b4  f7fffffe          BL       GPIO_PinAFConfig
;;;1808   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource9 , GPIO_AF_FSMC);
0000b8  220c              MOVS     r2,#0xc
0000ba  2109              MOVS     r1,#9
0000bc  4821              LDR      r0,|L5.324|
0000be  f7fffffe          BL       GPIO_PinAFConfig
;;;1809   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource10 , GPIO_AF_FSMC);
0000c2  220c              MOVS     r2,#0xc
0000c4  210a              MOVS     r1,#0xa
0000c6  481f              LDR      r0,|L5.324|
0000c8  f7fffffe          BL       GPIO_PinAFConfig
;;;1810   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource11 , GPIO_AF_FSMC);
0000cc  220c              MOVS     r2,#0xc
0000ce  210b              MOVS     r1,#0xb
0000d0  481c              LDR      r0,|L5.324|
0000d2  f7fffffe          BL       GPIO_PinAFConfig
;;;1811   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource12 , GPIO_AF_FSMC);
0000d6  220c              MOVS     r2,#0xc
0000d8  4611              MOV      r1,r2
0000da  481a              LDR      r0,|L5.324|
0000dc  f7fffffe          BL       GPIO_PinAFConfig
;;;1812   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource13 , GPIO_AF_FSMC);
0000e0  220c              MOVS     r2,#0xc
0000e2  210d              MOVS     r1,#0xd
0000e4  4817              LDR      r0,|L5.324|
0000e6  f7fffffe          BL       GPIO_PinAFConfig
;;;1813   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource14 , GPIO_AF_FSMC);
0000ea  220c              MOVS     r2,#0xc
0000ec  210e              MOVS     r1,#0xe
0000ee  4815              LDR      r0,|L5.324|
0000f0  f7fffffe          BL       GPIO_PinAFConfig
;;;1814   	GPIO_PinAFConfig(GPIOE, GPIO_PinSource15 , GPIO_AF_FSMC);
0000f4  220c              MOVS     r2,#0xc
0000f6  210f              MOVS     r1,#0xf
0000f8  4812              LDR      r0,|L5.324|
0000fa  f7fffffe          BL       GPIO_PinAFConfig
;;;1815   
;;;1816   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 |
0000fe  f64f70b0          MOV      r0,#0xffb0
000102  9000              STR      r0,[sp,#0]
;;;1817   	                            GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 |
;;;1818   	                            GPIO_Pin_15;
;;;1819   	GPIO_Init(GPIOE, &GPIO_InitStructure);
000104  4669              MOV      r1,sp
000106  480f              LDR      r0,|L5.324|
000108  f7fffffe          BL       GPIO_Init
;;;1820   
;;;1821   	/* 设置 PD.13(A18 (RS))  为复用推挽输出 */
;;;1822   	GPIO_PinAFConfig(GPIOD, GPIO_PinSource13, GPIO_AF_FSMC);
00010c  220c              MOVS     r2,#0xc
00010e  210d              MOVS     r1,#0xd
000110  480b              LDR      r0,|L5.320|
000112  f7fffffe          BL       GPIO_PinAFConfig
;;;1823   
;;;1824   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
000116  f44f5000          MOV      r0,#0x2000
00011a  9000              STR      r0,[sp,#0]
;;;1825   	GPIO_Init(GPIOD, &GPIO_InitStructure);
00011c  4669              MOV      r1,sp
00011e  4808              LDR      r0,|L5.320|
000120  f7fffffe          BL       GPIO_Init
;;;1826   
;;;1827   	/* 设置 PG12 (LCD/CS)) 为复用推挽输出 */
;;;1828   	GPIO_PinAFConfig(GPIOG, GPIO_PinSource12, GPIO_AF_FSMC);
000124  220c              MOVS     r2,#0xc
000126  4611              MOV      r1,r2
000128  4807              LDR      r0,|L5.328|
00012a  f7fffffe          BL       GPIO_PinAFConfig
;;;1829   
;;;1830   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
00012e  f44f5080          MOV      r0,#0x1000
000132  9000              STR      r0,[sp,#0]
;;;1831   	GPIO_Init(GPIOG, &GPIO_InitStructure);
000134  4669              MOV      r1,sp
000136  4804              LDR      r0,|L5.328|
000138  f7fffffe          BL       GPIO_Init
;;;1832   }
00013c  bd1c              POP      {r2-r4,pc}
;;;1833   
                          ENDP

00013e  0000              DCW      0x0000
                  |L5.320|
                          DCD      0x40020c00
                  |L5.324|
                          DCD      0x40021000
                  |L5.328|
                          DCD      0x40021800

                          AREA ||i.LCD_DispControl||, CODE, READONLY, ALIGN=1

                  LCD_DispControl PROC
;;;1682   */
;;;1683   void LCD_DispControl(void *_pControl)
000000  b570              PUSH     {r4-r6,lr}
;;;1684   {
000002  4604              MOV      r4,r0
;;;1685   	uint8_t id;
;;;1686   
;;;1687   	id = *(uint8_t *)_pControl;	/* 读取ID */
000004  7825              LDRB     r5,[r4,#0]
;;;1688   
;;;1689   	switch (id)
000006  2d08              CMP      r5,#8
000008  d21e              BCS      |L6.72|
00000a  e8dff005          TBB      [pc,r5]
00000e  1d04              DCB      0x1d,0x04
000010  05090d11          DCB      0x05,0x09,0x0d,0x11
000014  1519              DCB      0x15,0x19
;;;1690   	{
;;;1691   		case ID_ICON:
;;;1692   			//void LCD_DrawIcon(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode);
;;;1693   			break;
000016  e017              B        |L6.72|
;;;1694   
;;;1695   		case ID_WIN:
;;;1696   			LCD_DrawWin((WIN_T *)_pControl);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LCD_DrawWin
;;;1697   			break;
00001e  e013              B        |L6.72|
;;;1698   
;;;1699   		case ID_LABEL:
;;;1700   			LCD_DrawLabel((LABEL_T *)_pControl);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       LCD_DrawLabel
;;;1701   			break;
000026  e00f              B        |L6.72|
;;;1702   
;;;1703   		case ID_BUTTON:
;;;1704   			LCD_DrawButton((BUTTON_T *)_pControl);
000028  4620              MOV      r0,r4
00002a  f7fffffe          BL       LCD_DrawButton
;;;1705   			break;
00002e  e00b              B        |L6.72|
;;;1706   
;;;1707   		case ID_CHECK:
;;;1708   			LCD_DrawCheckBox((CHECK_T *)_pControl);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       LCD_DrawCheckBox
;;;1709   			break;
000036  e007              B        |L6.72|
;;;1710   
;;;1711   		case ID_EDIT:
;;;1712   			LCD_DrawEdit((EDIT_T *)_pControl);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       LCD_DrawEdit
;;;1713   			break;
00003e  e003              B        |L6.72|
;;;1714   
;;;1715   		case ID_GROUP:
;;;1716   			LCD_DrawGroupBox((GROUP_T *)_pControl);
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       LCD_DrawGroupBox
;;;1717   			break;
000046  bf00              NOP      
                  |L6.72|
000048  bf00              NOP                            ;1693
;;;1718   	}
;;;1719   }
00004a  bd70              POP      {r4-r6,pc}
;;;1720   
                          ENDP


                          AREA ||i.LCD_DispOff||, CODE, READONLY, ALIGN=2

                  LCD_DispOff PROC
;;;245    */
;;;246    void LCD_DispOff(void)
000000  b510              PUSH     {r4,lr}
;;;247    {
;;;248    	if (g_ChipID == IC_8875)
000002  4809              LDR      r0,|L7.40|
000004  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000006  2875              CMP      r0,#0x75
000008  d102              BNE      |L7.16|
;;;249    	{
;;;250    		RA8875_DispOff();
00000a  f7fffffe          BL       RA8875_DispOff
00000e  e00a              B        |L7.38|
                  |L7.16|
;;;251    	}
;;;252    	else if (g_ChipID == IC_9488)
000010  4805              LDR      r0,|L7.40|
000012  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000014  f2494188          MOV      r1,#0x9488
000018  4288              CMP      r0,r1
00001a  d102              BNE      |L7.34|
;;;253    	{
;;;254    		ILI9488_DispOff();
00001c  f7fffffe          BL       ILI9488_DispOff
000020  e001              B        |L7.38|
                  |L7.34|
;;;255    	}
;;;256    	else	/* 61509, 5420, 4001 */
;;;257    	{
;;;258    		SPFD5420_DispOff();
000022  f7fffffe          BL       SPFD5420_DispOff
                  |L7.38|
;;;259    	}
;;;260    }
000026  bd10              POP      {r4,pc}
;;;261    
                          ENDP

                  |L7.40|
                          DCD      g_ChipID

                          AREA ||i.LCD_DispOn||, CODE, READONLY, ALIGN=2

                  LCD_DispOn PROC
;;;221    */
;;;222    void LCD_DispOn(void)
000000  b510              PUSH     {r4,lr}
;;;223    {
;;;224    	if (g_ChipID == IC_8875)
000002  4809              LDR      r0,|L8.40|
000004  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000006  2875              CMP      r0,#0x75
000008  d102              BNE      |L8.16|
;;;225    	{
;;;226    		RA8875_DispOn();
00000a  f7fffffe          BL       RA8875_DispOn
00000e  e00a              B        |L8.38|
                  |L8.16|
;;;227    	}
;;;228    	else if (g_ChipID == IC_9488)
000010  4805              LDR      r0,|L8.40|
000012  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000014  f2494188          MOV      r1,#0x9488
000018  4288              CMP      r0,r1
00001a  d102              BNE      |L8.34|
;;;229    	{
;;;230    		ILI9488_DispOn();
00001c  f7fffffe          BL       ILI9488_DispOn
000020  e001              B        |L8.38|
                  |L8.34|
;;;231    	}
;;;232    	else	/* 61509, 5420, 4001 */
;;;233    	{
;;;234    		SPFD5420_DispOn();
000022  f7fffffe          BL       SPFD5420_DispOn
                  |L8.38|
;;;235    	}
;;;236    }
000026  bd10              POP      {r4,pc}
;;;237    
                          ENDP

                  |L8.40|
                          DCD      g_ChipID

                          AREA ||i.LCD_DispStr||, CODE, READONLY, ALIGN=1

                  LCD_DispStr PROC
;;;297    */
;;;298    void LCD_DispStr(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;299    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;300    	LCD_DispStrEx(_usX, _usY, _ptr, _tFont, 0, 0);
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  463b              MOV      r3,r7
000012  4632              MOV      r2,r6
000014  4629              MOV      r1,r5
000016  9001              STR      r0,[sp,#4]
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LCD_DispStrEx
;;;301    }
00001e  e8bd81fc          POP      {r2-r8,pc}
;;;302    
                          ENDP


                          AREA ||i.LCD_DispStrEx||, CODE, READONLY, ALIGN=1

                  LCD_DispStrEx PROC
;;;623    */
;;;624    void LCD_DispStrEx(uint16_t _usX, uint16_t _usY, char *_ptr, FONT_T *_tFont, uint16_t _Width,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;625    	uint8_t _Align)
;;;626    {
000004  b0ab              SUB      sp,sp,#0xac
000006  4607              MOV      r7,r0
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
00000c  f8dd80e0          LDR      r8,[sp,#0xe0]
;;;627    	uint32_t i;
;;;628    	uint8_t code1;
;;;629    	uint8_t code2;
;;;630    	uint8_t buf[32 * 32 / 8];	/* 最大支持24点阵汉字 */
;;;631    	uint8_t width;
;;;632    	uint16_t m;
;;;633    	uint8_t font_width = 0;
000010  f04f0b00          MOV      r11,#0
;;;634    	uint8_t font_height = 0;
000014  2000              MOVS     r0,#0
000016  9006              STR      r0,[sp,#0x18]
;;;635    	uint16_t x, y;
;;;636    	uint16_t offset;
;;;637    	uint16_t str_width;	/* 字符串实际宽度  */
;;;638    	uint8_t ra8875_use = 0;
000018  9003              STR      r0,[sp,#0xc]
;;;639    	uint8_t ra8875_font_code = 0;
00001a  9002              STR      r0,[sp,#8]
;;;640    
;;;641    	switch (_tFont->FontCode)
00001c  7820              LDRB     r0,[r4,#0]
00001e  2807              CMP      r0,#7
000020  d223              BCS      |L10.106|
000022  e8dff000          TBB      [pc,r0]
000026  0408              DCB      0x04,0x08
000028  0c101419          DCB      0x0c,0x10,0x14,0x19
00002c  1d00              DCB      0x1d,0x00
;;;642    	{
;;;643    		case FC_ST_12:		/* 12点阵 */
;;;644    			font_height = 12;
00002e  200c              MOVS     r0,#0xc
000030  9006              STR      r0,[sp,#0x18]
;;;645    			font_width = 12;
000032  4683              MOV      r11,r0
;;;646    			break;
000034  e019              B        |L10.106|
;;;647    		
;;;648    		case FC_ST_16:
;;;649    			font_height = 16;
000036  2010              MOVS     r0,#0x10
000038  9006              STR      r0,[sp,#0x18]
;;;650    			font_width = 16;
00003a  4683              MOV      r11,r0
;;;651    			break;
00003c  e015              B        |L10.106|
;;;652    
;;;653    		case FC_ST_24:
;;;654    			font_height = 24;
00003e  2018              MOVS     r0,#0x18
000040  9006              STR      r0,[sp,#0x18]
;;;655    			font_width = 24;
000042  4683              MOV      r11,r0
;;;656    			break;
000044  e011              B        |L10.106|
;;;657    						
;;;658    		case FC_ST_32:	
;;;659    			font_height = 32;
000046  2020              MOVS     r0,#0x20
000048  9006              STR      r0,[sp,#0x18]
;;;660    			font_width = 32;
00004a  4683              MOV      r11,r0
;;;661    			break;					
00004c  e00d              B        |L10.106|
;;;662    		
;;;663    		case FC_RA8875_16:
;;;664    			ra8875_font_code = RA_FONT_16;
00004e  2000              MOVS     r0,#0
000050  9002              STR      r0,[sp,#8]
;;;665    			ra8875_use = 1;	/* 表示用RA8875字库 */
000052  2001              MOVS     r0,#1
000054  9003              STR      r0,[sp,#0xc]
;;;666    			break;
000056  e008              B        |L10.106|
;;;667    			
;;;668    		case FC_RA8875_24:
;;;669    			ra8875_font_code = RA_FONT_24;
000058  2001              MOVS     r0,#1
00005a  9002              STR      r0,[sp,#8]
;;;670    			ra8875_use = 1;	/* 表示用RA8875字库 */
00005c  9003              STR      r0,[sp,#0xc]
;;;671    			break;
00005e  e004              B        |L10.106|
;;;672    						
;;;673    		case FC_RA8875_32:
;;;674    			ra8875_font_code = RA_FONT_32;
000060  2002              MOVS     r0,#2
000062  9002              STR      r0,[sp,#8]
;;;675    			ra8875_use = 1;	/* 表示用RA8875字库 */
000064  2001              MOVS     r0,#1
000066  9003              STR      r0,[sp,#0xc]
;;;676    			break;
000068  bf00              NOP      
                  |L10.106|
00006a  bf00              NOP                            ;646
;;;677    	}
;;;678    	
;;;679    	str_width = LCD_GetStrWidth(_ptr, _tFont);	/* 计算字符串实际宽度(RA8875内部ASCII点阵宽度为变长 */
00006c  4621              MOV      r1,r4
00006e  4630              MOV      r0,r6
000070  f7fffffe          BL       LCD_GetStrWidth
000074  4605              MOV      r5,r0
;;;680    	offset = 0;
000076  f04f0900          MOV      r9,#0
;;;681    	if (_Width > str_width)
00007a  45a8              CMP      r8,r5
00007c  dd10              BLE      |L10.160|
;;;682    	{
;;;683    		if (_Align == ALIGN_RIGHT)	/* 右对齐 */
00007e  9839              LDR      r0,[sp,#0xe4]
000080  2802              CMP      r0,#2
000082  d104              BNE      |L10.142|
;;;684    		{
;;;685    			offset = _Width - str_width;
000084  eba80005          SUB      r0,r8,r5
000088  fa1ff980          UXTH     r9,r0
00008c  e008              B        |L10.160|
                  |L10.142|
;;;686    		}
;;;687    		else if (_Align == ALIGN_CENTER)	/* 左对齐 */
00008e  9839              LDR      r0,[sp,#0xe4]
000090  2801              CMP      r0,#1
000092  d105              BNE      |L10.160|
;;;688    		{
;;;689    			offset = (_Width - str_width) / 2;
000094  eba80005          SUB      r0,r8,r5
000098  eb0071d0          ADD      r1,r0,r0,LSR #31
00009c  f3c1094f          UBFX     r9,r1,#1,#16
                  |L10.160|
;;;690    		}
;;;691    		else	/* 左对齐 ALIGN_LEFT */
;;;692    		{
;;;693    			;
;;;694    		}
;;;695    	}
;;;696    
;;;697    	/* 左侧填背景色, 中间对齐和右边对齐  */
;;;698    	if (offset > 0)
0000a0  f1b90f00          CMP      r9,#0
0000a4  dd0e              BLE      |L10.196|
;;;699    	{
;;;700    		LCD_Fill_Rect(_usX, _usY, LCD_GetFontHeight(_tFont), offset,  _tFont->BackColor);
0000a6  4620              MOV      r0,r4
0000a8  f7fffffe          BL       LCD_GetFontHeight
0000ac  9001              STR      r0,[sp,#4]
0000ae  88a0              LDRH     r0,[r4,#4]
0000b0  464b              MOV      r3,r9
0000b2  9000              STR      r0,[sp,#0]
0000b4  4638              MOV      r0,r7
0000b6  9a01              LDR      r2,[sp,#4]
0000b8  992c              LDR      r1,[sp,#0xb0]
0000ba  f7fffffe          BL       LCD_Fill_Rect
;;;701    		_usX += offset;
0000be  eb070009          ADD      r0,r7,r9
0000c2  b287              UXTH     r7,r0
                  |L10.196|
;;;702    	}
;;;703    	
;;;704    	/* 右侧填背景色 */
;;;705    	if (_Width > str_width)
0000c4  45a8              CMP      r8,r5
0000c6  dd10              BLE      |L10.234|
;;;706    	{
;;;707    		LCD_Fill_Rect(_usX + str_width, _usY, LCD_GetFontHeight(_tFont), _Width - str_width - offset,  _tFont->BackColor);
0000c8  4620              MOV      r0,r4
0000ca  f7fffffe          BL       LCD_GetFontHeight
0000ce  9001              STR      r0,[sp,#4]
0000d0  88a0              LDRH     r0,[r4,#4]
0000d2  eba80105          SUB      r1,r8,r5
0000d6  eba10109          SUB      r1,r1,r9
0000da  b28b              UXTH     r3,r1
0000dc  1979              ADDS     r1,r7,r5
0000de  9000              STR      r0,[sp,#0]
0000e0  b288              UXTH     r0,r1
0000e2  9a01              LDR      r2,[sp,#4]
0000e4  992c              LDR      r1,[sp,#0xb0]
0000e6  f7fffffe          BL       LCD_Fill_Rect
                  |L10.234|
;;;708    	}
;;;709    	
;;;710    	if (ra8875_use == 1)	/* 使用RA8875外挂的字库芯片 */
0000ea  9803              LDR      r0,[sp,#0xc]
0000ec  2801              CMP      r0,#1
0000ee  d110              BNE      |L10.274|
;;;711    	{
;;;712    		RA8875_SetFrontColor(_tFont->FrontColor);			/* 设置字体前景色 */
0000f0  8860              LDRH     r0,[r4,#2]
0000f2  f7fffffe          BL       RA8875_SetFrontColor
;;;713    		RA8875_SetBackColor(_tFont->BackColor);				/* 设置字体背景色 */
0000f6  88a0              LDRH     r0,[r4,#4]
0000f8  f7fffffe          BL       RA8875_SetBackColor
;;;714    		RA8875_SetFont(ra8875_font_code, 0, _tFont->Space);	/* 字体代码，行间距，字间距 */
0000fc  79a2              LDRB     r2,[r4,#6]
0000fe  2100              MOVS     r1,#0
000100  9802              LDR      r0,[sp,#8]
000102  f7fffffe          BL       RA8875_SetFont
;;;715    		RA8875_DispStr(_usX, _usY, _ptr);
000106  4632              MOV      r2,r6
000108  4638              MOV      r0,r7
00010a  992c              LDR      r1,[sp,#0xb0]
00010c  f7fffffe          BL       RA8875_DispStr
000110  e068              B        |L10.484|
                  |L10.274|
;;;716    	}
;;;717    	else	/* 使用CPU内部字库. 点阵信息由CPU读取 */
;;;718    	{
;;;719    		/* 开始循环处理字符 */
;;;720    		while (*_ptr != 0)
000112  e063              B        |L10.476|
                  |L10.276|
;;;721    		{
;;;722    			code1 = *_ptr;	/* 读取字符串数据， 该数据可能是ascii代码，也可能汉字代码的高字节 */
000114  7830              LDRB     r0,[r6,#0]
000116  902a              STR      r0,[sp,#0xa8]
;;;723    			if (code1 < 0x80)
000118  982a              LDR      r0,[sp,#0xa8]
00011a  2880              CMP      r0,#0x80
00011c  da0b              BGE      |L10.310|
;;;724    			{
;;;725    				/* 将ascii字符点阵复制到buf */
;;;726    				//memcpy(buf, &pAscDot[code1 * (font_bytes / 2)], (font_bytes / 2));
;;;727    				_LCD_ReadAsciiDot(code1, _tFont->FontCode, buf);	/* 读取ASCII字符点阵 */
00011e  7821              LDRB     r1,[r4,#0]
000120  aa09              ADD      r2,sp,#0x24
000122  982a              LDR      r0,[sp,#0xa8]
000124  f7fffffe          BL       _LCD_ReadAsciiDot
;;;728    				width = font_width / 2;
000128  4658              MOV      r0,r11
00012a  eb0b71d0          ADD      r1,r11,r0,LSR #31
00012e  f3c10147          UBFX     r1,r1,#1,#8
000132  9108              STR      r1,[sp,#0x20]
000134  e00e              B        |L10.340|
                  |L10.310|
;;;729    			}
;;;730    			else
;;;731    			{
;;;732    				code2 = *++_ptr;
000136  1c70              ADDS     r0,r6,#1
000138  4606              MOV      r6,r0
00013a  7800              LDRB     r0,[r0,#0]
00013c  9029              STR      r0,[sp,#0xa4]
;;;733    				if (code2 == 0)
00013e  9829              LDR      r0,[sp,#0xa4]
000140  b900              CBNZ     r0,|L10.324|
;;;734    				{
;;;735    					break;
000142  e04e              B        |L10.482|
                  |L10.324|
;;;736    				}
;;;737    				/* 读1个汉字的点阵 */
;;;738    				_LCD_ReadHZDot(code1, code2, _tFont->FontCode, buf);
000144  7822              LDRB     r2,[r4,#0]
000146  ab09              ADD      r3,sp,#0x24
000148  e9dd1029          LDRD     r1,r0,[sp,#0xa4]
00014c  f7fffffe          BL       _LCD_ReadHZDot
;;;739    				width = font_width;
000150  f8cdb020          STR      r11,[sp,#0x20]
                  |L10.340|
;;;740    			}
;;;741    	
;;;742    			y = _usY;
000154  982c              LDR      r0,[sp,#0xb0]
000156  9004              STR      r0,[sp,#0x10]
;;;743    			/* 开始刷LCD */
;;;744    			for (m = 0; m < font_height; m++)	/* 字符高度 */
000158  2000              MOVS     r0,#0
00015a  9007              STR      r0,[sp,#0x1c]
00015c  e034              B        |L10.456|
                  |L10.350|
;;;745    			{
;;;746    				x = _usX;
00015e  9705              STR      r7,[sp,#0x14]
;;;747    				for (i = 0; i < width; i++)	/* 字符宽度 */
000160  f04f0a00          MOV      r10,#0
000164  e025              B        |L10.434|
                  |L10.358|
;;;748    				{
;;;749    					if ((buf[m * ((2 * width) / font_width) + i / 8] & (0x80 >> (i % 8 ))) != 0x00)
000166  9808              LDR      r0,[sp,#0x20]
000168  0040              LSLS     r0,r0,#1
00016a  fb90f0fb          SDIV     r0,r0,r11
00016e  9907              LDR      r1,[sp,#0x1c]
000170  4348              MULS     r0,r1,r0
000172  eb0000da          ADD      r0,r0,r10,LSR #3
000176  a909              ADD      r1,sp,#0x24
000178  5c08              LDRB     r0,[r1,r0]
00017a  f00a0207          AND      r2,r10,#7
00017e  2180              MOVS     r1,#0x80
000180  4111              ASRS     r1,r1,r2
000182  4008              ANDS     r0,r0,r1
000184  b128              CBZ      r0,|L10.402|
;;;750    					{
;;;751    						LCD_PutPixel(x, y, _tFont->FrontColor);	/* 设置像素颜色为文字色 */
000186  8862              LDRH     r2,[r4,#2]
000188  e9dd1004          LDRD     r1,r0,[sp,#0x10]
00018c  f7fffffe          BL       LCD_PutPixel
000190  e009              B        |L10.422|
                  |L10.402|
;;;752    					}
;;;753    					else
;;;754    					{
;;;755    						if (_tFont->BackColor != CL_MASK)	/* 透明色 */
000192  88a0              LDRH     r0,[r4,#4]
000194  f6491199          MOV      r1,#0x9999
000198  4288              CMP      r0,r1
00019a  d004              BEQ      |L10.422|
;;;756    						{
;;;757    							LCD_PutPixel(x, y, _tFont->BackColor);	/* 设置像素颜色为文字背景色 */
00019c  88a2              LDRH     r2,[r4,#4]
00019e  e9dd1004          LDRD     r1,r0,[sp,#0x10]
0001a2  f7fffffe          BL       LCD_PutPixel
                  |L10.422|
;;;758    						}
;;;759    					}
;;;760    	
;;;761    					x++;
0001a6  9805              LDR      r0,[sp,#0x14]
0001a8  1c40              ADDS     r0,r0,#1
0001aa  b280              UXTH     r0,r0
0001ac  9005              STR      r0,[sp,#0x14]
0001ae  f10a0a01          ADD      r10,r10,#1            ;747
                  |L10.434|
0001b2  9808              LDR      r0,[sp,#0x20]         ;747
0001b4  4582              CMP      r10,r0                ;747
0001b6  d3d6              BCC      |L10.358|
;;;762    				}
;;;763    				y++;
0001b8  9804              LDR      r0,[sp,#0x10]
0001ba  1c40              ADDS     r0,r0,#1
0001bc  b280              UXTH     r0,r0
0001be  9004              STR      r0,[sp,#0x10]
0001c0  9807              LDR      r0,[sp,#0x1c]         ;744
0001c2  1c40              ADDS     r0,r0,#1              ;744
0001c4  b280              UXTH     r0,r0                 ;744
0001c6  9007              STR      r0,[sp,#0x1c]         ;744
                  |L10.456|
0001c8  e9dd1006          LDRD     r1,r0,[sp,#0x18]      ;744
0001cc  4288              CMP      r0,r1                 ;744
0001ce  dbc6              BLT      |L10.350|
;;;764    			}
;;;765    	
;;;766    			if (_tFont->Space > 0)
;;;767    			{
;;;768    				/* 如果文字底色按_tFont->usBackColor，并且字间距大于点阵的宽度，那么需要在文字之间填充(暂时未实现) */
;;;769    			}
;;;770    			_usX += width + _tFont->Space;	/* 列地址递增 */
0001d0  88e1              LDRH     r1,[r4,#6]
0001d2  9808              LDR      r0,[sp,#0x20]
0001d4  4408              ADD      r0,r0,r1
0001d6  4438              ADD      r0,r0,r7
0001d8  b287              UXTH     r7,r0
;;;771    			_ptr++;			/* 指向下一个字符 */
0001da  1c76              ADDS     r6,r6,#1
                  |L10.476|
0001dc  7830              LDRB     r0,[r6,#0]            ;720
0001de  2800              CMP      r0,#0                 ;720
0001e0  d198              BNE      |L10.276|
                  |L10.482|
0001e2  bf00              NOP                            ;735
                  |L10.484|
;;;772    		}
;;;773    	}
;;;774    }
0001e4  b02f              ADD      sp,sp,#0xbc
0001e6  e8bd8ff0          POP      {r4-r11,pc}
;;;775    
                          ENDP


                          AREA ||i.LCD_DrawBMP||, CODE, READONLY, ALIGN=2

                  LCD_DrawBMP PROC
;;;974    */
;;;975    void LCD_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;976    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;977    	if (g_ChipID == IC_8875)
00000e  4811              LDR      r0,|L11.84|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d107              BNE      |L11.38|
;;;978    	{
;;;979    		RA8875_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
000016  4643              MOV      r3,r8
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  9400              STR      r4,[sp,#0]
000020  f7fffffe          BL       RA8875_DrawBMP
000024  e014              B        |L11.80|
                  |L11.38|
;;;980    	}
;;;981    	else if (g_ChipID == IC_9488)
000026  480b              LDR      r0,|L11.84|
000028  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00002a  f2494188          MOV      r1,#0x9488
00002e  4288              CMP      r0,r1
000030  d107              BNE      |L11.66|
;;;982    	{
;;;983    		ILI9488_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
000032  4643              MOV      r3,r8
000034  463a              MOV      r2,r7
000036  4631              MOV      r1,r6
000038  4628              MOV      r0,r5
00003a  9400              STR      r4,[sp,#0]
00003c  f7fffffe          BL       ILI9488_DrawBMP
000040  e006              B        |L11.80|
                  |L11.66|
;;;984    	}
;;;985    	else
;;;986    	{
;;;987    		SPFD5420_DrawBMP(_usX, _usY, _usHeight, _usWidth, _ptr);
000042  4643              MOV      r3,r8
000044  463a              MOV      r2,r7
000046  4631              MOV      r1,r6
000048  4628              MOV      r0,r5
00004a  9400              STR      r4,[sp,#0]
00004c  f7fffffe          BL       SPFD5420_DrawBMP
                  |L11.80|
;;;988    	}
;;;989    }
000050  e8bd83f8          POP      {r3-r9,pc}
;;;990    
                          ENDP

                  |L11.84|
                          DCD      g_ChipID

                          AREA ||i.LCD_DrawBmp32||, CODE, READONLY, ALIGN=1

                  LCD_DrawBmp32 PROC
;;;1290   */
;;;1291   void LCD_DrawBmp32(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint8_t *_pBmp)
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1292   {
000004  b087              SUB      sp,sp,#0x1c
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
;;;1293   	const uint8_t *p;
;;;1294   	uint16_t usOldRGB, usNewRGB;
;;;1295   	int16_t x, y;		/* 用于记录窗口内的相对坐标 */
;;;1296   	uint8_t R1,G1,B1,A;	/* 新像素色彩分量 */
;;;1297   	uint8_t R0,G0,B0;	/* 旧像素色彩分量 */
;;;1298   
;;;1299   	p = (const uint8_t *)_pBmp;
00000a  9c14              LDR      r4,[sp,#0x50]
;;;1300   	p += 54;		/* 直接指向图像数据区 */
00000c  3436              ADDS     r4,r4,#0x36
;;;1301   
;;;1302   	/* 按照BMP位图次序，从左至右，从上至下扫描 */
;;;1303   	for (y = _usHeight - 1; y >= 0; y--)
00000e  9809              LDR      r0,[sp,#0x24]
000010  1e40              SUBS     r0,r0,#1
000012  b207              SXTH     r7,r0
000014  e081              B        |L12.282|
                  |L12.22|
;;;1304   	{
;;;1305   		for (x = 0; x < _usWidth; x++)
000016  2600              MOVS     r6,#0
000018  e07a              B        |L12.272|
                  |L12.26|
;;;1306   		{
;;;1307   			B1 = *p++;
00001a  f8140b01          LDRB     r0,[r4],#1
00001e  9004              STR      r0,[sp,#0x10]
;;;1308   			G1 = *p++;
000020  f8140b01          LDRB     r0,[r4],#1
000024  9005              STR      r0,[sp,#0x14]
;;;1309   			R1 = *p++;
000026  f814bb01          LDRB     r11,[r4],#1
;;;1310   			A = *p++;	/* Alpha 值(透明度)，0-255, 0表示透明，1表示不透明, 中间值表示透明度 */
00002a  f8145b01          LDRB     r5,[r4],#1
;;;1311   
;;;1312   			if (A == 0x00)	/* 需要透明,显示背景 */
00002e  2d00              CMP      r5,#0
000030  d06c              BEQ      |L12.268|
;;;1313   			{
;;;1314   				;	/* 不用刷新背景 */
;;;1315   			}
;;;1316   			else if (A == 0xFF)	/* 完全不透明， 显示新像素 */
000032  2dff              CMP      r5,#0xff
000034  d114              BNE      |L12.96|
;;;1317   			{
;;;1318   				usNewRGB = RGB(R1, G1, B1);
000036  ea4f00eb          ASR      r0,r11,#3
00003a  02c1              LSLS     r1,r0,#11
00003c  9805              LDR      r0,[sp,#0x14]
00003e  1080              ASRS     r0,r0,#2
000040  ea411140          ORR      r1,r1,r0,LSL #5
000044  9804              LDR      r0,[sp,#0x10]
000046  ea4100e0          ORR      r0,r1,r0,ASR #3
00004a  9006              STR      r0,[sp,#0x18]
;;;1319   				//if (_ucFocusMode == 1)
;;;1320   				//{
;;;1321   				//	usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
;;;1322   				//}
;;;1323   				LCD_PutPixel(x + _usX, y + _usY, usNewRGB);
00004c  eb070209          ADD      r2,r7,r9
000050  b291              UXTH     r1,r2
000052  eb060208          ADD      r2,r6,r8
000056  b290              UXTH     r0,r2
000058  9a06              LDR      r2,[sp,#0x18]
00005a  f7fffffe          BL       LCD_PutPixel
00005e  e055              B        |L12.268|
                  |L12.96|
;;;1324   			}
;;;1325   			else 	/* 半透明 */
;;;1326   			{
;;;1327   				/* 计算公式： 实际显示颜色 = 前景颜色 * Alpha / 255 + 背景颜色 * (255-Alpha) / 255 */
;;;1328   				usOldRGB = LCD_GetPixel(x + _usX, y + _usY);
000060  eb070209          ADD      r2,r7,r9
000064  b291              UXTH     r1,r2
000066  eb060208          ADD      r2,r6,r8
00006a  b290              UXTH     r0,r2
00006c  f7fffffe          BL       LCD_GetPixel
000070  4682              MOV      r10,r0
;;;1329   				R0 = RGB565_R(usOldRGB);
000072  20f8              MOVS     r0,#0xf8
000074  ea00202a          AND      r0,r0,r10,ASR #8
000078  9003              STR      r0,[sp,#0xc]
;;;1330   				G0 = RGB565_G(usOldRGB);
00007a  20fc              MOVS     r0,#0xfc
00007c  ea0000ea          AND      r0,r0,r10,ASR #3
000080  9002              STR      r0,[sp,#8]
;;;1331   				B0 = RGB565_B(usOldRGB);
000082  20f8              MOVS     r0,#0xf8
000084  ea0000ca          AND      r0,r0,r10,LSL #3
000088  9001              STR      r0,[sp,#4]
;;;1332   
;;;1333   				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
00008a  fb0bf005          MUL      r0,r11,r5
00008e  21ff              MOVS     r1,#0xff
000090  fb90f2f1          SDIV     r2,r0,r1
000094  f1c501ff          RSB      r1,r5,#0xff
000098  9803              LDR      r0,[sp,#0xc]
00009a  4341              MULS     r1,r0,r1
00009c  20ff              MOVS     r0,#0xff
00009e  fb91f0f0          SDIV     r0,r1,r0
0000a2  4410              ADD      r0,r0,r2
0000a4  f0000bff          AND      r11,r0,#0xff
;;;1334   				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
0000a8  9805              LDR      r0,[sp,#0x14]
0000aa  4368              MULS     r0,r5,r0
0000ac  21ff              MOVS     r1,#0xff
0000ae  fb90f2f1          SDIV     r2,r0,r1
0000b2  f1c501ff          RSB      r1,r5,#0xff
0000b6  9802              LDR      r0,[sp,#8]
0000b8  4341              MULS     r1,r0,r1
0000ba  20ff              MOVS     r0,#0xff
0000bc  fb91f0f0          SDIV     r0,r1,r0
0000c0  4410              ADD      r0,r0,r2
0000c2  b2c0              UXTB     r0,r0
0000c4  9005              STR      r0,[sp,#0x14]
;;;1335   				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
0000c6  9804              LDR      r0,[sp,#0x10]
0000c8  4368              MULS     r0,r5,r0
0000ca  21ff              MOVS     r1,#0xff
0000cc  fb90f2f1          SDIV     r2,r0,r1
0000d0  f1c501ff          RSB      r1,r5,#0xff
0000d4  9801              LDR      r0,[sp,#4]
0000d6  4341              MULS     r1,r0,r1
0000d8  20ff              MOVS     r0,#0xff
0000da  fb91f0f0          SDIV     r0,r1,r0
0000de  4410              ADD      r0,r0,r2
0000e0  b2c0              UXTB     r0,r0
0000e2  9004              STR      r0,[sp,#0x10]
;;;1336   				usNewRGB = RGB(R1, G1, B1);
0000e4  ea4f00eb          ASR      r0,r11,#3
0000e8  02c1              LSLS     r1,r0,#11
0000ea  9805              LDR      r0,[sp,#0x14]
0000ec  1080              ASRS     r0,r0,#2
0000ee  ea411140          ORR      r1,r1,r0,LSL #5
0000f2  9804              LDR      r0,[sp,#0x10]
0000f4  ea4100e0          ORR      r0,r1,r0,ASR #3
0000f8  9006              STR      r0,[sp,#0x18]
;;;1337   				//if (_ucFocusMode == 1)
;;;1338   				//{
;;;1339   				//	usNewRGB = Blend565(usNewRGB, CL_YELLOW, 10);
;;;1340   				//}
;;;1341   				LCD_PutPixel(x + _usX, y + _usY, usNewRGB);
0000fa  eb070209          ADD      r2,r7,r9
0000fe  b291              UXTH     r1,r2
000100  eb060208          ADD      r2,r6,r8
000104  b290              UXTH     r0,r2
000106  9a06              LDR      r2,[sp,#0x18]
000108  f7fffffe          BL       LCD_PutPixel
                  |L12.268|
00010c  1c70              ADDS     r0,r6,#1              ;1305
00010e  b206              SXTH     r6,r0                 ;1305
                  |L12.272|
000110  980a              LDR      r0,[sp,#0x28]         ;1305
000112  4286              CMP      r6,r0                 ;1305
000114  db81              BLT      |L12.26|
000116  1e78              SUBS     r0,r7,#1              ;1303
000118  b207              SXTH     r7,r0                 ;1303
                  |L12.282|
00011a  2f00              CMP      r7,#0                 ;1303
00011c  f6bfaf7b          BGE      |L12.22|
;;;1342   			}
;;;1343   		}
;;;1344   	}
;;;1345   }
000120  b00b              ADD      sp,sp,#0x2c
000122  e8bd8ff0          POP      {r4-r11,pc}
;;;1346   
                          ENDP


                          AREA ||i.LCD_DrawButton||, CODE, READONLY, ALIGN=1

                  LCD_DrawButton PROC
;;;1539   */
;;;1540   void LCD_DrawButton(BUTTON_T *_pBtn)
000000  e92d41ff          PUSH     {r0-r8,lr}
;;;1541   {
000004  4604              MOV      r4,r0
;;;1542   #if 1
;;;1543   	uint16_t x, y, h;
;;;1544   	FONT_T font;	/* 按钮激活时，需要更改字体设置，因此需要一个变量来保存 */
;;;1545   
;;;1546   	font.FontCode = _pBtn->Font->FontCode;
000006  68e0              LDR      r0,[r4,#0xc]
000008  7800              LDRB     r0,[r0,#0]
00000a  f88d0008          STRB     r0,[sp,#8]
;;;1547   	font.FrontColor = _pBtn->Font->FrontColor;
00000e  68e0              LDR      r0,[r4,#0xc]
000010  8840              LDRH     r0,[r0,#2]
000012  f8ad000a          STRH     r0,[sp,#0xa]
;;;1548   	font.BackColor = _pBtn->Font->BackColor;
000016  68e0              LDR      r0,[r4,#0xc]
000018  8880              LDRH     r0,[r0,#4]
00001a  f8ad000c          STRH     r0,[sp,#0xc]
;;;1549   	font.Space = _pBtn->Font->Space;	
00001e  68e0              LDR      r0,[r4,#0xc]
000020  88c0              LDRH     r0,[r0,#6]
000022  f8ad000e          STRH     r0,[sp,#0xe]
;;;1550   			
;;;1551   	if (_pBtn->Focus == 1)
000026  7d20              LDRB     r0,[r4,#0x14]
000028  2801              CMP      r0,#1
00002a  d104              BNE      |L13.54|
;;;1552   	{
;;;1553   		font.BackColor = BUTTON_ACTIVE_COLOR;
00002c  f64770ff          MOV      r0,#0x7fff
000030  f8ad000c          STRH     r0,[sp,#0xc]
000034  e003              B        |L13.62|
                  |L13.54|
;;;1554   	}
;;;1555   	else
;;;1556   	{
;;;1557   		/* 按钮的背景色统一管理，不能单独指定 */
;;;1558   		font.BackColor = BUTTON_BACK_COLOR;
000036  f64c6059          MOV      r0,#0xce59
00003a  f8ad000c          STRH     r0,[sp,#0xc]
                  |L13.62|
;;;1559   	}
;;;1560   	
;;;1561   	/* 仿XP风格，平面编辑框 */
;;;1562   	LCD_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
00003e  2010              MOVS     r0,#0x10
000040  9000              STR      r0,[sp,#0]
000042  8923              LDRH     r3,[r4,#8]
000044  88e2              LDRH     r2,[r4,#6]
000046  88a1              LDRH     r1,[r4,#4]
000048  8860              LDRH     r0,[r4,#2]
00004a  f7fffffe          BL       LCD_DrawRect
;;;1563   	LCD_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
00004e  f64f70ff          MOV      r0,#0xffff
000052  9000              STR      r0,[sp,#0]
000054  f8b4c008          LDRH     r12,[r4,#8]
000058  f1ac0c02          SUB      r12,r12,#2
00005c  fa1ff38c          UXTH     r3,r12
000060  f8b4c006          LDRH     r12,[r4,#6]
000064  f1ac0c02          SUB      r12,r12,#2
000068  fa1ff28c          UXTH     r2,r12
00006c  f8b4c004          LDRH     r12,[r4,#4]
000070  f10c0c01          ADD      r12,r12,#1
000074  fa1ff18c          UXTH     r1,r12
000078  f8b4c002          LDRH     r12,[r4,#2]
00007c  f10c0c01          ADD      r12,r12,#1
000080  fa1ff08c          UXTH     r0,r12
000084  f7fffffe          BL       LCD_DrawRect
;;;1564   	LCD_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
000088  f24940b2          MOV      r0,#0x94b2
00008c  9000              STR      r0,[sp,#0]
00008e  f8b4c008          LDRH     r12,[r4,#8]
000092  f1ac0c04          SUB      r12,r12,#4
000096  fa1ff38c          UXTH     r3,r12
00009a  f8b4c006          LDRH     r12,[r4,#6]
00009e  f1ac0c04          SUB      r12,r12,#4
0000a2  fa1ff28c          UXTH     r2,r12
0000a6  f8b4c004          LDRH     r12,[r4,#4]
0000aa  f10c0c02          ADD      r12,r12,#2
0000ae  fa1ff18c          UXTH     r1,r12
0000b2  f8b4c002          LDRH     r12,[r4,#2]
0000b6  f10c0c02          ADD      r12,r12,#2
0000ba  fa1ff08c          UXTH     r0,r12
0000be  f7fffffe          BL       LCD_DrawRect
;;;1565   
;;;1566   	h =  LCD_GetFontHeight(&font);
0000c2  a802              ADD      r0,sp,#8
0000c4  f7fffffe          BL       LCD_GetFontHeight
0000c8  4605              MOV      r5,r0
;;;1567   	x = _pBtn->Left + 3;
0000ca  8860              LDRH     r0,[r4,#2]
0000cc  1cc0              ADDS     r0,r0,#3
0000ce  b286              UXTH     r6,r0
;;;1568   	y = _pBtn->Top + _pBtn->Height / 2 - h / 2;		
0000d0  88e0              LDRH     r0,[r4,#6]
0000d2  eb0072d0          ADD      r2,r0,r0,LSR #31
0000d6  88a3              LDRH     r3,[r4,#4]
0000d8  eb030262          ADD      r2,r3,r2,ASR #1
0000dc  4629              MOV      r1,r5
0000de  eb0573d1          ADD      r3,r5,r1,LSR #31
0000e2  eba20263          SUB      r2,r2,r3,ASR #1
0000e6  b297              UXTH     r7,r2
;;;1569   	
;;;1570   	LCD_Fill_Rect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, font.BackColor);	/* 选中后的底色 */
0000e8  f8bd000c          LDRH     r0,[sp,#0xc]
0000ec  9000              STR      r0,[sp,#0]
0000ee  f8b4c008          LDRH     r12,[r4,#8]
0000f2  f1ac0c06          SUB      r12,r12,#6
0000f6  fa1ff38c          UXTH     r3,r12
0000fa  f8b4c006          LDRH     r12,[r4,#6]
0000fe  f1ac0c06          SUB      r12,r12,#6
000102  fa1ff28c          UXTH     r2,r12
000106  f8b4c004          LDRH     r12,[r4,#4]
00010a  f10c0c03          ADD      r12,r12,#3
00010e  fa1ff18c          UXTH     r1,r12
000112  f8b4c002          LDRH     r12,[r4,#2]
000116  f10c0c03          ADD      r12,r12,#3
00011a  fa1ff08c          UXTH     r0,r12
00011e  f7fffffe          BL       LCD_Fill_Rect
;;;1571   	LCD_DispStrEx(x, y, _pBtn->pCaption, &font, _pBtn->Width - 6, ALIGN_CENTER);	/* 水平居中 */		
000122  2101              MOVS     r1,#1
000124  8920              LDRH     r0,[r4,#8]
000126  1f80              SUBS     r0,r0,#6
000128  b280              UXTH     r0,r0
00012a  e9cd0100          STRD     r0,r1,[sp,#0]
00012e  ab02              ADD      r3,sp,#8
000130  4639              MOV      r1,r7
000132  4630              MOV      r0,r6
000134  6922              LDR      r2,[r4,#0x10]
000136  f7fffffe          BL       LCD_DispStrEx
;;;1572   
;;;1573   #else
;;;1574   	if (g_ChipID == IC_8875)
;;;1575   	{
;;;1576   		uint16_t len, x, y;
;;;1577   
;;;1578   		if (_pBtn->Focus == 1)
;;;1579   		{
;;;1580   			/* 仿XP风格，平面编辑框 */
;;;1581   			RA8875_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
;;;1582   			RA8875_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
;;;1583   			RA8875_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
;;;1584   
;;;1585   			RA8875_FillRect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_ACTIVE_COLOR);
;;;1586   
;;;1587   			RA8875_SetBackColor(BUTTON_ACTIVE_COLOR);
;;;1588   		}
;;;1589   		else
;;;1590   		{
;;;1591   			/* 仿XP风格，平面编辑框 */
;;;1592   			RA8875_DrawRect(_pBtn->Left, _pBtn->Top, _pBtn->Height, _pBtn->Width, BUTTON_BORDER_COLOR);
;;;1593   			RA8875_DrawRect(_pBtn->Left + 1, _pBtn->Top + 1, _pBtn->Height - 2, _pBtn->Width - 2, BUTTON_BORDER1_COLOR);
;;;1594   			RA8875_DrawRect(_pBtn->Left + 2, _pBtn->Top + 2, _pBtn->Height - 4, _pBtn->Width - 4, BUTTON_BORDER2_COLOR);
;;;1595   
;;;1596   			RA8875_FillRect(_pBtn->Left + 3, _pBtn->Top + 3, _pBtn->Height - 6, _pBtn->Width - 6, BUTTON_BACK_COLOR);
;;;1597   
;;;1598   			RA8875_SetBackColor(BUTTON_BACK_COLOR);
;;;1599   		}
;;;1600   
;;;1601   		#if 1	/* 按钮文字字体和颜色固定 */
;;;1602   			if (strcmp(_pBtn->Caption, "←") == 0)	/* 退格键特殊处理 */
;;;1603   			{
;;;1604   				/* 退格键符号是单像素笔画，太细了不协调，因此特殊处理 */
;;;1605   				RA8875_SetFont(RA_FONT_16, 0, 0);
;;;1606   				RA8875_SetFrontColor(CL_BLACK);
;;;1607   				RA8875_SetTextZoom(RA_SIZE_X2, RA_SIZE_X2);	/* 放大2倍 */
;;;1608   			}
;;;1609   			else
;;;1610   			{
;;;1611   				RA8875_SetFont(RA_FONT_16, 0, 0);
;;;1612   				RA8875_SetFrontColor(CL_BLACK);
;;;1613   				RA8875_SetTextZoom(RA_SIZE_X1, RA_SIZE_X1);	/* 放大1倍 */
;;;1614   			}
;;;1615   		#else	/* 按钮文字字体和颜色有应用程序指定 */
;;;1616   			RA8875_SetFont(_pBtn->Font.FontCode, 0, 0);
;;;1617   			RA8875_SetFrontColor(_pBtn->Font.FrontColor);
;;;1618   		#endif
;;;1619   
;;;1620   		/* 文字居中 */
;;;1621   		len = strlen(_pBtn->Caption);
;;;1622   
;;;1623   		/* 此处统计不等宽字符有问题。暂时特殊处理下 */
;;;1624   		if (len != 3)
;;;1625   		{
;;;1626   			x = _pBtn->Left + (_pBtn->Width - len * 16) / 2;
;;;1627   		}
;;;1628   		else
;;;1629   		{
;;;1630   			x = _pBtn->Left + (_pBtn->Width - len * 20) / 2;
;;;1631   		}
;;;1632   
;;;1633   		/* 对特殊字符特殊处理 */
;;;1634   		if ((len == 1) && (_pBtn->Caption[0] == '.'))
;;;1635   		{
;;;1636   			y = _pBtn->Top + 3;
;;;1637   			x += 3;
;;;1638   		}
;;;1639   		else
;;;1640   		{
;;;1641   			y = _pBtn->Top + 3;
;;;1642   		}
;;;1643   
;;;1644   		RA8875_DispStr(x, y, _pBtn->Caption);
;;;1645   
;;;1646   		RA8875_SetTextZoom(RA_SIZE_X1, RA_SIZE_X1);	/* 还原放大1倍 */
;;;1647   	}
;;;1648   #endif
;;;1649   }
00013a  e8bd81ff          POP      {r0-r8,pc}
;;;1650   
                          ENDP


                          AREA ||i.LCD_DrawCheckBox||, CODE, READONLY, ALIGN=2

                  LCD_DrawCheckBox PROC
;;;1406   */
;;;1407   void LCD_DrawCheckBox(CHECK_T *_pCheckBox)
000000  b57c              PUSH     {r2-r6,lr}
;;;1408   {
000002  4604              MOV      r4,r0
;;;1409   #if 1
;;;1410   	uint16_t x, y;
;;;1411   
;;;1412   	/* 目前只做了16点阵汉字的大小 */
;;;1413   
;;;1414   	/* 绘制外框 */
;;;1415   	x = _pCheckBox->Left;
000004  8865              LDRH     r5,[r4,#2]
;;;1416   	LCD_DrawRect(x, _pCheckBox->Top, CHECK_BOX_H, CHECK_BOX_W, CHECK_BOX_BORDER_COLOR);
000006  2010              MOVS     r0,#0x10
000008  9000              STR      r0,[sp,#0]
00000a  88a1              LDRH     r1,[r4,#4]
00000c  2318              MOVS     r3,#0x18
00000e  461a              MOV      r2,r3
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       LCD_DrawRect
;;;1417   	LCD_DrawRect(x + 1, _pCheckBox->Top + 1, CHECK_BOX_H - 2, CHECK_BOX_W - 2, CHECK_BOX_BORDER_COLOR);
000016  2010              MOVS     r0,#0x10
000018  9000              STR      r0,[sp,#0]
00001a  88a2              LDRH     r2,[r4,#4]
00001c  1c52              ADDS     r2,r2,#1
00001e  b291              UXTH     r1,r2
000020  1c6a              ADDS     r2,r5,#1
000022  b290              UXTH     r0,r2
000024  2316              MOVS     r3,#0x16
000026  461a              MOV      r2,r3
000028  f7fffffe          BL       LCD_DrawRect
;;;1418   	LCD_Fill_Rect(x + 2, _pCheckBox->Top + 2, CHECK_BOX_H - 4, CHECK_BOX_W - 4, CHECK_BOX_BACK_COLOR);
00002c  f64c6059          MOV      r0,#0xce59
000030  9000              STR      r0,[sp,#0]
000032  88a2              LDRH     r2,[r4,#4]
000034  1c92              ADDS     r2,r2,#2
000036  b291              UXTH     r1,r2
000038  1caa              ADDS     r2,r5,#2
00003a  b290              UXTH     r0,r2
00003c  2314              MOVS     r3,#0x14
00003e  461a              MOV      r2,r3
000040  f7fffffe          BL       LCD_Fill_Rect
;;;1419   
;;;1420   	/* 绘制文本标签 */
;;;1421   	x = _pCheckBox->Left + CHECK_BOX_W + 2;
000044  8860              LDRH     r0,[r4,#2]
000046  301a              ADDS     r0,r0,#0x1a
000048  b285              UXTH     r5,r0
;;;1422   	y = _pCheckBox->Top + CHECK_BOX_H / 2 - 8;
00004a  88a0              LDRH     r0,[r4,#4]
00004c  1d00              ADDS     r0,r0,#4
00004e  b286              UXTH     r6,r0
;;;1423   	LCD_DispStr(x, y, _pCheckBox->pCaption, _pCheckBox->Font);
000050  4631              MOV      r1,r6
000052  4628              MOV      r0,r5
000054  e9d43203          LDRD     r3,r2,[r4,#0xc]
000058  f7fffffe          BL       LCD_DispStr
;;;1424   
;;;1425   	if (_pCheckBox->Checked)
00005c  7d20              LDRB     r0,[r4,#0x14]
00005e  b1c0              CBZ      r0,|L14.146|
;;;1426   	{
;;;1427   		FONT_T font;
;;;1428   
;;;1429   	    font.FontCode = FC_ST_16;
000060  2001              MOVS     r0,#1
000062  f88d0000          STRB     r0,[sp,#0]
;;;1430   		font.BackColor = CL_MASK;
000066  f6491099          MOV      r0,#0x9999
00006a  f8ad0004          STRH     r0,[sp,#4]
;;;1431   		font.FrontColor = CHECK_BOX_CHECKED_COLOR;	/* 钩的颜色 */
00006e  f44f4078          MOV      r0,#0xf800
000072  f8ad0002          STRH     r0,[sp,#2]
;;;1432   		font.Space = 0;
000076  2000              MOVS     r0,#0
000078  f8ad0006          STRH     r0,[sp,#6]
;;;1433   		x = _pCheckBox->Left;
00007c  8865              LDRH     r5,[r4,#2]
;;;1434   		LCD_DispStr(x + 3, _pCheckBox->Top + 3, "√", &font);
00007e  88a2              LDRH     r2,[r4,#4]
000080  1cd2              ADDS     r2,r2,#3
000082  b291              UXTH     r1,r2
000084  1cea              ADDS     r2,r5,#3
000086  b290              UXTH     r0,r2
000088  466b              MOV      r3,sp
00008a  a202              ADR      r2,|L14.148|
00008c  f7fffffe          BL       LCD_DispStr
;;;1435   	}
000090  bf00              NOP      
                  |L14.146|
;;;1436   #else
;;;1437   	if (g_ChipID == IC_8875)
;;;1438   	{
;;;1439   		uint16_t x;
;;;1440   
;;;1441   		RA8875_SetFont(_pCheckBox->Font.FontCode, 0, 0);	/* 设置32点阵字体，行间距=0，字间距=0 */
;;;1442   
;;;1443   		/* 绘制标签 */
;;;1444   		//RA8875_SetBackColor(_pCheckBox->Font.BackColor);
;;;1445   		RA8875_SetBackColor(WIN_BODY_COLOR);
;;;1446   		RA8875_SetFrontColor(_pCheckBox->Font.FrontColor);
;;;1447   		RA8875_DispStr(_pCheckBox->Left, _pCheckBox->Top, _pCheckBox->Caption);
;;;1448   
;;;1449   		/* 绘制外框 */
;;;1450   		x = _pCheckBox->Left + _pCheckBox->Width - CHECK_BOX_W;
;;;1451   		RA8875_DrawRect(x, _pCheckBox->Top, CHECK_BOX_H, CHECK_BOX_W, CHECK_BOX_BORDER_COLOR);
;;;1452   		RA8875_DrawRect(x + 1, _pCheckBox->Top + 1, CHECK_BOX_H - 2, CHECK_BOX_W - 2, CHECK_BOX_BORDER_COLOR);
;;;1453   		RA8875_FillRect(x + 2, _pCheckBox->Top + 2, CHECK_BOX_H - 4, CHECK_BOX_W - 4, CHECK_BOX_BACK_COLOR);
;;;1454   
;;;1455   		if (_pCheckBox->Checked)
;;;1456   		{
;;;1457   			RA8875_SetBackColor(CHECK_BOX_BACK_COLOR);
;;;1458   			RA8875_SetFrontColor(CL_RED);
;;;1459   			RA8875_DispStr(x + 3, _pCheckBox->Top + 3, "√");
;;;1460   		}
;;;1461   	}
;;;1462   	else
;;;1463   	{
;;;1464   
;;;1465   	}
;;;1466   #endif
;;;1467   
;;;1468   }
000092  bd7c              POP      {r2-r6,pc}
;;;1469   
                          ENDP

                  |L14.148|
000094  a1cc00            DCB      161,204,0
000097  00                DCB      0

                          AREA ||i.LCD_DrawCircle||, CODE, READONLY, ALIGN=2

                  LCD_DrawCircle PROC
;;;946    */
;;;947    void LCD_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;948    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;949    	if (g_ChipID == IC_8875)
00000c  480f              LDR      r0,|L15.76|
00000e  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000010  2875              CMP      r0,#0x75
000012  d106              BNE      |L15.34|
;;;950    	{
;;;951    		RA8875_DrawCircle(_usX, _usY, _usRadius, _usColor);
000014  463b              MOV      r3,r7
000016  4632              MOV      r2,r6
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       RA8875_DrawCircle
000020  e012              B        |L15.72|
                  |L15.34|
;;;952    	}
;;;953    	else if (g_ChipID == IC_9488)
000022  480a              LDR      r0,|L15.76|
000024  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000026  f2494188          MOV      r1,#0x9488
00002a  4288              CMP      r0,r1
00002c  d106              BNE      |L15.60|
;;;954    	{
;;;955    		ILI9488_DrawCircle(_usX, _usY, _usRadius, _usColor);
00002e  463b              MOV      r3,r7
000030  4632              MOV      r2,r6
000032  4629              MOV      r1,r5
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       ILI9488_DrawCircle
00003a  e005              B        |L15.72|
                  |L15.60|
;;;956    	}
;;;957    	else
;;;958    	{
;;;959    		SPFD5420_DrawCircle(_usX, _usY, _usRadius, _usColor);
00003c  463b              MOV      r3,r7
00003e  4632              MOV      r2,r6
000040  4629              MOV      r1,r5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       SPFD5420_DrawCircle
                  |L15.72|
;;;960    	}
;;;961    }
000048  e8bd81f0          POP      {r4-r8,pc}
;;;962    
                          ENDP

                  |L15.76|
                          DCD      g_ChipID

                          AREA ||i.LCD_DrawEdit||, CODE, READONLY, ALIGN=1

                  LCD_DrawEdit PROC
;;;1477   */
;;;1478   void LCD_DrawEdit(EDIT_T *_pEdit)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1479   {
000004  4604              MOV      r4,r0
;;;1480   #if 1
;;;1481   	uint16_t len, x, y;
;;;1482   	uint8_t width;
;;;1483   
;;;1484   	/* 仿XP风格，平面编辑框 */
;;;1485   	LCD_DrawRect(_pEdit->Left, _pEdit->Top, _pEdit->Height, _pEdit->Width, EDIT_BORDER_COLOR);
000006  2010              MOVS     r0,#0x10
000008  9000              STR      r0,[sp,#0]
00000a  8923              LDRH     r3,[r4,#8]
00000c  88e2              LDRH     r2,[r4,#6]
00000e  88a1              LDRH     r1,[r4,#4]
000010  8860              LDRH     r0,[r4,#2]
000012  f7fffffe          BL       LCD_DrawRect
;;;1486   	LCD_Fill_Rect(_pEdit->Left + 1, _pEdit->Top + 1, _pEdit->Height - 2, _pEdit->Width - 2, EDIT_BACK_COLOR);
000016  f64f70ff          MOV      r0,#0xffff
00001a  9000              STR      r0,[sp,#0]
00001c  f8b4c008          LDRH     r12,[r4,#8]
000020  f1ac0c02          SUB      r12,r12,#2
000024  fa1ff38c          UXTH     r3,r12
000028  f8b4c006          LDRH     r12,[r4,#6]
00002c  f1ac0c02          SUB      r12,r12,#2
000030  fa1ff28c          UXTH     r2,r12
000034  f8b4c004          LDRH     r12,[r4,#4]
000038  f10c0c01          ADD      r12,r12,#1
00003c  fa1ff18c          UXTH     r1,r12
000040  f8b4c002          LDRH     r12,[r4,#2]
000044  f10c0c01          ADD      r12,r12,#1
000048  fa1ff08c          UXTH     r0,r12
00004c  f7fffffe          BL       LCD_Fill_Rect
;;;1487   
;;;1488   	/* 文字居中 */
;;;1489   	if (_pEdit->Font->FontCode == FC_ST_12)
000050  68e0              LDR      r0,[r4,#0xc]
000052  7800              LDRB     r0,[r0,#0]
000054  b908              CBNZ     r0,|L16.90|
;;;1490   	{
;;;1491   		width = 6;
000056  2506              MOVS     r5,#6
000058  e000              B        |L16.92|
                  |L16.90|
;;;1492   	}
;;;1493   	else
;;;1494   	{
;;;1495   		width = 8;
00005a  2508              MOVS     r5,#8
                  |L16.92|
;;;1496   	}
;;;1497   	len = strlen(_pEdit->pCaption);
00005c  6920              LDR      r0,[r4,#0x10]
00005e  f7fffffe          BL       strlen
000062  b286              UXTH     r6,r0
;;;1498   	x = _pEdit->Left +  (_pEdit->Width - len * width) / 2;
000064  8921              LDRH     r1,[r4,#8]
000066  fb061015          MLS      r0,r6,r5,r1
00006a  eb0071d0          ADD      r1,r0,r0,LSR #31
00006e  8862              LDRH     r2,[r4,#2]
000070  eb020161          ADD      r1,r2,r1,ASR #1
000074  b28f              UXTH     r7,r1
;;;1499   	y = _pEdit->Top + _pEdit->Height / 2 - width;
000076  88e0              LDRH     r0,[r4,#6]
000078  eb0071d0          ADD      r1,r0,r0,LSR #31
00007c  88a2              LDRH     r2,[r4,#4]
00007e  eb020161          ADD      r1,r2,r1,ASR #1
000082  1b49              SUBS     r1,r1,r5
000084  fa1ff881          UXTH     r8,r1
;;;1500   
;;;1501   	LCD_DispStr(x, y, _pEdit->pCaption, _pEdit->Font);
000088  4641              MOV      r1,r8
00008a  4638              MOV      r0,r7
00008c  e9d43203          LDRD     r3,r2,[r4,#0xc]
000090  f7fffffe          BL       LCD_DispStr
;;;1502   #else
;;;1503   	if (g_ChipID == IC_8875)
;;;1504   	{
;;;1505   		uint16_t len, x;
;;;1506   
;;;1507   		/* 仿XP风格，平面编辑框 */
;;;1508   		RA8875_DrawRect(_pEdit->Left, _pEdit->Top, _pEdit->Height, _pEdit->Width, EDIT_BORDER_COLOR);
;;;1509   		RA8875_FillRect(_pEdit->Left + 1, _pEdit->Top + 1, _pEdit->Height - 2, _pEdit->Width - 2, EDIT_BACK_COLOR);
;;;1510   
;;;1511   		RA8875_SetFont(_pEdit->Font.FontCode, 0, 0);	/* 设置32点阵字体，行间距=0，字间距=0 */
;;;1512   		RA8875_SetFrontColor(_pEdit->Font.FrontColor);
;;;1513   		RA8875_SetBackColor(EDIT_BACK_COLOR);
;;;1514   
;;;1515   		/* 文字居中 */
;;;1516   		len = strlen(_pEdit->Caption);
;;;1517   		x = (_pEdit->Width - len * 16) / 2;
;;;1518   
;;;1519   		RA8875_DispStr(_pEdit->Left + x, _pEdit->Top + 3, _pEdit->Caption);
;;;1520   	}
;;;1521   	else
;;;1522   	{
;;;1523   		//SPFD5420_DrawCircle(_usX, _usY, _usRadius, _usColor);
;;;1524   	}
;;;1525   #endif
;;;1526   }
000094  e8bd83f8          POP      {r3-r9,pc}
;;;1527   
                          ENDP


                          AREA ||i.LCD_DrawGroupBox||, CODE, READONLY, ALIGN=1

                  LCD_DrawGroupBox PROC
;;;1658   */
;;;1659   void LCD_DrawGroupBox(GROUP_T *_pBox)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1660   {
000002  4604              MOV      r4,r0
;;;1661   	uint16_t x, y;
;;;1662   
;;;1663   	/* 画阴影线 */
;;;1664   	LCD_DrawRect(_pBox->Left + 1, _pBox->Top + 5, _pBox->Height, _pBox->Width - 1, CL_BOX_BORDER2);
000004  f64f70ff          MOV      r0,#0xffff
000008  9000              STR      r0,[sp,#0]
00000a  8927              LDRH     r7,[r4,#8]
00000c  1e7f              SUBS     r7,r7,#1
00000e  b2bb              UXTH     r3,r7
000010  88e2              LDRH     r2,[r4,#6]
000012  88a7              LDRH     r7,[r4,#4]
000014  1d7f              ADDS     r7,r7,#5
000016  b2b9              UXTH     r1,r7
000018  8867              LDRH     r7,[r4,#2]
00001a  1c7f              ADDS     r7,r7,#1
00001c  b2b8              UXTH     r0,r7
00001e  f7fffffe          BL       LCD_DrawRect
;;;1665   
;;;1666   	/* 画主框线 */
;;;1667   	LCD_DrawRect(_pBox->Left, _pBox->Top + 4, _pBox->Height, _pBox->Width - 1, CL_BOX_BORDER1);
000022  f64a5053          MOV      r0,#0xad53
000026  9000              STR      r0,[sp,#0]
000028  8927              LDRH     r7,[r4,#8]
00002a  1e7f              SUBS     r7,r7,#1
00002c  b2bb              UXTH     r3,r7
00002e  88e2              LDRH     r2,[r4,#6]
000030  88a7              LDRH     r7,[r4,#4]
000032  1d3f              ADDS     r7,r7,#4
000034  b2b9              UXTH     r1,r7
000036  8860              LDRH     r0,[r4,#2]
000038  f7fffffe          BL       LCD_DrawRect
;;;1668   
;;;1669   	/* 显示分组框标题（文字在左上角） */
;;;1670   	x = _pBox->Left + 9;
00003c  8860              LDRH     r0,[r4,#2]
00003e  3009              ADDS     r0,r0,#9
000040  b285              UXTH     r5,r0
;;;1671   	y = _pBox->Top;
000042  88a6              LDRH     r6,[r4,#4]
;;;1672   	LCD_DispStr(x, y, _pBox->pCaption, _pBox->Font);
000044  4631              MOV      r1,r6
000046  4628              MOV      r0,r5
000048  e9d43203          LDRD     r3,r2,[r4,#0xc]
00004c  f7fffffe          BL       LCD_DispStr
;;;1673   }
000050  bdf8              POP      {r3-r7,pc}
;;;1674   
                          ENDP


                          AREA ||i.LCD_DrawIcon||, CODE, READONLY, ALIGN=1

                  LCD_DrawIcon PROC
;;;1059   */
;;;1060   void LCD_DrawIcon(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1061   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;1062   	const uint16_t *p;
;;;1063   	uint16_t usNewRGB;
;;;1064   	uint16_t x, y;		/* 用于记录窗口内的相对坐标 */
;;;1065   
;;;1066   	p = _tIcon->pBmp;
000008  f8d4a00c          LDR      r10,[r4,#0xc]
;;;1067   	for (y = 0; y < _tIcon->Height; y++)
00000c  2600              MOVS     r6,#0
00000e  e0ad              B        |L18.364|
                  |L18.16|
;;;1068   	{
;;;1069   		for (x = 0; x < _tIcon->Width; x++)
000010  2500              MOVS     r5,#0
000012  e0a5              B        |L18.352|
                  |L18.20|
;;;1070   		{
;;;1071   			usNewRGB = *p++;	/* 读取图标的颜色值后指针加1 */
000014  f83a8b02          LDRH     r8,[r10],#2
;;;1072   			/* 将图标的4个直角切割为弧角，弧角外是背景图标 */
;;;1073   			if ((y == 0 && (x < 6 || x > _tIcon->Width - 7)) ||
000018  b92e              CBNZ     r6,|L18.38|
00001a  2d06              CMP      r5,#6
                  |L18.28|
00001c  db77              BLT      |L18.270|
00001e  8920              LDRH     r0,[r4,#8]
000020  1fc0              SUBS     r0,r0,#7
000022  42a8              CMP      r0,r5
000024  dbfa              BLT      |L18.28|
                  |L18.38|
;;;1074   				(y == 1 && (x < 4 || x > _tIcon->Width - 5)) ||
000026  2e01              CMP      r6,#1
000028  d105              BNE      |L18.54|
00002a  2d04              CMP      r5,#4
00002c  dbf6              BLT      |L18.28|
00002e  8920              LDRH     r0,[r4,#8]
000030  1f40              SUBS     r0,r0,#5
000032  42a8              CMP      r0,r5
000034  dbf2              BLT      |L18.28|
                  |L18.54|
;;;1075   				(y == 2 && (x < 3 || x > _tIcon->Width - 4)) ||
000036  2e02              CMP      r6,#2
000038  d105              BNE      |L18.70|
00003a  2d03              CMP      r5,#3
00003c  dbee              BLT      |L18.28|
00003e  8920              LDRH     r0,[r4,#8]
000040  1f00              SUBS     r0,r0,#4
000042  42a8              CMP      r0,r5
000044  dbea              BLT      |L18.28|
                  |L18.70|
;;;1076   				(y == 3 && (x < 2 || x > _tIcon->Width - 3)) ||
000046  2e03              CMP      r6,#3
000048  d105              BNE      |L18.86|
00004a  2d02              CMP      r5,#2
00004c  dbe6              BLT      |L18.28|
00004e  8920              LDRH     r0,[r4,#8]
000050  1ec0              SUBS     r0,r0,#3
000052  42a8              CMP      r0,r5
000054  dbe2              BLT      |L18.28|
                  |L18.86|
;;;1077   				(y == 4 && (x < 1 || x > _tIcon->Width - 2)) ||
000056  2e04              CMP      r6,#4
000058  d105              BNE      |L18.102|
00005a  2d01              CMP      r5,#1
00005c  db7e              BLT      |L18.348|
00005e  8920              LDRH     r0,[r4,#8]
000060  1e80              SUBS     r0,r0,#2
000062  42a8              CMP      r0,r5
000064  db7a              BLT      |L18.348|
                  |L18.102|
;;;1078   				(y == 5 && (x < 1 || x > _tIcon->Width - 2))	||
000066  2e05              CMP      r6,#5
000068  d105              BNE      |L18.118|
00006a  2d01              CMP      r5,#1
00006c  db76              BLT      |L18.348|
00006e  8920              LDRH     r0,[r4,#8]
000070  1e80              SUBS     r0,r0,#2
000072  42a8              CMP      r0,r5
000074  db72              BLT      |L18.348|
                  |L18.118|
;;;1079   
;;;1080   				(y == _tIcon->Height - 1 && (x < 6 || x > _tIcon->Width - 7)) ||
000076  88e0              LDRH     r0,[r4,#6]
000078  1e40              SUBS     r0,r0,#1
00007a  42b0              CMP      r0,r6
00007c  d105              BNE      |L18.138|
00007e  2d06              CMP      r5,#6
000080  db6c              BLT      |L18.348|
000082  8920              LDRH     r0,[r4,#8]
000084  1fc0              SUBS     r0,r0,#7
000086  42a8              CMP      r0,r5
000088  db68              BLT      |L18.348|
                  |L18.138|
;;;1081   				(y == _tIcon->Height - 2 && (x < 4 || x > _tIcon->Width - 5)) ||
00008a  88e0              LDRH     r0,[r4,#6]
00008c  1e80              SUBS     r0,r0,#2
00008e  42b0              CMP      r0,r6
000090  d105              BNE      |L18.158|
000092  2d04              CMP      r5,#4
000094  db62              BLT      |L18.348|
000096  8920              LDRH     r0,[r4,#8]
000098  1f40              SUBS     r0,r0,#5
00009a  42a8              CMP      r0,r5
00009c  db5e              BLT      |L18.348|
                  |L18.158|
;;;1082   				(y == _tIcon->Height - 3 && (x < 3 || x > _tIcon->Width - 4)) ||
00009e  88e0              LDRH     r0,[r4,#6]
0000a0  1ec0              SUBS     r0,r0,#3
0000a2  42b0              CMP      r0,r6
0000a4  d105              BNE      |L18.178|
0000a6  2d03              CMP      r5,#3
0000a8  db58              BLT      |L18.348|
0000aa  8920              LDRH     r0,[r4,#8]
0000ac  1f00              SUBS     r0,r0,#4
0000ae  42a8              CMP      r0,r5
0000b0  db54              BLT      |L18.348|
                  |L18.178|
;;;1083   				(y == _tIcon->Height - 4 && (x < 2 || x > _tIcon->Width - 3)) ||
0000b2  88e0              LDRH     r0,[r4,#6]
0000b4  1f00              SUBS     r0,r0,#4
0000b6  42b0              CMP      r0,r6
0000b8  d105              BNE      |L18.198|
0000ba  2d02              CMP      r5,#2
0000bc  db4e              BLT      |L18.348|
0000be  8920              LDRH     r0,[r4,#8]
0000c0  1ec0              SUBS     r0,r0,#3
0000c2  42a8              CMP      r0,r5
0000c4  db4a              BLT      |L18.348|
                  |L18.198|
;;;1084   				(y == _tIcon->Height - 5 && (x < 1 || x > _tIcon->Width - 2)) ||
0000c6  88e0              LDRH     r0,[r4,#6]
0000c8  1f40              SUBS     r0,r0,#5
0000ca  42b0              CMP      r0,r6
0000cc  d105              BNE      |L18.218|
0000ce  2d01              CMP      r5,#1
0000d0  db44              BLT      |L18.348|
0000d2  8920              LDRH     r0,[r4,#8]
0000d4  1e80              SUBS     r0,r0,#2
0000d6  42a8              CMP      r0,r5
0000d8  db40              BLT      |L18.348|
                  |L18.218|
;;;1085   				(y == _tIcon->Height - 6 && (x < 1 || x > _tIcon->Width - 2))
0000da  88e0              LDRH     r0,[r4,#6]
0000dc  1f80              SUBS     r0,r0,#6
0000de  42b0              CMP      r0,r6
0000e0  d105              BNE      |L18.238|
0000e2  2d01              CMP      r5,#1
0000e4  db3a              BLT      |L18.348|
0000e6  8920              LDRH     r0,[r4,#8]
0000e8  1e80              SUBS     r0,r0,#2
0000ea  42a8              CMP      r0,r5
0000ec  db36              BLT      |L18.348|
                  |L18.238|
;;;1086   				)
;;;1087   			{
;;;1088   				;
;;;1089   			}
;;;1090   			else
;;;1091   			{
;;;1092   				if (_ucFocusMode != 0)	/* 1表示选中的图标 */
0000ee  9802              LDR      r0,[sp,#8]
0000f0  b358              CBZ      r0,|L18.330|
;;;1093   				{
;;;1094   					/* 降低原始像素的亮度，实现图标被激活选中的效果 */
;;;1095   					uint16_t R,G,B;
;;;1096   					uint16_t bright = 15;
0000f2  200f              MOVS     r0,#0xf
;;;1097   
;;;1098   					/* rrrr rggg gggb bbbb */
;;;1099   					R = (usNewRGB & 0xF800) >> 11;
0000f4  ea4f21d8          LSR      r1,r8,#11
;;;1100   					G = (usNewRGB & 0x07E0) >> 5;
0000f8  f3c81245          UBFX     r2,r8,#5,#6
;;;1101   					B =  usNewRGB & 0x001F;
0000fc  f008031f          AND      r3,r8,#0x1f
;;;1102   					if (R > bright)
000100  4281              CMP      r1,r0
000102  dd05              BLE      |L18.272|
;;;1103   					{
;;;1104   						R -= bright;
000104  eba10c00          SUB      r12,r1,r0
000108  fa1ff18c          UXTH     r1,r12
00010c  e001              B        |L18.274|
                  |L18.270|
00010e  e025              B        |L18.348|
                  |L18.272|
;;;1105   					}
;;;1106   					else
;;;1107   					{
;;;1108   						R = 0;
000110  2100              MOVS     r1,#0
                  |L18.274|
;;;1109   					}
;;;1110   					if (G > 2 * bright)
000112  ea4f0c40          LSL      r12,r0,#1
000116  4594              CMP      r12,r2
000118  da06              BGE      |L18.296|
;;;1111   					{
;;;1112   						G -= 2 * bright;
00011a  f04f0c02          MOV      r12,#2
00011e  fb0c2c10          MLS      r12,r12,r0,r2
000122  fa1ff28c          UXTH     r2,r12
000126  e000              B        |L18.298|
                  |L18.296|
;;;1113   					}
;;;1114   					else
;;;1115   					{
;;;1116   						G = 0;
000128  2200              MOVS     r2,#0
                  |L18.298|
;;;1117   					}
;;;1118   					if (B > bright)
00012a  4283              CMP      r3,r0
00012c  dd04              BLE      |L18.312|
;;;1119   					{
;;;1120   						B -= bright;
00012e  eba30c00          SUB      r12,r3,r0
000132  fa1ff38c          UXTH     r3,r12
000136  e000              B        |L18.314|
                  |L18.312|
;;;1121   					}
;;;1122   					else
;;;1123   					{
;;;1124   						B = 0;
000138  2300              MOVS     r3,#0
                  |L18.314|
;;;1125   					}
;;;1126   					usNewRGB = (R << 11) + (G << 5) + B;
00013a  ea4f2cc1          LSL      r12,r1,#11
00013e  eb0c1c42          ADD      r12,r12,r2,LSL #5
000142  449c              ADD      r12,r12,r3
000144  fa1ff88c          UXTH     r8,r12
;;;1127   				}
000148  bf00              NOP      
                  |L18.330|
;;;1128   
;;;1129   				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
00014a  88a2              LDRH     r2,[r4,#4]
00014c  4432              ADD      r2,r2,r6
00014e  b291              UXTH     r1,r2
000150  8862              LDRH     r2,[r4,#2]
000152  442a              ADD      r2,r2,r5
000154  b290              UXTH     r0,r2
000156  4642              MOV      r2,r8
000158  f7fffffe          BL       LCD_PutPixel
                  |L18.348|
00015c  1c68              ADDS     r0,r5,#1              ;1069
00015e  b285              UXTH     r5,r0                 ;1069
                  |L18.352|
000160  8920              LDRH     r0,[r4,#8]            ;1069
000162  42a8              CMP      r0,r5                 ;1069
000164  f73faf56          BGT      |L18.20|
000168  1c70              ADDS     r0,r6,#1              ;1067
00016a  b286              UXTH     r6,r0                 ;1067
                  |L18.364|
00016c  88e0              LDRH     r0,[r4,#6]            ;1067
00016e  42b0              CMP      r0,r6                 ;1067
000170  f73faf4e          BGT      |L18.16|
;;;1130   			}
;;;1131   		}
;;;1132   	}
;;;1133   
;;;1134   	/* 绘制图标下的文字 */
;;;1135   	{
;;;1136   		uint16_t len;
;;;1137   		uint16_t width;
;;;1138   
;;;1139   		len = strlen(_tIcon->Text);
000174  f1040010          ADD      r0,r4,#0x10
000178  f7fffffe          BL       strlen
00017c  fa1ffb80          UXTH     r11,r0
;;;1140   
;;;1141   		if  (len == 0)
000180  f1bb0f00          CMP      r11,#0
000184  d101              BNE      |L18.394|
                  |L18.390|
;;;1142   		{
;;;1143   			return;	/* 如果图标文本长度为0，则不显示 */
;;;1144   		}
;;;1145   
;;;1146   		/* 计算文本的总宽度 */
;;;1147   		if (_tFont->FontCode == FC_ST_12)		/* 12点阵 */
;;;1148   		{
;;;1149   			width = 6 * (len + _tFont->Space);
;;;1150   		}
;;;1151   		else	/* FC_ST_16 */
;;;1152   		{
;;;1153   			width = 8 * (len + _tFont->Space);
;;;1154   		}
;;;1155   
;;;1156   
;;;1157   		/* 水平居中 */
;;;1158   		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
;;;1159   		y = _tIcon->Top + _tIcon->Height + 2;
;;;1160   		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
;;;1161   	}
;;;1162   }
000186  e8bd8ffe          POP      {r1-r11,pc}
                  |L18.394|
00018a  7838              LDRB     r0,[r7,#0]            ;1147
00018c  b938              CBNZ     r0,|L18.414|
00018e  88f8              LDRH     r0,[r7,#6]            ;1149
000190  4458              ADD      r0,r0,r11             ;1149
000192  eb000040          ADD      r0,r0,r0,LSL #1       ;1149
000196  0440              LSLS     r0,r0,#17             ;1149
000198  ea4f4910          LSR      r9,r0,#16             ;1149
00019c  e004              B        |L18.424|
                  |L18.414|
00019e  88f8              LDRH     r0,[r7,#6]            ;1153
0001a0  4458              ADD      r0,r0,r11             ;1153
0001a2  04c0              LSLS     r0,r0,#19             ;1153
0001a4  ea4f4910          LSR      r9,r0,#16             ;1153
                  |L18.424|
0001a8  8920              LDRH     r0,[r4,#8]            ;1158
0001aa  eb0072d0          ADD      r2,r0,r0,LSR #31      ;1158
0001ae  8863              LDRH     r3,[r4,#2]            ;1158
0001b0  eb030262          ADD      r2,r3,r2,ASR #1       ;1158
0001b4  4649              MOV      r1,r9                 ;1158
0001b6  eb0973d1          ADD      r3,r9,r1,LSR #31      ;1158
0001ba  eba20263          SUB      r2,r2,r3,ASR #1       ;1158
0001be  b295              UXTH     r5,r2                 ;1158
0001c0  88a0              LDRH     r0,[r4,#4]            ;1159
0001c2  88e1              LDRH     r1,[r4,#6]            ;1159
0001c4  4408              ADD      r0,r0,r1              ;1159
0001c6  1c80              ADDS     r0,r0,#2              ;1159
0001c8  b286              UXTH     r6,r0                 ;1159
0001ca  463b              MOV      r3,r7                 ;1160
0001cc  f1040210          ADD      r2,r4,#0x10           ;1160
0001d0  4631              MOV      r1,r6                 ;1160
0001d2  4628              MOV      r0,r5                 ;1160
0001d4  f7fffffe          BL       LCD_DispStr
0001d8  bf00              NOP      
0001da  e7d4              B        |L18.390|
;;;1163   
                          ENDP


                          AREA ||i.LCD_DrawIcon32||, CODE, READONLY, ALIGN=1

                  LCD_DrawIcon32 PROC
;;;1194   */
;;;1195   void LCD_DrawIcon32(const ICON_T *_tIcon, FONT_T *_tFont, uint8_t _ucFocusMode)
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1196   {
000004  b088              SUB      sp,sp,#0x20
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
;;;1197   	const uint8_t *p;
;;;1198   	uint16_t usOldRGB, usNewRGB;
;;;1199   	int16_t x, y;		/* 用于记录窗口内的相对坐标 */
;;;1200   	uint8_t R1,G1,B1,A;	/* 新像素色彩分量 */
;;;1201   	uint8_t R0,G0,B0;	/* 旧像素色彩分量 */
;;;1202   
;;;1203   	p = (const uint8_t *)_tIcon->pBmp;
00000a  68e5              LDR      r5,[r4,#0xc]
;;;1204   	p += 54;		/* 直接指向图像数据区 */
00000c  3536              ADDS     r5,r5,#0x36
;;;1205   
;;;1206   	/* 按照BMP位图次序，从左至右，从上至下扫描 */
;;;1207   	for (y = _tIcon->Height - 1; y >= 0; y--)
00000e  88e0              LDRH     r0,[r4,#6]
000010  1e40              SUBS     r0,r0,#1
000012  fa0ff880          SXTH     r8,r0
000016  e099              B        |L19.332|
                  |L19.24|
;;;1208   	{
;;;1209   		for (x = 0; x < _tIcon->Width; x++)
000018  2700              MOVS     r7,#0
00001a  e08f              B        |L19.316|
                  |L19.28|
;;;1210   		{
;;;1211   			B1 = *p++;
00001c  f8150b01          LDRB     r0,[r5],#1
000020  9004              STR      r0,[sp,#0x10]
;;;1212   			G1 = *p++;
000022  f8150b01          LDRB     r0,[r5],#1
000026  9005              STR      r0,[sp,#0x14]
;;;1213   			R1 = *p++;
000028  f8150b01          LDRB     r0,[r5],#1
00002c  9006              STR      r0,[sp,#0x18]
;;;1214   			A = *p++;	/* Alpha 值(透明度)，0-255, 0表示透明，1表示不透明, 中间值表示透明度 */
00002e  f8156b01          LDRB     r6,[r5],#1
;;;1215   
;;;1216   			if (A == 0x00)	/* 需要透明,显示背景 */
000032  2e00              CMP      r6,#0
000034  d01f              BEQ      |L19.118|
;;;1217   			{
;;;1218   				;	/* 不用刷新背景 */
;;;1219   			}
;;;1220   			else if (A == 0xFF)	/* 完全不透明， 显示新像素 */
000036  2eff              CMP      r6,#0xff
000038  d11e              BNE      |L19.120|
;;;1221   			{
;;;1222   				usNewRGB = RGB(R1, G1, B1);
00003a  9806              LDR      r0,[sp,#0x18]
00003c  10c0              ASRS     r0,r0,#3
00003e  02c1              LSLS     r1,r0,#11
000040  9805              LDR      r0,[sp,#0x14]
000042  1080              ASRS     r0,r0,#2
000044  ea411140          ORR      r1,r1,r0,LSL #5
000048  9804              LDR      r0,[sp,#0x10]
00004a  ea4100e0          ORR      r0,r1,r0,ASR #3
00004e  9007              STR      r0,[sp,#0x1c]
;;;1223   				if (_ucFocusMode == 1)
000050  980a              LDR      r0,[sp,#0x28]
000052  2801              CMP      r0,#1
000054  d106              BNE      |L19.100|
;;;1224   				{
;;;1225   					usNewRGB = LCD_Blend565(usNewRGB, CL_YELLOW, 10);
000056  220a              MOVS     r2,#0xa
000058  f64f71e0          MOV      r1,#0xffe0
00005c  9807              LDR      r0,[sp,#0x1c]
00005e  f7fffffe          BL       LCD_Blend565
000062  9007              STR      r0,[sp,#0x1c]
                  |L19.100|
;;;1226   				}
;;;1227   				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
000064  88a2              LDRH     r2,[r4,#4]
000066  4442              ADD      r2,r2,r8
000068  b291              UXTH     r1,r2
00006a  8862              LDRH     r2,[r4,#2]
00006c  443a              ADD      r2,r2,r7
00006e  b290              UXTH     r0,r2
000070  9a07              LDR      r2,[sp,#0x1c]
000072  f7fffffe          BL       LCD_PutPixel
                  |L19.118|
000076  e05f              B        |L19.312|
                  |L19.120|
;;;1228   			}
;;;1229   			else 	/* 半透明 */
;;;1230   			{
;;;1231   				/* 计算公式： 实际显示颜色 = 前景颜色 * Alpha / 255 + 背景颜色 * (255-Alpha) / 255 */
;;;1232   				usOldRGB = LCD_GetPixel(x + _tIcon->Left, y + _tIcon->Top);
000078  88a2              LDRH     r2,[r4,#4]
00007a  4442              ADD      r2,r2,r8
00007c  b291              UXTH     r1,r2
00007e  8862              LDRH     r2,[r4,#2]
000080  443a              ADD      r2,r2,r7
000082  b290              UXTH     r0,r2
000084  f7fffffe          BL       LCD_GetPixel
000088  4682              MOV      r10,r0
;;;1233   				//usOldRGB = 0xFFFF;
;;;1234   				R0 = RGB565_R(usOldRGB);
00008a  21f8              MOVS     r1,#0xf8
00008c  ea01202a          AND      r0,r1,r10,ASR #8
000090  9003              STR      r0,[sp,#0xc]
;;;1235   				G0 = RGB565_G(usOldRGB);
000092  21fc              MOVS     r1,#0xfc
000094  ea0100ea          AND      r0,r1,r10,ASR #3
000098  9002              STR      r0,[sp,#8]
;;;1236   				B0 = RGB565_B(usOldRGB);
00009a  21f8              MOVS     r1,#0xf8
00009c  ea0100ca          AND      r0,r1,r10,LSL #3
0000a0  9001              STR      r0,[sp,#4]
;;;1237   
;;;1238   				R1 = (R1 * A) / 255 + R0 * (255 - A) / 255;
0000a2  9806              LDR      r0,[sp,#0x18]
0000a4  4370              MULS     r0,r6,r0
0000a6  21ff              MOVS     r1,#0xff
0000a8  fb90f2f1          SDIV     r2,r0,r1
0000ac  f1c601ff          RSB      r1,r6,#0xff
0000b0  9803              LDR      r0,[sp,#0xc]
0000b2  4341              MULS     r1,r0,r1
0000b4  20ff              MOVS     r0,#0xff
0000b6  fb91f0f0          SDIV     r0,r1,r0
0000ba  4410              ADD      r0,r0,r2
0000bc  b2c0              UXTB     r0,r0
0000be  9006              STR      r0,[sp,#0x18]
;;;1239   				G1 = (G1 * A) / 255 + G0 * (255 - A) / 255;
0000c0  9805              LDR      r0,[sp,#0x14]
0000c2  4370              MULS     r0,r6,r0
0000c4  21ff              MOVS     r1,#0xff
0000c6  fb90f2f1          SDIV     r2,r0,r1
0000ca  f1c601ff          RSB      r1,r6,#0xff
0000ce  9802              LDR      r0,[sp,#8]
0000d0  4341              MULS     r1,r0,r1
0000d2  20ff              MOVS     r0,#0xff
0000d4  fb91f0f0          SDIV     r0,r1,r0
0000d8  4410              ADD      r0,r0,r2
0000da  b2c0              UXTB     r0,r0
0000dc  9005              STR      r0,[sp,#0x14]
;;;1240   				B1 = (B1 * A) / 255 + B0 * (255 - A) / 255;
0000de  9804              LDR      r0,[sp,#0x10]
0000e0  4370              MULS     r0,r6,r0
0000e2  21ff              MOVS     r1,#0xff
0000e4  fb90f2f1          SDIV     r2,r0,r1
0000e8  f1c601ff          RSB      r1,r6,#0xff
0000ec  9801              LDR      r0,[sp,#4]
0000ee  4341              MULS     r1,r0,r1
0000f0  20ff              MOVS     r0,#0xff
0000f2  fb91f0f0          SDIV     r0,r1,r0
0000f6  4410              ADD      r0,r0,r2
0000f8  b2c0              UXTB     r0,r0
0000fa  9004              STR      r0,[sp,#0x10]
;;;1241   				usNewRGB = RGB(R1, G1, B1);
0000fc  9806              LDR      r0,[sp,#0x18]
0000fe  10c0              ASRS     r0,r0,#3
000100  02c1              LSLS     r1,r0,#11
000102  9805              LDR      r0,[sp,#0x14]
000104  1080              ASRS     r0,r0,#2
000106  ea411140          ORR      r1,r1,r0,LSL #5
00010a  9804              LDR      r0,[sp,#0x10]
00010c  ea4100e0          ORR      r0,r1,r0,ASR #3
000110  9007              STR      r0,[sp,#0x1c]
;;;1242   				if (_ucFocusMode == 1)
000112  980a              LDR      r0,[sp,#0x28]
000114  2801              CMP      r0,#1
000116  d106              BNE      |L19.294|
;;;1243   				{
;;;1244   					usNewRGB = LCD_Blend565(usNewRGB, CL_YELLOW, 10);
000118  220a              MOVS     r2,#0xa
00011a  f64f71e0          MOV      r1,#0xffe0
00011e  9807              LDR      r0,[sp,#0x1c]
000120  f7fffffe          BL       LCD_Blend565
000124  9007              STR      r0,[sp,#0x1c]
                  |L19.294|
;;;1245   				}
;;;1246   				LCD_PutPixel(x + _tIcon->Left, y + _tIcon->Top, usNewRGB);
000126  88a2              LDRH     r2,[r4,#4]
000128  4442              ADD      r2,r2,r8
00012a  b291              UXTH     r1,r2
00012c  8862              LDRH     r2,[r4,#2]
00012e  443a              ADD      r2,r2,r7
000130  b290              UXTH     r0,r2
000132  9a07              LDR      r2,[sp,#0x1c]
000134  f7fffffe          BL       LCD_PutPixel
                  |L19.312|
000138  1c78              ADDS     r0,r7,#1              ;1209
00013a  b207              SXTH     r7,r0                 ;1209
                  |L19.316|
00013c  8920              LDRH     r0,[r4,#8]            ;1209
00013e  42b8              CMP      r0,r7                 ;1209
000140  f73faf6c          BGT      |L19.28|
000144  f1a80001          SUB      r0,r8,#1              ;1207
000148  fa0ff880          SXTH     r8,r0                 ;1207
                  |L19.332|
00014c  f1b80f00          CMP      r8,#0                 ;1207
000150  f6bfaf62          BGE      |L19.24|
;;;1247   			}
;;;1248   		}
;;;1249   	}
;;;1250   
;;;1251   	/* 绘制图标下的文字 */
;;;1252   	{
;;;1253   		uint16_t len;
;;;1254   		uint16_t width;
;;;1255   
;;;1256   		len = strlen(_tIcon->Text);
000154  f1040010          ADD      r0,r4,#0x10
000158  f7fffffe          BL       strlen
00015c  b280              UXTH     r0,r0
00015e  9000              STR      r0,[sp,#0]
;;;1257   
;;;1258   		if  (len == 0)
000160  9800              LDR      r0,[sp,#0]
000162  b910              CBNZ     r0,|L19.362|
                  |L19.356|
;;;1259   		{
;;;1260   			return;	/* 如果图标文本长度为0，则不显示 */
;;;1261   		}
;;;1262   
;;;1263   		/* 计算文本的总宽度 */
;;;1264   		if (_tFont->FontCode == FC_ST_12)		/* 12点阵 */
;;;1265   		{
;;;1266   			width = 6 * (len + _tFont->Space);
;;;1267   		}
;;;1268   		else	/* FC_ST_16 */
;;;1269   		{
;;;1270   			width = 8 * (len + _tFont->Space);
;;;1271   		}
;;;1272   
;;;1273   
;;;1274   		/* 水平居中 */
;;;1275   		x = (_tIcon->Left + _tIcon->Width / 2) - width / 2;
;;;1276   		y = _tIcon->Top + _tIcon->Height + 2;
;;;1277   		LCD_DispStr(x, y, (char *)_tIcon->Text, _tFont);
;;;1278   	}
;;;1279   }
000164  b00b              ADD      sp,sp,#0x2c
000166  e8bd8ff0          POP      {r4-r11,pc}
                  |L19.362|
00016a  f8990000          LDRB     r0,[r9,#0]            ;1264
00016e  b948              CBNZ     r0,|L19.388|
000170  f8b91006          LDRH     r1,[r9,#6]            ;1266
000174  9800              LDR      r0,[sp,#0]            ;1266
000176  4408              ADD      r0,r0,r1              ;1266
000178  eb000040          ADD      r0,r0,r0,LSL #1       ;1266
00017c  0440              LSLS     r0,r0,#17             ;1266
00017e  ea4f4b10          LSR      r11,r0,#16            ;1266
000182  e006              B        |L19.402|
                  |L19.388|
000184  f8b91006          LDRH     r1,[r9,#6]            ;1270
000188  9800              LDR      r0,[sp,#0]            ;1270
00018a  4408              ADD      r0,r0,r1              ;1270
00018c  04c0              LSLS     r0,r0,#19             ;1270
00018e  ea4f4b10          LSR      r11,r0,#16            ;1270
                  |L19.402|
000192  8920              LDRH     r0,[r4,#8]            ;1275
000194  eb0072d0          ADD      r2,r0,r0,LSR #31      ;1275
000198  8863              LDRH     r3,[r4,#2]            ;1275
00019a  eb030262          ADD      r2,r3,r2,ASR #1       ;1275
00019e  4659              MOV      r1,r11                ;1275
0001a0  eb0b73d1          ADD      r3,r11,r1,LSR #31     ;1275
0001a4  eba20263          SUB      r2,r2,r3,ASR #1       ;1275
0001a8  b217              SXTH     r7,r2                 ;1275
0001aa  88a0              LDRH     r0,[r4,#4]            ;1276
0001ac  88e1              LDRH     r1,[r4,#6]            ;1276
0001ae  4408              ADD      r0,r0,r1              ;1276
0001b0  1c80              ADDS     r0,r0,#2              ;1276
0001b2  fa0ff880          SXTH     r8,r0                 ;1276
0001b6  fa1ff188          UXTH     r1,r8                 ;1277
0001ba  b2b8              UXTH     r0,r7                 ;1277
0001bc  464b              MOV      r3,r9                 ;1277
0001be  f1040210          ADD      r2,r4,#0x10           ;1277
0001c2  f7fffffe          BL       LCD_DispStr
0001c6  bf00              NOP      
0001c8  e7cc              B        |L19.356|
;;;1280   
                          ENDP


                          AREA ||i.LCD_DrawLabel||, CODE, READONLY, ALIGN=1

                  LCD_DrawLabel PROC
;;;1354   */
;;;1355   void LCD_DrawLabel(LABEL_T *_pLabel)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1356   {
000002  b0c1              SUB      sp,sp,#0x104
000004  4604              MOV      r4,r0
;;;1357   #if 1
;;;1358   	char dispbuf[256];
;;;1359   	uint16_t i;
;;;1360   	uint16_t NewLen;
;;;1361   
;;;1362   	NewLen = strlen(_pLabel->pCaption);
000006  6920              LDR      r0,[r4,#0x10]
000008  f7fffffe          BL       strlen
00000c  b286              UXTH     r6,r0
;;;1363   
;;;1364   	if (NewLen > _pLabel->MaxLen)
00000e  8960              LDRH     r0,[r4,#0xa]
000010  42b0              CMP      r0,r6
000012  da07              BGE      |L20.36|
;;;1365   	{
;;;1366   		LCD_DispStr(_pLabel->Left, _pLabel->Top, _pLabel->pCaption, _pLabel->Font);
000014  88a1              LDRH     r1,[r4,#4]
000016  8860              LDRH     r0,[r4,#2]
000018  e9d43203          LDRD     r3,r2,[r4,#0xc]
00001c  f7fffffe          BL       LCD_DispStr
;;;1367   		_pLabel->MaxLen = NewLen;
000020  8166              STRH     r6,[r4,#0xa]
000022  e01b              B        |L20.92|
                  |L20.36|
;;;1368   	}
;;;1369   	else
;;;1370   	{
;;;1371   		for (i = 0; i < NewLen; i++)
000024  2500              MOVS     r5,#0
000026  e005              B        |L20.52|
                  |L20.40|
;;;1372   		{
;;;1373   			dispbuf[i] = _pLabel->pCaption[i];
000028  6920              LDR      r0,[r4,#0x10]
00002a  5d40              LDRB     r0,[r0,r5]
00002c  a901              ADD      r1,sp,#4
00002e  5548              STRB     r0,[r1,r5]
000030  1c68              ADDS     r0,r5,#1              ;1371
000032  b285              UXTH     r5,r0                 ;1371
                  |L20.52|
000034  42b5              CMP      r5,r6                 ;1371
000036  dbf7              BLT      |L20.40|
;;;1374   		}
;;;1375   		for (; i < _pLabel->MaxLen; i++)
000038  e004              B        |L20.68|
                  |L20.58|
;;;1376   		{
;;;1377   			dispbuf[i] = ' ';		/* 末尾填充空格 */
00003a  2020              MOVS     r0,#0x20
00003c  a901              ADD      r1,sp,#4
00003e  5548              STRB     r0,[r1,r5]
000040  1c68              ADDS     r0,r5,#1              ;1375
000042  b285              UXTH     r5,r0                 ;1375
                  |L20.68|
000044  8960              LDRH     r0,[r4,#0xa]          ;1375
000046  42a8              CMP      r0,r5                 ;1375
000048  dcf7              BGT      |L20.58|
;;;1378   		}
;;;1379   		dispbuf[i] = 0;
00004a  2000              MOVS     r0,#0
00004c  a901              ADD      r1,sp,#4
00004e  5548              STRB     r0,[r1,r5]
;;;1380   		LCD_DispStr(_pLabel->Left, _pLabel->Top, dispbuf, _pLabel->Font);
000050  88a1              LDRH     r1,[r4,#4]
000052  8860              LDRH     r0,[r4,#2]
000054  aa01              ADD      r2,sp,#4
000056  68e3              LDR      r3,[r4,#0xc]
000058  f7fffffe          BL       LCD_DispStr
                  |L20.92|
;;;1381   	}
;;;1382   #else
;;;1383   	if (g_ChipID == IC_8875)
;;;1384   	{
;;;1385   		RA8875_SetFont(_pLabel->Font->FontCode, 0, 0);	/* 设置32点阵字体，行间距=0，字间距=0 */
;;;1386   
;;;1387   		RA8875_SetBackColor(_pLabel->Font->BackColor);
;;;1388   		RA8875_SetFrontColor(_pLabel->Font->FrontColor);
;;;1389   
;;;1390   		RA8875_DispStr(_pLabel->Left, _pLabel->Top, _pLabel->Caption);
;;;1391   	}
;;;1392   	else
;;;1393   	{
;;;1394   
;;;1395   	}
;;;1396   #endif
;;;1397   }
00005c  b041              ADD      sp,sp,#0x104
00005e  bdf0              POP      {r4-r7,pc}
;;;1398   
                          ENDP


                          AREA ||i.LCD_DrawLine||, CODE, READONLY, ALIGN=2

                  LCD_DrawLine PROC
;;;842    */
;;;843    void LCD_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;844    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;845    	if (g_ChipID == IC_8875)
00000e  4811              LDR      r0,|L21.84|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d107              BNE      |L21.38|
;;;846    	{
;;;847    		RA8875_DrawLine(_usX1 , _usY1 , _usX2, _usY2 , _usColor);
000016  4643              MOV      r3,r8
000018  463a              MOV      r2,r7
00001a  4631              MOV      r1,r6
00001c  4628              MOV      r0,r5
00001e  9400              STR      r4,[sp,#0]
000020  f7fffffe          BL       RA8875_DrawLine
000024  e014              B        |L21.80|
                  |L21.38|
;;;848    	}
;;;849    	else if (g_ChipID == IC_9488)
000026  480b              LDR      r0,|L21.84|
000028  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00002a  f2494188          MOV      r1,#0x9488
00002e  4288              CMP      r0,r1
000030  d107              BNE      |L21.66|
;;;850    	{
;;;851    		ILI9488_DrawLine(_usX1 , _usY1 , _usX2, _usY2 , _usColor);
000032  4643              MOV      r3,r8
000034  463a              MOV      r2,r7
000036  4631              MOV      r1,r6
000038  4628              MOV      r0,r5
00003a  9400              STR      r4,[sp,#0]
00003c  f7fffffe          BL       ILI9488_DrawLine
000040  e006              B        |L21.80|
                  |L21.66|
;;;852    	}
;;;853    	else
;;;854    	{
;;;855    		SPFD5420_DrawLine(_usX1 , _usY1 , _usX2, _usY2 , _usColor);
000042  4643              MOV      r3,r8
000044  463a              MOV      r2,r7
000046  4631              MOV      r1,r6
000048  4628              MOV      r0,r5
00004a  9400              STR      r4,[sp,#0]
00004c  f7fffffe          BL       SPFD5420_DrawLine
                  |L21.80|
;;;856    	}
;;;857    }
000050  e8bd83f8          POP      {r3-r9,pc}
;;;858    
                          ENDP

                  |L21.84|
                          DCD      g_ChipID

                          AREA ||i.LCD_DrawPoints||, CODE, READONLY, ALIGN=1

                  LCD_DrawPoints PROC
;;;868    */
;;;869    void LCD_DrawPoints(uint16_t *x, uint16_t *y, uint16_t _usSize, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;870    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;871    	uint16_t i;
;;;872    
;;;873    	for (i = 0 ; i < _usSize - 1; i++)
00000c  2400              MOVS     r4,#0
00000e  e00f              B        |L22.48|
                  |L22.16|
;;;874    	{
;;;875    		LCD_DrawLine(x[i], y[i], x[i + 1], y[i + 1], _usColor);
000010  f1040c01          ADD      r12,r4,#1
000014  f8cd8000          STR      r8,[sp,#0]
000018  f836301c          LDRH     r3,[r6,r12,LSL #1]
00001c  f835201c          LDRH     r2,[r5,r12,LSL #1]
000020  f8361014          LDRH     r1,[r6,r4,LSL #1]
000024  f8350014          LDRH     r0,[r5,r4,LSL #1]
000028  f7fffffe          BL       LCD_DrawLine
00002c  1c60              ADDS     r0,r4,#1              ;873
00002e  b284              UXTH     r4,r0                 ;873
                  |L22.48|
000030  1e78              SUBS     r0,r7,#1              ;873
000032  42a0              CMP      r0,r4                 ;873
000034  dcec              BGT      |L22.16|
;;;876    	}
;;;877    }
000036  e8bd83f8          POP      {r3-r9,pc}
;;;878    
                          ENDP


                          AREA ||i.LCD_DrawRect||, CODE, READONLY, ALIGN=2

                  LCD_DrawRect PROC
;;;889    */
;;;890    void LCD_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;891    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  4698              MOV      r8,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;892    	if (g_ChipID == IC_8875)
00000e  4811              LDR      r0,|L23.84|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d107              BNE      |L23.38|
;;;893    	{
;;;894    		RA8875_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000016  4643              MOV      r3,r8
000018  462a              MOV      r2,r5
00001a  4639              MOV      r1,r7
00001c  4630              MOV      r0,r6
00001e  9400              STR      r4,[sp,#0]
000020  f7fffffe          BL       RA8875_DrawRect
000024  e014              B        |L23.80|
                  |L23.38|
;;;895    	}
;;;896    	else if (g_ChipID == IC_9488)
000026  480b              LDR      r0,|L23.84|
000028  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00002a  f2494188          MOV      r1,#0x9488
00002e  4288              CMP      r0,r1
000030  d107              BNE      |L23.66|
;;;897    	{
;;;898    		ILI9488_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000032  4643              MOV      r3,r8
000034  462a              MOV      r2,r5
000036  4639              MOV      r1,r7
000038  4630              MOV      r0,r6
00003a  9400              STR      r4,[sp,#0]
00003c  f7fffffe          BL       ILI9488_DrawRect
000040  e006              B        |L23.80|
                  |L23.66|
;;;899    	}
;;;900    	else
;;;901    	{
;;;902    		SPFD5420_DrawRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000042  b2ea              UXTB     r2,r5
000044  4643              MOV      r3,r8
000046  4639              MOV      r1,r7
000048  4630              MOV      r0,r6
00004a  9400              STR      r4,[sp,#0]
00004c  f7fffffe          BL       SPFD5420_DrawRect
                  |L23.80|
;;;903    	}
;;;904    }
000050  e8bd83f8          POP      {r3-r9,pc}
;;;905    
                          ENDP

                  |L23.84|
                          DCD      g_ChipID

                          AREA ||i.LCD_DrawWin||, CODE, READONLY, ALIGN=1

                  LCD_DrawWin PROC
;;;998    */
;;;999    void LCD_DrawWin(WIN_T *_pWin)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1000   {
000002  4604              MOV      r4,r0
;;;1001   #if 1
;;;1002   	uint16_t TitleHegiht;
;;;1003   
;;;1004   	TitleHegiht = 20;
000004  2514              MOVS     r5,#0x14
;;;1005   
;;;1006   	/* 绘制窗口外框 */
;;;1007   	LCD_DrawRect(_pWin->Left, _pWin->Top, _pWin->Height, _pWin->Width, WIN_BORDER_COLOR);
000006  f44f7004          MOV      r0,#0x210
00000a  9000              STR      r0,[sp,#0]
00000c  8923              LDRH     r3,[r4,#8]
00000e  88e2              LDRH     r2,[r4,#6]
000010  88a1              LDRH     r1,[r4,#4]
000012  8860              LDRH     r0,[r4,#2]
000014  f7fffffe          BL       LCD_DrawRect
;;;1008   	LCD_DrawRect(_pWin->Left + 1, _pWin->Top + 1, _pWin->Height - 2, _pWin->Width - 2, WIN_BORDER_COLOR);
000018  f44f7004          MOV      r0,#0x210
00001c  9000              STR      r0,[sp,#0]
00001e  8926              LDRH     r6,[r4,#8]
000020  1eb6              SUBS     r6,r6,#2
000022  b2b3              UXTH     r3,r6
000024  88e6              LDRH     r6,[r4,#6]
000026  1eb6              SUBS     r6,r6,#2
000028  b2b2              UXTH     r2,r6
00002a  88a6              LDRH     r6,[r4,#4]
00002c  1c76              ADDS     r6,r6,#1
00002e  b2b1              UXTH     r1,r6
000030  8866              LDRH     r6,[r4,#2]
000032  1c76              ADDS     r6,r6,#1
000034  b2b0              UXTH     r0,r6
000036  f7fffffe          BL       LCD_DrawRect
;;;1009   
;;;1010   	/* 窗口标题栏 */
;;;1011   	LCD_Fill_Rect(_pWin->Left + 2, _pWin->Top + 2, TitleHegiht, _pWin->Width - 4, WIN_TITLE_COLOR);
00003a  f244203f          MOV      r0,#0x423f
00003e  9000              STR      r0,[sp,#0]
000040  8922              LDRH     r2,[r4,#8]
000042  1f12              SUBS     r2,r2,#4
000044  b293              UXTH     r3,r2
000046  88a2              LDRH     r2,[r4,#4]
000048  1c92              ADDS     r2,r2,#2
00004a  b291              UXTH     r1,r2
00004c  8862              LDRH     r2,[r4,#2]
00004e  1c92              ADDS     r2,r2,#2
000050  b290              UXTH     r0,r2
000052  462a              MOV      r2,r5
000054  f7fffffe          BL       LCD_Fill_Rect
;;;1012   
;;;1013   	/* 窗体填充 */
;;;1014   	LCD_Fill_Rect(_pWin->Left + 2, _pWin->Top + TitleHegiht + 2, _pWin->Height - 4 - TitleHegiht,
000058  f24b50b6          MOV      r0,#0xb5b6
00005c  9000              STR      r0,[sp,#0]
00005e  8926              LDRH     r6,[r4,#8]
000060  1f36              SUBS     r6,r6,#4
000062  b2b3              UXTH     r3,r6
000064  88e6              LDRH     r6,[r4,#6]
000066  1f36              SUBS     r6,r6,#4
000068  1b76              SUBS     r6,r6,r5
00006a  b2b2              UXTH     r2,r6
00006c  88a6              LDRH     r6,[r4,#4]
00006e  442e              ADD      r6,r6,r5
000070  1cb6              ADDS     r6,r6,#2
000072  b2b1              UXTH     r1,r6
000074  8866              LDRH     r6,[r4,#2]
000076  1cb6              ADDS     r6,r6,#2
000078  b2b0              UXTH     r0,r6
00007a  f7fffffe          BL       LCD_Fill_Rect
;;;1015   		_pWin->Width - 4, WIN_BODY_COLOR);
;;;1016   
;;;1017   	LCD_DispStr(_pWin->Left + 3, _pWin->Top + 2, _pWin->pCaption, _pWin->Font);
00007e  88a6              LDRH     r6,[r4,#4]
000080  1cb6              ADDS     r6,r6,#2
000082  b2b1              UXTH     r1,r6
000084  8866              LDRH     r6,[r4,#2]
000086  1cf6              ADDS     r6,r6,#3
000088  b2b0              UXTH     r0,r6
00008a  e9d43203          LDRD     r3,r2,[r4,#0xc]
00008e  f7fffffe          BL       LCD_DispStr
;;;1018   #else
;;;1019   	if (g_ChipID == IC_8875)
;;;1020   	{
;;;1021   		uint16_t TitleHegiht;
;;;1022   
;;;1023   		TitleHegiht = 28;
;;;1024   
;;;1025   		/* 绘制窗口外框 */
;;;1026   		RA8875_DrawRect(_pWin->Left, _pWin->Top, _pWin->Height, _pWin->Width, WIN_BORDER_COLOR);
;;;1027   		RA8875_DrawRect(_pWin->Left + 1, _pWin->Top + 1, _pWin->Height - 2, _pWin->Width - 2, WIN_BORDER_COLOR);
;;;1028   
;;;1029   		/* 窗口标题栏 */
;;;1030   		RA8875_FillRect(_pWin->Left + 2, _pWin->Top + 2, TitleHegiht, _pWin->Width - 4, WIN_TITLE_COLOR);
;;;1031   
;;;1032   		/* 窗体填充 */
;;;1033   		RA8875_FillRect(_pWin->Left + 2, _pWin->Top + TitleHegiht + 2, _pWin->Height - 4 - TitleHegiht, _pWin->Width - 4, WIN_BODY_COLOR);
;;;1034   
;;;1035   		//RA8875_SetFont(_pWin->Font.FontCode, 0, 0);
;;;1036   		RA8875_SetFont(RA_FONT_24, 0, 0);
;;;1037   
;;;1038   		RA8875_SetBackColor(WIN_TITLE_COLOR);
;;;1039   		RA8875_SetFrontColor(WIN_CAPTION_COLOR);
;;;1040   		RA8875_DispStr(_pWin->Left + 3, _pWin->Top + 2, _pWin->Caption);
;;;1041   	}
;;;1042   	else
;;;1043   	{
;;;1044   		;
;;;1045   	}
;;;1046   #endif
;;;1047   }
000092  bdf8              POP      {r3-r7,pc}
;;;1048   
                          ENDP


                          AREA ||i.LCD_FSMCConfig||, CODE, READONLY, ALIGN=1

                  LCD_FSMCConfig PROC
;;;1841   */
;;;1842   static void LCD_FSMCConfig(void)
000000  b500              PUSH     {lr}
;;;1843   {
000002  b09d              SUB      sp,sp,#0x74
;;;1844   	FSMC_NORSRAMInitTypeDef  init;
;;;1845   	FSMC_NORSRAMTimingInitTypeDef  timingWrite;
;;;1846   	FSMC_NORSRAMTimingInitTypeDef  timingRead;
;;;1847   
;;;1848   	/*-- FSMC Configuration ------------------------------------------------------*/
;;;1849   	/*----------------------- SRAM Bank 4 ----------------------------------------*/
;;;1850   	/* FSMC_Bank1_NORSRAM4 configuration */
;;;1851   	/* 摄像头DMA麻点，需设置 4 0 5 2 0 0 */
;;;1852   	timingWrite.FSMC_AddressSetupTime = 4;
000004  2004              MOVS     r0,#4
000006  9007              STR      r0,[sp,#0x1c]
;;;1853   	timingWrite.FSMC_AddressHoldTime = 0;
000008  2000              MOVS     r0,#0
00000a  9008              STR      r0,[sp,#0x20]
;;;1854   	timingWrite.FSMC_DataSetupTime = 6;
00000c  2006              MOVS     r0,#6
00000e  9009              STR      r0,[sp,#0x24]
;;;1855   	timingWrite.FSMC_BusTurnAroundDuration = 1;
000010  2001              MOVS     r0,#1
000012  900a              STR      r0,[sp,#0x28]
;;;1856   	timingWrite.FSMC_CLKDivision = 0;
000014  2000              MOVS     r0,#0
000016  900b              STR      r0,[sp,#0x2c]
;;;1857   	timingWrite.FSMC_DataLatency = 0;
000018  900c              STR      r0,[sp,#0x30]
;;;1858   	timingWrite.FSMC_AccessMode = FSMC_AccessMode_A;
00001a  900d              STR      r0,[sp,#0x34]
;;;1859   
;;;1860   	timingRead.FSMC_AddressSetupTime = 4;
00001c  2004              MOVS     r0,#4
00001e  9000              STR      r0,[sp,#0]
;;;1861   	timingRead.FSMC_AddressHoldTime = 0;
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
;;;1862   	timingRead.FSMC_DataSetupTime = 8;
000024  2008              MOVS     r0,#8
000026  9002              STR      r0,[sp,#8]
;;;1863   	timingRead.FSMC_BusTurnAroundDuration = 1;
000028  2001              MOVS     r0,#1
00002a  9003              STR      r0,[sp,#0xc]
;;;1864   	timingRead.FSMC_CLKDivision = 0;
00002c  2000              MOVS     r0,#0
00002e  9004              STR      r0,[sp,#0x10]
;;;1865   	timingRead.FSMC_DataLatency = 0;
000030  9005              STR      r0,[sp,#0x14]
;;;1866   	timingRead.FSMC_AccessMode = FSMC_AccessMode_A;
000032  9006              STR      r0,[sp,#0x18]
;;;1867   
;;;1868   
;;;1869   	/*
;;;1870   	 LCD configured as follow:
;;;1871   	    - Data/Address MUX = Disable
;;;1872   	    - Memory Type = SRAM
;;;1873   	    - Data Width = 16bit
;;;1874   	    - Write Operation = Enable
;;;1875   	    - Extended Mode = Enable
;;;1876   	    - Asynchronous Wait = Disable
;;;1877   	*/
;;;1878   	init.FSMC_Bank = FSMC_Bank1_NORSRAM4;
000034  2006              MOVS     r0,#6
000036  900e              STR      r0,[sp,#0x38]
;;;1879   	init.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
000038  2000              MOVS     r0,#0
00003a  900f              STR      r0,[sp,#0x3c]
;;;1880   	init.FSMC_MemoryType = FSMC_MemoryType_SRAM;
00003c  9010              STR      r0,[sp,#0x40]
;;;1881   	init.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
00003e  2010              MOVS     r0,#0x10
000040  9011              STR      r0,[sp,#0x44]
;;;1882   	init.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
000042  2000              MOVS     r0,#0
000044  9012              STR      r0,[sp,#0x48]
;;;1883   	init.FSMC_AsynchronousWait = FSMC_AsynchronousWait_Disable;
000046  9013              STR      r0,[sp,#0x4c]
;;;1884   	init.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
000048  9014              STR      r0,[sp,#0x50]
;;;1885   	init.FSMC_WrapMode = FSMC_WrapMode_Disable;
00004a  9015              STR      r0,[sp,#0x54]
;;;1886   	init.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
00004c  9016              STR      r0,[sp,#0x58]
;;;1887   	init.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
00004e  f44f5080          MOV      r0,#0x1000
000052  9017              STR      r0,[sp,#0x5c]
;;;1888   	init.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
000054  2000              MOVS     r0,#0
000056  9018              STR      r0,[sp,#0x60]
;;;1889   	init.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
000058  9019              STR      r0,[sp,#0x64]
;;;1890   	init.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
00005a  901a              STR      r0,[sp,#0x68]
;;;1891   
;;;1892   	init.FSMC_ReadWriteTimingStruct = &timingRead;
00005c  f8cdd06c          STR      sp,[sp,#0x6c]
;;;1893   	init.FSMC_WriteTimingStruct = &timingWrite;
000060  a807              ADD      r0,sp,#0x1c
000062  901c              STR      r0,[sp,#0x70]
;;;1894   
;;;1895   	FSMC_NORSRAMInit(&init);
000064  a80e              ADD      r0,sp,#0x38
000066  f7fffffe          BL       FSMC_NORSRAMInit
;;;1896   
;;;1897   	/* - BANK 1 (of NOR/SRAM Bank 1~4) is enabled */
;;;1898   	FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM4, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2006              MOVS     r0,#6
00006e  f7fffffe          BL       FSMC_NORSRAMCmd
;;;1899   }
000072  b01d              ADD      sp,sp,#0x74
000074  bd00              POP      {pc}
;;;1900   
                          ENDP


                          AREA ||i.LCD_Fill_Rect||, CODE, READONLY, ALIGN=2

                  LCD_Fill_Rect PROC
;;;916    */
;;;917    void LCD_Fill_Rect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;918    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
00000c  9c08              LDR      r4,[sp,#0x20]
;;;919    	if (g_ChipID == IC_8875)
00000e  4816              LDR      r0,|L26.104|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d107              BNE      |L26.38|
;;;920    	{
;;;921    		RA8875_FillRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000016  464b              MOV      r3,r9
000018  4642              MOV      r2,r8
00001a  4639              MOV      r1,r7
00001c  4630              MOV      r0,r6
00001e  9400              STR      r4,[sp,#0]
000020  f7fffffe          BL       RA8875_FillRect
000024  e01d              B        |L26.98|
                  |L26.38|
;;;922    	}
;;;923    	else if (g_ChipID == IC_9488)
000026  4810              LDR      r0,|L26.104|
000028  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00002a  f2494188          MOV      r1,#0x9488
00002e  4288              CMP      r0,r1
000030  d107              BNE      |L26.66|
;;;924    	{
;;;925    		ILI9488_FillRect(_usX, _usY, _usHeight, _usWidth, _usColor);
000032  464b              MOV      r3,r9
000034  4642              MOV      r2,r8
000036  4639              MOV      r1,r7
000038  4630              MOV      r0,r6
00003a  9400              STR      r4,[sp,#0]
00003c  f7fffffe          BL       ILI9488_FillRect
000040  e00f              B        |L26.98|
                  |L26.66|
;;;926    	}
;;;927    	else
;;;928    	{
;;;929    		uint32_t i;
;;;930    		for (i = 0; i < _usHeight; i++)
000042  2500              MOVS     r5,#0
000044  e00a              B        |L26.92|
                  |L26.70|
;;;931    		{
;;;932    			SPFD5420_DrawHLine(_usX, _usY + i, _usX + _usWidth - 1, _usColor);
000046  eb060009          ADD      r0,r6,r9
00004a  1e40              SUBS     r0,r0,#1
00004c  b282              UXTH     r2,r0
00004e  1978              ADDS     r0,r7,r5
000050  b281              UXTH     r1,r0
000052  4623              MOV      r3,r4
000054  4630              MOV      r0,r6
000056  f7fffffe          BL       SPFD5420_DrawHLine
00005a  1c6d              ADDS     r5,r5,#1              ;930
                  |L26.92|
00005c  4545              CMP      r5,r8                 ;930
00005e  d3f2              BCC      |L26.70|
;;;933    		}
;;;934    	}
000060  bf00              NOP      
                  |L26.98|
;;;935    }
000062  e8bd83f8          POP      {r3-r9,pc}
;;;936    
                          ENDP

000066  0000              DCW      0x0000
                  |L26.104|
                          DCD      g_ChipID

                          AREA ||i.LCD_GetBackLight||, CODE, READONLY, ALIGN=2

                  LCD_GetBackLight PROC
;;;2040   */
;;;2041   uint8_t LCD_GetBackLight(void)
000000  4801              LDR      r0,|L27.8|
;;;2042   {
;;;2043   	return s_ucBright;
000002  7800              LDRB     r0,[r0,#0]  ; s_ucBright
;;;2044   }
000004  4770              BX       lr
;;;2045   /*
                          ENDP

000006  0000              DCW      0x0000
                  |L27.8|
                          DCD      s_ucBright

                          AREA ||i.LCD_GetChipDescribe||, CODE, READONLY, ALIGN=2

                  LCD_GetChipDescribe PROC
;;;157    */
;;;158    void LCD_GetChipDescribe(char *_str)
000000  b510              PUSH     {r4,lr}
;;;159    {
000002  4604              MOV      r4,r0
;;;160    	switch (g_ChipID)
000004  481b              LDR      r0,|L28.116|
000006  8801              LDRH     r1,[r0,#0]  ; g_ChipID
000008  f2454220          MOV      r2,#0x5420
00000c  1a88              SUBS     r0,r1,r2
00000e  4291              CMP      r1,r2
000010  d010              BEQ      |L28.52|
000012  dc06              BGT      |L28.34|
000014  2975              CMP      r1,#0x75
000016  d01c              BEQ      |L28.82|
000018  f46f4080          MVN      r0,#0x4000
00001c  4408              ADD      r0,r0,r1
00001e  bb10              CBNZ     r0,|L28.102|
000020  e00d              B        |L28.62|
                  |L28.34|
000022  f5a04080          SUB      r0,r0,#0x4000
000026  3868              SUBS     r0,r0,#0x68
000028  b1c0              CBZ      r0,|L28.92|
00002a  f46f5102          MVN      r1,#0x2080
00002e  4408              ADD      r0,r0,r1
000030  b9c8              CBNZ     r0,|L28.102|
000032  e009              B        |L28.72|
                  |L28.52|
;;;161    	{
;;;162    		case IC_5420:
;;;163    			strcpy(_str, CHIP_STR_5420);
000034  a110              ADR      r1,|L28.120|
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       strcpy
;;;164    			break;
00003c  e018              B        |L28.112|
                  |L28.62|
;;;165    
;;;166    		case IC_4001:
;;;167    			strcpy(_str, CHIP_STR_4001);
00003e  a111              ADR      r1,|L28.132|
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       strcpy
;;;168    			break;
000046  e013              B        |L28.112|
                  |L28.72|
;;;169    
;;;170    		case IC_61509:
;;;171    			strcpy(_str, CHIP_STR_61509);
000048  a111              ADR      r1,|L28.144|
00004a  4620              MOV      r0,r4
00004c  f7fffffe          BL       strcpy
;;;172    			break;
000050  e00e              B        |L28.112|
                  |L28.82|
;;;173    
;;;174    		case IC_8875:
;;;175    			strcpy(_str, CHIP_STR_8875);
000052  a111              ADR      r1,|L28.152|
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       strcpy
;;;176    			break;
00005a  e009              B        |L28.112|
                  |L28.92|
;;;177    
;;;178    		case IC_9488:
;;;179    			strcpy(_str, CHIP_STR_9488);
00005c  a110              ADR      r1,|L28.160|
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       strcpy
;;;180    			break;
000064  e004              B        |L28.112|
                  |L28.102|
;;;181    
;;;182    		default:
;;;183    			strcpy(_str, "Unknow");
000066  a110              ADR      r1,|L28.168|
000068  4620              MOV      r0,r4
00006a  f7fffffe          BL       strcpy
;;;184    			break;
00006e  bf00              NOP      
                  |L28.112|
000070  bf00              NOP                            ;164
;;;185    	}
;;;186    }
000072  bd10              POP      {r4,pc}
;;;187    
                          ENDP

                  |L28.116|
                          DCD      g_ChipID
                  |L28.120|
000078  53504644          DCB      "SPFD5420A",0
00007c  35343230
000080  4100    
000082  00                DCB      0
000083  00                DCB      0
                  |L28.132|
000084  4f544d34          DCB      "OTM4001A",0
000088  30303141
00008c  00      
00008d  00                DCB      0
00008e  00                DCB      0
00008f  00                DCB      0
                  |L28.144|
000090  52363135          DCB      "R61509V",0
000094  30395600
                  |L28.152|
000098  52413838          DCB      "RA8875",0
00009c  373500  
00009f  00                DCB      0
                  |L28.160|
0000a0  494c4939          DCB      "ILI9488",0
0000a4  34383800
                  |L28.168|
0000a8  556e6b6e          DCB      "Unknow",0
0000ac  6f7700  
0000af  00                DCB      0

                          AREA ||i.LCD_GetFontHeight||, CODE, READONLY, ALIGN=1

                  LCD_GetFontHeight PROC
;;;348    */
;;;349    uint16_t LCD_GetFontHeight(FONT_T *_tFont)
000000  4601              MOV      r1,r0
;;;350    {
;;;351    	uint16_t height = 16;
000002  2010              MOVS     r0,#0x10
;;;352    
;;;353    	switch (_tFont->FontCode)
000004  780a              LDRB     r2,[r1,#0]
000006  2a07              CMP      r2,#7
000008  d210              BCS      |L29.44|
00000a  e8dff002          TBB      [pc,r2]
00000e  0406              DCB      0x04,0x06
000010  0a0c0709          DCB      0x0a,0x0c,0x07,0x09
000014  0d00              DCB      0x0d,0x00
;;;354    	{
;;;355    		case FC_ST_12:
;;;356    			height = 12;
000016  200c              MOVS     r0,#0xc
;;;357    			break;
000018  e008              B        |L29.44|
;;;358    
;;;359    		case FC_ST_16:
;;;360    		case FC_RA8875_16:			
00001a  bf00              NOP      
;;;361    			height = 16;
00001c  2010              MOVS     r0,#0x10
;;;362    			break;
00001e  e005              B        |L29.44|
;;;363    			
;;;364    		case FC_RA8875_24:			
;;;365    		case FC_ST_24:
000020  bf00              NOP      
;;;366    			height = 24;
000022  2018              MOVS     r0,#0x18
;;;367    			break;
000024  e002              B        |L29.44|
;;;368    			
;;;369    		case FC_ST_32:
;;;370    		case FC_RA8875_32:	
000026  bf00              NOP      
;;;371    			height = 32;
000028  2020              MOVS     r0,#0x20
;;;372    			break;			
00002a  bf00              NOP      
                  |L29.44|
00002c  bf00              NOP                            ;357
;;;373    	}
;;;374    	return height;
;;;375    }
00002e  4770              BX       lr
;;;376    
                          ENDP


                          AREA ||i.LCD_GetFontWidth||, CODE, READONLY, ALIGN=1

                  LCD_GetFontWidth PROC
;;;311    */
;;;312    uint16_t LCD_GetFontWidth(FONT_T *_tFont)
000000  4601              MOV      r1,r0
;;;313    {
;;;314    	uint16_t font_width = 16;
000002  2010              MOVS     r0,#0x10
;;;315    
;;;316    	switch (_tFont->FontCode)
000004  780a              LDRB     r2,[r1,#0]
000006  2a07              CMP      r2,#7
000008  d210              BCS      |L30.44|
00000a  e8dff002          TBB      [pc,r2]
00000e  0406              DCB      0x04,0x06
000010  0a0c0709          DCB      0x0a,0x0c,0x07,0x09
000014  0d00              DCB      0x0d,0x00
;;;317    	{
;;;318    		case FC_ST_12:
;;;319    			font_width = 12;
000016  200c              MOVS     r0,#0xc
;;;320    			break;
000018  e008              B        |L30.44|
;;;321    
;;;322    		case FC_ST_16:
;;;323    		case FC_RA8875_16:			
00001a  bf00              NOP      
;;;324    			font_width = 16;
00001c  2010              MOVS     r0,#0x10
;;;325    			break;
00001e  e005              B        |L30.44|
;;;326    			
;;;327    		case FC_RA8875_24:			
;;;328    		case FC_ST_24:
000020  bf00              NOP      
;;;329    			font_width = 24;
000022  2018              MOVS     r0,#0x18
;;;330    			break;
000024  e002              B        |L30.44|
;;;331    			
;;;332    		case FC_ST_32:
;;;333    		case FC_RA8875_32:	
000026  bf00              NOP      
;;;334    			font_width = 32;
000028  2020              MOVS     r0,#0x20
;;;335    			break;			
00002a  bf00              NOP      
                  |L30.44|
00002c  bf00              NOP                            ;320
;;;336    	}
;;;337    	return font_width;
;;;338    }
00002e  4770              BX       lr
;;;339    
                          ENDP


                          AREA ||i.LCD_GetHeight||, CODE, READONLY, ALIGN=2

                  LCD_GetHeight PROC
;;;195    */
;;;196    uint16_t LCD_GetHeight(void)
000000  4801              LDR      r0,|L31.8|
;;;197    {
;;;198    	return g_LcdHeight;
000002  8800              LDRH     r0,[r0,#0]  ; g_LcdHeight
;;;199    }
000004  4770              BX       lr
;;;200    
                          ENDP

000006  0000              DCW      0x0000
                  |L31.8|
                          DCD      g_LcdHeight

                          AREA ||i.LCD_GetPixel||, CODE, READONLY, ALIGN=2

                  LCD_GetPixel PROC
;;;811    */
;;;812    uint16_t LCD_GetPixel(uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;813    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;814    	uint16_t usRGB;
;;;815    
;;;816    	if (g_ChipID == IC_8875)
000006  480e              LDR      r0,|L32.64|
000008  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00000a  2875              CMP      r0,#0x75
00000c  d105              BNE      |L32.26|
;;;817    	{
;;;818    		usRGB = RA8875_GetPixel(_usX, _usY);
00000e  4631              MOV      r1,r6
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       RA8875_GetPixel
000016  4604              MOV      r4,r0
000018  e010              B        |L32.60|
                  |L32.26|
;;;819    	}
;;;820    	else if (g_ChipID == IC_9488)
00001a  4809              LDR      r0,|L32.64|
00001c  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00001e  f2494188          MOV      r1,#0x9488
000022  4288              CMP      r0,r1
000024  d105              BNE      |L32.50|
;;;821    	{
;;;822    		usRGB = ILI9488_GetPixel(_usX, _usY);
000026  4631              MOV      r1,r6
000028  4628              MOV      r0,r5
00002a  f7fffffe          BL       ILI9488_GetPixel
00002e  4604              MOV      r4,r0
000030  e004              B        |L32.60|
                  |L32.50|
;;;823    	}
;;;824    	else
;;;825    	{
;;;826    		usRGB = SPFD5420_GetPixel(_usX, _usY);
000032  4631              MOV      r1,r6
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       SPFD5420_GetPixel
00003a  4604              MOV      r4,r0
                  |L32.60|
;;;827    	}
;;;828    
;;;829    	return usRGB;
00003c  4620              MOV      r0,r4
;;;830    }
00003e  bd70              POP      {r4-r6,pc}
;;;831    
                          ENDP

                  |L32.64|
                          DCD      g_ChipID

                          AREA ||i.LCD_GetStrWidth||, CODE, READONLY, ALIGN=2

                  LCD_GetStrWidth PROC
;;;386    */
;;;387    uint16_t LCD_GetStrWidth(char *_ptr, FONT_T *_tFont)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;388    {
000004  4607              MOV      r7,r0
000006  460e              MOV      r6,r1
;;;389    	char *p = _ptr;
000008  463d              MOV      r5,r7
;;;390    	uint16_t width = 0;
00000a  f04f0800          MOV      r8,#0
;;;391    	uint8_t code1, code2;
;;;392    	uint16_t font_width;
;;;393    
;;;394    	font_width = LCD_GetFontWidth(_tFont);
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       LCD_GetFontWidth
000014  4682              MOV      r10,r0
;;;395    
;;;396    	while (*p != 0)
000016  e03e              B        |L33.150|
                  |L33.24|
;;;397    	{
;;;398    		code1 = *p;	/* 读取字符串数据， 该数据可能是ascii代码，也可能汉字代码的高字节 */
000018  782c              LDRB     r4,[r5,#0]
;;;399    		if (code1 < 0x80)	/* ASCII */
00001a  2c80              CMP      r4,#0x80
00001c  da2a              BGE      |L33.116|
;;;400    		{
;;;401    			switch(_tFont->FontCode)
00001e  7830              LDRB     r0,[r6,#0]
000020  2807              CMP      r0,#7
000022  d223              BCS      |L33.108|
000024  e8dff000          TBB      [pc,r0]
000028  16191c1f          DCB      0x16,0x19,0x1c,0x1f
00002c  040a1000          DCB      0x04,0x0a,0x10,0x00
;;;402    			{
;;;403    				case FC_RA8875_16:
;;;404    					font_width = g_RA8875_Ascii16_width[code1 - 0x20];
000030  f1a40020          SUB      r0,r4,#0x20
000034  491b              LDR      r1,|L33.164|
000036  f811a000          LDRB     r10,[r1,r0]
;;;405    					break;
00003a  e01a              B        |L33.114|
;;;406    				
;;;407    				case FC_RA8875_24:
;;;408    					font_width = g_RA8875_Ascii24_width[code1 - 0x20];
00003c  f1a40020          SUB      r0,r4,#0x20
000040  4919              LDR      r1,|L33.168|
000042  f811a000          LDRB     r10,[r1,r0]
;;;409    					break;
000046  e014              B        |L33.114|
;;;410    				
;;;411    				case FC_RA8875_32:
;;;412    					font_width = g_RA8875_Ascii32_width[code1 - 0x20];
000048  f1a40020          SUB      r0,r4,#0x20
00004c  4917              LDR      r1,|L33.172|
00004e  f811a000          LDRB     r10,[r1,r0]
;;;413    					break;
000052  e00e              B        |L33.114|
;;;414    				
;;;415    				case FC_ST_12:
;;;416    					font_width = 6;
000054  f04f0a06          MOV      r10,#6
;;;417    					break;
000058  e00b              B        |L33.114|
;;;418    
;;;419    				case FC_ST_16:		
;;;420    					font_width = 8;
00005a  f04f0a08          MOV      r10,#8
;;;421    					break;
00005e  e008              B        |L33.114|
;;;422    					
;;;423    				case FC_ST_24:			
;;;424    					font_width = 12;
000060  f04f0a0c          MOV      r10,#0xc
;;;425    					break;
000064  e005              B        |L33.114|
;;;426    					
;;;427    				case FC_ST_32:
;;;428    					font_width = 16;
000066  f04f0a10          MOV      r10,#0x10
;;;429    					break;
00006a  e002              B        |L33.114|
                  |L33.108|
;;;430    				
;;;431    				default:
;;;432    					font_width = 8;
00006c  f04f0a08          MOV      r10,#8
;;;433    					break;					
000070  bf00              NOP      
                  |L33.114|
000072  e00b              B        |L33.140|
                  |L33.116|
;;;434    			}
;;;435    			
;;;436    		}
;;;437    		else	/* 汉字 */
;;;438    		{
;;;439    			code2 = *++p;
000074  1c68              ADDS     r0,r5,#1
000076  4605              MOV      r5,r0
000078  f8909000          LDRB     r9,[r0,#0]
;;;440    			if (code2 == 0)
00007c  f1b90f00          CMP      r9,#0
000080  d100              BNE      |L33.132|
;;;441    			{
;;;442    				break;
000082  e00b              B        |L33.156|
                  |L33.132|
;;;443    			}
;;;444    			font_width = LCD_GetFontWidth(_tFont);
000084  4630              MOV      r0,r6
000086  f7fffffe          BL       LCD_GetFontWidth
00008a  4682              MOV      r10,r0
                  |L33.140|
;;;445    			
;;;446    		}
;;;447    		width += font_width;
00008c  eb08000a          ADD      r0,r8,r10
000090  fa1ff880          UXTH     r8,r0
;;;448    		p++;
000094  1c6d              ADDS     r5,r5,#1
                  |L33.150|
000096  7828              LDRB     r0,[r5,#0]            ;396
000098  2800              CMP      r0,#0                 ;396
00009a  d1bd              BNE      |L33.24|
                  |L33.156|
00009c  bf00              NOP                            ;442
;;;449    	}
;;;450    
;;;451    	return width;
00009e  4640              MOV      r0,r8
;;;452    }
0000a0  e8bd87f0          POP      {r4-r10,pc}
;;;453    
                          ENDP

                  |L33.164|
                          DCD      g_RA8875_Ascii16_width
                  |L33.168|
                          DCD      g_RA8875_Ascii24_width
                  |L33.172|
                          DCD      g_RA8875_Ascii32_width

                          AREA ||i.LCD_GetWidth||, CODE, READONLY, ALIGN=2

                  LCD_GetWidth PROC
;;;208    */
;;;209    uint16_t LCD_GetWidth(void)
000000  4801              LDR      r0,|L34.8|
;;;210    {
;;;211    	return g_LcdWidth;
000002  8800              LDRH     r0,[r0,#0]  ; g_LcdWidth
;;;212    }
000004  4770              BX       lr
;;;213    
                          ENDP

000006  0000              DCW      0x0000
                  |L34.8|
                          DCD      g_LcdWidth

                          AREA ||i.LCD_HardReset||, CODE, READONLY, ALIGN=1

                  LCD_HardReset PROC
;;;127    */
;;;128    void LCD_HardReset(void)
000000  4770              BX       lr
;;;129    {
;;;130    #if 0	
;;;131    	GPIO_InitTypeDef GPIO_InitStructure;
;;;132    
;;;133    	/* 使能 GPIO时钟 */
;;;134    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;135    	
;;;136    	/* 配置背光GPIO为推挽输出模式 */
;;;137    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
;;;138    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;139    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;140    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;141    	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;142    	GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;143    
;;;144    	GPIO_ResetBits(GPIOB, GPIO_Pin_1);
;;;145    	bsp_DelayMS(20);
;;;146    	GPIO_SetBits(GPIOB, GPIO_Pin_1);
;;;147    #endif	
;;;148    }
;;;149    
                          ENDP


                          AREA ||i.LCD_InitButton||, CODE, READONLY, ALIGN=1

                  LCD_InitButton PROC
;;;2128   */
;;;2129   void LCD_InitButton(BUTTON_T *_btn, uint16_t _x, uint16_t _y, uint16_t _h, uint16_t _w, char *_pCaption, FONT_T *_pFont)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2130   {
000002  ac05              ADD      r4,sp,#0x14
000004  cc70              LDM      r4,{r4-r6}
;;;2131   	_btn->Left = _x;
000006  8041              STRH     r1,[r0,#2]
;;;2132   	_btn->Top = _y;
000008  8082              STRH     r2,[r0,#4]
;;;2133   	_btn->Height = _h;
00000a  80c3              STRH     r3,[r0,#6]
;;;2134   	_btn->Width = _w;
00000c  8104              STRH     r4,[r0,#8]
;;;2135   	_btn->pCaption = _pCaption;	
00000e  6105              STR      r5,[r0,#0x10]
;;;2136   	_btn->Font = _pFont;
000010  60c6              STR      r6,[r0,#0xc]
;;;2137   	_btn->Focus = 0;
000012  2700              MOVS     r7,#0
000014  7507              STRB     r7,[r0,#0x14]
;;;2138   }
000016  bdf0              POP      {r4-r7,pc}
;;;2139   
                          ENDP


                          AREA ||i.LCD_InitHard||, CODE, READONLY, ALIGN=2

                  LCD_InitHard PROC
;;;76     */
;;;77     void LCD_InitHard(void)
000000  b510              PUSH     {r4,lr}
;;;78     {
;;;79     	uint32_t id;
;;;80     
;;;81     	/* 配置LCD控制口线GPIO */
;;;82     	LCD_CtrlLinesConfig();
000002  f7fffffe          BL       LCD_CtrlLinesConfig
;;;83     
;;;84     	/* 配置FSMC接口，数据总线 */
;;;85     	LCD_FSMCConfig();
000006  f7fffffe          BL       LCD_FSMCConfig
;;;86     
;;;87     	LCD_HardReset();	/* 硬件复位 （STM32-V5 无需），针对其他GPIO控制LCD复位的产品 */
00000a  f7fffffe          BL       LCD_HardReset
;;;88     	
;;;89     	/* FSMC重置后必须加延迟才能访问总线设备  */
;;;90     	bsp_DelayMS(20);
00000e  2014              MOVS     r0,#0x14
000010  f7fffffe          BL       bsp_DelayMS
;;;91     
;;;92     	id = ILI9488_ReadID();
000014  f7fffffe          BL       ILI9488_ReadID
000018  4604              MOV      r4,r0
;;;93     	if (id == 0x548066)		/* 3.5寸屏 */
00001a  4815              LDR      r0,|L37.112|
00001c  4284              CMP      r4,r0
00001e  d106              BNE      |L37.46|
;;;94     	{
;;;95     		g_ChipID = IC_9488;
000020  f2494088          MOV      r0,#0x9488
000024  4913              LDR      r1,|L37.116|
000026  8008              STRH     r0,[r1,#0]
;;;96     		ILI9488_InitHard();
000028  f7fffffe          BL       ILI9488_InitHard
00002c  e016              B        |L37.92|
                  |L37.46|
;;;97     	}
;;;98     	else
;;;99     	{
;;;100    		id = SPFD5420_ReadID();  	/* 读取LCD驱动芯片ID */
00002e  f7fffffe          BL       SPFD5420_ReadID
000032  4604              MOV      r4,r0
;;;101    		if ((id == 0x5420) || (id ==  0xB509) || (id == 0x5520))
000034  f2454020          MOV      r0,#0x5420
000038  4284              CMP      r4,r0
00003a  d007              BEQ      |L37.76|
00003c  f24b5009          MOV      r0,#0xb509
000040  4284              CMP      r4,r0
000042  d003              BEQ      |L37.76|
000044  f2455020          MOV      r0,#0x5520
000048  4284              CMP      r4,r0
00004a  d102              BNE      |L37.82|
                  |L37.76|
;;;102    		{
;;;103    			SPFD5420_InitHard();	/* 初始化5420和4001屏硬件 */
00004c  f7fffffe          BL       SPFD5420_InitHard
000050  e004              B        |L37.92|
                  |L37.82|
;;;104    			/* g_ChipID 在函数内部设置了 */
;;;105    		}
;;;106    		else
;;;107    		{
;;;108    			g_ChipID = IC_8875;
000052  2075              MOVS     r0,#0x75
000054  4907              LDR      r1,|L37.116|
000056  8008              STRH     r0,[r1,#0]
;;;109    			RA8875_InitHard();	/* 初始化RA8875芯片 */
000058  f7fffffe          BL       RA8875_InitHard
                  |L37.92|
;;;110    		}
;;;111    	}
;;;112    
;;;113    	LCD_SetDirection(0);
00005c  2000              MOVS     r0,#0
00005e  f7fffffe          BL       LCD_SetDirection
;;;114    
;;;115    	LCD_ClrScr(CL_BLACK);	/* 清屏，显示全黑 */
000062  2000              MOVS     r0,#0
000064  f7fffffe          BL       LCD_ClrScr
;;;116    
;;;117    	LCD_SetBackLight(BRIGHT_DEFAULT);	 /* 打开背光，设置为缺省亮度 */
000068  20c8              MOVS     r0,#0xc8
00006a  f7fffffe          BL       LCD_SetBackLight
;;;118    }
00006e  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L37.112|
                          DCD      0x00548066
                  |L37.116|
                          DCD      g_ChipID

                          AREA ||i.LCD_PutPixel||, CODE, READONLY, ALIGN=2

                  LCD_PutPixel PROC
;;;785    */
;;;786    void LCD_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;787    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;788    	if (g_ChipID == IC_8875)
000008  480d              LDR      r0,|L38.64|
00000a  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00000c  2875              CMP      r0,#0x75
00000e  d105              BNE      |L38.28|
;;;789    	{
;;;790    		RA8875_PutPixel(_usX, _usY, _usColor);
000010  4632              MOV      r2,r6
000012  4629              MOV      r1,r5
000014  4620              MOV      r0,r4
000016  f7fffffe          BL       RA8875_PutPixel
00001a  e010              B        |L38.62|
                  |L38.28|
;;;791    	}
;;;792    	else if (g_ChipID == IC_9488)
00001c  4808              LDR      r0,|L38.64|
00001e  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000020  f2494188          MOV      r1,#0x9488
000024  4288              CMP      r0,r1
000026  d105              BNE      |L38.52|
;;;793    	{
;;;794    		ILI9488_PutPixel(_usX, _usY, _usColor);
000028  4632              MOV      r2,r6
00002a  4629              MOV      r1,r5
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       ILI9488_PutPixel
000032  e004              B        |L38.62|
                  |L38.52|
;;;795    	}
;;;796    	else
;;;797    	{
;;;798    		SPFD5420_PutPixel(_usX, _usY, _usColor);
000034  4632              MOV      r2,r6
000036  4629              MOV      r1,r5
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       SPFD5420_PutPixel
                  |L38.62|
;;;799    	}
;;;800    }
00003e  bd70              POP      {r4-r6,pc}
;;;801    
                          ENDP

                  |L38.64|
                          DCD      g_ChipID

                          AREA ||i.LCD_SetBackLight||, CODE, READONLY, ALIGN=2

                  LCD_SetBackLight PROC
;;;2018   */
;;;2019   void LCD_SetBackLight(uint8_t _bright)
000000  b510              PUSH     {r4,lr}
;;;2020   {
000002  4604              MOV      r4,r0
;;;2021   	s_ucBright =  _bright;	/* 保存背光值 */
000004  4806              LDR      r0,|L39.32|
000006  7004              STRB     r4,[r0,#0]
;;;2022   
;;;2023   	if (g_ChipID == IC_8875)
000008  4806              LDR      r0,|L39.36|
00000a  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00000c  2875              CMP      r0,#0x75
00000e  d103              BNE      |L39.24|
;;;2024   	{
;;;2025   		RA8875_SetBackLight(_bright);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       RA8875_SetBackLight
000016  e002              B        |L39.30|
                  |L39.24|
;;;2026   	}
;;;2027   	else
;;;2028   	{
;;;2029   		LCD_SetPwmBackLight(_bright);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LCD_SetPwmBackLight
                  |L39.30|
;;;2030   	}
;;;2031   }
00001e  bd10              POP      {r4,pc}
;;;2032   
                          ENDP

                  |L39.32|
                          DCD      s_ucBright
                  |L39.36|
                          DCD      g_ChipID

                          AREA ||i.LCD_SetDirection||, CODE, READONLY, ALIGN=2

                  LCD_SetDirection PROC
;;;2052   */
;;;2053   void LCD_SetDirection(uint8_t _dir)
000000  b510              PUSH     {r4,lr}
;;;2054   {
000002  4604              MOV      r4,r0
;;;2055   	g_LcdDirection =  _dir;		/* 保存在全局变量 */
000004  4806              LDR      r0,|L40.32|
000006  7004              STRB     r4,[r0,#0]
;;;2056   
;;;2057   	if (g_ChipID == IC_8875)
000008  4806              LDR      r0,|L40.36|
00000a  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00000c  2875              CMP      r0,#0x75
00000e  d103              BNE      |L40.24|
;;;2058   	{
;;;2059   		RA8875_SetDirection(_dir);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       RA8875_SetDirection
000016  e002              B        |L40.30|
                  |L40.24|
;;;2060   	}
;;;2061   	else
;;;2062   	{
;;;2063   		ILI9488_SetDirection(_dir);
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       ILI9488_SetDirection
                  |L40.30|
;;;2064   	}
;;;2065   }
00001e  bd10              POP      {r4,pc}
;;;2066   
                          ENDP

                  |L40.32|
                          DCD      g_LcdDirection
                  |L40.36|
                          DCD      g_ChipID

                          AREA ||i.LCD_SetPwmBackLight||, CODE, READONLY, ALIGN=2

                  LCD_SetPwmBackLight PROC
;;;1910   */
;;;1911   void LCD_SetPwmBackLight(uint8_t _bright)
000000  b57c              PUSH     {r2-r6,lr}
;;;1912   {
000002  4604              MOV      r4,r0
;;;1913   	#if 1
;;;1914   
;;;1915   	bsp_SetTIMOutPWM(GPIOF, GPIO_Pin_6, TIM10, 1, 100, (_bright * 10000) /255);
000004  f2427010          MOV      r0,#0x2710
000008  4360              MULS     r0,r4,r0
00000a  21ff              MOVS     r1,#0xff
00000c  fb90f5f1          SDIV     r5,r0,r1
000010  2064              MOVS     r0,#0x64
000012  2301              MOVS     r3,#1
000014  4a03              LDR      r2,|L41.36|
000016  2140              MOVS     r1,#0x40
000018  e9cd0500          STRD     r0,r5,[sp,#0]
00001c  4802              LDR      r0,|L41.40|
00001e  f7fffffe          BL       bsp_SetTIMOutPWM
;;;1916   	#else
;;;1917   	/* STM32-V5 使用PF6 / TIM10_CH1 输出PWM, */
;;;1918   	GPIO_InitTypeDef GPIO_InitStructure;
;;;1919   	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;1920   	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;1921   
;;;1922   	/* 第1步：打开GPIO 时钟	*/
;;;1923   	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
;;;1924   
;;;1925   	if (_bright == 0)
;;;1926   	{
;;;1927   		/* 配置背光GPIO为输入模式 */
;;;1928   		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;1929   		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
;;;1930   		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;1931   		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;1932   		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;1933   
;;;1934   		GPIO_Init(GPIOF, &GPIO_InitStructure);
;;;1935   
;;;1936   		/* 关闭TIM10 */
;;;1937   		TIM_Cmd(TIM10, DISABLE);
;;;1938   		return;
;;;1939   	}
;;;1940   	else if (_bright == BRIGHT_MAX)	/* 最大亮度 */
;;;1941   	{
;;;1942   		/* 配置背光GPIO为推挽输出模式 */
;;;1943   		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;1944   		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
;;;1945   		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;1946   		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;1947   		GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;1948   
;;;1949   		GPIO_SetBits(GPIOF, GPIO_Pin_1);
;;;1950   
;;;1951   		/* 关闭TIM8 */
;;;1952   		TIM_Cmd(TIM8, DISABLE);
;;;1953   		return;
;;;1954   	}
;;;1955   
;;;1956   	/* 配置背光GPIO为复用推挽输出模式 */
;;;1957   	GPIO_PinAFConfig(GPIOF, GPIO_PinSource6, GPIO_AF_TIM10);
;;;1958   
;;;1959   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;1960   	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
;;;1961   	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
;;;1962   	GPIO_InitStructure.GPIO_PuPd  = GPIO_PuPd_NOPULL;
;;;1963   
;;;1964   	/* 使能TIM10的时钟 */
;;;1965   	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM10, ENABLE);
;;;1966   
;;;1967   	/*
;;;1968   		TIM3 配置: 产生1路PWM信号;
;;;1969   		TIM3CLK = 72 MHz, Prescaler = 0(不分频), TIM3 counter clock = 72 MHz
;;;1970   		计算公式：
;;;1971   		PWM输出频率 = TIM3 counter clock /(ARR + 1)
;;;1972   
;;;1973   		我们期望设置为100Hz
;;;1974   
;;;1975   		如果不对TIM3CLK预分频，那么不可能得到100Hz低频。
;;;1976   		我们设置分频比 = 1000， 那么  TIM3 counter clock = 72KHz
;;;1977   		TIM_Period = 720 - 1;
;;;1978   		频率下不来。
;;;1979   	 */
;;;1980   	TIM_TimeBaseStructure.TIM_Period = 720 - 1;	/* TIM_Period = TIM3 ARR Register */
;;;1981   	TIM_TimeBaseStructure.TIM_Prescaler = 0;
;;;1982   	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;1983   	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;1984   
;;;1985   	TIM_TimeBaseInit(TIM10, &TIM_TimeBaseStructure);
;;;1986   
;;;1987   	/* PWM1 Mode configuration: Channel1 */
;;;1988   	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;1989   	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;1990   	/*
;;;1991   		_bright = 1 时, TIM_Pulse = 1
;;;1992   		_bright = 255 时, TIM_Pulse = TIM_Period
;;;1993   	*/
;;;1994   	TIM_OCInitStructure.TIM_Pulse = (TIM_TimeBaseStructure.TIM_Period * _bright) / BRIGHT_MAX;	/* 改变占空比 */
;;;1995   
;;;1996   	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;1997   	TIM_OC1Init(TIM10, &TIM_OCInitStructure);
;;;1998   	TIM_OC1PreloadConfig(TIM10, TIM_OCPreload_Enable);
;;;1999   
;;;2000   	TIM_ARRPreloadConfig(TIM10, ENABLE);
;;;2001   
;;;2002   	/* 使能 TIM8 定时器 */
;;;2003   	TIM_Cmd(TIM10, ENABLE);
;;;2004   
;;;2005   	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;2006   	//TIM_CtrlPWMOutputs(TIM10, ENABLE);
;;;2007   #endif
;;;2008   }
000022  bd7c              POP      {r2-r6,pc}
;;;2009   
                          ENDP

                  |L41.36|
                          DCD      0x40014400
                  |L41.40|
                          DCD      0x40021400

                          AREA ||i._LCD_ReadAsciiDot||, CODE, READONLY, ALIGN=2

                  _LCD_ReadAsciiDot PROC
;;;464    */
;;;465    static void _LCD_ReadAsciiDot(uint8_t _code, uint8_t _fontcode, uint8_t *_pBuf)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;466    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;467    	const uint8_t *pAscDot;
;;;468    	uint8_t font_bytes = 0;
00000a  2400              MOVS     r4,#0
;;;469    
;;;470    	pAscDot = 0;
00000c  46a2              MOV      r10,r4
;;;471    	switch (_fontcode)
00000e  2d07              CMP      r5,#7
000010  d213              BCS      |L42.58|
000012  e8dff005          TBB      [pc,r5]
000016  040a              DCB      0x04,0x0a
000018  08090e0f          DCB      0x08,0x09,0x0e,0x0f
00001c  1000              DCB      0x10,0x00
;;;472    	{
;;;473    		case FC_ST_12:		/* 12点阵 */
;;;474    			font_bytes = 24;
00001e  2418              MOVS     r4,#0x18
;;;475    			pAscDot = g_Ascii12;	
000020  f8dfa038          LDR      r10,|L42.92|
;;;476    			break;
000024  e009              B        |L42.58|
;;;477    		
;;;478    		case FC_ST_24:
;;;479    		case FC_ST_32:
000026  bf00              NOP      
;;;480    		case FC_ST_16:
000028  bf00              NOP      
;;;481    			/* 缺省是16点阵 */
;;;482    			font_bytes = 32;
00002a  2420              MOVS     r4,#0x20
;;;483    			pAscDot = g_Ascii16;
00002c  f8dfa030          LDR      r10,|L42.96|
;;;484    			break;
000030  e003              B        |L42.58|
;;;485    		
;;;486    		case FC_RA8875_16:
;;;487    		case FC_RA8875_24:
000032  bf00              NOP      
;;;488    		case FC_RA8875_32:
000034  bf00              NOP      
                  |L42.54|
;;;489    			return;
;;;490    	}	
;;;491    
;;;492    	/* 将CPU内部Flash中的ascii字符点阵复制到buf */
;;;493    	memcpy(_pBuf, &pAscDot[_code * (font_bytes / 2)], (font_bytes / 2));	
;;;494    }
000036  e8bd87f0          POP      {r4-r10,pc}
                  |L42.58|
00003a  bf00              NOP                            ;476
00003c  4626              MOV      r6,r4                 ;493
00003e  46a1              MOV      r9,r4                 ;493
000040  eb0470d9          ADD      r0,r4,r9,LSR #31      ;493
000044  1040              ASRS     r0,r0,#1              ;493
000046  fb07a100          MLA      r1,r7,r0,r10          ;493
00004a  eb0470d6          ADD      r0,r4,r6,LSR #31      ;493
00004e  1042              ASRS     r2,r0,#1              ;493
000050  4640              MOV      r0,r8                 ;493
000052  f7fffffe          BL       __aeabi_memcpy
000056  bf00              NOP      
000058  e7ed              B        |L42.54|
;;;495    
                          ENDP

00005a  0000              DCW      0x0000
                  |L42.92|
                          DCD      g_Ascii12
                  |L42.96|
                          DCD      g_Ascii16

                          AREA ||i._LCD_ReadHZDot||, CODE, READONLY, ALIGN=2

                  _LCD_ReadHZDot PROC
;;;506    */
;;;507    static void _LCD_ReadHZDot(uint8_t _code1, uint8_t _code2,  uint8_t _fontcode, uint8_t *_pBuf)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;508    {
000004  4681              MOV      r9,r0
000006  468a              MOV      r10,r1
000008  4616              MOV      r6,r2
00000a  469b              MOV      r11,r3
;;;509    	#ifdef USE_SMALL_FONT	/* 使用CPU 内部Flash 小字库 */
;;;510    		uint8_t *pDot;
;;;511    		uint8_t font_bytes = 0;
00000c  2700              MOVS     r7,#0
;;;512    		uint32_t address;
;;;513    		uint16_t m;
;;;514    
;;;515    		pDot = 0;	/* 仅仅用于避免告警 */
00000e  2500              MOVS     r5,#0
;;;516    		switch (_fontcode)
000010  2e07              CMP      r6,#7
000012  d215              BCS      |L43.64|
000014  e8dff006          TBB      [pc,r6]
000018  04070a0d          DCB      0x04,0x07,0x0a,0x0d
00001c  10111200          DCB      0x10,0x11,0x12,0x00
;;;517    		{
;;;518    			case FC_ST_12:		/* 12点阵 */
;;;519    				font_bytes = 24;
000020  2718              MOVS     r7,#0x18
;;;520    				pDot = (uint8_t *)g_Hz12;	
000022  4d1c              LDR      r5,|L43.148|
;;;521    				break;
000024  e00c              B        |L43.64|
;;;522    			
;;;523    			case FC_ST_16:
;;;524    				font_bytes = 32;
000026  2720              MOVS     r7,#0x20
;;;525    				pDot = (uint8_t *)g_Hz16;
000028  4d1b              LDR      r5,|L43.152|
;;;526    				break;
00002a  e009              B        |L43.64|
;;;527    	
;;;528    			case FC_ST_24:
;;;529    				font_bytes = 72;
00002c  2748              MOVS     r7,#0x48
;;;530    				pDot = (uint8_t *)g_Hz24;
00002e  4d1b              LDR      r5,|L43.156|
;;;531    				break;			
000030  e006              B        |L43.64|
;;;532    				
;;;533    			case FC_ST_32:	
;;;534    				font_bytes = 128;
000032  2780              MOVS     r7,#0x80
;;;535    				pDot = (uint8_t *)g_Hz32;
000034  4d1a              LDR      r5,|L43.160|
;;;536    				break;						
000036  e003              B        |L43.64|
;;;537    			
;;;538    			case FC_RA8875_16:
;;;539    			case FC_RA8875_24:
000038  bf00              NOP      
;;;540    			case FC_RA8875_32:
00003a  bf00              NOP      
                  |L43.60|
;;;541    				return;
;;;542    		}	
;;;543    
;;;544    		m = 0;
;;;545    		while(1)
;;;546    		{
;;;547    			address = m * (font_bytes + 2);
;;;548    			m++;
;;;549    			if ((_code1 == pDot[address + 0]) && (_code2 == pDot[address + 1]))
;;;550    			{
;;;551    				address += 2;
;;;552    				memcpy(_pBuf, &pDot[address], font_bytes);
;;;553    				break;
;;;554    			}
;;;555    			else if ((pDot[address + 0] == 0xFF) && (pDot[address + 1] == 0xFF))
;;;556    			{
;;;557    				/* 字库搜索完毕，未找到，则填充全FF */
;;;558    				memset(_pBuf, 0xFF, font_bytes);
;;;559    				break;
;;;560    			}
;;;561    		}
;;;562    	#else	/* 用全字库 */
;;;563    		uint8_t *pDot = 0;
;;;564    		uint8_t font_bytes = 0;
;;;565    			
;;;566    		switch (_fontcode)
;;;567    		{
;;;568    			case FC_ST_12:		/* 12点阵 */
;;;569    				font_bytes = 24;
;;;570    				pDot = (uint8_t *)HZK12_ADDR;	
;;;571    				break;
;;;572    			
;;;573    			case FC_ST_16:
;;;574    				font_bytes = 32;
;;;575    				pDot = (uint8_t *)HZK16_ADDR;
;;;576    				break;
;;;577    	
;;;578    			case FC_ST_24:
;;;579    				font_bytes = 72;
;;;580    				pDot = (uint8_t *)HZK24_ADDR;
;;;581    				break;			
;;;582    				
;;;583    			case FC_ST_32:	
;;;584    				font_bytes = 128;
;;;585    				pDot = (uint8_t *)HZK32_ADDR;
;;;586    				break;						
;;;587    			
;;;588    			case FC_RA8875_16:
;;;589    			case FC_RA8875_24:
;;;590    			case FC_RA8875_32:
;;;591    				return;
;;;592    		}			
;;;593    	
;;;594    		/* 此处需要根据字库文件存放位置进行修改 */
;;;595    		if (_code1 >=0xA1 && _code1 <= 0xA9 && _code2 >=0xA1)
;;;596    		{
;;;597    			pDot += ((_code1 - 0xA1) * 94 + (_code2 - 0xA1)) * font_bytes;
;;;598    		}
;;;599    		else if (_code1 >=0xB0 && _code1 <= 0xF7 && _code2 >=0xA1)
;;;600    		{
;;;601    			pDot += ((_code1 - 0xB0) * 94 + (_code2 - 0xA1) + 846) * font_bytes;
;;;602    		}
;;;603    		memcpy(_pBuf, pDot, font_bytes);
;;;604    	#endif
;;;605    }
00003c  e8bd9ff0          POP      {r4-r12,pc}
                  |L43.64|
000040  bf00              NOP                            ;521
000042  f04f0800          MOV      r8,#0                 ;544
000046  e021              B        |L43.140|
                  |L43.72|
000048  1cb8              ADDS     r0,r7,#2              ;547
00004a  fb08f400          MUL      r4,r8,r0              ;547
00004e  f1080001          ADD      r0,r8,#1              ;548
000052  fa1ff880          UXTH     r8,r0                 ;548
000056  5d28              LDRB     r0,[r5,r4]            ;549
000058  4548              CMP      r0,r9                 ;549
00005a  d10a              BNE      |L43.114|
00005c  1c60              ADDS     r0,r4,#1              ;549
00005e  5c28              LDRB     r0,[r5,r0]            ;549
000060  4550              CMP      r0,r10                ;549
000062  d106              BNE      |L43.114|
000064  1ca4              ADDS     r4,r4,#2              ;551
000066  1929              ADDS     r1,r5,r4              ;552
000068  463a              MOV      r2,r7                 ;552
00006a  4658              MOV      r0,r11                ;552
00006c  f7fffffe          BL       __aeabi_memcpy
000070  e00d              B        |L43.142|
                  |L43.114|
000072  5d28              LDRB     r0,[r5,r4]            ;555
000074  28ff              CMP      r0,#0xff              ;555
000076  d109              BNE      |L43.140|
000078  1c60              ADDS     r0,r4,#1              ;555
00007a  5c28              LDRB     r0,[r5,r0]            ;555
00007c  28ff              CMP      r0,#0xff              ;555
00007e  d105              BNE      |L43.140|
000080  22ff              MOVS     r2,#0xff              ;558
000082  4639              MOV      r1,r7                 ;558
000084  4658              MOV      r0,r11                ;558
000086  f7fffffe          BL       __aeabi_memset
00008a  e000              B        |L43.142|
                  |L43.140|
00008c  e7dc              B        |L43.72|
                  |L43.142|
00008e  bf00              NOP                            ;553
000090  bf00              NOP      
000092  e7d3              B        |L43.60|
;;;606    			
                          ENDP

                  |L43.148|
                          DCD      g_Hz12
                  |L43.152|
                          DCD      g_Hz16
                  |L43.156|
                          DCD      g_Hz24
                  |L43.160|
                          DCD      g_Hz32

                          AREA ||.data||, DATA, ALIGN=1

                  g_ChipID
000000  4001              DCW      0x4001
                  g_LcdHeight
000002  00f0              DCW      0x00f0
                  g_LcdWidth
000004  0190              DCW      0x0190
                  s_ucBright
000006  00                DCB      0x00
                  g_LcdDirection
000007  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_tft_lcd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tft_lcd_c_g_ChipID____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_tft_lcd_c_g_ChipID____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tft_lcd_c_g_ChipID____REVSH|
#line 144
|__asm___13_bsp_tft_lcd_c_g_ChipID____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tft_lcd_c_g_ChipID____RRX|
#line 300
|__asm___13_bsp_tft_lcd_c_g_ChipID____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
