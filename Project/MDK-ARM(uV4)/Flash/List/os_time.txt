; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_time.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_time.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_time.crf ..\..\uCOS-III\uCOS-III\Source\os_time.c]
                          THUMB

                          AREA ||i.OSTimeDly||, CODE, READONLY, ALIGN=2

                  OSTimeDly PROC
;;;79     
;;;80     void  OSTimeDly (OS_TICK   dly,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;81                      OS_OPT    opt,
;;;82                      OS_ERR   *p_err)
;;;83     {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;84         CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;85     
;;;86     
;;;87     
;;;88     #ifdef OS_SAFETY_CRITICAL
;;;89         if (p_err == (OS_ERR *)0) {
;;;90             OS_SAFETY_CRITICAL_EXCEPTION();
;;;91             return;
;;;92         }
;;;93     #endif
;;;94     
;;;95     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;96         if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
00000c  482a              LDR      r0,|L1.184|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000010  2800              CMP      r0,#0
000012  dd04              BLE      |L1.30|
;;;97            *p_err = OS_ERR_TIME_DLY_ISR;
000014  f2472075          MOV      r0,#0x7275
000018  8020              STRH     r0,[r4,#0]
                  |L1.26|
;;;98             return;
;;;99         }
;;;100    #endif
;;;101    
;;;102        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
;;;103           *p_err = OS_ERR_SCHED_LOCKED;
;;;104            return;
;;;105        }
;;;106    
;;;107        switch (opt) {
;;;108            case OS_OPT_TIME_DLY:
;;;109            case OS_OPT_TIME_TIMEOUT:
;;;110            case OS_OPT_TIME_PERIODIC:
;;;111                 if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
;;;112                    *p_err = OS_ERR_TIME_ZERO_DLY;
;;;113                     return;
;;;114                 }
;;;115                 break;
;;;116    
;;;117            case OS_OPT_TIME_MATCH:
;;;118                 break;
;;;119    
;;;120            default:
;;;121                *p_err = OS_ERR_OPT_INVALID;
;;;122                 return;
;;;123        }
;;;124    
;;;125        OS_CRITICAL_ENTER();
;;;126        OSTCBCurPtr->TaskState = OS_TASK_STATE_DLY;
;;;127        OS_TickListInsert(OSTCBCurPtr,
;;;128                          dly,
;;;129                          opt,
;;;130                          p_err);
;;;131        if (*p_err != OS_ERR_NONE) {
;;;132             OS_CRITICAL_EXIT_NO_SCHED();
;;;133             return;
;;;134        }
;;;135        OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
;;;136        OS_CRITICAL_EXIT_NO_SCHED();
;;;137        OSSched();                                              /* Find next task to run!                                 */
;;;138       *p_err = OS_ERR_NONE;
;;;139    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  4827              LDR      r0,|L1.188|
000020  7800              LDRB     r0,[r0,#0]            ;102  ; OSSchedLockNestingCtr
000022  2800              CMP      r0,#0                 ;102
000024  dd03              BLE      |L1.46|
000026  f6465063          MOV      r0,#0x6d63            ;103
00002a  8020              STRH     r0,[r4,#0]            ;103
00002c  e7f5              B        |L1.26|
                  |L1.46|
00002e  b136              CBZ      r6,|L1.62|
000030  2e02              CMP      r6,#2                 ;107
000032  d005              BEQ      |L1.64|
000034  2e04              CMP      r6,#4                 ;107
000036  d00a              BEQ      |L1.78|
000038  2e08              CMP      r6,#8                 ;107
00003a  d109              BNE      |L1.80|
00003c  e001              B        |L1.66|
                  |L1.62|
00003e  bf00              NOP                            ;109
                  |L1.64|
000040  bf00              NOP                            ;110
                  |L1.66|
000042  b91d              CBNZ     r5,|L1.76|
000044  f247207e          MOV      r0,#0x727e            ;112
000048  8020              STRH     r0,[r4,#0]            ;112
00004a  e7e6              B        |L1.26|
                  |L1.76|
00004c  e004              B        |L1.88|
                  |L1.78|
00004e  e003              B        |L1.88|
                  |L1.80|
000050  f6456025          MOV      r0,#0x5e25            ;121
000054  8020              STRH     r0,[r4,#0]            ;121
000056  e7e0              B        |L1.26|
                  |L1.88|
000058  bf00              NOP                            ;115
00005a  bf00              NOP                            ;125
00005c  bf00              NOP                            ;125
00005e  f7fffffe          BL       CPU_SR_Save
000062  4607              MOV      r7,r0                 ;125
000064  bf00              NOP                            ;125
000066  bf00              NOP                            ;125
000068  2001              MOVS     r0,#1                 ;126
00006a  4915              LDR      r1,|L1.192|
00006c  6809              LDR      r1,[r1,#0]            ;126  ; OSTCBCurPtr
00006e  f8810036          STRB     r0,[r1,#0x36]         ;126
000072  4623              MOV      r3,r4                 ;127
000074  4632              MOV      r2,r6                 ;127
000076  4629              MOV      r1,r5                 ;127
000078  4811              LDR      r0,|L1.192|
00007a  6800              LDR      r0,[r0,#0]            ;127  ; OSTCBCurPtr
00007c  f7fffffe          BL       OS_TickListInsert
000080  8820              LDRH     r0,[r4,#0]            ;131
000082  b138              CBZ      r0,|L1.148|
000084  bf00              NOP                            ;132
000086  bf00              NOP                            ;132
000088  4638              MOV      r0,r7                 ;132
00008a  f7fffffe          BL       CPU_SR_Restore
00008e  bf00              NOP                            ;132
000090  bf00              NOP                            ;132
000092  e7c2              B        |L1.26|
                  |L1.148|
000094  480a              LDR      r0,|L1.192|
000096  6800              LDR      r0,[r0,#0]            ;135  ; OSTCBCurPtr
000098  f7fffffe          BL       OS_RdyListRemove
00009c  bf00              NOP                            ;136
00009e  bf00              NOP                            ;136
0000a0  4638              MOV      r0,r7                 ;136
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;136
0000a8  bf00              NOP                            ;136
0000aa  f7fffffe          BL       OSSched
0000ae  2000              MOVS     r0,#0                 ;138
0000b0  8020              STRH     r0,[r4,#0]            ;138
0000b2  bf00              NOP      
0000b4  e7b1              B        |L1.26|
;;;140    
                          ENDP

0000b6  0000              DCW      0x0000
                  |L1.184|
                          DCD      OSIntNestingCtr
                  |L1.188|
                          DCD      OSSchedLockNestingCtr
                  |L1.192|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeDlyHMSM||, CODE, READONLY, ALIGN=2

                  OSTimeDlyHMSM PROC
;;;199    #if OS_CFG_TIME_DLY_HMSM_EN > 0u
;;;200    void  OSTimeDlyHMSM (CPU_INT16U   hours,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;201                         CPU_INT16U   minutes,
;;;202                         CPU_INT16U   seconds,
;;;203                         CPU_INT32U   milli,
;;;204                         OS_OPT       opt,
;;;205                         OS_ERR      *p_err)
;;;206    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
00000c  e9dda40e          LDRD     r10,r4,[sp,#0x38]
;;;207    #if OS_CFG_ARG_CHK_EN > 0u
;;;208        CPU_BOOLEAN  opt_invalid;
;;;209        CPU_BOOLEAN  opt_non_strict;
;;;210    #endif
;;;211        OS_OPT       opt_time;
;;;212        OS_RATE_HZ   tick_rate;
;;;213        OS_TICK      ticks;
;;;214        CPU_SR_ALLOC();
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
;;;215    
;;;216    
;;;217    
;;;218    #ifdef OS_SAFETY_CRITICAL
;;;219        if (p_err == (OS_ERR *)0) {
;;;220            OS_SAFETY_CRITICAL_EXCEPTION();
;;;221            return;
;;;222        }
;;;223    #endif
;;;224    
;;;225    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;226        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
000014  485d              LDR      r0,|L2.396|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000018  2800              CMP      r0,#0
00001a  dd04              BLE      |L2.38|
;;;227           *p_err = OS_ERR_TIME_DLY_ISR;
00001c  f2472075          MOV      r0,#0x7275
000020  8020              STRH     r0,[r4,#0]
                  |L2.34|
;;;228            return;
;;;229        }
;;;230    #endif
;;;231    
;;;232        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
;;;233           *p_err = OS_ERR_SCHED_LOCKED;
;;;234            return;
;;;235        }
;;;236    
;;;237        opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
;;;238        switch (opt_time) {
;;;239            case OS_OPT_TIME_DLY:
;;;240            case OS_OPT_TIME_TIMEOUT:
;;;241            case OS_OPT_TIME_PERIODIC:
;;;242                 if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
;;;243                     if (seconds == (CPU_INT16U)0u) {
;;;244                         if (minutes == (CPU_INT16U)0u) {
;;;245                             if (hours == (CPU_INT16U)0u) {
;;;246                                *p_err = OS_ERR_TIME_ZERO_DLY;
;;;247                                 return;
;;;248                             }
;;;249                         }
;;;250                     }
;;;251                 }
;;;252                 break;
;;;253    
;;;254            case OS_OPT_TIME_MATCH:
;;;255                 break;
;;;256    
;;;257            default:
;;;258                *p_err = OS_ERR_OPT_INVALID;
;;;259                 return;
;;;260        }
;;;261    
;;;262    #if OS_CFG_ARG_CHK_EN > 0u                                  /* Validate arguments to be within range                  */
;;;263        opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
;;;264        if (opt_invalid == DEF_YES) {
;;;265           *p_err = OS_ERR_OPT_INVALID;
;;;266            return;
;;;267        }
;;;268    
;;;269        opt_non_strict = DEF_BIT_IS_SET(opt, OS_OPT_TIME_HMSM_NON_STRICT);
;;;270        if (opt_non_strict != DEF_YES) {
;;;271             if (milli   > (CPU_INT32U)999u) {
;;;272                *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
;;;273                 return;
;;;274             }
;;;275             if (seconds > (CPU_INT16U)59u) {
;;;276                *p_err = OS_ERR_TIME_INVALID_SECONDS;
;;;277                 return;
;;;278             }
;;;279             if (minutes > (CPU_INT16U)59u) {
;;;280                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;281                 return;
;;;282             }
;;;283             if (hours   > (CPU_INT16U)99u) {
;;;284                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;285                 return;
;;;286             }
;;;287        } else {
;;;288             if (minutes > (CPU_INT16U)9999u) {
;;;289                *p_err = OS_ERR_TIME_INVALID_MINUTES;
;;;290                 return;
;;;291             }
;;;292             if (hours   > (CPU_INT16U)999u) {
;;;293                *p_err = OS_ERR_TIME_INVALID_HOURS;
;;;294                 return;
;;;295             }
;;;296        }
;;;297    #endif
;;;298    
;;;299                                                                /* Compute the total number of clock ticks required..     */
;;;300                                                                /* .. (rounded to the nearest tick)                       */
;;;301        tick_rate = OSCfg_TickRate_Hz;
;;;302        ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
;;;303                  + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
;;;304    
;;;305        if (ticks > (OS_TICK)0u) {
;;;306            OS_CRITICAL_ENTER();
;;;307            OSTCBCurPtr->TaskState = OS_TASK_STATE_DLY;
;;;308            OS_TickListInsert(OSTCBCurPtr,
;;;309                              ticks,
;;;310                              opt_time,
;;;311                              p_err);
;;;312            if (*p_err != OS_ERR_NONE) {
;;;313                 OS_CRITICAL_EXIT_NO_SCHED();
;;;314                 return;
;;;315            }
;;;316            OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
;;;317            OS_CRITICAL_EXIT_NO_SCHED();
;;;318            OSSched();                                          /* Find next task to run!                                 */
;;;319           *p_err = OS_ERR_NONE;
;;;320        } else {
;;;321           *p_err = OS_ERR_TIME_ZERO_DLY;
;;;322        }
;;;323    }
000022  e8bd9fff          POP      {r0-r12,pc}
                  |L2.38|
000026  485a              LDR      r0,|L2.400|
000028  7800              LDRB     r0,[r0,#0]            ;232  ; OSSchedLockNestingCtr
00002a  2800              CMP      r0,#0                 ;232
00002c  dd03              BLE      |L2.54|
00002e  f6465063          MOV      r0,#0x6d63            ;233
000032  8020              STRH     r0,[r4,#0]            ;233
000034  e7f5              B        |L2.34|
                  |L2.54|
000036  f00a0b0e          AND      r11,r10,#0xe          ;237
00003a  f1bb0f00          CMP      r11,#0                ;238
00003e  d009              BEQ      |L2.84|
000040  f1bb0f02          CMP      r11,#2                ;238
000044  d007              BEQ      |L2.86|
000046  f1bb0f04          CMP      r11,#4                ;238
00004a  d010              BEQ      |L2.110|
00004c  f1bb0f08          CMP      r11,#8                ;238
000050  d10e              BNE      |L2.112|
000052  e001              B        |L2.88|
                  |L2.84|
000054  bf00              NOP                            ;240
                  |L2.86|
000056  bf00              NOP                            ;241
                  |L2.88|
000058  f1b80f00          CMP      r8,#0                 ;242
00005c  d106              BNE      |L2.108|
00005e  b92f              CBNZ     r7,|L2.108|
000060  b926              CBNZ     r6,|L2.108|
000062  b91d              CBNZ     r5,|L2.108|
000064  f247207e          MOV      r0,#0x727e            ;246
000068  8020              STRH     r0,[r4,#0]            ;246
00006a  e7da              B        |L2.34|
                  |L2.108|
00006c  e004              B        |L2.120|
                  |L2.110|
00006e  e003              B        |L2.120|
                  |L2.112|
000070  f6456025          MOV      r0,#0x5e25            ;258
000074  8020              STRH     r0,[r4,#0]            ;258
000076  e7d4              B        |L2.34|
                  |L2.120|
000078  bf00              NOP                            ;252
00007a  f02a001e          BIC      r0,r10,#0x1e          ;263
00007e  b108              CBZ      r0,|L2.132|
000080  2001              MOVS     r0,#1                 ;263
000082  e000              B        |L2.134|
                  |L2.132|
000084  2000              MOVS     r0,#0                 ;263
                  |L2.134|
000086  9003              STR      r0,[sp,#0xc]          ;263
000088  9803              LDR      r0,[sp,#0xc]          ;264
00008a  2801              CMP      r0,#1                 ;264
00008c  d103              BNE      |L2.150|
00008e  f6456025          MOV      r0,#0x5e25            ;265
000092  8020              STRH     r0,[r4,#0]            ;265
000094  e7c5              B        |L2.34|
                  |L2.150|
000096  f3ca1000          UBFX     r0,r10,#4,#1          ;269
00009a  9002              STR      r0,[sp,#8]            ;269
00009c  9802              LDR      r0,[sp,#8]            ;270
00009e  b9c0              CBNZ     r0,|L2.210|
0000a0  f5b87f7a          CMP      r8,#0x3e8             ;271
0000a4  d303              BCC      |L2.174|
0000a6  f247207b          MOV      r0,#0x727b            ;272
0000aa  8020              STRH     r0,[r4,#0]            ;272
0000ac  e7b9              B        |L2.34|
                  |L2.174|
0000ae  2f3b              CMP      r7,#0x3b              ;275
0000b0  dd03              BLE      |L2.186|
0000b2  f247207a          MOV      r0,#0x727a            ;276
0000b6  8020              STRH     r0,[r4,#0]            ;276
0000b8  e7b3              B        |L2.34|
                  |L2.186|
0000ba  2e3b              CMP      r6,#0x3b              ;279
0000bc  dd03              BLE      |L2.198|
0000be  f2472079          MOV      r0,#0x7279            ;280
0000c2  8020              STRH     r0,[r4,#0]            ;280
0000c4  e7ad              B        |L2.34|
                  |L2.198|
0000c6  2d63              CMP      r5,#0x63              ;283
0000c8  dd12              BLE      |L2.240|
0000ca  f2472078          MOV      r0,#0x7278            ;284
0000ce  8020              STRH     r0,[r4,#0]            ;284
0000d0  e7a7              B        |L2.34|
                  |L2.210|
0000d2  f242700f          MOV      r0,#0x270f            ;288
0000d6  4286              CMP      r6,r0                 ;288
0000d8  dd03              BLE      |L2.226|
0000da  f2472079          MOV      r0,#0x7279            ;289
0000de  8020              STRH     r0,[r4,#0]            ;289
0000e0  e79f              B        |L2.34|
                  |L2.226|
0000e2  f5b57f7a          CMP      r5,#0x3e8             ;292
0000e6  db03              BLT      |L2.240|
0000e8  f2472078          MOV      r0,#0x7278            ;293
0000ec  8020              STRH     r0,[r4,#0]            ;293
0000ee  e798              B        |L2.34|
                  |L2.240|
0000f0  4828              LDR      r0,|L2.404|
0000f2  f8d09000          LDR      r9,[r0,#0]            ;301  ; OSCfg_TickRate_Hz
0000f6  f44f70fa          MOV      r0,#0x1f4             ;302
0000fa  fbb0f0f9          UDIV     r0,r0,r9              ;302
0000fe  4440              ADD      r0,r0,r8              ;302
000100  fb00f009          MUL      r0,r0,r9              ;302
000104  f44f717a          MOV      r1,#0x3e8             ;302
000108  fbb0f1f1          UDIV     r1,r0,r1              ;302
00010c  f44f6061          MOV      r0,#0xe10             ;302
000110  4368              MULS     r0,r5,r0              ;302
000112  ebc61206          RSB      r2,r6,r6,LSL #4       ;302
000116  eb000082          ADD      r0,r0,r2,LSL #2       ;302
00011a  4438              ADD      r0,r0,r7              ;302
00011c  fb001009          MLA      r0,r0,r9,r1           ;302
000120  9001              STR      r0,[sp,#4]            ;302
000122  9801              LDR      r0,[sp,#4]            ;305
000124  b360              CBZ      r0,|L2.384|
000126  bf00              NOP                            ;306
000128  bf00              NOP                            ;306
00012a  f7fffffe          BL       CPU_SR_Save
00012e  9000              STR      r0,[sp,#0]            ;306
000130  bf00              NOP                            ;306
000132  bf00              NOP                            ;306
000134  2001              MOVS     r0,#1                 ;307
000136  4918              LDR      r1,|L2.408|
000138  6809              LDR      r1,[r1,#0]            ;307  ; OSTCBCurPtr
00013a  f8810036          STRB     r0,[r1,#0x36]         ;307
00013e  4623              MOV      r3,r4                 ;308
000140  465a              MOV      r2,r11                ;308
000142  4815              LDR      r0,|L2.408|
000144  9901              LDR      r1,[sp,#4]            ;308
000146  6800              LDR      r0,[r0,#0]            ;308  ; OSTCBCurPtr
000148  f7fffffe          BL       OS_TickListInsert
00014c  8820              LDRH     r0,[r4,#0]            ;312
00014e  b138              CBZ      r0,|L2.352|
000150  bf00              NOP                            ;313
000152  bf00              NOP                            ;313
000154  9800              LDR      r0,[sp,#0]            ;313
000156  f7fffffe          BL       CPU_SR_Restore
00015a  bf00              NOP                            ;313
00015c  bf00              NOP                            ;313
00015e  e760              B        |L2.34|
                  |L2.352|
000160  480d              LDR      r0,|L2.408|
000162  6800              LDR      r0,[r0,#0]            ;316  ; OSTCBCurPtr
000164  f7fffffe          BL       OS_RdyListRemove
000168  bf00              NOP                            ;317
00016a  bf00              NOP                            ;317
00016c  9800              LDR      r0,[sp,#0]            ;317
00016e  f7fffffe          BL       CPU_SR_Restore
000172  bf00              NOP                            ;317
000174  bf00              NOP                            ;317
000176  f7fffffe          BL       OSSched
00017a  2000              MOVS     r0,#0                 ;319
00017c  8020              STRH     r0,[r4,#0]            ;319
00017e  e002              B        |L2.390|
                  |L2.384|
000180  f247207e          MOV      r0,#0x727e            ;321
000184  8020              STRH     r0,[r4,#0]            ;321
                  |L2.390|
000186  bf00              NOP      
000188  e74b              B        |L2.34|
;;;324    #endif
                          ENDP

00018a  0000              DCW      0x0000
                  |L2.396|
                          DCD      OSIntNestingCtr
                  |L2.400|
                          DCD      OSSchedLockNestingCtr
                  |L2.404|
                          DCD      OSCfg_TickRate_Hz
                  |L2.408|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeDlyResume||, CODE, READONLY, ALIGN=2

                  OSTimeDlyResume PROC
;;;348    #if OS_CFG_TIME_DLY_RESUME_EN > 0u
;;;349    void  OSTimeDlyResume (OS_TCB  *p_tcb,
000000  b570              PUSH     {r4-r6,lr}
;;;350                           OS_ERR  *p_err)
;;;351    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;352        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;353    
;;;354    
;;;355    
;;;356    #ifdef OS_SAFETY_CRITICAL
;;;357        if (p_err == (OS_ERR *)0) {
;;;358            OS_SAFETY_CRITICAL_EXCEPTION();
;;;359            return;
;;;360        }
;;;361    #endif
;;;362    
;;;363    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;364        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
000008  4851              LDR      r0,|L3.336|
00000a  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000c  2800              CMP      r0,#0
00000e  dd03              BLE      |L3.24|
;;;365           *p_err = OS_ERR_TIME_DLY_RESUME_ISR;
000010  f2472076          MOV      r0,#0x7276
000014  8020              STRH     r0,[r4,#0]
                  |L3.22|
;;;366            return;
;;;367        }
;;;368    #endif
;;;369    
;;;370    #if OS_CFG_ARG_CHK_EN > 0u
;;;371        if (p_tcb == (OS_TCB *)0) {                             /* Not possible for the running task to be delayed!       */
;;;372           *p_err = OS_ERR_TASK_NOT_DLY;
;;;373            return;
;;;374        }
;;;375    #endif
;;;376    
;;;377        CPU_CRITICAL_ENTER();
;;;378        if (p_tcb == OSTCBCurPtr) {                             /* Not possible for the running task to be delayed!       */
;;;379           *p_err = OS_ERR_TASK_NOT_DLY;
;;;380            CPU_CRITICAL_EXIT();
;;;381            return;
;;;382        }
;;;383    
;;;384        switch (p_tcb->TaskState) {
;;;385            case OS_TASK_STATE_RDY:                             /* Cannot Abort delay if task is ready                    */
;;;386                 CPU_CRITICAL_EXIT();
;;;387                *p_err = OS_ERR_TASK_NOT_DLY;
;;;388                 break;
;;;389    
;;;390            case OS_TASK_STATE_DLY:
;;;391                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;392                 p_tcb->TaskState = OS_TASK_STATE_RDY;
;;;393                 OS_TickListRemove(p_tcb);                      /* Remove task from tick list                             */
;;;394                 OS_RdyListInsert(p_tcb);                       /* Add to ready list                                      */
;;;395                 OS_CRITICAL_EXIT_NO_SCHED();
;;;396                *p_err = OS_ERR_NONE;
;;;397                 break;
;;;398    
;;;399            case OS_TASK_STATE_PEND:
;;;400                 CPU_CRITICAL_EXIT();
;;;401                *p_err = OS_ERR_TASK_NOT_DLY;
;;;402                 break;
;;;403    
;;;404            case OS_TASK_STATE_PEND_TIMEOUT:
;;;405                 CPU_CRITICAL_EXIT();
;;;406                *p_err = OS_ERR_TASK_NOT_DLY;
;;;407                 break;
;;;408    
;;;409            case OS_TASK_STATE_SUSPENDED:
;;;410                 CPU_CRITICAL_EXIT();
;;;411                *p_err = OS_ERR_TASK_NOT_DLY;
;;;412                 break;
;;;413    
;;;414            case OS_TASK_STATE_DLY_SUSPENDED:
;;;415                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;416                 p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
;;;417                 OS_TickListRemove(p_tcb);                      /* Remove task from tick list                             */
;;;418                 OS_CRITICAL_EXIT_NO_SCHED();
;;;419                *p_err            = OS_ERR_TASK_SUSPENDED;
;;;420                 break;
;;;421    
;;;422            case OS_TASK_STATE_PEND_SUSPENDED:
;;;423                 CPU_CRITICAL_EXIT();
;;;424                *p_err = OS_ERR_TASK_NOT_DLY;
;;;425                 break;
;;;426    
;;;427            case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
;;;428                 CPU_CRITICAL_EXIT();
;;;429                *p_err = OS_ERR_TASK_NOT_DLY;
;;;430                 break;
;;;431    
;;;432            default:
;;;433                 CPU_CRITICAL_EXIT();
;;;434                *p_err = OS_ERR_STATE_INVALID;
;;;435                 break;
;;;436        }
;;;437    
;;;438        OSSched();
;;;439    }
000016  bd70              POP      {r4-r6,pc}
                  |L3.24|
000018  b91d              CBNZ     r5,|L3.34|
00001a  f2471051          MOV      r0,#0x7151            ;372
00001e  8020              STRH     r0,[r4,#0]            ;372
000020  e7f9              B        |L3.22|
                  |L3.34|
000022  bf00              NOP                            ;377
000024  bf00              NOP                            ;377
000026  f7fffffe          BL       CPU_SR_Save
00002a  4606              MOV      r6,r0                 ;377
00002c  bf00              NOP                            ;377
00002e  bf00              NOP                            ;377
000030  4848              LDR      r0,|L3.340|
000032  6800              LDR      r0,[r0,#0]            ;378  ; OSTCBCurPtr
000034  4285              CMP      r5,r0                 ;378
000036  d10a              BNE      |L3.78|
000038  f2471051          MOV      r0,#0x7151            ;379
00003c  8020              STRH     r0,[r4,#0]            ;379
00003e  bf00              NOP                            ;380
000040  bf00              NOP                            ;380
000042  4630              MOV      r0,r6                 ;380
000044  f7fffffe          BL       CPU_SR_Restore
000048  bf00              NOP                            ;380
00004a  bf00              NOP                            ;380
00004c  e7e3              B        |L3.22|
                  |L3.78|
00004e  f8950036          LDRB     r0,[r5,#0x36]         ;384
000052  2808              CMP      r0,#8                 ;384
000054  d26b              BCS      |L3.302|
000056  e8dff000          TBB      [pc,r0]               ;384
00005a  040f              DCB      0x04,0x0f
00005c  222d3843          DCB      0x22,0x2d,0x38,0x43
000060  545f              DCB      0x54,0x5f
000062  bf00              NOP                            ;386
000064  bf00              NOP                            ;386
000066  4630              MOV      r0,r6                 ;386
000068  f7fffffe          BL       CPU_SR_Restore
00006c  bf00              NOP                            ;386
00006e  bf00              NOP                            ;386
000070  f2471051          MOV      r0,#0x7151            ;387
000074  8020              STRH     r0,[r4,#0]            ;387
000076  e065              B        |L3.324|
000078  2000              MOVS     r0,#0                 ;392
00007a  f8850036          STRB     r0,[r5,#0x36]         ;392
00007e  4628              MOV      r0,r5                 ;393
000080  f7fffffe          BL       OS_TickListRemove
000084  4628              MOV      r0,r5                 ;394
000086  f7fffffe          BL       OS_RdyListInsert
00008a  bf00              NOP                            ;395
00008c  bf00              NOP                            ;395
00008e  4630              MOV      r0,r6                 ;395
000090  f7fffffe          BL       CPU_SR_Restore
000094  bf00              NOP                            ;395
000096  bf00              NOP                            ;395
000098  2000              MOVS     r0,#0                 ;396
00009a  8020              STRH     r0,[r4,#0]            ;396
00009c  e052              B        |L3.324|
00009e  bf00              NOP                            ;400
0000a0  bf00              NOP                            ;400
0000a2  4630              MOV      r0,r6                 ;400
0000a4  f7fffffe          BL       CPU_SR_Restore
0000a8  bf00              NOP                            ;400
0000aa  bf00              NOP                            ;400
0000ac  f2471051          MOV      r0,#0x7151            ;401
0000b0  8020              STRH     r0,[r4,#0]            ;401
0000b2  e047              B        |L3.324|
0000b4  bf00              NOP                            ;405
0000b6  bf00              NOP                            ;405
0000b8  4630              MOV      r0,r6                 ;405
0000ba  f7fffffe          BL       CPU_SR_Restore
0000be  bf00              NOP                            ;405
0000c0  bf00              NOP                            ;405
0000c2  f2471051          MOV      r0,#0x7151            ;406
0000c6  8020              STRH     r0,[r4,#0]            ;406
0000c8  e03c              B        |L3.324|
0000ca  bf00              NOP                            ;410
0000cc  bf00              NOP                            ;410
0000ce  4630              MOV      r0,r6                 ;410
0000d0  f7fffffe          BL       CPU_SR_Restore
0000d4  bf00              NOP                            ;410
0000d6  bf00              NOP                            ;410
0000d8  f2471051          MOV      r0,#0x7151            ;411
0000dc  8020              STRH     r0,[r4,#0]            ;411
0000de  e031              B        |L3.324|
0000e0  2004              MOVS     r0,#4                 ;416
0000e2  f8850036          STRB     r0,[r5,#0x36]         ;416
0000e6  4628              MOV      r0,r5                 ;417
0000e8  f7fffffe          BL       OS_TickListRemove
0000ec  bf00              NOP                            ;418
0000ee  bf00              NOP                            ;418
0000f0  4630              MOV      r0,r6                 ;418
0000f2  f7fffffe          BL       CPU_SR_Restore
0000f6  bf00              NOP                            ;418
0000f8  bf00              NOP                            ;418
0000fa  f247105a          MOV      r0,#0x715a            ;419
0000fe  8020              STRH     r0,[r4,#0]            ;419
000100  e020              B        |L3.324|
000102  bf00              NOP                            ;423
000104  bf00              NOP                            ;423
000106  4630              MOV      r0,r6                 ;423
000108  f7fffffe          BL       CPU_SR_Restore
00010c  bf00              NOP                            ;423
00010e  bf00              NOP                            ;423
000110  f2471051          MOV      r0,#0x7151            ;424
000114  8020              STRH     r0,[r4,#0]            ;424
000116  e015              B        |L3.324|
000118  bf00              NOP                            ;428
00011a  bf00              NOP                            ;428
00011c  4630              MOV      r0,r6                 ;428
00011e  f7fffffe          BL       CPU_SR_Restore
000122  bf00              NOP                            ;428
000124  bf00              NOP                            ;428
000126  f2471051          MOV      r0,#0x7151            ;429
00012a  8020              STRH     r0,[r4,#0]            ;429
00012c  e00a              B        |L3.324|
                  |L3.302|
00012e  bf00              NOP                            ;433
000130  bf00              NOP                            ;433
000132  4630              MOV      r0,r6                 ;433
000134  f7fffffe          BL       CPU_SR_Restore
000138  bf00              NOP                            ;433
00013a  bf00              NOP                            ;433
00013c  f646602d          MOV      r0,#0x6e2d            ;434
000140  8020              STRH     r0,[r4,#0]            ;434
000142  bf00              NOP                            ;435
                  |L3.324|
000144  bf00              NOP                            ;388
000146  f7fffffe          BL       OSSched
00014a  bf00              NOP      
00014c  e763              B        |L3.22|
;;;440    #endif
                          ENDP

00014e  0000              DCW      0x0000
                  |L3.336|
                          DCD      OSIntNestingCtr
                  |L3.340|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSTimeGet||, CODE, READONLY, ALIGN=2

                  OSTimeGet PROC
;;;456    
;;;457    OS_TICK  OSTimeGet (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;458    {
000002  4604              MOV      r4,r0
;;;459        OS_TICK  ticks;
;;;460        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;461    
;;;462    
;;;463    
;;;464    #ifdef OS_SAFETY_CRITICAL
;;;465        if (p_err == (OS_ERR *)0) {
;;;466            OS_SAFETY_CRITICAL_EXCEPTION();
;;;467            return ((OS_TICK)0);
;;;468        }
;;;469    #endif
;;;470    
;;;471        CPU_CRITICAL_ENTER();
000006  bf00              NOP      
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SR_Save
00000e  4606              MOV      r6,r0
000010  bf00              NOP      
000012  bf00              NOP      
;;;472        ticks = OSTickCtr;
000014  4806              LDR      r0,|L4.48|
000016  6805              LDR      r5,[r0,#0]  ; OSTickCtr
;;;473        CPU_CRITICAL_EXIT();
000018  bf00              NOP      
00001a  bf00              NOP      
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       CPU_SR_Restore
000022  bf00              NOP      
000024  bf00              NOP      
;;;474       *p_err = OS_ERR_NONE;
000026  2000              MOVS     r0,#0
000028  8020              STRH     r0,[r4,#0]
;;;475        return (ticks);
00002a  4628              MOV      r0,r5
;;;476    }
00002c  bd70              POP      {r4-r6,pc}
;;;477    
                          ENDP

00002e  0000              DCW      0x0000
                  |L4.48|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeSet||, CODE, READONLY, ALIGN=2

                  OSTimeSet PROC
;;;493    
;;;494    void  OSTimeSet (OS_TICK   ticks,
000000  b570              PUSH     {r4-r6,lr}
;;;495                     OS_ERR   *p_err)
;;;496    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;497        CPU_SR_ALLOC();
000006  2600              MOVS     r6,#0
;;;498    
;;;499    
;;;500    
;;;501    #ifdef OS_SAFETY_CRITICAL
;;;502        if (p_err == (OS_ERR *)0) {
;;;503            OS_SAFETY_CRITICAL_EXCEPTION();
;;;504            return;
;;;505        }
;;;506    #endif
;;;507    
;;;508        CPU_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4606              MOV      r6,r0
000012  bf00              NOP      
000014  bf00              NOP      
;;;509        OSTickCtr = ticks;
000016  4806              LDR      r0,|L5.48|
000018  6004              STR      r4,[r0,#0]  ; OSTickCtr
;;;510        CPU_CRITICAL_EXIT();
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       CPU_SR_Restore
000024  bf00              NOP      
000026  bf00              NOP      
;;;511       *p_err     = OS_ERR_NONE;
000028  2000              MOVS     r0,#0
00002a  8028              STRH     r0,[r5,#0]
;;;512    }
00002c  bd70              POP      {r4-r6,pc}
;;;513    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      OSTickCtr

                          AREA ||i.OSTimeTick||, CODE, READONLY, ALIGN=2

                  OSTimeTick PROC
;;;527    
;;;528    void  OSTimeTick (void)
000000  b508              PUSH     {r3,lr}
;;;529    {
;;;530        OS_ERR  err;
;;;531    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;532        CPU_TS  ts;
;;;533    #endif
;;;534    
;;;535    
;;;536        OSTimeTickHook();                                       /* Call user definable hook                               */
000002  f7fffffe          BL       OSTimeTickHook
;;;537    
;;;538    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;539    
;;;540        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;541        OS_IntQPost((OS_OBJ_TYPE) OS_OBJ_TYPE_TICK,             /* Post to ISR queue                                      */
;;;542                    (void      *)&OSRdyList[OSPrioCur],
;;;543                    (void      *) 0,
;;;544                    (OS_MSG_SIZE) 0u,
;;;545                    (OS_FLAGS   ) 0u,
;;;546                    (OS_OPT     ) 0u,
;;;547                    (CPU_TS     ) ts,
;;;548                    (OS_ERR    *)&err);
;;;549    
;;;550    #else
;;;551    
;;;552       (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
000006  466a              MOV      r2,sp
000008  2100              MOVS     r1,#0
00000a  480e              LDR      r0,|L6.68|
00000c  f7fffffe          BL       OSTaskSemPost
;;;553                           (OS_OPT  ) OS_OPT_POST_NONE,
;;;554                           (OS_ERR *)&err);
;;;555    
;;;556    
;;;557    #if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
;;;558        OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
000010  490d              LDR      r1,|L6.72|
000012  7809              LDRB     r1,[r1,#0]  ; OSPrioCur
000014  eb010141          ADD      r1,r1,r1,LSL #1
000018  4a0c              LDR      r2,|L6.76|
00001a  eb020081          ADD      r0,r2,r1,LSL #2
00001e  f7fffffe          BL       OS_SchedRoundRobin
;;;559    #endif
;;;560    
;;;561    #if OS_CFG_TMR_EN > 0u
;;;562        OSTmrUpdateCtr--;
000022  480b              LDR      r0,|L6.80|
000024  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCtr
000026  1e40              SUBS     r0,r0,#1
000028  4909              LDR      r1,|L6.80|
00002a  6008              STR      r0,[r1,#0]  ; OSTmrUpdateCtr
;;;563        if (OSTmrUpdateCtr == (OS_CTR)0u) {
00002c  4608              MOV      r0,r1
00002e  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCtr
000030  b938              CBNZ     r0,|L6.66|
;;;564            OSTmrUpdateCtr = OSTmrUpdateCnt;
000032  4808              LDR      r0,|L6.84|
000034  6800              LDR      r0,[r0,#0]  ; OSTmrUpdateCnt
000036  6008              STR      r0,[r1,#0]  ; OSTmrUpdateCtr
;;;565            OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
000038  466a              MOV      r2,sp
00003a  2100              MOVS     r1,#0
00003c  4806              LDR      r0,|L6.88|
00003e  f7fffffe          BL       OSTaskSemPost
                  |L6.66|
;;;566                          (OS_OPT  ) OS_OPT_POST_NONE,
;;;567                          (OS_ERR *)&err);
;;;568        }
;;;569    #endif
;;;570    
;;;571    #endif
;;;572    }
000042  bd08              POP      {r3,pc}
                          ENDP

                  |L6.68|
                          DCD      OSTickTaskTCB
                  |L6.72|
                          DCD      OSPrioCur
                  |L6.76|
                          DCD      OSRdyList
                  |L6.80|
                          DCD      OSTmrUpdateCtr
                  |L6.84|
                          DCD      OSTmrUpdateCnt
                  |L6.88|
                          DCD      OSTmrTaskTCB
