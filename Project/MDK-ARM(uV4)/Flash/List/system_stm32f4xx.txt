; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\system_stm32f4xx.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\system_stm32f4xx.crf ..\..\User\bsp_stm32f4xx\system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;686      */
;;;687    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;688    {
;;;689    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F446xx)
;;;690    /******************************************************************************/
;;;691    /*            PLL (clocked by HSE) used as System clock source                */
;;;692    /******************************************************************************/
;;;693      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;694      
;;;695      /* Enable HSE */
;;;696      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4834              LDR      r0,|L1.220|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  4932              LDR      r1,|L1.220|
000012  6008              STR      r0,[r1,#0]
;;;697     
;;;698      /* Wait till HSE is ready and if Time out is reached exit */
;;;699      do
000014  bf00              NOP      
                  |L1.22|
;;;700      {
;;;701        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  4831              LDR      r0,|L1.220|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;702        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;703      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;704    
;;;705      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  482a              LDR      r0,|L1.220|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;706      {
;;;707        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;708      }
;;;709      else
;;;710      {
;;;711        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;712      }
;;;713    
;;;714      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d146              BNE      |L1.218|
;;;715      {
;;;716        /* Select regulator voltage output Scale 1 mode */
;;;717        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4823              LDR      r0,|L1.220|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  4921              LDR      r1,|L1.220|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;718        PWR->CR |= PWR_CR_VOS;
00005c  4820              LDR      r0,|L1.224|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  491e              LDR      r1,|L1.224|
000066  6008              STR      r0,[r1,#0]
;;;719    
;;;720        /* HCLK = SYSCLK / 1*/
;;;721        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  481c              LDR      r0,|L1.220|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  491b              LDR      r1,|L1.220|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;722    
;;;723    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx)     
;;;724        /* PCLK2 = HCLK / 2*/
;;;725        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;726        
;;;727        /* PCLK1 = HCLK / 4*/
;;;728        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;729    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx || STM32F446xx */
;;;730    
;;;731    #if defined(STM32F401xx)
;;;732        /* PCLK2 = HCLK / 2*/
;;;733        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;734        
;;;735        /* PCLK1 = HCLK / 4*/
;;;736        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;737    #endif /* STM32F401xx */
;;;738    
;;;739    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx)    
;;;740        /* Configure the main PLL */
;;;741        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4816              LDR      r0,|L1.228|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;742                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;743    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx || STM32F401xx */
;;;744    
;;;745    #if defined(STM32F446xx)
;;;746        /* Configure the main PLL */
;;;747        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;748                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
;;;749    #endif /* STM32F446xx */    
;;;750        
;;;751        /* Enable the main PLL */
;;;752        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;753    
;;;754        /* Wait till the main PLL is ready */
;;;755        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  480f              LDR      r0,|L1.220|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;756        {
;;;757        }
;;;758       
;;;759    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) 
;;;760        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;761        PWR->CR |= PWR_CR_ODEN;
;;;762        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
;;;763        {
;;;764        }
;;;765        PWR->CR |= PWR_CR_ODSWEN;
;;;766        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
;;;767        {
;;;768        }      
;;;769        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;770        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;771    #endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx */
;;;772    
;;;773    #if defined(STM32F40_41xxx)     
;;;774        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;775        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000a8  f2407005          MOV      r0,#0x705
0000ac  490e              LDR      r1,|L1.232|
0000ae  6008              STR      r0,[r1,#0]
;;;776    #endif /* STM32F40_41xxx  */
;;;777    
;;;778    #if defined(STM32F401xx)
;;;779        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;780        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;781    #endif /* STM32F401xx */
;;;782    
;;;783        /* Select the main PLL as system clock source */
;;;784        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000b0  480a              LDR      r0,|L1.220|
0000b2  3008              ADDS     r0,r0,#8
0000b4  6800              LDR      r0,[r0,#0]
0000b6  f0200003          BIC      r0,r0,#3
0000ba  4908              LDR      r1,|L1.220|
0000bc  3108              ADDS     r1,r1,#8
0000be  6008              STR      r0,[r1,#0]
;;;785        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000c0  4608              MOV      r0,r1
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f0400002          ORR      r0,r0,#2
0000c8  6008              STR      r0,[r1,#0]
;;;786    
;;;787        /* Wait till the main PLL is used as system clock source */
;;;788        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000ca  bf00              NOP      
                  |L1.204|
0000cc  4803              LDR      r0,|L1.220|
0000ce  3008              ADDS     r0,r0,#8
0000d0  6800              LDR      r0,[r0,#0]
0000d2  f000000c          AND      r0,r0,#0xc
0000d6  2808              CMP      r0,#8
0000d8  d1f8              BNE      |L1.204|
                  |L1.218|
;;;789        {
;;;790        }
;;;791      }
;;;792      else
;;;793      { /* If HSE fails to start-up, the application will have wrong clock
;;;794             configuration. User can add here some code to deal with this error */
;;;795      }
;;;796    #elif defined(STM32F411xE)
;;;797    #if defined(USE_HSE_BYPASS) 
;;;798    /******************************************************************************/
;;;799    /*            PLL (clocked by HSE) used as System clock source                */
;;;800    /******************************************************************************/
;;;801      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;802      
;;;803      /* Enable HSE and HSE BYPASS */
;;;804      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;805     
;;;806      /* Wait till HSE is ready and if Time out is reached exit */
;;;807      do
;;;808      {
;;;809        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;810        StartUpCounter++;
;;;811      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;812    
;;;813      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;814      {
;;;815        HSEStatus = (uint32_t)0x01;
;;;816      }
;;;817      else
;;;818      {
;;;819        HSEStatus = (uint32_t)0x00;
;;;820      }
;;;821    
;;;822      if (HSEStatus == (uint32_t)0x01)
;;;823      {
;;;824        /* Select regulator voltage output Scale 1 mode */
;;;825        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;826        PWR->CR |= PWR_CR_VOS;
;;;827    
;;;828        /* HCLK = SYSCLK / 1*/
;;;829        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;830    
;;;831        /* PCLK2 = HCLK / 2*/
;;;832        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;833        
;;;834        /* PCLK1 = HCLK / 4*/
;;;835        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;836    
;;;837        /* Configure the main PLL */
;;;838        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;839                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;840        
;;;841        /* Enable the main PLL */
;;;842        RCC->CR |= RCC_CR_PLLON;
;;;843    
;;;844        /* Wait till the main PLL is ready */
;;;845        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;846        {
;;;847        }
;;;848    
;;;849        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;850        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;851    
;;;852        /* Select the main PLL as system clock source */
;;;853        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;854        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;855    
;;;856        /* Wait till the main PLL is used as system clock source */
;;;857        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;858        {
;;;859        }
;;;860      }
;;;861      else
;;;862      { /* If HSE fails to start-up, the application will have wrong clock
;;;863             configuration. User can add here some code to deal with this error */
;;;864      }
;;;865    #else /* HSI will be used as PLL clock source */
;;;866      /* Select regulator voltage output Scale 1 mode */
;;;867      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;868      PWR->CR |= PWR_CR_VOS;
;;;869      
;;;870      /* HCLK = SYSCLK / 1*/
;;;871      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;872      
;;;873      /* PCLK2 = HCLK / 2*/
;;;874      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;875      
;;;876      /* PCLK1 = HCLK / 4*/
;;;877      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;878      
;;;879      /* Configure the main PLL */
;;;880      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;881      
;;;882      /* Enable the main PLL */
;;;883      RCC->CR |= RCC_CR_PLLON;
;;;884      
;;;885      /* Wait till the main PLL is ready */
;;;886      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;887      {
;;;888      }
;;;889      
;;;890      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;891      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;892      
;;;893      /* Select the main PLL as system clock source */
;;;894      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;895      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;896      
;;;897      /* Wait till the main PLL is used as system clock source */
;;;898      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;899      {
;;;900      }
;;;901    #endif /* USE_HSE_BYPASS */  
;;;902    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx */  
;;;903    }
0000da  bd0c              POP      {r2,r3,pc}
;;;904    
                          ENDP

                  |L1.220|
                          DCD      0x40023800
                  |L1.224|
                          DCD      0x40007000
                  |L1.228|
                          DCD      0x07405408
                  |L1.232|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;592      */
;;;593    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;594    {
;;;595      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;596    #if defined(STM32F446xx)  
;;;597      uint32_t pllr = 2;
;;;598    #endif /* STM32F446xx */
;;;599      /* Get SYSCLK source -------------------------------------------------------*/
;;;600      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;601    
;;;602      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;603      {
;;;604        case 0x00:  /* HSI used as system clock source */
;;;605          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;606          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;607        case 0x04:  /* HSE used as system clock source */
;;;608          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;609          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;610        case 0x08:  /* PLL P used as system clock source */
;;;611           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;612             SYSCLK = PLL_VCO / PLL_P
;;;613             */    
;;;614          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;615          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;616          
;;;617    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F446xx)
;;;618          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;619          {
;;;620            /* HSE used as PLL clock source */
;;;621            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;622          }
;;;623          else
;;;624          {
;;;625            /* HSI used as PLL clock source */
;;;626            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;627          }
;;;628    #elif defined(STM32F411xE)
;;;629    #if defined(USE_HSE_BYPASS)
;;;630          if (pllsource != 0)
;;;631          {
;;;632            /* HSE used as PLL clock source */
;;;633            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;634          }  
;;;635    #else  
;;;636          if (pllsource == 0)
;;;637          {
;;;638            /* HSI used as PLL clock source */
;;;639            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;640          }  
;;;641    #endif /* USE_HSE_BYPASS */  
;;;642    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F446xx */  
;;;643          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;644          SystemCoreClock = pllvco/pllp;      
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;645          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;646    #if defined(STM32F446xx)      
;;;647          case 0x0C:  /* PLL R used as system clock source */
;;;648           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;649             SYSCLK = PLL_VCO / PLL_R
;;;650             */    
;;;651          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;652          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;653          if (pllsource != 0)
;;;654          {
;;;655            /* HSE used as PLL clock source */
;;;656            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;657          }
;;;658          else
;;;659          {
;;;660            /* HSI used as PLL clock source */
;;;661            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;662          }
;;;663     
;;;664          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
;;;665          SystemCoreClock = pllvco/pllr;      
;;;666          break;
;;;667    #endif /* STM32F446xx */
;;;668        default:
;;;669          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;670          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;606
;;;671      }
;;;672      /* Compute HCLK frequency --------------------------------------------------*/
;;;673      /* Get HCLK prescaler */
;;;674      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;675      /* HCLK frequency */
;;;676      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;677    }
0000a8  bd70              POP      {r4-r6,pc}
;;;678    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x017d7840
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;515      */
;;;516    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;517    {
;;;518      /* FPU settings ------------------------------------------------------------*/
;;;519      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;520        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;521      #endif
;;;522      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;523      /* Set HSION bit */
;;;524      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;525    
;;;526      /* Reset CFGR register */
;;;527      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;528    
;;;529      /* Reset HSEON, CSSON and PLLON bits */
;;;530      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;531    
;;;532      /* Reset PLLCFGR register */
;;;533      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;534    
;;;535      /* Reset HSEBYP bit */
;;;536      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;537    
;;;538      /* Disable all interrupts */
;;;539      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;540    
;;;541    #if defined(DATA_IN_ExtSRAM) || defined(DATA_IN_ExtSDRAM)
;;;542      SystemInit_ExtMemCtl(); 
;;;543    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;544             
;;;545      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;546         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;547      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;548    
;;;549      /* Configure the Vector Table location add offset address ------------------*/
;;;550    #ifdef VECT_TAB_SRAM
;;;551      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;552    #else
;;;553      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;554    #endif
;;;555    }
000056  bd10              POP      {r4,pc}
;;;556    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0a037a00
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 144
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 300
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
