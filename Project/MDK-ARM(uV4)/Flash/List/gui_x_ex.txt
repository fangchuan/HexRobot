; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\gui_x_ex.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\gui_x_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\gui_x_ex.crf ..\..\emWin\GUI_X\GUI_X_Ex.c]
                          THUMB

                          AREA ||i.CheckInit||, CODE, READONLY, ALIGN=2

                  CheckInit PROC
;;;191    
;;;192    void  CheckInit (void) 
000000  b510              PUSH     {r4,lr}
;;;193    {
;;;194    	if (KeyIsInited == DEF_FALSE) {
000002  4804              LDR      r0,|L1.20|
000004  7800              LDRB     r0,[r0,#0]  ; KeyIsInited
000006  b920              CBNZ     r0,|L1.18|
;;;195    		KeyIsInited = DEF_TRUE;
000008  2001              MOVS     r0,#1
00000a  4902              LDR      r1,|L1.20|
00000c  7008              STRB     r0,[r1,#0]
;;;196    		GUI_X_Init();
00000e  f7fffffe          BL       GUI_X_Init
                  |L1.18|
;;;197    	}
;;;198    }
000012  bd10              POP      {r4,pc}
;;;199    
                          ENDP

                  |L1.20|
                          DCD      KeyIsInited

                          AREA ||i.GUI_X_Delay||, CODE, READONLY, ALIGN=1

                  GUI_X_Delay PROC
;;;77     
;;;78     void  GUI_X_Delay (int period) 
000000  b538              PUSH     {r3-r5,lr}
;;;79     {
000002  4604              MOV      r4,r0
;;;80       OS_ERR      err;
;;;81       OSTimeDly(period, OS_OPT_TIME_DLY, &err);
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       OSTimeDly
;;;82     }
00000e  bd38              POP      {r3-r5,pc}
;;;83     
                          ENDP


                          AREA ||i.GUI_X_ErrorOut||, CODE, READONLY, ALIGN=1

                  GUI_X_ErrorOut PROC
;;;250    void GUI_X_Warn    (const char *s) { GUI_USE_PARA(s); }
;;;251    void GUI_X_ErrorOut(const char *s) { GUI_USE_PARA(s); }
000000  4770              BX       lr
                          ENDP


                          AREA ||i.GUI_X_ExecIdle||, CODE, READONLY, ALIGN=1

                  GUI_X_ExecIdle PROC
;;;89     */
;;;90     void GUI_X_ExecIdle (void) 
000000  b510              PUSH     {r4,lr}
;;;91     {
;;;92         GUI_X_Delay(1);
000002  2001              MOVS     r0,#1
000004  f7fffffe          BL       GUI_X_Delay
;;;93     }
000008  bd10              POP      {r4,pc}
;;;94     
                          ENDP


                          AREA ||i.GUI_X_GetKey||, CODE, READONLY, ALIGN=2

                  GUI_X_GetKey PROC
;;;209    
;;;210    int  GUI_X_GetKey (void) 
000000  b510              PUSH     {r4,lr}
;;;211    {
;;;212    	int r;
;;;213    
;;;214    	r          = KeyPressed;
000002  4804              LDR      r0,|L5.20|
000004  6804              LDR      r4,[r0,#0]  ; KeyPressed
;;;215    	CheckInit();
000006  f7fffffe          BL       CheckInit
;;;216    	KeyPressed = 0;
00000a  2000              MOVS     r0,#0
00000c  4901              LDR      r1,|L5.20|
00000e  6008              STR      r0,[r1,#0]  ; KeyPressed
;;;217    	return (r);
000010  4620              MOV      r0,r4
;;;218    }
000012  bd10              POP      {r4,pc}
;;;219    
                          ENDP

                  |L5.20|
                          DCD      KeyPressed

                          AREA ||i.GUI_X_GetTaskId||, CODE, READONLY, ALIGN=2

                  GUI_X_GetTaskId PROC
;;;142    
;;;143    U32  GUI_X_GetTaskId (void) 
000000  4802              LDR      r0,|L6.12|
;;;144    { 
;;;145        //由于存在同优先级的任务，这里不知道是不是可以
;;;146    	//uCOS-III中已经没有任务的ID
;;;147    	return ((U32)(OSTCBCurPtr->Prio));
000002  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000004  f8900037          LDRB     r0,[r0,#0x37]
;;;148    }
000008  4770              BX       lr
;;;149    
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      OSTCBCurPtr

                          AREA ||i.GUI_X_GetTime||, CODE, READONLY, ALIGN=1

                  GUI_X_GetTime PROC
;;;70     
;;;71     int  GUI_X_GetTime (void) 
000000  b508              PUSH     {r3,lr}
;;;72     {
;;;73         OS_ERR      err;
;;;74     	return OSTimeGet(&err);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       OSTimeGet
;;;75     }
000008  bd08              POP      {r3,pc}
;;;76     
                          ENDP


                          AREA ||i.GUI_X_Init||, CODE, READONLY, ALIGN=2

                  GUI_X_Init PROC
;;;199    
;;;200    void GUI_X_Init (void) 
000000  b508              PUSH     {r3,lr}
;;;201    {
;;;202    	OS_ERR err;
;;;203    	
;;;204    	OSSemCreate((OS_SEM    *)&KeySem,
000002  466b              MOV      r3,sp
000004  2200              MOVS     r2,#0
000006  a102              ADR      r1,|L8.16|
000008  4803              LDR      r0,|L8.24|
00000a  f7fffffe          BL       OSSemCreate
;;;205    				(CPU_CHAR  *)"KeySem",
;;;206    				(OS_SEM_CTR )0,
;;;207    				(OS_ERR    *)&err);
;;;208    }
00000e  bd08              POP      {r3,pc}
;;;209    
                          ENDP

                  |L8.16|
000010  4b657953          DCB      "KeySem",0
000014  656d00  
000017  00                DCB      0
                  |L8.24|
                          DCD      KeySem

                          AREA ||i.GUI_X_InitOS||, CODE, READONLY, ALIGN=2

                  GUI_X_InitOS PROC
;;;105    
;;;106    void  GUI_X_InitOS (void)
000000  b508              PUSH     {r3,lr}
;;;107    { 
;;;108    	OS_ERR     err;
;;;109    
;;;110    	/* 用于资源共享 cnt = 1*/
;;;111        OSSemCreate((OS_SEM    *)&DispSem,
000002  466b              MOV      r3,sp
000004  2201              MOVS     r2,#1
000006  a105              ADR      r1,|L9.28|
000008  4806              LDR      r0,|L9.36|
00000a  f7fffffe          BL       OSSemCreate
;;;112                    (CPU_CHAR  *)"DispSem",
;;;113                    (OS_SEM_CTR )1,
;;;114                    (OS_ERR    *)&err);
;;;115    	/* 用于事件触发 cnt = 0*/
;;;116    	OSSemCreate((OS_SEM    *)&EventSem,
00000e  466b              MOV      r3,sp
000010  2200              MOVS     r2,#0
000012  a105              ADR      r1,|L9.40|
000014  4807              LDR      r0,|L9.52|
000016  f7fffffe          BL       OSSemCreate
;;;117                    (CPU_CHAR  *)"EventSem",
;;;118                    (OS_SEM_CTR )0,
;;;119                    (OS_ERR    *)&err);
;;;120    }
00001a  bd08              POP      {r3,pc}
;;;121    
                          ENDP

                  |L9.28|
00001c  44697370          DCB      "DispSem",0
000020  53656d00
                  |L9.36|
                          DCD      DispSem
                  |L9.40|
000028  4576656e          DCB      "EventSem",0
00002c  7453656d
000030  00      
000031  00                DCB      0
000032  00                DCB      0
000033  00                DCB      0
                  |L9.52|
                          DCD      EventSem

                          AREA ||i.GUI_X_Lock||, CODE, READONLY, ALIGN=2

                  GUI_X_Lock PROC
;;;121    
;;;122    void  GUI_X_Lock (void)
000000  b51c              PUSH     {r2-r4,lr}
;;;123    { 
;;;124    	OS_ERR     err;
;;;125    	   
;;;126    	OSSemPend((OS_SEM *)&DispSem,
000002  a801              ADD      r0,sp,#4
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  4619              MOV      r1,r3
00000a  9000              STR      r0,[sp,#0]
00000c  4801              LDR      r0,|L10.20|
00000e  f7fffffe          BL       OSSemPend
;;;127    			  (OS_TICK )0,
;;;128    			  (OS_OPT  )OS_OPT_PEND_BLOCKING,
;;;129    			  (CPU_TS  )0,
;;;130    			  (OS_ERR *)&err);
;;;131    }
000012  bd1c              POP      {r2-r4,pc}
;;;132    
                          ENDP

                  |L10.20|
                          DCD      DispSem

                          AREA ||i.GUI_X_Log||, CODE, READONLY, ALIGN=1

                  GUI_X_Log PROC
;;;248    
;;;249    void GUI_X_Log     (const char *s) { GUI_USE_PARA(s); }
000000  4770              BX       lr
;;;250    void GUI_X_Warn    (const char *s) { GUI_USE_PARA(s); }
                          ENDP


                          AREA ||i.GUI_X_SignalEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_SignalEvent PROC
;;;169    
;;;170    void GUI_X_SignalEvent (void) 
000000  b508              PUSH     {r3,lr}
;;;171    {
;;;172    	OS_ERR     err;
;;;173    
;;;174    	OSSemPost((OS_SEM *)&EventSem,
000002  466a              MOV      r2,sp
000004  2100              MOVS     r1,#0
000006  4802              LDR      r0,|L12.16|
000008  f7fffffe          BL       OSSemPost
;;;175    	      (OS_OPT  )OS_OPT_POST_1,
;;;176    	      (OS_ERR *)&err);
;;;177    }
00000c  bd08              POP      {r3,pc}
;;;178    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      EventSem

                          AREA ||i.GUI_X_StoreKey||, CODE, READONLY, ALIGN=2

                  GUI_X_StoreKey PROC
;;;238    
;;;239    void  GUI_X_StoreKey (int k) 
000000  b538              PUSH     {r3-r5,lr}
;;;240    {
000002  4604              MOV      r4,r0
;;;241    	OS_ERR     err;
;;;242    	
;;;243    	KeyPressed = k;
000004  4803              LDR      r0,|L13.20|
000006  6004              STR      r4,[r0,#0]  ; KeyPressed
;;;244    	OSSemPost((OS_SEM *)&KeySem,
000008  466a              MOV      r2,sp
00000a  2100              MOVS     r1,#0
00000c  4802              LDR      r0,|L13.24|
00000e  f7fffffe          BL       OSSemPost
;;;245    	      (OS_OPT  )OS_OPT_POST_1,
;;;246    	      (OS_ERR *)&err);
;;;247    }
000012  bd38              POP      {r3-r5,pc}
;;;248    
                          ENDP

                  |L13.20|
                          DCD      KeyPressed
                  |L13.24|
                          DCD      KeySem

                          AREA ||i.GUI_X_Unlock||, CODE, READONLY, ALIGN=2

                  GUI_X_Unlock PROC
;;;132    
;;;133    void  GUI_X_Unlock (void)
000000  b508              PUSH     {r3,lr}
;;;134    { 
;;;135    	OS_ERR     err;
;;;136    
;;;137    	OSSemPost((OS_SEM *)&DispSem,
000002  466a              MOV      r2,sp
000004  2100              MOVS     r1,#0
000006  4802              LDR      r0,|L14.16|
000008  f7fffffe          BL       OSSemPost
;;;138    	          (OS_OPT  )OS_OPT_POST_1,
;;;139    	          (OS_ERR *)&err);
;;;140    }
00000c  bd08              POP      {r3,pc}
;;;141    
                          ENDP

00000e  0000              DCW      0x0000
                  |L14.16|
                          DCD      DispSem

                          AREA ||i.GUI_X_WaitEvent||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitEvent PROC
;;;157    
;;;158    void GUI_X_WaitEvent (void) 
000000  b51c              PUSH     {r2-r4,lr}
;;;159    {
;;;160    	OS_ERR     err;
;;;161    	   
;;;162    	OSSemPend((OS_SEM *)&EventSem,
000002  a801              ADD      r0,sp,#4
000004  2300              MOVS     r3,#0
000006  461a              MOV      r2,r3
000008  4619              MOV      r1,r3
00000a  9000              STR      r0,[sp,#0]
00000c  4801              LDR      r0,|L15.20|
00000e  f7fffffe          BL       OSSemPend
;;;163    	(OS_TICK )0,
;;;164    	(OS_OPT  )OS_OPT_PEND_BLOCKING,
;;;165    	(CPU_TS  )0,
;;;166    	(OS_ERR *)&err);
;;;167    }
000012  bd1c              POP      {r2-r4,pc}
;;;168    
                          ENDP

                  |L15.20|
                          DCD      EventSem

                          AREA ||i.GUI_X_WaitKey||, CODE, READONLY, ALIGN=2

                  GUI_X_WaitKey PROC
;;;219    
;;;220    int  GUI_X_WaitKey (void) 
000000  b51c              PUSH     {r2-r4,lr}
;;;221    {
;;;222    	int    r;
;;;223    	OS_ERR err;
;;;224    
;;;225    
;;;226    	CheckInit();
000002  f7fffffe          BL       CheckInit
;;;227    	if (KeyPressed == 0) {   
000006  4809              LDR      r0,|L16.44|
000008  6800              LDR      r0,[r0,#0]  ; KeyPressed
00000a  b938              CBNZ     r0,|L16.28|
;;;228    		OSSemPend((OS_SEM *)&EventSem,
00000c  a801              ADD      r0,sp,#4
00000e  2300              MOVS     r3,#0
000010  461a              MOV      r2,r3
000012  4619              MOV      r1,r3
000014  9000              STR      r0,[sp,#0]
000016  4806              LDR      r0,|L16.48|
000018  f7fffffe          BL       OSSemPend
                  |L16.28|
;;;229    		(OS_TICK )0,
;;;230    		(OS_OPT  )OS_OPT_PEND_BLOCKING,
;;;231    		(CPU_TS  )0,
;;;232    		(OS_ERR *)&err);
;;;233    	}
;;;234    	r          = KeyPressed;
00001c  4803              LDR      r0,|L16.44|
00001e  6804              LDR      r4,[r0,#0]  ; KeyPressed
;;;235    	KeyPressed = 0;
000020  2000              MOVS     r0,#0
000022  4902              LDR      r1,|L16.44|
000024  6008              STR      r0,[r1,#0]  ; KeyPressed
;;;236    	return (r);		   
000026  4620              MOV      r0,r4
;;;237    }
000028  bd1c              POP      {r2-r4,pc}
;;;238    
                          ENDP

00002a  0000              DCW      0x0000
                  |L16.44|
                          DCD      KeyPressed
                  |L16.48|
                          DCD      EventSem

                          AREA ||i.GUI_X_Warn||, CODE, READONLY, ALIGN=1

                  GUI_X_Warn PROC
;;;249    void GUI_X_Log     (const char *s) { GUI_USE_PARA(s); }
;;;250    void GUI_X_Warn    (const char *s) { GUI_USE_PARA(s); }
000000  4770              BX       lr
;;;251    void GUI_X_ErrorOut(const char *s) { GUI_USE_PARA(s); }
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  DispSem
                          %        40
                  EventSem
                          %        40
                  KeySem
                          %        40

                          AREA ||.data||, DATA, ALIGN=2

                  KeyPressed
                          DCD      0x00000000
                  KeyIsInited
000004  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\emWin\\GUI_X\\GUI_X_Ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_GUI_X_Ex_c_f0e17fb0____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_GUI_X_Ex_c_f0e17fb0____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_GUI_X_Ex_c_f0e17fb0____REVSH|
#line 144
|__asm___10_GUI_X_Ex_c_f0e17fb0____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_GUI_X_Ex_c_f0e17fb0____RRX|
#line 300
|__asm___10_GUI_X_Ex_c_f0e17fb0____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
