; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_tick.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_tick.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_tick.crf ..\..\uCOS-III\uCOS-III\Source\os_tick.c]
                          THUMB

                          AREA ||i.OS_TickListInit||, CODE, READONLY, ALIGN=2

                  OS_TickListInit PROC
;;;165    
;;;166    void  OS_TickListInit (void)
000000  2100              MOVS     r1,#0
;;;167    {
;;;168        OS_TICK_SPOKE_IX   i;
;;;169        OS_TICK_SPOKE     *p_spoke;
;;;170    
;;;171    
;;;172    
;;;173        for (i = 0u; i < OSCfg_TickWheelSize; i++) {
000002  e008              B        |L1.22|
                  |L1.4|
;;;174            p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
000004  4a06              LDR      r2,|L1.32|
000006  eb0200c1          ADD      r0,r2,r1,LSL #3
;;;175            p_spoke->FirstPtr      = (OS_TCB        *)0;
00000a  2200              MOVS     r2,#0
00000c  6002              STR      r2,[r0,#0]
;;;176            p_spoke->NbrEntries    = (OS_OBJ_QTY     )0u;
00000e  8082              STRH     r2,[r0,#4]
;;;177            p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
000010  80c2              STRH     r2,[r0,#6]
000012  1c4a              ADDS     r2,r1,#1              ;173
000014  b291              UXTH     r1,r2                 ;173
                  |L1.22|
000016  4a03              LDR      r2,|L1.36|
000018  8812              LDRH     r2,[r2,#0]            ;173  ; OSCfg_TickWheelSize
00001a  4291              CMP      r1,r2                 ;173
00001c  dbf2              BLT      |L1.4|
;;;178        }
;;;179    }
00001e  4770              BX       lr
;;;180    
                          ENDP

                  |L1.32|
                          DCD      OSCfg_TickWheel
                  |L1.36|
                          DCD      OSCfg_TickWheelSize

                          AREA ||i.OS_TickListInsert||, CODE, READONLY, ALIGN=2

                  OS_TickListInsert PROC
;;;219    
;;;220    void  OS_TickListInsert (OS_TCB   *p_tcb,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;221                             OS_TICK   time,
;;;222                             OS_OPT    opt,
;;;223                             OS_ERR   *p_err)
;;;224    {
000004  460c              MOV      r4,r1
000006  4616              MOV      r6,r2
000008  461d              MOV      r5,r3
;;;225        OS_TICK            tick_delta;
;;;226        OS_TICK            tick_next;
;;;227        OS_TICK_SPOKE     *p_spoke;
;;;228        OS_TCB            *p_tcb0;
;;;229        OS_TCB            *p_tcb1;
;;;230        OS_TICK_SPOKE_IX   spoke;
;;;231    
;;;232    
;;;233    
;;;234        if (opt == OS_OPT_TIME_MATCH) {                              /* Task time is absolute.                            */
00000a  2e04              CMP      r6,#4
00000c  d11e              BNE      |L2.76|
;;;235            tick_delta = time - OSTickCtr - 1u;
00000e  f8df91a0          LDR      r9,|L2.432|
000012  f8d99000          LDR      r9,[r9,#0]  ; OSTickCtr
000016  eba40909          SUB      r9,r4,r9
00001a  f1a90301          SUB      r3,r9,#1
;;;236            if (tick_delta > OS_TICK_TH_RDY) {                       /* If delay already occurred, ...                    */
00001e  f5133f80          CMN      r3,#0x10000
000022  d90d              BLS      |L2.64|
;;;237                p_tcb->TickCtrMatch = (OS_TICK        )0u;
000024  f04f0900          MOV      r9,#0
000028  f8c0904c          STR      r9,[r0,#0x4c]
;;;238                p_tcb->TickRemain   = (OS_TICK        )0u;
00002c  f8c09050          STR      r9,[r0,#0x50]
;;;239                p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
000030  f8c0901c          STR      r9,[r0,#0x1c]
;;;240               *p_err               =  OS_ERR_TIME_ZERO_DLY;         /* ... do NOT delay.                                 */
000034  f247297e          MOV      r9,#0x727e
000038  f8a59000          STRH     r9,[r5,#0]
                  |L2.60|
;;;241                return;
;;;242            }
;;;243            p_tcb->TickCtrMatch = time;
;;;244            p_tcb->TickRemain   = tick_delta + 1u;
;;;245    
;;;246        } else if (time > (OS_TICK)0u) {
;;;247            if (opt == OS_OPT_TIME_PERIODIC) {                       /* Task time is periodic.                            */
;;;248                tick_next  = p_tcb->TickCtrPrev + time;
;;;249                tick_delta = tick_next - OSTickCtr - 1u;
;;;250                if (tick_delta < time) {                             /* If next periodic delay did NOT already occur, ... */
;;;251                    p_tcb->TickCtrMatch = tick_next;                 /* ... set  next  periodic delay;                ... */
;;;252                } else {
;;;253                    p_tcb->TickCtrMatch = OSTickCtr + time;          /* ... else reset periodic delay.                    */
;;;254                }
;;;255                p_tcb->TickRemain   = p_tcb->TickCtrMatch - OSTickCtr;
;;;256                p_tcb->TickCtrPrev  = p_tcb->TickCtrMatch;
;;;257    
;;;258            } else {                                                 /* Task time is relative to current.                 */
;;;259                p_tcb->TickCtrMatch = OSTickCtr + time;
;;;260                p_tcb->TickRemain   = time;
;;;261            }
;;;262    
;;;263        } else {                                                     /* Zero time delay; ...                              */
;;;264            p_tcb->TickCtrMatch = (OS_TICK        )0u;
;;;265            p_tcb->TickRemain   = (OS_TICK        )0u;
;;;266            p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
;;;267           *p_err               =  OS_ERR_TIME_ZERO_DLY;             /* ... do NOT delay.                                 */
;;;268            return;
;;;269        }
;;;270    
;;;271    
;;;272        spoke   = (OS_TICK_SPOKE_IX)(p_tcb->TickCtrMatch % OSCfg_TickWheelSize);
;;;273        p_spoke = &OSCfg_TickWheel[spoke];
;;;274    
;;;275        if (p_spoke->NbrEntries == (OS_OBJ_QTY)0u) {                 /* First entry in the spoke                          */
;;;276            p_tcb->TickNextPtr   = (OS_TCB   *)0;
;;;277            p_tcb->TickPrevPtr   = (OS_TCB   *)0;
;;;278            p_spoke->FirstPtr    =  p_tcb;
;;;279            p_spoke->NbrEntries  = (OS_OBJ_QTY)1u;
;;;280        } else {
;;;281            p_tcb1     = p_spoke->FirstPtr;                          /* Point to current first TCB in the list            */
;;;282            while (p_tcb1 != (OS_TCB *)0) {
;;;283                p_tcb1->TickRemain = p_tcb1->TickCtrMatch            /* Compute time remaining of current TCB in list     */
;;;284                                   - OSTickCtr;
;;;285                if (p_tcb->TickRemain > p_tcb1->TickRemain) {        /* Do we need to insert AFTER current TCB in list?   */
;;;286                    if (p_tcb1->TickNextPtr != (OS_TCB *)0) {        /* Yes, are we pointing at the last TCB in the list? */
;;;287                        p_tcb1               =  p_tcb1->TickNextPtr; /* No,  Point to next TCB in the list                */
;;;288                    } else {
;;;289                        p_tcb->TickNextPtr   = (OS_TCB *)0;
;;;290                        p_tcb->TickPrevPtr   =  p_tcb1;
;;;291                        p_tcb1->TickNextPtr  =  p_tcb;               /* Yes, TCB to add is now new last entry in the list */
;;;292                        p_tcb1               = (OS_TCB *)0;          /* Break loop                                        */
;;;293                    }
;;;294                } else {                                             /* Insert before the current TCB                     */
;;;295                    if (p_tcb1->TickPrevPtr == (OS_TCB *)0) {        /* Are we inserting before the first TCB?            */
;;;296                        p_tcb->TickPrevPtr   = (OS_TCB *)0;
;;;297                        p_tcb->TickNextPtr   =  p_tcb1;
;;;298                        p_tcb1->TickPrevPtr  =  p_tcb;
;;;299                        p_spoke->FirstPtr    =  p_tcb;
;;;300                    } else {                                         /* Insert in between 2 TCBs already in the list      */
;;;301                        p_tcb0               =  p_tcb1->TickPrevPtr;
;;;302                        p_tcb->TickPrevPtr   =  p_tcb0;
;;;303                        p_tcb->TickNextPtr   =  p_tcb1;
;;;304                        p_tcb0->TickNextPtr  =  p_tcb;
;;;305                        p_tcb1->TickPrevPtr  =  p_tcb;
;;;306                    }
;;;307                    p_tcb1 = (OS_TCB *)0;                            /* Break loop                                        */
;;;308                }
;;;309            }
;;;310            p_spoke->NbrEntries++;
;;;311        }
;;;312        if (p_spoke->NbrEntriesMax < p_spoke->NbrEntries) {          /* Keep track of maximum # of entries in each spoke  */
;;;313            p_spoke->NbrEntriesMax = p_spoke->NbrEntries;
;;;314        }
;;;315        p_tcb->TickSpokePtr = p_spoke;                               /* Link back to tick spoke                           */
;;;316       *p_err               = OS_ERR_NONE;
;;;317    }
00003c  e8bd8ff0          POP      {r4-r11,pc}
                  |L2.64|
000040  64c4              STR      r4,[r0,#0x4c]         ;243
000042  f1030901          ADD      r9,r3,#1              ;244
000046  f8c09050          STR      r9,[r0,#0x50]         ;244
00004a  e03f              B        |L2.204|
                  |L2.76|
00004c  b384              CBZ      r4,|L2.176|
00004e  2e08              CMP      r6,#8                 ;247
000050  d125              BNE      |L2.158|
000052  f8d09048          LDR      r9,[r0,#0x48]         ;248
000056  eb090704          ADD      r7,r9,r4              ;248
00005a  f8df9154          LDR      r9,|L2.432|
00005e  f8d99000          LDR      r9,[r9,#0]            ;249  ; OSTickCtr
000062  eba70909          SUB      r9,r7,r9              ;249
000066  f1a90301          SUB      r3,r9,#1              ;249
00006a  42a3              CMP      r3,r4                 ;250
00006c  d201              BCS      |L2.114|
00006e  64c7              STR      r7,[r0,#0x4c]         ;251
000070  e006              B        |L2.128|
                  |L2.114|
000072  f8df913c          LDR      r9,|L2.432|
000076  f8d99000          LDR      r9,[r9,#0]            ;253  ; OSTickCtr
00007a  44a1              ADD      r9,r9,r4              ;253
00007c  f8c0904c          STR      r9,[r0,#0x4c]         ;253
                  |L2.128|
000080  f8dfa12c          LDR      r10,|L2.432|
000084  f8d0904c          LDR      r9,[r0,#0x4c]         ;255
000088  f8daa000          LDR      r10,[r10,#0]          ;255  ; OSTickCtr
00008c  eba9090a          SUB      r9,r9,r10             ;255
000090  f8c09050          STR      r9,[r0,#0x50]         ;255
000094  f8d0904c          LDR      r9,[r0,#0x4c]         ;256
000098  f8c09048          STR      r9,[r0,#0x48]         ;256
00009c  e016              B        |L2.204|
                  |L2.158|
00009e  f8df9110          LDR      r9,|L2.432|
0000a2  f8d99000          LDR      r9,[r9,#0]            ;259  ; OSTickCtr
0000a6  44a1              ADD      r9,r9,r4              ;259
0000a8  f8c0904c          STR      r9,[r0,#0x4c]         ;259
0000ac  6504              STR      r4,[r0,#0x50]         ;260
0000ae  e00d              B        |L2.204|
                  |L2.176|
0000b0  e7ff              B        |L2.178|
                  |L2.178|
0000b2  f04f0900          MOV      r9,#0                 ;264
0000b6  f8c0904c          STR      r9,[r0,#0x4c]         ;264
0000ba  f8c09050          STR      r9,[r0,#0x50]         ;265
0000be  f8c0901c          STR      r9,[r0,#0x1c]         ;266
0000c2  f247297e          MOV      r9,#0x727e            ;267
0000c6  f8a59000          STRH     r9,[r5,#0]            ;267
0000ca  e7b7              B        |L2.60|
                  |L2.204|
0000cc  f8dfa0e4          LDR      r10,|L2.436|
0000d0  f8baa000          LDRH     r10,[r10,#0]          ;272  ; OSCfg_TickWheelSize
0000d4  f8d0904c          LDR      r9,[r0,#0x4c]         ;272
0000d8  fbb9fbfa          UDIV     r11,r9,r10            ;272
0000dc  fb0a991b          MLS      r9,r10,r11,r9         ;272
0000e0  fa1ff889          UXTH     r8,r9                 ;272
0000e4  f8df90d0          LDR      r9,|L2.440|
0000e8  eb0902c8          ADD      r2,r9,r8,LSL #3       ;273
0000ec  f8b29004          LDRH     r9,[r2,#4]            ;275
0000f0  f1b90f00          CMP      r9,#0                 ;275
0000f4  d10b              BNE      |L2.270|
0000f6  f04f0900          MOV      r9,#0                 ;276
0000fa  f8c09014          STR      r9,[r0,#0x14]         ;276
0000fe  f8c09018          STR      r9,[r0,#0x18]         ;277
000102  6010              STR      r0,[r2,#0]            ;278
000104  f04f0901          MOV      r9,#1                 ;279
000108  f8a29004          STRH     r9,[r2,#4]            ;279
00010c  e03e              B        |L2.396|
                  |L2.270|
00010e  6811              LDR      r1,[r2,#0]            ;281
000110  e034              B        |L2.380|
                  |L2.274|
000112  f8dfa09c          LDR      r10,|L2.432|
000116  f8d1904c          LDR      r9,[r1,#0x4c]         ;283
00011a  f8daa000          LDR      r10,[r10,#0]          ;283  ; OSTickCtr
00011e  eba9090a          SUB      r9,r9,r10             ;283
000122  f8c19050          STR      r9,[r1,#0x50]         ;283
000126  f8d09050          LDR      r9,[r0,#0x50]         ;285
00012a  f8d1a050          LDR      r10,[r1,#0x50]        ;285
00012e  45d1              CMP      r9,r10                ;285
000130  d90e              BLS      |L2.336|
000132  f8d19014          LDR      r9,[r1,#0x14]         ;286
000136  f1b90f00          CMP      r9,#0                 ;286
00013a  d001              BEQ      |L2.320|
00013c  6949              LDR      r1,[r1,#0x14]         ;287
00013e  e01d              B        |L2.380|
                  |L2.320|
000140  f04f0900          MOV      r9,#0                 ;289
000144  f8c09014          STR      r9,[r0,#0x14]         ;289
000148  6181              STR      r1,[r0,#0x18]         ;290
00014a  6148              STR      r0,[r1,#0x14]         ;291
00014c  2100              MOVS     r1,#0                 ;292
00014e  e015              B        |L2.380|
                  |L2.336|
000150  f8d19018          LDR      r9,[r1,#0x18]         ;295
000154  f1b90f00          CMP      r9,#0                 ;295
000158  d107              BNE      |L2.362|
00015a  f04f0900          MOV      r9,#0                 ;296
00015e  f8c09018          STR      r9,[r0,#0x18]         ;296
000162  6141              STR      r1,[r0,#0x14]         ;297
000164  6188              STR      r0,[r1,#0x18]         ;298
000166  6010              STR      r0,[r2,#0]            ;299
000168  e007              B        |L2.378|
                  |L2.362|
00016a  f8d1c018          LDR      r12,[r1,#0x18]        ;301
00016e  f8c0c018          STR      r12,[r0,#0x18]        ;302
000172  6141              STR      r1,[r0,#0x14]         ;303
000174  f8cc0014          STR      r0,[r12,#0x14]        ;304
000178  6188              STR      r0,[r1,#0x18]         ;305
                  |L2.378|
00017a  2100              MOVS     r1,#0                 ;307
                  |L2.380|
00017c  2900              CMP      r1,#0                 ;282
00017e  d1c8              BNE      |L2.274|
000180  f8b29004          LDRH     r9,[r2,#4]            ;310
000184  f1090901          ADD      r9,r9,#1              ;310
000188  f8a29004          STRH     r9,[r2,#4]            ;310
                  |L2.396|
00018c  f8b29006          LDRH     r9,[r2,#6]            ;312
000190  f8b2a004          LDRH     r10,[r2,#4]           ;312
000194  45d1              CMP      r9,r10                ;312
000196  da03              BGE      |L2.416|
000198  f8b29004          LDRH     r9,[r2,#4]            ;313
00019c  f8a29006          STRH     r9,[r2,#6]            ;313
                  |L2.416|
0001a0  61c2              STR      r2,[r0,#0x1c]         ;315
0001a2  f04f0900          MOV      r9,#0                 ;316
0001a6  f8a59000          STRH     r9,[r5,#0]            ;316
0001aa  bf00              NOP      
0001ac  e746              B        |L2.60|
;;;318    
                          ENDP

0001ae  0000              DCW      0x0000
                  |L2.432|
                          DCD      OSTickCtr
                  |L2.436|
                          DCD      OSCfg_TickWheelSize
                  |L2.440|
                          DCD      OSCfg_TickWheel

                          AREA ||i.OS_TickListRemove||, CODE, READONLY, ALIGN=1

                  OS_TickListRemove PROC
;;;336    
;;;337    void  OS_TickListRemove (OS_TCB  *p_tcb)
000000  b510              PUSH     {r4,lr}
;;;338    {
;;;339        OS_TICK_SPOKE  *p_spoke;
;;;340        OS_TCB         *p_tcb1;
;;;341        OS_TCB         *p_tcb2;
;;;342    
;;;343    
;;;344    
;;;345        p_spoke = p_tcb->TickSpokePtr;
000002  69c2              LDR      r2,[r0,#0x1c]
;;;346        if (p_spoke != (OS_TICK_SPOKE *)0) {                              /* Confirm that task is in tick list            */
000004  b1ba              CBZ      r2,|L3.54|
;;;347            p_tcb->TickRemain = (OS_TICK)0u;
000006  2400              MOVS     r4,#0
000008  6504              STR      r4,[r0,#0x50]
;;;348            if (p_spoke->FirstPtr == p_tcb) {                             /* Is timer to remove at the beginning of list? */
00000a  6814              LDR      r4,[r2,#0]
00000c  4284              CMP      r4,r0
00000e  d105              BNE      |L3.28|
;;;349                p_tcb1            = (OS_TCB *)p_tcb->TickNextPtr;         /* Yes                                          */
000010  6941              LDR      r1,[r0,#0x14]
;;;350                p_spoke->FirstPtr = p_tcb1;
000012  6011              STR      r1,[r2,#0]
;;;351                if (p_tcb1 != (OS_TCB *)0) {
000014  b139              CBZ      r1,|L3.38|
;;;352                    p_tcb1->TickPrevPtr = (OS_TCB *)0;
000016  2400              MOVS     r4,#0
000018  618c              STR      r4,[r1,#0x18]
00001a  e004              B        |L3.38|
                  |L3.28|
;;;353                }
;;;354            } else {
;;;355                p_tcb1              = p_tcb->TickPrevPtr;                 /* No, remove timer from somewhere in the list  */
00001c  6981              LDR      r1,[r0,#0x18]
;;;356                p_tcb2              = p_tcb->TickNextPtr;
00001e  6943              LDR      r3,[r0,#0x14]
;;;357                p_tcb1->TickNextPtr = p_tcb2;
000020  614b              STR      r3,[r1,#0x14]
;;;358                if (p_tcb2 != (OS_TCB *)0) {
000022  b103              CBZ      r3,|L3.38|
;;;359                    p_tcb2->TickPrevPtr = p_tcb1;
000024  6199              STR      r1,[r3,#0x18]
                  |L3.38|
;;;360                }
;;;361            }
;;;362            p_tcb->TickNextPtr  = (OS_TCB        *)0;
000026  2400              MOVS     r4,#0
000028  6144              STR      r4,[r0,#0x14]
;;;363            p_tcb->TickPrevPtr  = (OS_TCB        *)0;
00002a  6184              STR      r4,[r0,#0x18]
;;;364            p_tcb->TickSpokePtr = (OS_TICK_SPOKE *)0;
00002c  61c4              STR      r4,[r0,#0x1c]
;;;365            p_tcb->TickCtrMatch = (OS_TICK        )0u;
00002e  64c4              STR      r4,[r0,#0x4c]
;;;366            p_spoke->NbrEntries--;
000030  8894              LDRH     r4,[r2,#4]
000032  1e64              SUBS     r4,r4,#1
000034  8094              STRH     r4,[r2,#4]
                  |L3.54|
;;;367        }
;;;368    }
000036  bd10              POP      {r4,pc}
;;;369    
                          ENDP


                          AREA ||i.OS_TickListResetPeak||, CODE, READONLY, ALIGN=2

                  OS_TickListResetPeak PROC
;;;385    
;;;386    void  OS_TickListResetPeak (void)
000000  2000              MOVS     r0,#0
;;;387    {
;;;388        OS_TICK_SPOKE_IX   i;
;;;389        OS_TICK_SPOKE     *p_spoke;
;;;390    
;;;391    
;;;392    
;;;393        for (i = 0u; i < OSCfg_TickWheelSize; i++) {
000002  e006              B        |L4.18|
                  |L4.4|
;;;394            p_spoke                = (OS_TICK_SPOKE *)&OSCfg_TickWheel[i];
000004  4a05              LDR      r2,|L4.28|
000006  eb0201c0          ADD      r1,r2,r0,LSL #3
;;;395            p_spoke->NbrEntriesMax = (OS_OBJ_QTY     )0u;
00000a  2200              MOVS     r2,#0
00000c  80ca              STRH     r2,[r1,#6]
00000e  1c42              ADDS     r2,r0,#1              ;393
000010  b290              UXTH     r0,r2                 ;393
                  |L4.18|
000012  4a03              LDR      r2,|L4.32|
000014  8812              LDRH     r2,[r2,#0]            ;393  ; OSCfg_TickWheelSize
000016  4290              CMP      r0,r2                 ;393
000018  dbf4              BLT      |L4.4|
;;;396        }
;;;397    }
00001a  4770              BX       lr
;;;398    
                          ENDP

                  |L4.28|
                          DCD      OSCfg_TickWheel
                  |L4.32|
                          DCD      OSCfg_TickWheelSize

                          AREA ||i.OS_TickListUpdate||, CODE, READONLY, ALIGN=2

                  OS_TickListUpdate PROC
;;;414    
;;;415    void  OS_TickListUpdate (void)
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;416    {
;;;417        CPU_BOOLEAN        done;
;;;418        OS_TICK_SPOKE     *p_spoke;
;;;419        OS_TCB            *p_tcb;
;;;420        OS_TCB            *p_tcb_next;
;;;421        OS_TICK_SPOKE_IX   spoke;
;;;422        CPU_TS             ts_start;
;;;423        CPU_TS             ts_end;
;;;424        CPU_SR_ALLOC();
000004  f04f0b00          MOV      r11,#0
;;;425    
;;;426    
;;;427        OS_CRITICAL_ENTER();
000008  bf00              NOP      
00000a  bf00              NOP      
00000c  f7fffffe          BL       CPU_SR_Save
000010  4683              MOV      r11,r0
000012  bf00              NOP      
000014  bf00              NOP      
;;;428        ts_start = OS_TS_GET();
000016  f7fffffe          BL       CPU_TS_TmrRd
00001a  4605              MOV      r5,r0
;;;429        OSTickCtr++;                                                       /* Keep track of the number of ticks           */
00001c  4856              LDR      r0,|L5.376|
00001e  6800              LDR      r0,[r0,#0]  ; OSTickCtr
000020  1c40              ADDS     r0,r0,#1
000022  4955              LDR      r1,|L5.376|
000024  6008              STR      r0,[r1,#0]  ; OSTickCtr
;;;430        spoke    = (OS_TICK_SPOKE_IX)(OSTickCtr % OSCfg_TickWheelSize);
000026  4608              MOV      r0,r1
000028  6800              LDR      r0,[r0,#0]  ; OSTickCtr
00002a  4954              LDR      r1,|L5.380|
00002c  8809              LDRH     r1,[r1,#0]  ; OSCfg_TickWheelSize
00002e  fbb0f2f1          UDIV     r2,r0,r1
000032  fb010012          MLS      r0,r1,r2,r0
000036  fa1ffa80          UXTH     r10,r0
;;;431        p_spoke  = &OSCfg_TickWheel[spoke];
00003a  4851              LDR      r0,|L5.384|
00003c  eb0008ca          ADD      r8,r0,r10,LSL #3
;;;432        p_tcb    = p_spoke->FirstPtr;
000040  f8d84000          LDR      r4,[r8,#0]
;;;433        done     = DEF_FALSE;
000044  2700              MOVS     r7,#0
;;;434        while (done == DEF_FALSE) {
000046  e082              B        |L5.334|
                  |L5.72|
;;;435            if (p_tcb != (OS_TCB *)0) {
000048  2c00              CMP      r4,#0
00004a  d07f              BEQ      |L5.332|
;;;436                p_tcb_next = p_tcb->TickNextPtr;                           /* Point to next TCB to update                 */
00004c  f8d49014          LDR      r9,[r4,#0x14]
;;;437                switch (p_tcb->TaskState) {
000050  f8940036          LDRB     r0,[r4,#0x36]
000054  2808              CMP      r0,#8
000056  d275              BCS      |L5.324|
000058  e8dff000          TBB      [pc,r0]
00005c  0408051b          DCB      0x04,0x08,0x05,0x1b
000060  063d0750          DCB      0x06,0x3d,0x07,0x50
;;;438                    case OS_TASK_STATE_RDY:
;;;439                    case OS_TASK_STATE_PEND:
000064  bf00              NOP      
;;;440                    case OS_TASK_STATE_SUSPENDED:
000066  bf00              NOP      
;;;441                    case OS_TASK_STATE_PEND_SUSPENDED:
000068  bf00              NOP      
;;;442                         break;
00006a  e06c              B        |L5.326|
;;;443    
;;;444                    case OS_TASK_STATE_DLY:
;;;445                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
00006c  4942              LDR      r1,|L5.376|
00006e  6ce0              LDR      r0,[r4,#0x4c]
000070  6809              LDR      r1,[r1,#0]  ; OSTickCtr
000072  1a40              SUBS     r0,r0,r1
000074  6520              STR      r0,[r4,#0x50]
;;;446                                           - OSTickCtr;
;;;447                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
000076  4940              LDR      r1,|L5.376|
000078  6ce0              LDR      r0,[r4,#0x4c]
00007a  6809              LDR      r1,[r1,#0]  ; OSTickCtr
00007c  4288              CMP      r0,r1
00007e  d106              BNE      |L5.142|
;;;448                             p_tcb->TaskState = OS_TASK_STATE_RDY;
000080  2000              MOVS     r0,#0
000082  f8840036          STRB     r0,[r4,#0x36]
;;;449                             OS_TaskRdy(p_tcb);                            /* Make task ready to run                      */
000086  4620              MOV      r0,r4
000088  f7fffffe          BL       OS_TaskRdy
00008c  e000              B        |L5.144|
                  |L5.142|
;;;450                         } else {
;;;451                             done             = DEF_TRUE;                  /* Don't find a match, we're done!             */
00008e  2701              MOVS     r7,#1
                  |L5.144|
;;;452                         }
;;;453                         break;
000090  e059              B        |L5.326|
;;;454    
;;;455                    case OS_TASK_STATE_PEND_TIMEOUT:
;;;456                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
000092  4939              LDR      r1,|L5.376|
000094  6ce0              LDR      r0,[r4,#0x4c]
000096  6809              LDR      r1,[r1,#0]  ; OSTickCtr
000098  1a40              SUBS     r0,r0,r1
00009a  6520              STR      r0,[r4,#0x50]
;;;457                                           - OSTickCtr;
;;;458                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
00009c  4936              LDR      r1,|L5.376|
00009e  6ce0              LDR      r0,[r4,#0x4c]
0000a0  6809              LDR      r1,[r1,#0]  ; OSTickCtr
0000a2  4288              CMP      r0,r1
0000a4  d115              BNE      |L5.210|
;;;459    #if (OS_MSG_EN > 0u)
;;;460                             p_tcb->MsgPtr     = (void      *)0;
0000a6  2000              MOVS     r0,#0
0000a8  65e0              STR      r0,[r4,#0x5c]
;;;461                             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
0000aa  f8a40060          STRH     r0,[r4,#0x60]
;;;462    #endif
;;;463                             p_tcb->TS         = OS_TS_GET();
0000ae  f7fffffe          BL       CPU_TS_TmrRd
0000b2  6420              STR      r0,[r4,#0x40]
;;;464                             OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
0000b4  4620              MOV      r0,r4
0000b6  f7fffffe          BL       OS_PendListRemove
;;;465                             OS_TaskRdy(p_tcb);
0000ba  4620              MOV      r0,r4
0000bc  f7fffffe          BL       OS_TaskRdy
;;;466                             p_tcb->TaskState  = OS_TASK_STATE_RDY;
0000c0  2000              MOVS     r0,#0
0000c2  3434              ADDS     r4,r4,#0x34
0000c4  70a0              STRB     r0,[r4,#2]
;;;467                             p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
0000c6  2003              MOVS     r0,#3
0000c8  7060              STRB     r0,[r4,#1]
;;;468                             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
0000ca  2000              MOVS     r0,#0
0000cc  f8040934          STRB     r0,[r4],#-0x34
0000d0  e000              B        |L5.212|
                  |L5.210|
;;;469                         } else {
;;;470                             done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
0000d2  2701              MOVS     r7,#1
                  |L5.212|
;;;471                         }
;;;472                         break;
0000d4  e037              B        |L5.326|
;;;473    
;;;474                    case OS_TASK_STATE_DLY_SUSPENDED:
;;;475                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
0000d6  4928              LDR      r1,|L5.376|
0000d8  6ce0              LDR      r0,[r4,#0x4c]
0000da  6809              LDR      r1,[r1,#0]  ; OSTickCtr
0000dc  1a40              SUBS     r0,r0,r1
0000de  6520              STR      r0,[r4,#0x50]
;;;476                                           - OSTickCtr;
;;;477                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
0000e0  4925              LDR      r1,|L5.376|
0000e2  6ce0              LDR      r0,[r4,#0x4c]
0000e4  6809              LDR      r1,[r1,#0]  ; OSTickCtr
0000e6  4288              CMP      r0,r1
0000e8  d106              BNE      |L5.248|
;;;478                             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
0000ea  2004              MOVS     r0,#4
0000ec  f8840036          STRB     r0,[r4,#0x36]
;;;479                             OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
0000f0  4620              MOV      r0,r4
0000f2  f7fffffe          BL       OS_TickListRemove
0000f6  e000              B        |L5.250|
                  |L5.248|
;;;480                         } else {
;;;481                             done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
0000f8  2701              MOVS     r7,#1
                  |L5.250|
;;;482                         }
;;;483                         break;
0000fa  e024              B        |L5.326|
;;;484    
;;;485                    case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
;;;486                         p_tcb->TickRemain = p_tcb->TickCtrMatch           /* Compute time remaining of current TCB       */
0000fc  491e              LDR      r1,|L5.376|
0000fe  6ce0              LDR      r0,[r4,#0x4c]
000100  6809              LDR      r1,[r1,#0]  ; OSTickCtr
000102  1a40              SUBS     r0,r0,r1
000104  6520              STR      r0,[r4,#0x50]
;;;487                                           - OSTickCtr;
;;;488                         if (OSTickCtr == p_tcb->TickCtrMatch) {           /* Process each TCB that expires               */
000106  491c              LDR      r1,|L5.376|
000108  6ce0              LDR      r0,[r4,#0x4c]
00010a  6809              LDR      r1,[r1,#0]  ; OSTickCtr
00010c  4288              CMP      r0,r1
00010e  d117              BNE      |L5.320|
;;;489    #if (OS_MSG_EN > 0u)
;;;490                             p_tcb->MsgPtr     = (void      *)0;
000110  2000              MOVS     r0,#0
000112  65e0              STR      r0,[r4,#0x5c]
;;;491                             p_tcb->MsgSize    = (OS_MSG_SIZE)0u;
000114  f8a40060          STRH     r0,[r4,#0x60]
;;;492    #endif
;;;493                             p_tcb->TS         = OS_TS_GET();
000118  f7fffffe          BL       CPU_TS_TmrRd
00011c  6420              STR      r0,[r4,#0x40]
;;;494                             OS_PendListRemove(p_tcb);                     /* Remove from wait list                       */
00011e  4620              MOV      r0,r4
000120  f7fffffe          BL       OS_PendListRemove
;;;495                             OS_TickListRemove(p_tcb);                     /* Remove from current wheel spoke             */
000124  4620              MOV      r0,r4
000126  f7fffffe          BL       OS_TickListRemove
;;;496                             p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
00012a  2004              MOVS     r0,#4
00012c  3434              ADDS     r4,r4,#0x34
00012e  70a0              STRB     r0,[r4,#2]
;;;497                             p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;   /* Indicate pend timed out                     */
000130  2003              MOVS     r0,#3
000132  7060              STRB     r0,[r4,#1]
;;;498                             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;  /* Indicate no longer pending                  */
000134  2000              MOVS     r0,#0
000136  f8040934          STRB     r0,[r4],#-0x34
00013a  e002              B        |L5.322|
00013c  e006              B        |L5.332|
00013e  e001              B        |L5.324|
                  |L5.320|
;;;499                         } else {
;;;500                             done              = DEF_TRUE;                 /* Don't find a match, we're done!             */
000140  2701              MOVS     r7,#1
                  |L5.322|
;;;501                         }
;;;502                         break;
000142  e000              B        |L5.326|
                  |L5.324|
;;;503    
;;;504                    default:
;;;505                         break;
000144  bf00              NOP      
                  |L5.326|
000146  bf00              NOP                            ;442
;;;506                }
;;;507                p_tcb = p_tcb_next;
000148  464c              MOV      r4,r9
00014a  e000              B        |L5.334|
                  |L5.332|
;;;508            } else {
;;;509                done  = DEF_TRUE;
00014c  2701              MOVS     r7,#1
                  |L5.334|
00014e  2f00              CMP      r7,#0                 ;434
000150  f43faf7a          BEQ      |L5.72|
;;;510            }
;;;511        }
;;;512        ts_end = OS_TS_GET() - ts_start;                                   /* Measure execution time of tick task         */
000154  f7fffffe          BL       CPU_TS_TmrRd
000158  1b46              SUBS     r6,r0,r5
;;;513        if (OSTickTaskTimeMax < ts_end) {
00015a  480a              LDR      r0,|L5.388|
00015c  6800              LDR      r0,[r0,#0]  ; OSTickTaskTimeMax
00015e  42b0              CMP      r0,r6
000160  d201              BCS      |L5.358|
;;;514            OSTickTaskTimeMax = ts_end;
000162  4808              LDR      r0,|L5.388|
000164  6006              STR      r6,[r0,#0]  ; OSTickTaskTimeMax
                  |L5.358|
;;;515        }
;;;516        OS_CRITICAL_EXIT();
000166  bf00              NOP      
000168  bf00              NOP      
00016a  4658              MOV      r0,r11
00016c  f7fffffe          BL       CPU_SR_Restore
000170  bf00              NOP      
000172  bf00              NOP      
;;;517    }
000174  e8bd9ff0          POP      {r4-r12,pc}
                          ENDP

                  |L5.376|
                          DCD      OSTickCtr
                  |L5.380|
                          DCD      OSCfg_TickWheelSize
                  |L5.384|
                          DCD      OSCfg_TickWheel
                  |L5.388|
                          DCD      OSTickTaskTimeMax

                          AREA ||i.OS_TickTask||, CODE, READONLY, ALIGN=2

                  OS_TickTask PROC
;;;60     
;;;61     void  OS_TickTask (void  *p_arg)
000000  b51c              PUSH     {r2-r4,lr}
;;;62     {
;;;63         OS_ERR  err;
;;;64         CPU_TS  ts;
;;;65     
;;;66     
;;;67         p_arg = p_arg;                                          /* Prevent compiler warning                               */
000002  bf00              NOP      
;;;68     
;;;69         while (DEF_ON) {
000004  e00e              B        |L6.36|
                  |L6.6|
;;;70             (void)OSTaskSemPend((OS_TICK  )0,
000006  ab01              ADD      r3,sp,#4
000008  466a              MOV      r2,sp
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       OSTaskSemPend
;;;71                                 (OS_OPT   )OS_OPT_PEND_BLOCKING,
;;;72                                 (CPU_TS  *)&ts,
;;;73                                 (OS_ERR  *)&err);               /* Wait for signal from tick interrupt                    */
;;;74             if (err == OS_ERR_NONE) {
000012  f8bd0004          LDRH     r0,[sp,#4]
000016  b928              CBNZ     r0,|L6.36|
;;;75                 if (OSRunning == OS_STATE_OS_RUNNING) {
000018  4803              LDR      r0,|L6.40|
00001a  7800              LDRB     r0,[r0,#0]  ; OSRunning
00001c  2801              CMP      r0,#1
00001e  d101              BNE      |L6.36|
;;;76                     OS_TickListUpdate();                        /* Update all tasks waiting for time                      */
000020  f7fffffe          BL       OS_TickListUpdate
                  |L6.36|
000024  e7ef              B        |L6.6|
;;;77                 }
;;;78             }
;;;79         }
;;;80     }
;;;81     
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      OSRunning

                          AREA ||i.OS_TickTaskInit||, CODE, READONLY, ALIGN=2

                  OS_TickTaskInit PROC
;;;103    
;;;104    void  OS_TickTaskInit (OS_ERR  *p_err)
000000  b510              PUSH     {r4,lr}
;;;105    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;106    #ifdef OS_SAFETY_CRITICAL
;;;107        if (p_err == (OS_ERR *)0) {
;;;108            OS_SAFETY_CRITICAL_EXCEPTION();
;;;109            return;
;;;110        }
;;;111    #endif
;;;112    
;;;113        OSTickCtr         = (OS_TICK)0u;                        /* Clear the tick counter                                 */
000006  2000              MOVS     r0,#0
000008  491d              LDR      r1,|L7.128|
00000a  6008              STR      r0,[r1,#0]  ; OSTickCtr
;;;114    
;;;115        OSTickTaskTimeMax = (CPU_TS)0u;
00000c  491d              LDR      r1,|L7.132|
00000e  6008              STR      r0,[r1,#0]  ; OSTickTaskTimeMax
;;;116    
;;;117    
;;;118        OS_TickListInit();                                      /* Initialize the tick list data structures               */
000010  f7fffffe          BL       OS_TickListInit
;;;119    
;;;120                                                                /* ---------------- CREATE THE TICK TASK ---------------- */
;;;121        if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
000014  481c              LDR      r0,|L7.136|
000016  6800              LDR      r0,[r0,#0]  ; OSCfg_TickTaskStkBasePtr
000018  b920              CBNZ     r0,|L7.36|
;;;122           *p_err = OS_ERR_TICK_STK_INVALID;
00001a  f2472012          MOV      r0,#0x7212
00001e  8020              STRH     r0,[r4,#0]
                  |L7.32|
;;;123            return;
;;;124        }
;;;125    
;;;126        if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
;;;127           *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
;;;128            return;
;;;129        }
;;;130    
;;;131        if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {     /* Only one task at the 'Idle Task' priority              */
;;;132           *p_err = OS_ERR_TICK_PRIO_INVALID;
;;;133            return;
;;;134        }
;;;135    
;;;136        OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
;;;137                     (CPU_CHAR   *)((void *)"uC/OS-III Tick Task"),
;;;138                     (OS_TASK_PTR )OS_TickTask,
;;;139                     (void       *)0,
;;;140                     (OS_PRIO     )OSCfg_TickTaskPrio,
;;;141                     (CPU_STK    *)OSCfg_TickTaskStkBasePtr,
;;;142                     (CPU_STK_SIZE)OSCfg_TickTaskStkLimit,
;;;143                     (CPU_STK_SIZE)OSCfg_TickTaskStkSize,
;;;144                     (OS_MSG_QTY  )0u,
;;;145                     (OS_TICK     )0u,
;;;146                     (void       *)0,
;;;147                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
;;;148                     (OS_ERR     *)p_err);
;;;149    }
000020  b00a              ADD      sp,sp,#0x28
000022  bd10              POP      {r4,pc}
                  |L7.36|
000024  4819              LDR      r0,|L7.140|
000026  6800              LDR      r0,[r0,#0]            ;126  ; OSCfg_TickTaskStkSize
000028  4919              LDR      r1,|L7.144|
00002a  6809              LDR      r1,[r1,#0]            ;126  ; OSCfg_StkSizeMin
00002c  4288              CMP      r0,r1                 ;126
00002e  d203              BCS      |L7.56|
000030  f2472013          MOV      r0,#0x7213            ;127
000034  8020              STRH     r0,[r4,#0]            ;127
000036  e7f3              B        |L7.32|
                  |L7.56|
000038  4816              LDR      r0,|L7.148|
00003a  7800              LDRB     r0,[r0,#0]            ;131  ; OSCfg_TickTaskPrio
00003c  283f              CMP      r0,#0x3f              ;131
00003e  d303              BCC      |L7.72|
000040  f2472011          MOV      r0,#0x7211            ;132
000044  8020              STRH     r0,[r4,#0]            ;132
000046  e7eb              B        |L7.32|
                  |L7.72|
000048  200b              MOVS     r0,#0xb               ;136
00004a  2100              MOVS     r1,#0                 ;136
00004c  9105              STR      r1,[sp,#0x14]         ;136
00004e  460a              MOV      r2,r1                 ;136
000050  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;136
000054  9106              STR      r1,[sp,#0x18]         ;136
000056  480d              LDR      r0,|L7.140|
000058  6800              LDR      r0,[r0,#0]            ;136  ; OSCfg_TickTaskStkSize
00005a  490f              LDR      r1,|L7.152|
00005c  6809              LDR      r1,[r1,#0]            ;136  ; OSCfg_TickTaskStkLimit
00005e  4b0a              LDR      r3,|L7.136|
000060  681b              LDR      r3,[r3,#0]            ;136  ; OSCfg_TickTaskStkBasePtr
000062  e9cd3101          STRD     r3,r1,[sp,#4]         ;136
000066  e9cd0203          STRD     r0,r2,[sp,#0xc]       ;136
00006a  480a              LDR      r0,|L7.148|
00006c  7800              LDRB     r0,[r0,#0]            ;136  ; OSCfg_TickTaskPrio
00006e  2300              MOVS     r3,#0                 ;136
000070  4a0a              LDR      r2,|L7.156|
000072  a10b              ADR      r1,|L7.160|
000074  9000              STR      r0,[sp,#0]            ;136
000076  480f              LDR      r0,|L7.180|
000078  f7fffffe          BL       OSTaskCreate
00007c  bf00              NOP      
00007e  e7cf              B        |L7.32|
;;;150    
                          ENDP

                  |L7.128|
                          DCD      OSTickCtr
                  |L7.132|
                          DCD      OSTickTaskTimeMax
                  |L7.136|
                          DCD      OSCfg_TickTaskStkBasePtr
                  |L7.140|
                          DCD      OSCfg_TickTaskStkSize
                  |L7.144|
                          DCD      OSCfg_StkSizeMin
                  |L7.148|
                          DCD      OSCfg_TickTaskPrio
                  |L7.152|
                          DCD      OSCfg_TickTaskStkLimit
                  |L7.156|
                          DCD      OS_TickTask
                  |L7.160|
0000a0  75432f4f          DCB      "uC/OS-III Tick Task",0
0000a4  532d4949
0000a8  49205469
0000ac  636b2054
0000b0  61736b00
                  |L7.180|
                          DCD      OSTickTaskTCB
