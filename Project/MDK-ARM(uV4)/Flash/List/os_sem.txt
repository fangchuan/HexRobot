; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_sem.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_sem.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_sem.crf ..\..\uCOS-III\uCOS-III\Source\os_sem.c]
                          THUMB

                          AREA ||i.OSSemCreate||, CODE, READONLY, ALIGN=2

                  OSSemCreate PROC
;;;72     
;;;73     void  OSSemCreate (OS_SEM      *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;74                        CPU_CHAR    *p_name,
;;;75                        OS_SEM_CTR   cnt,
;;;76                        OS_ERR      *p_err)
;;;77     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;78         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;79     
;;;80     
;;;81     
;;;82     #ifdef OS_SAFETY_CRITICAL
;;;83         if (p_err == (OS_ERR *)0) {
;;;84             OS_SAFETY_CRITICAL_EXCEPTION();
;;;85             return;
;;;86         }
;;;87     #endif
;;;88     
;;;89     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;90         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;91            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;92             return;
;;;93         }
;;;94     #endif
;;;95     
;;;96     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;97         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
000010  4818              LDR      r0,|L1.116|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  2800              CMP      r0,#0
000016  dd04              BLE      |L1.34|
;;;98            *p_err = OS_ERR_CREATE_ISR;
000018  f64260e1          MOV      r0,#0x2ee1
00001c  8028              STRH     r0,[r5,#0]
                  |L1.30|
;;;99             return;
;;;100        }
;;;101    #endif
;;;102    
;;;103    #if OS_CFG_ARG_CHK_EN > 0u
;;;104        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
;;;105           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;106            return;
;;;107        }
;;;108    #endif
;;;109    
;;;110        OS_CRITICAL_ENTER();
;;;111        p_sem->Type    = OS_OBJ_TYPE_SEM;                       /* Mark the data structure as a semaphore                 */
;;;112        p_sem->Ctr     = cnt;                                   /* Set semaphore value                                    */
;;;113        p_sem->TS      = (CPU_TS)0;
;;;114        p_sem->NamePtr = p_name;                                /* Save the name of the semaphore                         */
;;;115        OS_PendListInit(&p_sem->PendList);                      /* Initialize the waiting list                            */
;;;116    
;;;117    #if OS_CFG_DBG_EN > 0u
;;;118        OS_SemDbgListAdd(p_sem);
;;;119    #endif
;;;120        OSSemQty++;
;;;121    
;;;122        OS_CRITICAL_EXIT_NO_SCHED();
;;;123       *p_err = OS_ERR_NONE;
;;;124    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.34|
000022  b91c              CBNZ     r4,|L1.44|
000024  f64550c3          MOV      r0,#0x5dc3            ;105
000028  8028              STRH     r0,[r5,#0]            ;105
00002a  e7f8              B        |L1.30|
                  |L1.44|
00002c  bf00              NOP                            ;110
00002e  bf00              NOP                            ;110
000030  f7fffffe          BL       CPU_SR_Save
000034  4680              MOV      r8,r0                 ;110
000036  bf00              NOP                            ;110
000038  bf00              NOP                            ;110
00003a  480f              LDR      r0,|L1.120|
00003c  6020              STR      r0,[r4,#0]            ;111
00003e  6227              STR      r7,[r4,#0x20]         ;112
000040  2000              MOVS     r0,#0                 ;113
000042  6260              STR      r0,[r4,#0x24]         ;113
000044  6066              STR      r6,[r4,#4]            ;114
000046  f1040008          ADD      r0,r4,#8              ;115
00004a  f7fffffe          BL       OS_PendListInit
00004e  4620              MOV      r0,r4                 ;118
000050  f7fffffe          BL       OS_SemDbgListAdd
000054  4809              LDR      r0,|L1.124|
000056  8800              LDRH     r0,[r0,#0]            ;120  ; OSSemQty
000058  1c40              ADDS     r0,r0,#1              ;120
00005a  4908              LDR      r1,|L1.124|
00005c  8008              STRH     r0,[r1,#0]            ;120
00005e  bf00              NOP                            ;122
000060  bf00              NOP                            ;122
000062  4640              MOV      r0,r8                 ;122
000064  f7fffffe          BL       CPU_SR_Restore
000068  bf00              NOP                            ;122
00006a  bf00              NOP                            ;122
00006c  2000              MOVS     r0,#0                 ;123
00006e  8028              STRH     r0,[r5,#0]            ;123
000070  bf00              NOP      
000072  e7d4              B        |L1.30|
;;;125    
                          ENDP

                  |L1.116|
                          DCD      OSIntNestingCtr
                  |L1.120|
                          DCD      0x414d4553
                  |L1.124|
                          DCD      OSSemQty

                          AREA ||i.OSSemDel||, CODE, READONLY, ALIGN=2

                  OSSemDel PROC
;;;162    #if OS_CFG_SEM_DEL_EN > 0u
;;;163    OS_OBJ_QTY  OSSemDel (OS_SEM  *p_sem,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;164                          OS_OPT   opt,
;;;165                          OS_ERR  *p_err)
;;;166    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;167        OS_OBJ_QTY     cnt;
;;;168        OS_OBJ_QTY     nbr_tasks;
;;;169        OS_PEND_DATA  *p_pend_data;
;;;170        OS_PEND_LIST  *p_pend_list;
;;;171        OS_TCB        *p_tcb;
;;;172        CPU_TS         ts;
;;;173        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;174    
;;;175    
;;;176    
;;;177    #ifdef OS_SAFETY_CRITICAL
;;;178        if (p_err == (OS_ERR *)0) {
;;;179            OS_SAFETY_CRITICAL_EXCEPTION();
;;;180            return ((OS_OBJ_QTY)0);
;;;181        }
;;;182    #endif
;;;183    
;;;184    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;185        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to delete a semaphore from an ISR          */
00000e  4849              LDR      r0,|L2.308|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L2.34|
;;;186           *p_err = OS_ERR_DEL_ISR;
000016  f24320c9          MOV      r0,#0x32c9
00001a  8020              STRH     r0,[r4,#0]
;;;187            return ((OS_OBJ_QTY)0);
00001c  2000              MOVS     r0,#0
                  |L2.30|
;;;188        }
;;;189    #endif
;;;190    
;;;191    #if OS_CFG_ARG_CHK_EN > 0u
;;;192        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
;;;193           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;194            return ((OS_OBJ_QTY)0);
;;;195        }
;;;196        switch (opt) {                                          /* Validate 'opt'                                         */
;;;197            case OS_OPT_DEL_NO_PEND:
;;;198            case OS_OPT_DEL_ALWAYS:
;;;199                 break;
;;;200    
;;;201            default:
;;;202                *p_err = OS_ERR_OPT_INVALID;
;;;203                 return ((OS_OBJ_QTY)0);
;;;204        }
;;;205    #endif
;;;206    
;;;207    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;208        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;209           *p_err = OS_ERR_OBJ_TYPE;
;;;210            return ((OS_OBJ_QTY)0);
;;;211        }
;;;212    #endif
;;;213    
;;;214        CPU_CRITICAL_ENTER();
;;;215        p_pend_list = &p_sem->PendList;
;;;216        cnt         = p_pend_list->NbrEntries;
;;;217        nbr_tasks   = cnt;
;;;218        switch (opt) {
;;;219            case OS_OPT_DEL_NO_PEND:                            /* Delete semaphore only if no task waiting               */
;;;220                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;221    #if OS_CFG_DBG_EN > 0u
;;;222                     OS_SemDbgListRemove(p_sem);
;;;223    #endif
;;;224                     OSSemQty--;
;;;225                     OS_SemClr(p_sem);
;;;226                     CPU_CRITICAL_EXIT();
;;;227                    *p_err = OS_ERR_NONE;
;;;228                 } else {
;;;229                     CPU_CRITICAL_EXIT();
;;;230                    *p_err = OS_ERR_TASK_WAITING;
;;;231                 }
;;;232                 break;
;;;233    
;;;234            case OS_OPT_DEL_ALWAYS:                             /* Always delete the semaphore                            */
;;;235                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;236                 ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
;;;237                 while (cnt > 0u) {                             /* Remove all tasks on the pend list                      */
;;;238                     p_pend_data = p_pend_list->HeadPtr;
;;;239                     p_tcb       = p_pend_data->TCBPtr;
;;;240                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_sem),
;;;241                                   p_tcb,
;;;242                                   ts);
;;;243                     cnt--;
;;;244                 }
;;;245    #if OS_CFG_DBG_EN > 0u
;;;246                 OS_SemDbgListRemove(p_sem);
;;;247    #endif
;;;248                 OSSemQty--;
;;;249                 OS_SemClr(p_sem);
;;;250                 OS_CRITICAL_EXIT_NO_SCHED();
;;;251                 OSSched();                                     /* Find highest priority task ready to run                */
;;;252                *p_err = OS_ERR_NONE;
;;;253                 break;
;;;254    
;;;255            default:
;;;256                 CPU_CRITICAL_EXIT();
;;;257                *p_err = OS_ERR_OPT_INVALID;
;;;258                 break;
;;;259        }
;;;260        return ((OS_OBJ_QTY)nbr_tasks);
;;;261    }
00001e  e8bd9ffc          POP      {r2-r12,pc}
                  |L2.34|
000022  b925              CBNZ     r5,|L2.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;193
000028  8020              STRH     r0,[r4,#0]            ;193
00002a  2000              MOVS     r0,#0                 ;194
00002c  e7f7              B        |L2.30|
                  |L2.46|
00002e  f1b80f00          CMP      r8,#0                 ;196
000032  d003              BEQ      |L2.60|
000034  f1b80f01          CMP      r8,#1                 ;196
000038  d102              BNE      |L2.64|
00003a  e000              B        |L2.62|
                  |L2.60|
00003c  bf00              NOP                            ;198
                  |L2.62|
00003e  e004              B        |L2.74|
                  |L2.64|
000040  f6456025          MOV      r0,#0x5e25            ;202
000044  8020              STRH     r0,[r4,#0]            ;202
000046  2000              MOVS     r0,#0                 ;203
000048  e7e9              B        |L2.30|
                  |L2.74|
00004a  bf00              NOP                            ;199
00004c  493a              LDR      r1,|L2.312|
00004e  6828              LDR      r0,[r5,#0]            ;208
000050  4288              CMP      r0,r1                 ;208
000052  d004              BEQ      |L2.94|
000054  f64550c4          MOV      r0,#0x5dc4            ;209
000058  8020              STRH     r0,[r4,#0]            ;209
00005a  2000              MOVS     r0,#0                 ;210
00005c  e7df              B        |L2.30|
                  |L2.94|
00005e  bf00              NOP                            ;214
000060  bf00              NOP                            ;214
000062  f7fffffe          BL       CPU_SR_Save
000066  9000              STR      r0,[sp,#0]            ;214
000068  bf00              NOP                            ;214
00006a  bf00              NOP                            ;214
00006c  f1050908          ADD      r9,r5,#8              ;215
000070  f8b96008          LDRH     r6,[r9,#8]            ;216
000074  4637              MOV      r7,r6                 ;217
000076  f1b80f00          CMP      r8,#0                 ;218
00007a  d003              BEQ      |L2.132|
00007c  f1b80f01          CMP      r8,#1                 ;218
000080  d149              BNE      |L2.278|
000082  e020              B        |L2.198|
                  |L2.132|
000084  b9a7              CBNZ     r7,|L2.176|
000086  4628              MOV      r0,r5                 ;222
000088  f7fffffe          BL       OS_SemDbgListRemove
00008c  482b              LDR      r0,|L2.316|
00008e  8800              LDRH     r0,[r0,#0]            ;224  ; OSSemQty
000090  1e40              SUBS     r0,r0,#1              ;224
000092  492a              LDR      r1,|L2.316|
000094  8008              STRH     r0,[r1,#0]            ;224
000096  4628              MOV      r0,r5                 ;225
000098  f7fffffe          BL       OS_SemClr
00009c  bf00              NOP                            ;226
00009e  bf00              NOP                            ;226
0000a0  9800              LDR      r0,[sp,#0]            ;226
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;226
0000a8  bf00              NOP                            ;226
0000aa  2000              MOVS     r0,#0                 ;227
0000ac  8020              STRH     r0,[r4,#0]            ;227
0000ae  e009              B        |L2.196|
                  |L2.176|
0000b0  bf00              NOP                            ;229
0000b2  bf00              NOP                            ;229
0000b4  9800              LDR      r0,[sp,#0]            ;229
0000b6  f7fffffe          BL       CPU_SR_Restore
0000ba  bf00              NOP                            ;229
0000bc  bf00              NOP                            ;229
0000be  f247105f          MOV      r0,#0x715f            ;230
0000c2  8020              STRH     r0,[r4,#0]            ;230
                  |L2.196|
0000c4  e032              B        |L2.300|
                  |L2.198|
0000c6  f7fffffe          BL       CPU_TS_TmrRd
0000ca  9001              STR      r0,[sp,#4]            ;236
0000cc  e00a              B        |L2.228|
                  |L2.206|
0000ce  f8d9a000          LDR      r10,[r9,#0]           ;238
0000d2  f8dab008          LDR      r11,[r10,#8]          ;239
0000d6  4659              MOV      r1,r11                ;240
0000d8  4628              MOV      r0,r5                 ;240
0000da  9a01              LDR      r2,[sp,#4]            ;240
0000dc  f7fffffe          BL       OS_PendObjDel
0000e0  1e70              SUBS     r0,r6,#1              ;243
0000e2  b286              UXTH     r6,r0                 ;243
                  |L2.228|
0000e4  2e00              CMP      r6,#0                 ;237
0000e6  d1f2              BNE      |L2.206|
0000e8  4628              MOV      r0,r5                 ;246
0000ea  f7fffffe          BL       OS_SemDbgListRemove
0000ee  4813              LDR      r0,|L2.316|
0000f0  8800              LDRH     r0,[r0,#0]            ;248  ; OSSemQty
0000f2  1e40              SUBS     r0,r0,#1              ;248
0000f4  4911              LDR      r1,|L2.316|
0000f6  8008              STRH     r0,[r1,#0]            ;248
0000f8  4628              MOV      r0,r5                 ;249
0000fa  f7fffffe          BL       OS_SemClr
0000fe  bf00              NOP                            ;250
000100  bf00              NOP                            ;250
000102  9800              LDR      r0,[sp,#0]            ;250
000104  f7fffffe          BL       CPU_SR_Restore
000108  bf00              NOP                            ;250
00010a  bf00              NOP                            ;250
00010c  f7fffffe          BL       OSSched
000110  2000              MOVS     r0,#0                 ;252
000112  8020              STRH     r0,[r4,#0]            ;252
000114  e00a              B        |L2.300|
                  |L2.278|
000116  bf00              NOP                            ;256
000118  bf00              NOP                            ;256
00011a  9800              LDR      r0,[sp,#0]            ;256
00011c  f7fffffe          BL       CPU_SR_Restore
000120  bf00              NOP                            ;256
000122  bf00              NOP                            ;256
000124  f6456025          MOV      r0,#0x5e25            ;257
000128  8020              STRH     r0,[r4,#0]            ;257
00012a  bf00              NOP                            ;258
                  |L2.300|
00012c  bf00              NOP                            ;232
00012e  4638              MOV      r0,r7                 ;260
000130  e775              B        |L2.30|
;;;262    #endif
                          ENDP

000132  0000              DCW      0x0000
                  |L2.308|
                          DCD      OSIntNestingCtr
                  |L2.312|
                          DCD      0x414d4553
                  |L2.316|
                          DCD      OSSemQty

                          AREA ||i.OSSemPend||, CODE, READONLY, ALIGN=2

                  OSSemPend PROC
;;;310    
;;;311    OS_SEM_CTR  OSSemPend (OS_SEM   *p_sem,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;312                           OS_TICK   timeout,
;;;313                           OS_OPT    opt,
;;;314                           CPU_TS   *p_ts,
;;;315                           OS_ERR   *p_err)
;;;316    {
000004  b088              SUB      sp,sp,#0x20
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461c              MOV      r4,r3
00000e  9d10              LDR      r5,[sp,#0x40]
;;;317        OS_SEM_CTR    ctr;
;;;318        OS_PEND_DATA  pend_data;
;;;319        CPU_SR_ALLOC();
000010  f04f0a00          MOV      r10,#0
;;;320    
;;;321    
;;;322    
;;;323    #ifdef OS_SAFETY_CRITICAL
;;;324        if (p_err == (OS_ERR *)0) {
;;;325            OS_SAFETY_CRITICAL_EXCEPTION();
;;;326            return ((OS_SEM_CTR)0);
;;;327        }
;;;328    #endif
;;;329    
;;;330    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;331        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
000014  4860              LDR      r0,|L3.408|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000018  2800              CMP      r0,#0
00001a  dd06              BLE      |L3.42|
;;;332           *p_err = OS_ERR_PEND_ISR;
00001c  f24610ae          MOV      r0,#0x61ae
000020  8028              STRH     r0,[r5,#0]
;;;333            return ((OS_SEM_CTR)0);
000022  2000              MOVS     r0,#0
                  |L3.36|
;;;334        }
;;;335    #endif
;;;336    
;;;337    #if OS_CFG_ARG_CHK_EN > 0u
;;;338        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
;;;339           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;340            return ((OS_SEM_CTR)0);
;;;341        }
;;;342        switch (opt) {                                          /* Validate 'opt'                                         */
;;;343            case OS_OPT_PEND_BLOCKING:
;;;344            case OS_OPT_PEND_NON_BLOCKING:
;;;345                 break;
;;;346    
;;;347            default:
;;;348                *p_err = OS_ERR_OPT_INVALID;
;;;349                 return ((OS_SEM_CTR)0);
;;;350        }
;;;351    #endif
;;;352    
;;;353    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;354        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;355           *p_err = OS_ERR_OBJ_TYPE;
;;;356            return ((OS_SEM_CTR)0);
;;;357        }
;;;358    #endif
;;;359    
;;;360        if (p_ts != (CPU_TS *)0) {
;;;361           *p_ts  = (CPU_TS)0;                                  /* Initialize the returned timestamp                      */
;;;362        }
;;;363        CPU_CRITICAL_ENTER();
;;;364        if (p_sem->Ctr > (OS_SEM_CTR)0) {                       /* Resource available?                                    */
;;;365            p_sem->Ctr--;                                       /* Yes, caller may proceed                                */
;;;366            if (p_ts != (CPU_TS *)0) {
;;;367               *p_ts  = p_sem->TS;                              /*      get timestamp of last post                        */
;;;368            }
;;;369            ctr   = p_sem->Ctr;
;;;370            CPU_CRITICAL_EXIT();
;;;371           *p_err = OS_ERR_NONE;
;;;372            return (ctr);
;;;373        }
;;;374    
;;;375        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;376            ctr   = p_sem->Ctr;                                 /* No                                                     */
;;;377            CPU_CRITICAL_EXIT();
;;;378           *p_err = OS_ERR_PEND_WOULD_BLOCK;
;;;379            return (ctr);
;;;380        } else {                                                /* Yes                                                    */
;;;381            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;382                CPU_CRITICAL_EXIT();
;;;383               *p_err = OS_ERR_SCHED_LOCKED;
;;;384                return ((OS_SEM_CTR)0);
;;;385            }
;;;386        }
;;;387                                                                /* Lock the scheduler/re-enable interrupts                */
;;;388        OS_CRITICAL_ENTER_CPU_EXIT();
;;;389        OS_Pend(&pend_data,                                     /* Block task pending on Semaphore                        */
;;;390                (OS_PEND_OBJ *)((void *)p_sem),
;;;391                OS_TASK_PEND_ON_SEM,
;;;392                timeout);
;;;393    
;;;394        OS_CRITICAL_EXIT_NO_SCHED();
;;;395    
;;;396        OSSched();                                              /* Find the next highest priority task ready to run       */
;;;397    
;;;398        CPU_CRITICAL_ENTER();
;;;399        switch (OSTCBCurPtr->PendStatus) {
;;;400            case OS_STATUS_PEND_OK:                             /* We got the semaphore                                   */
;;;401                 if (p_ts != (CPU_TS *)0) {
;;;402                    *p_ts  =  OSTCBCurPtr->TS;
;;;403                 }
;;;404                *p_err = OS_ERR_NONE;
;;;405                 break;
;;;406    
;;;407            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;408                 if (p_ts != (CPU_TS *)0) {
;;;409                    *p_ts  =  OSTCBCurPtr->TS;
;;;410                 }
;;;411                *p_err = OS_ERR_PEND_ABORT;
;;;412                 break;
;;;413    
;;;414            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
;;;415                 if (p_ts != (CPU_TS *)0) {
;;;416                    *p_ts  = (CPU_TS  )0;
;;;417                 }
;;;418                *p_err = OS_ERR_TIMEOUT;
;;;419                 break;
;;;420    
;;;421            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;422                 if (p_ts != (CPU_TS *)0) {
;;;423                    *p_ts  =  OSTCBCurPtr->TS;
;;;424                 }
;;;425                *p_err = OS_ERR_OBJ_DEL;
;;;426                 break;
;;;427    
;;;428            default:
;;;429                *p_err = OS_ERR_STATUS_INVALID;
;;;430                 CPU_CRITICAL_EXIT();
;;;431                 return ((OS_SEM_CTR)0);
;;;432        }
;;;433        ctr = p_sem->Ctr;
;;;434        CPU_CRITICAL_EXIT();
;;;435        return (ctr);
;;;436    }
000024  b008              ADD      sp,sp,#0x20
000026  e8bd87f0          POP      {r4-r10,pc}
                  |L3.42|
00002a  b926              CBNZ     r6,|L3.54|
00002c  f64550c3          MOV      r0,#0x5dc3            ;339
000030  8028              STRH     r0,[r5,#0]            ;339
000032  2000              MOVS     r0,#0                 ;340
000034  e7f6              B        |L3.36|
                  |L3.54|
000036  f1b80f00          CMP      r8,#0                 ;342
00003a  d003              BEQ      |L3.68|
00003c  f5b84f00          CMP      r8,#0x8000            ;342
000040  d102              BNE      |L3.72|
000042  e000              B        |L3.70|
                  |L3.68|
000044  bf00              NOP                            ;344
                  |L3.70|
000046  e004              B        |L3.82|
                  |L3.72|
000048  f6456025          MOV      r0,#0x5e25            ;348
00004c  8028              STRH     r0,[r5,#0]            ;348
00004e  2000              MOVS     r0,#0                 ;349
000050  e7e8              B        |L3.36|
                  |L3.82|
000052  bf00              NOP                            ;345
000054  4951              LDR      r1,|L3.412|
000056  6830              LDR      r0,[r6,#0]            ;354
000058  4288              CMP      r0,r1                 ;354
00005a  d004              BEQ      |L3.102|
00005c  f64550c4          MOV      r0,#0x5dc4            ;355
000060  8028              STRH     r0,[r5,#0]            ;355
000062  2000              MOVS     r0,#0                 ;356
000064  e7de              B        |L3.36|
                  |L3.102|
000066  b10c              CBZ      r4,|L3.108|
000068  2000              MOVS     r0,#0                 ;361
00006a  6020              STR      r0,[r4,#0]            ;361
                  |L3.108|
00006c  bf00              NOP                            ;363
00006e  bf00              NOP                            ;363
000070  f7fffffe          BL       CPU_SR_Save
000074  4682              MOV      r10,r0                ;363
000076  bf00              NOP                            ;363
000078  bf00              NOP                            ;363
00007a  6a30              LDR      r0,[r6,#0x20]         ;364
00007c  b188              CBZ      r0,|L3.162|
00007e  6a30              LDR      r0,[r6,#0x20]         ;365
000080  1e40              SUBS     r0,r0,#1              ;365
000082  6230              STR      r0,[r6,#0x20]         ;365
000084  b10c              CBZ      r4,|L3.138|
000086  6a70              LDR      r0,[r6,#0x24]         ;367
000088  6020              STR      r0,[r4,#0]            ;367
                  |L3.138|
00008a  6a37              LDR      r7,[r6,#0x20]         ;369
00008c  bf00              NOP                            ;370
00008e  bf00              NOP                            ;370
000090  4650              MOV      r0,r10                ;370
000092  f7fffffe          BL       CPU_SR_Restore
000096  bf00              NOP                            ;370
000098  bf00              NOP                            ;370
00009a  2000              MOVS     r0,#0                 ;371
00009c  8028              STRH     r0,[r5,#0]            ;371
00009e  4638              MOV      r0,r7                 ;372
0000a0  e7c0              B        |L3.36|
                  |L3.162|
0000a2  f4084000          AND      r0,r8,#0x8000         ;375
0000a6  b160              CBZ      r0,|L3.194|
0000a8  6a37              LDR      r7,[r6,#0x20]         ;376
0000aa  bf00              NOP                            ;377
0000ac  bf00              NOP                            ;377
0000ae  4650              MOV      r0,r10                ;377
0000b0  f7fffffe          BL       CPU_SR_Restore
0000b4  bf00              NOP                            ;377
0000b6  bf00              NOP                            ;377
0000b8  f24610b0          MOV      r0,#0x61b0            ;378
0000bc  8028              STRH     r0,[r5,#0]            ;378
0000be  4638              MOV      r0,r7                 ;379
0000c0  e7b0              B        |L3.36|
                  |L3.194|
0000c2  4837              LDR      r0,|L3.416|
0000c4  7800              LDRB     r0,[r0,#0]            ;381  ; OSSchedLockNestingCtr
0000c6  2800              CMP      r0,#0                 ;381
0000c8  dd0b              BLE      |L3.226|
0000ca  bf00              NOP                            ;382
0000cc  bf00              NOP                            ;382
0000ce  4650              MOV      r0,r10                ;382
0000d0  f7fffffe          BL       CPU_SR_Restore
0000d4  bf00              NOP                            ;382
0000d6  bf00              NOP                            ;382
0000d8  f6465063          MOV      r0,#0x6d63            ;383
0000dc  8028              STRH     r0,[r5,#0]            ;383
0000de  2000              MOVS     r0,#0                 ;384
0000e0  e7a0              B        |L3.36|
                  |L3.226|
0000e2  464b              MOV      r3,r9                 ;389
0000e4  2206              MOVS     r2,#6                 ;389
0000e6  4631              MOV      r1,r6                 ;389
0000e8  4668              MOV      r0,sp                 ;389
0000ea  f7fffffe          BL       OS_Pend
0000ee  bf00              NOP                            ;394
0000f0  bf00              NOP                            ;394
0000f2  4650              MOV      r0,r10                ;394
0000f4  f7fffffe          BL       CPU_SR_Restore
0000f8  bf00              NOP                            ;394
0000fa  bf00              NOP                            ;394
0000fc  f7fffffe          BL       OSSched
000100  bf00              NOP                            ;398
000102  bf00              NOP                            ;398
000104  f7fffffe          BL       CPU_SR_Save
000108  4682              MOV      r10,r0                ;398
00010a  bf00              NOP                            ;398
00010c  bf00              NOP                            ;398
00010e  4825              LDR      r0,|L3.420|
000110  6800              LDR      r0,[r0,#0]            ;399  ; OSTCBCurPtr
000112  f8900035          LDRB     r0,[r0,#0x35]         ;399
000116  b130              CBZ      r0,|L3.294|
000118  2801              CMP      r0,#1                 ;399
00011a  d00c              BEQ      |L3.310|
00011c  2802              CMP      r0,#2                 ;399
00011e  d01a              BEQ      |L3.342|
000120  2803              CMP      r0,#3                 ;399
000122  d121              BNE      |L3.360|
000124  e010              B        |L3.328|
                  |L3.294|
000126  b11c              CBZ      r4,|L3.304|
000128  481e              LDR      r0,|L3.420|
00012a  6800              LDR      r0,[r0,#0]            ;402  ; OSTCBCurPtr
00012c  6c00              LDR      r0,[r0,#0x40]         ;402
00012e  6020              STR      r0,[r4,#0]            ;402
                  |L3.304|
000130  2000              MOVS     r0,#0                 ;404
000132  8028              STRH     r0,[r5,#0]            ;404
000134  e024              B        |L3.384|
                  |L3.310|
000136  b11c              CBZ      r4,|L3.320|
000138  481a              LDR      r0,|L3.420|
00013a  6800              LDR      r0,[r0,#0]            ;409  ; OSTCBCurPtr
00013c  6c00              LDR      r0,[r0,#0x40]         ;409
00013e  6020              STR      r0,[r4,#0]            ;409
                  |L3.320|
000140  f24610a9          MOV      r0,#0x61a9            ;411
000144  8028              STRH     r0,[r5,#0]            ;411
000146  e01b              B        |L3.384|
                  |L3.328|
000148  b10c              CBZ      r4,|L3.334|
00014a  2000              MOVS     r0,#0                 ;416
00014c  6020              STR      r0,[r4,#0]            ;416
                  |L3.334|
00014e  f24720d9          MOV      r0,#0x72d9            ;418
000152  8028              STRH     r0,[r5,#0]            ;418
000154  e014              B        |L3.384|
                  |L3.342|
000156  b11c              CBZ      r4,|L3.352|
000158  4812              LDR      r0,|L3.420|
00015a  6800              LDR      r0,[r0,#0]            ;423  ; OSTCBCurPtr
00015c  6c00              LDR      r0,[r0,#0x40]         ;423
00015e  6020              STR      r0,[r4,#0]            ;423
                  |L3.352|
000160  f64550c2          MOV      r0,#0x5dc2            ;425
000164  8028              STRH     r0,[r5,#0]            ;425
000166  e00b              B        |L3.384|
                  |L3.360|
000168  f646602e          MOV      r0,#0x6e2e            ;429
00016c  8028              STRH     r0,[r5,#0]            ;429
00016e  bf00              NOP                            ;430
000170  bf00              NOP                            ;430
000172  4650              MOV      r0,r10                ;430
000174  f7fffffe          BL       CPU_SR_Restore
000178  bf00              NOP                            ;430
00017a  bf00              NOP                            ;430
00017c  2000              MOVS     r0,#0                 ;431
00017e  e751              B        |L3.36|
                  |L3.384|
000180  bf00              NOP                            ;405
000182  6a37              LDR      r7,[r6,#0x20]         ;433
000184  bf00              NOP                            ;434
000186  bf00              NOP                            ;434
000188  4650              MOV      r0,r10                ;434
00018a  f7fffffe          BL       CPU_SR_Restore
00018e  bf00              NOP                            ;434
000190  bf00              NOP                            ;434
000192  4638              MOV      r0,r7                 ;435
000194  e746              B        |L3.36|
;;;437    
                          ENDP

000196  0000              DCW      0x0000
                  |L3.408|
                          DCD      OSIntNestingCtr
                  |L3.412|
                          DCD      0x414d4553
                  |L3.416|
                          DCD      OSSchedLockNestingCtr
                  |L3.420|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSSemPendAbort||, CODE, READONLY, ALIGN=2

                  OSSemPendAbort PROC
;;;470    #if OS_CFG_SEM_PEND_ABORT_EN > 0u
;;;471    OS_OBJ_QTY  OSSemPendAbort (OS_SEM  *p_sem,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;472                                OS_OPT   opt,
;;;473                                OS_ERR  *p_err)
;;;474    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;475        OS_PEND_LIST  *p_pend_list;
;;;476        OS_TCB        *p_tcb;
;;;477        CPU_TS         ts;
;;;478        OS_OBJ_QTY     nbr_tasks;
;;;479        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;480    
;;;481    
;;;482    
;;;483    #ifdef OS_SAFETY_CRITICAL
;;;484        if (p_err == (OS_ERR *)0) {
;;;485            OS_SAFETY_CRITICAL_EXCEPTION();
;;;486            return ((OS_OBJ_QTY)0u);
;;;487        }
;;;488    #endif
;;;489    
;;;490    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;491        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
00000e  4837              LDR      r0,|L4.236|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L4.34|
;;;492           *p_err =  OS_ERR_PEND_ABORT_ISR;
000016  f24610aa          MOV      r0,#0x61aa
00001a  8020              STRH     r0,[r4,#0]
;;;493            return ((OS_OBJ_QTY)0u);
00001c  2000              MOVS     r0,#0
                  |L4.30|
;;;494        }
;;;495    #endif
;;;496    
;;;497    #if OS_CFG_ARG_CHK_EN > 0u
;;;498        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
;;;499           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;500            return ((OS_OBJ_QTY)0u);
;;;501        }
;;;502        switch (opt) {                                          /* Validate 'opt'                                         */
;;;503            case OS_OPT_PEND_ABORT_1:
;;;504            case OS_OPT_PEND_ABORT_ALL:
;;;505            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;506            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;507                 break;
;;;508    
;;;509            default:
;;;510                *p_err =  OS_ERR_OPT_INVALID;
;;;511                 return ((OS_OBJ_QTY)0u);
;;;512        }
;;;513    #endif
;;;514    
;;;515    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;516        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;517           *p_err =  OS_ERR_OBJ_TYPE;
;;;518            return ((OS_OBJ_QTY)0u);
;;;519        }
;;;520    #endif
;;;521    
;;;522        CPU_CRITICAL_ENTER();
;;;523        p_pend_list = &p_sem->PendList;
;;;524        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on semaphore?                         */
;;;525            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;526           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;527            return ((OS_OBJ_QTY)0u);
;;;528        }
;;;529    
;;;530        OS_CRITICAL_ENTER_CPU_EXIT();
;;;531        nbr_tasks = 0u;
;;;532        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
;;;533        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
;;;534            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;535            OS_PendAbort((OS_PEND_OBJ *)((void *)p_sem),
;;;536                         p_tcb,
;;;537                         ts);
;;;538            nbr_tasks++;
;;;539            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;540                break;                                          /* No                                                     */
;;;541            }
;;;542        }
;;;543        OS_CRITICAL_EXIT_NO_SCHED();
;;;544    
;;;545        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;546            OSSched();                                          /* Run the scheduler                                      */
;;;547        }
;;;548    
;;;549       *p_err = OS_ERR_NONE;
;;;550        return (nbr_tasks);
;;;551    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.34|
000022  b925              CBNZ     r5,|L4.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;499
000028  8020              STRH     r0,[r4,#0]            ;499
00002a  2000              MOVS     r0,#0                 ;500
00002c  e7f7              B        |L4.30|
                  |L4.46|
00002e  b14e              CBZ      r6,|L4.68|
000030  f5b67f80          CMP      r6,#0x100             ;502
000034  d007              BEQ      |L4.70|
000036  f5b64f00          CMP      r6,#0x8000            ;502
00003a  d005              BEQ      |L4.72|
00003c  f5b64f01          CMP      r6,#0x8100            ;502
000040  d104              BNE      |L4.76|
000042  e002              B        |L4.74|
                  |L4.68|
000044  bf00              NOP                            ;504
                  |L4.70|
000046  bf00              NOP                            ;505
                  |L4.72|
000048  bf00              NOP                            ;506
                  |L4.74|
00004a  e004              B        |L4.86|
                  |L4.76|
00004c  f6456025          MOV      r0,#0x5e25            ;510
000050  8020              STRH     r0,[r4,#0]            ;510
000052  2000              MOVS     r0,#0                 ;511
000054  e7e3              B        |L4.30|
                  |L4.86|
000056  bf00              NOP                            ;507
000058  4925              LDR      r1,|L4.240|
00005a  6828              LDR      r0,[r5,#0]            ;516
00005c  4288              CMP      r0,r1                 ;516
00005e  d004              BEQ      |L4.106|
000060  f64550c4          MOV      r0,#0x5dc4            ;517
000064  8020              STRH     r0,[r4,#0]            ;517
000066  2000              MOVS     r0,#0                 ;518
000068  e7d9              B        |L4.30|
                  |L4.106|
00006a  bf00              NOP                            ;522
00006c  bf00              NOP                            ;522
00006e  f7fffffe          BL       CPU_SR_Save
000072  4682              MOV      r10,r0                ;522
000074  bf00              NOP                            ;522
000076  bf00              NOP                            ;522
000078  f1050708          ADD      r7,r5,#8              ;523
00007c  8938              LDRH     r0,[r7,#8]            ;524
00007e  b958              CBNZ     r0,|L4.152|
000080  bf00              NOP                            ;525
000082  bf00              NOP                            ;525
000084  4650              MOV      r0,r10                ;525
000086  f7fffffe          BL       CPU_SR_Restore
00008a  bf00              NOP                            ;525
00008c  bf00              NOP                            ;525
00008e  f24610ab          MOV      r0,#0x61ab            ;526
000092  8020              STRH     r0,[r4,#0]            ;526
000094  2000              MOVS     r0,#0                 ;527
000096  e7c2              B        |L4.30|
                  |L4.152|
000098  f04f0800          MOV      r8,#0                 ;531
00009c  f7fffffe          BL       CPU_TS_TmrRd
0000a0  4683              MOV      r11,r0                ;532
0000a2  e00f              B        |L4.196|
                  |L4.164|
0000a4  6838              LDR      r0,[r7,#0]            ;534
0000a6  f8d09008          LDR      r9,[r0,#8]            ;534
0000aa  465a              MOV      r2,r11                ;535
0000ac  4649              MOV      r1,r9                 ;535
0000ae  4628              MOV      r0,r5                 ;535
0000b0  f7fffffe          BL       OS_PendAbort
0000b4  f1080001          ADD      r0,r8,#1              ;538
0000b8  fa1ff880          UXTH     r8,r0                 ;538
0000bc  f5b67f80          CMP      r6,#0x100             ;539
0000c0  d000              BEQ      |L4.196|
0000c2  e002              B        |L4.202|
                  |L4.196|
0000c4  8938              LDRH     r0,[r7,#8]            ;533
0000c6  2800              CMP      r0,#0                 ;533
0000c8  dcec              BGT      |L4.164|
                  |L4.202|
0000ca  bf00              NOP                            ;540
0000cc  bf00              NOP                            ;543
0000ce  bf00              NOP                            ;543
0000d0  4650              MOV      r0,r10                ;543
0000d2  f7fffffe          BL       CPU_SR_Restore
0000d6  bf00              NOP                            ;543
0000d8  bf00              NOP                            ;543
0000da  f4064000          AND      r0,r6,#0x8000         ;545
0000de  b908              CBNZ     r0,|L4.228|
0000e0  f7fffffe          BL       OSSched
                  |L4.228|
0000e4  2000              MOVS     r0,#0                 ;549
0000e6  8020              STRH     r0,[r4,#0]            ;549
0000e8  4640              MOV      r0,r8                 ;550
0000ea  e798              B        |L4.30|
;;;552    #endif
                          ENDP

                  |L4.236|
                          DCD      OSIntNestingCtr
                  |L4.240|
                          DCD      0x414d4553

                          AREA ||i.OSSemPost||, CODE, READONLY, ALIGN=2

                  OSSemPost PROC
;;;583    
;;;584    OS_SEM_CTR  OSSemPost (OS_SEM  *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;585                           OS_OPT   opt,
;;;586                           OS_ERR  *p_err)
;;;587    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;588        OS_SEM_CTR  ctr;
;;;589        CPU_TS      ts;
;;;590    
;;;591    
;;;592    
;;;593    #ifdef OS_SAFETY_CRITICAL
;;;594        if (p_err == (OS_ERR *)0) {
;;;595            OS_SAFETY_CRITICAL_EXCEPTION();
;;;596            return ((OS_SEM_CTR)0);
;;;597        }
;;;598    #endif
;;;599    
;;;600    #if OS_CFG_ARG_CHK_EN > 0u
;;;601        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
00000a  b92d              CBNZ     r5,|L5.24|
;;;602           *p_err  = OS_ERR_OBJ_PTR_NULL;
00000c  f64550c3          MOV      r0,#0x5dc3
000010  8020              STRH     r0,[r4,#0]
;;;603            return ((OS_SEM_CTR)0);
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;604        }
;;;605        switch (opt) {                                          /* Validate 'opt'                                         */
;;;606            case OS_OPT_POST_1:
;;;607            case OS_OPT_POST_ALL:
;;;608            case OS_OPT_POST_1   | OS_OPT_POST_NO_SCHED:
;;;609            case OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;610                 break;
;;;611    
;;;612            default:
;;;613                *p_err =  OS_ERR_OPT_INVALID;
;;;614                 return ((OS_SEM_CTR)0u);
;;;615        }
;;;616    #endif
;;;617    
;;;618    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;619        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;620           *p_err = OS_ERR_OBJ_TYPE;
;;;621            return ((OS_SEM_CTR)0);
;;;622        }
;;;623    #endif
;;;624    
;;;625        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;626    
;;;627    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;628        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
;;;629            OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_SEM,           /* Post to ISR queue                                      */
;;;630                        (void      *)p_sem,
;;;631                        (void      *)0,
;;;632                        (OS_MSG_SIZE)0,
;;;633                        (OS_FLAGS   )0,
;;;634                        (OS_OPT     )opt,
;;;635                        (CPU_TS     )ts,
;;;636                        (OS_ERR    *)p_err);
;;;637            return ((OS_SEM_CTR)0);
;;;638        }
;;;639    #endif
;;;640    
;;;641        ctr = OS_SemPost(p_sem,                                 /* Post to semaphore                                      */
;;;642                         opt,
;;;643                         ts,
;;;644                         p_err);
;;;645    
;;;646        return (ctr);
;;;647    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L5.24|
000018  b14e              CBZ      r6,|L5.46|
00001a  f5b67f00          CMP      r6,#0x200             ;605
00001e  d007              BEQ      |L5.48|
000020  f5b64f00          CMP      r6,#0x8000            ;605
000024  d005              BEQ      |L5.50|
000026  f5b64f02          CMP      r6,#0x8200            ;605
00002a  d104              BNE      |L5.54|
00002c  e002              B        |L5.52|
                  |L5.46|
00002e  bf00              NOP                            ;607
                  |L5.48|
000030  bf00              NOP                            ;608
                  |L5.50|
000032  bf00              NOP                            ;609
                  |L5.52|
000034  e004              B        |L5.64|
                  |L5.54|
000036  f6456025          MOV      r0,#0x5e25            ;613
00003a  8020              STRH     r0,[r4,#0]            ;613
00003c  2000              MOVS     r0,#0                 ;614
00003e  e7e9              B        |L5.20|
                  |L5.64|
000040  bf00              NOP                            ;610
000042  490a              LDR      r1,|L5.108|
000044  6828              LDR      r0,[r5,#0]            ;619
000046  4288              CMP      r0,r1                 ;619
000048  d004              BEQ      |L5.84|
00004a  f64550c4          MOV      r0,#0x5dc4            ;620
00004e  8020              STRH     r0,[r4,#0]            ;620
000050  2000              MOVS     r0,#0                 ;621
000052  e7df              B        |L5.20|
                  |L5.84|
000054  f7fffffe          BL       CPU_TS_TmrRd
000058  4680              MOV      r8,r0                 ;625
00005a  4623              MOV      r3,r4                 ;641
00005c  4642              MOV      r2,r8                 ;641
00005e  4631              MOV      r1,r6                 ;641
000060  4628              MOV      r0,r5                 ;641
000062  f7fffffe          BL       OS_SemPost
000066  4607              MOV      r7,r0                 ;641
000068  4638              MOV      r0,r7                 ;646
00006a  e7d3              B        |L5.20|
;;;648    
                          ENDP

                  |L5.108|
                          DCD      0x414d4553

                          AREA ||i.OSSemSet||, CODE, READONLY, ALIGN=2

                  OSSemSet PROC
;;;675    #if OS_CFG_SEM_SET_EN > 0u
;;;676    void  OSSemSet (OS_SEM      *p_sem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;677                    OS_SEM_CTR   cnt,
;;;678                    OS_ERR      *p_err)
;;;679    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;680        OS_PEND_LIST  *p_pend_list;
;;;681        CPU_SR_ALLOC();
00000a  f04f0800          MOV      r8,#0
;;;682    
;;;683    
;;;684    
;;;685    #ifdef OS_SAFETY_CRITICAL
;;;686        if (p_err == (OS_ERR *)0) {
;;;687            OS_SAFETY_CRITICAL_EXCEPTION();
;;;688            return;
;;;689        }
;;;690    #endif
;;;691    
;;;692    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;693        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't call this function from an ISR                   */
00000e  481a              LDR      r0,|L6.120|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd04              BLE      |L6.32|
;;;694           *p_err = OS_ERR_SET_ISR;
000016  f64650c6          MOV      r0,#0x6dc6
00001a  8028              STRH     r0,[r5,#0]
                  |L6.28|
;;;695            return;
;;;696        }
;;;697    #endif
;;;698    
;;;699    #if OS_CFG_ARG_CHK_EN > 0u
;;;700        if (p_sem == (OS_SEM *)0) {                             /* Validate 'p_sem'                                       */
;;;701           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;702            return;
;;;703        }
;;;704    #endif
;;;705    
;;;706    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;707        if (p_sem->Type != OS_OBJ_TYPE_SEM) {                   /* Make sure semaphore was created                        */
;;;708           *p_err = OS_ERR_OBJ_TYPE;
;;;709            return;
;;;710        }
;;;711    #endif
;;;712    
;;;713       *p_err = OS_ERR_NONE;
;;;714        CPU_CRITICAL_ENTER();
;;;715        if (p_sem->Ctr > (OS_SEM_CTR)0) {                       /* See if semaphore already has a count                   */
;;;716            p_sem->Ctr = cnt;                                   /* Yes, set it to the new value specified.                */
;;;717        } else {
;;;718            p_pend_list = &p_sem->PendList;                     /* No                                                     */
;;;719            if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {     /*      See if task(s) waiting?                           */
;;;720                p_sem->Ctr = cnt;                               /*      No, OK to set the value                           */
;;;721            } else {
;;;722               *p_err      = OS_ERR_TASK_WAITING;
;;;723            }
;;;724        }
;;;725        CPU_CRITICAL_EXIT();
;;;726    }
00001c  e8bd81f0          POP      {r4-r8,pc}
                  |L6.32|
000020  b91c              CBNZ     r4,|L6.42|
000022  f64550c3          MOV      r0,#0x5dc3            ;701
000026  8028              STRH     r0,[r5,#0]            ;701
000028  e7f8              B        |L6.28|
                  |L6.42|
00002a  4914              LDR      r1,|L6.124|
00002c  6820              LDR      r0,[r4,#0]            ;707
00002e  4288              CMP      r0,r1                 ;707
000030  d003              BEQ      |L6.58|
000032  f64550c4          MOV      r0,#0x5dc4            ;708
000036  8028              STRH     r0,[r5,#0]            ;708
000038  e7f0              B        |L6.28|
                  |L6.58|
00003a  2000              MOVS     r0,#0                 ;713
00003c  8028              STRH     r0,[r5,#0]            ;713
00003e  bf00              NOP                            ;714
000040  bf00              NOP                            ;714
000042  f7fffffe          BL       CPU_SR_Save
000046  4680              MOV      r8,r0                 ;714
000048  bf00              NOP                            ;714
00004a  bf00              NOP                            ;714
00004c  6a20              LDR      r0,[r4,#0x20]         ;715
00004e  b108              CBZ      r0,|L6.84|
000050  6226              STR      r6,[r4,#0x20]         ;716
000052  e008              B        |L6.102|
                  |L6.84|
000054  f1040708          ADD      r7,r4,#8              ;718
000058  8938              LDRH     r0,[r7,#8]            ;719
00005a  b908              CBNZ     r0,|L6.96|
00005c  6226              STR      r6,[r4,#0x20]         ;720
00005e  e002              B        |L6.102|
                  |L6.96|
000060  f247105f          MOV      r0,#0x715f            ;722
000064  8028              STRH     r0,[r5,#0]            ;722
                  |L6.102|
000066  bf00              NOP                            ;725
000068  bf00              NOP                            ;725
00006a  4640              MOV      r0,r8                 ;725
00006c  f7fffffe          BL       CPU_SR_Restore
000070  bf00              NOP                            ;725
000072  bf00              NOP                            ;725
000074  bf00              NOP      
000076  e7d1              B        |L6.28|
;;;727    #endif
                          ENDP

                  |L6.120|
                          DCD      OSIntNestingCtr
                  |L6.124|
                          DCD      0x414d4553

                          AREA ||i.OS_SemClr||, CODE, READONLY, ALIGN=2

                  OS_SemClr PROC
;;;745    
;;;746    void  OS_SemClr (OS_SEM  *p_sem)
000000  b510              PUSH     {r4,lr}
;;;747    {
000002  4604              MOV      r4,r0
;;;748        p_sem->Type    = OS_OBJ_TYPE_NONE;                      /* Mark the data structure as a NONE                      */
000004  4805              LDR      r0,|L7.28|
000006  6020              STR      r0,[r4,#0]
;;;749        p_sem->Ctr     = (OS_SEM_CTR)0;                         /* Set semaphore value                                    */
000008  2000              MOVS     r0,#0
00000a  6220              STR      r0,[r4,#0x20]
;;;750        p_sem->TS      = (CPU_TS    )0;                         /* Clear the time stamp                                   */
00000c  6260              STR      r0,[r4,#0x24]
;;;751        p_sem->NamePtr = (CPU_CHAR *)((void *)"?SEM");
00000e  a004              ADR      r0,|L7.32|
000010  6060              STR      r0,[r4,#4]
;;;752        OS_PendListInit(&p_sem->PendList);                      /* Initialize the waiting list                            */
000012  f1040008          ADD      r0,r4,#8
000016  f7fffffe          BL       OS_PendListInit
;;;753    }
00001a  bd10              POP      {r4,pc}
;;;754    
                          ENDP

                  |L7.28|
                          DCD      0x454e4f4e
                  |L7.32|
000020  3f53454d          DCB      "?SEM",0
000024  00      
000025  00                DCB      0
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.OS_SemDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_SemDbgListAdd PROC
;;;771    #if OS_CFG_DBG_EN > 0u
;;;772    void  OS_SemDbgListAdd (OS_SEM  *p_sem)
000000  a109              ADR      r1,|L8.40|
;;;773    {
;;;774        p_sem->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;775        p_sem->DbgPrevPtr               = (OS_SEM   *)0;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;776        if (OSSemDbgListPtr == (OS_SEM *)0) {
000008  4908              LDR      r1,|L8.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
00000c  b911              CBNZ     r1,|L8.20|
;;;777            p_sem->DbgNextPtr           = (OS_SEM   *)0;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L8.32|
                  |L8.20|
;;;778        } else {
;;;779            p_sem->DbgNextPtr           =  OSSemDbgListPtr;
000014  4905              LDR      r1,|L8.44|
000016  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;780            OSSemDbgListPtr->DbgPrevPtr =  p_sem;
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSSemDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L8.32|
;;;781        }
;;;782        OSSemDbgListPtr                 =  p_sem;
000020  4902              LDR      r1,|L8.44|
000022  6008              STR      r0,[r1,#0]  ; OSSemDbgListPtr
;;;783    }
000024  4770              BX       lr
;;;784    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L8.44|
                          DCD      OSSemDbgListPtr

                          AREA ||i.OS_SemDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_SemDbgListRemove PROC
;;;786    
;;;787    void  OS_SemDbgListRemove (OS_SEM  *p_sem)
000000  6942              LDR      r2,[r0,#0x14]
;;;788    {
;;;789        OS_SEM  *p_sem_next;
;;;790        OS_SEM  *p_sem_prev;
;;;791    
;;;792    
;;;793        p_sem_prev = p_sem->DbgPrevPtr;
;;;794        p_sem_next = p_sem->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;795    
;;;796        if (p_sem_prev == (OS_SEM *)0) {
000004  b93a              CBNZ     r2,|L9.22|
;;;797            OSSemDbgListPtr = p_sem_next;
000006  4b09              LDR      r3,|L9.44|
000008  6019              STR      r1,[r3,#0]  ; OSSemDbgListPtr
;;;798            if (p_sem_next != (OS_SEM *)0) {
00000a  b109              CBZ      r1,|L9.16|
;;;799                p_sem_next->DbgPrevPtr = (OS_SEM *)0;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L9.16|
;;;800            }
;;;801            p_sem->DbgNextPtr = (OS_SEM *)0;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L9.42|
                  |L9.22|
;;;802    
;;;803        } else if (p_sem_next == (OS_SEM *)0) {
000016  b919              CBNZ     r1,|L9.32|
;;;804            p_sem_prev->DbgNextPtr = (OS_SEM *)0;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;805            p_sem->DbgPrevPtr      = (OS_SEM *)0;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L9.42|
                  |L9.32|
;;;806    
;;;807        } else {
;;;808            p_sem_prev->DbgNextPtr =  p_sem_next;
000020  6191              STR      r1,[r2,#0x18]
;;;809            p_sem_next->DbgPrevPtr =  p_sem_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;810            p_sem->DbgNextPtr      = (OS_SEM *)0;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;811            p_sem->DbgPrevPtr      = (OS_SEM *)0;
000028  6143              STR      r3,[r0,#0x14]
                  |L9.42|
;;;812        }
;;;813    }
00002a  4770              BX       lr
;;;814    #endif
                          ENDP

                  |L9.44|
                          DCD      OSSemDbgListPtr

                          AREA ||i.OS_SemInit||, CODE, READONLY, ALIGN=2

                  OS_SemInit PROC
;;;833    
;;;834    void  OS_SemInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;835    {
;;;836    #ifdef OS_SAFETY_CRITICAL
;;;837        if (p_err == (OS_ERR *)0) {
;;;838            OS_SAFETY_CRITICAL_EXCEPTION();
;;;839            return;
;;;840        }
;;;841    #endif
;;;842    
;;;843    #if OS_CFG_DBG_EN > 0u
;;;844        OSSemDbgListPtr = (OS_SEM *)0;
000002  4a03              LDR      r2,|L10.16|
000004  6011              STR      r1,[r2,#0]  ; OSSemDbgListPtr
;;;845    #endif
;;;846    
;;;847        OSSemQty        = (OS_OBJ_QTY)0;
000006  4a03              LDR      r2,|L10.20|
000008  8011              STRH     r1,[r2,#0]
;;;848       *p_err           = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;849    }
00000c  4770              BX       lr
;;;850    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      OSSemDbgListPtr
                  |L10.20|
                          DCD      OSSemQty

                          AREA ||i.OS_SemPost||, CODE, READONLY, ALIGN=1

                  OS_SemPost PROC
;;;883    
;;;884    OS_SEM_CTR  OS_SemPost (OS_SEM  *p_sem,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;885                            OS_OPT   opt,
;;;886                            CPU_TS   ts,
;;;887                            OS_ERR  *p_err)
;;;888    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461d              MOV      r5,r3
;;;889        OS_OBJ_QTY     cnt;
;;;890        OS_SEM_CTR     ctr;
;;;891        OS_PEND_LIST  *p_pend_list;
;;;892        OS_PEND_DATA  *p_pend_data;
;;;893        OS_PEND_DATA  *p_pend_data_next;
;;;894        OS_TCB        *p_tcb;
;;;895        CPU_SR_ALLOC();
00000c  2000              MOVS     r0,#0
00000e  9001              STR      r0,[sp,#4]
;;;896    
;;;897    
;;;898    
;;;899        CPU_CRITICAL_ENTER();
000010  bf00              NOP      
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SR_Save
000018  9001              STR      r0,[sp,#4]
00001a  bf00              NOP      
00001c  bf00              NOP      
;;;900        p_pend_list = &p_sem->PendList;
00001e  f1040708          ADD      r7,r4,#8
;;;901        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on semaphore?                         */
000022  8938              LDRH     r0,[r7,#8]
000024  2800              CMP      r0,#0
000026  d14f              BNE      |L11.200|
;;;902            switch (sizeof(OS_SEM_CTR)) {
000028  2004              MOVS     r0,#4
00002a  2801              CMP      r0,#1
00002c  d004              BEQ      |L11.56|
00002e  2802              CMP      r0,#2
000030  d014              BEQ      |L11.92|
000032  2804              CMP      r0,#4
000034  d134              BNE      |L11.160|
000036  e023              B        |L11.128|
                  |L11.56|
;;;903                case 1u:
;;;904                     if (p_sem->Ctr == DEF_INT_08U_MAX_VAL) {
000038  6a20              LDR      r0,[r4,#0x20]
00003a  28ff              CMP      r0,#0xff
00003c  d10d              BNE      |L11.90|
;;;905                         CPU_CRITICAL_EXIT();
00003e  bf00              NOP      
000040  bf00              NOP      
000042  9801              LDR      r0,[sp,#4]
000044  f7fffffe          BL       CPU_SR_Restore
000048  bf00              NOP      
00004a  bf00              NOP      
;;;906                        *p_err = OS_ERR_SEM_OVF;
00004c  f64650c5          MOV      r0,#0x6dc5
000050  8028              STRH     r0,[r5,#0]
;;;907                         return ((OS_SEM_CTR)0);
000052  2000              MOVS     r0,#0
                  |L11.84|
;;;908                     }
;;;909                     break;
;;;910    
;;;911                case 2u:
;;;912                     if (p_sem->Ctr == DEF_INT_16U_MAX_VAL) {
;;;913                         CPU_CRITICAL_EXIT();
;;;914                        *p_err = OS_ERR_SEM_OVF;
;;;915                         return ((OS_SEM_CTR)0);
;;;916                     }
;;;917                     break;
;;;918    
;;;919                case 4u:
;;;920                     if (p_sem->Ctr == DEF_INT_32U_MAX_VAL) {
;;;921                         CPU_CRITICAL_EXIT();
;;;922                        *p_err = OS_ERR_SEM_OVF;
;;;923                         return ((OS_SEM_CTR)0);
;;;924                     }
;;;925                     break;
;;;926    
;;;927                default:
;;;928                     break;
;;;929            }
;;;930            p_sem->Ctr++;                                       /* No                                                     */
;;;931            ctr       = p_sem->Ctr;
;;;932            p_sem->TS = ts;                                     /* Save timestamp in semaphore control block              */
;;;933            CPU_CRITICAL_EXIT();
;;;934           *p_err     = OS_ERR_NONE;
;;;935            return (ctr);
;;;936        }
;;;937    
;;;938        OS_CRITICAL_ENTER_CPU_EXIT();
;;;939        if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
;;;940            cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
;;;941        } else {
;;;942            cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
;;;943        }
;;;944        p_pend_data = p_pend_list->HeadPtr;
;;;945        while (cnt > 0u) {
;;;946            p_tcb            = p_pend_data->TCBPtr;
;;;947            p_pend_data_next = p_pend_data->NextPtr;
;;;948            OS_Post((OS_PEND_OBJ *)((void *)p_sem),
;;;949                    p_tcb,
;;;950                    (void      *)0,
;;;951                    (OS_MSG_SIZE)0,
;;;952                    ts);
;;;953            p_pend_data = p_pend_data_next;
;;;954            cnt--;
;;;955        }
;;;956        ctr = p_sem->Ctr;
;;;957        OS_CRITICAL_EXIT_NO_SCHED();
;;;958        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
;;;959            OSSched();                                          /* Run the scheduler                                      */
;;;960        }
;;;961       *p_err = OS_ERR_NONE;
;;;962        return (ctr);
;;;963    }
000054  b004              ADD      sp,sp,#0x10
000056  e8bd9ff0          POP      {r4-r12,pc}
                  |L11.90|
00005a  e022              B        |L11.162|
                  |L11.92|
00005c  f64f71ff          MOV      r1,#0xffff            ;912
000060  6a20              LDR      r0,[r4,#0x20]         ;912
000062  4288              CMP      r0,r1                 ;912
000064  d10b              BNE      |L11.126|
000066  bf00              NOP                            ;913
000068  bf00              NOP                            ;913
00006a  9801              LDR      r0,[sp,#4]            ;913
00006c  f7fffffe          BL       CPU_SR_Restore
000070  bf00              NOP                            ;913
000072  bf00              NOP                            ;913
000074  f64650c5          MOV      r0,#0x6dc5            ;914
000078  8028              STRH     r0,[r5,#0]            ;914
00007a  2000              MOVS     r0,#0                 ;915
00007c  e7ea              B        |L11.84|
                  |L11.126|
00007e  e010              B        |L11.162|
                  |L11.128|
000080  6a20              LDR      r0,[r4,#0x20]         ;920
000082  1c40              ADDS     r0,r0,#1              ;920
000084  b958              CBNZ     r0,|L11.158|
000086  bf00              NOP                            ;921
000088  bf00              NOP                            ;921
00008a  9801              LDR      r0,[sp,#4]            ;921
00008c  f7fffffe          BL       CPU_SR_Restore
000090  bf00              NOP                            ;921
000092  bf00              NOP                            ;921
000094  f64650c5          MOV      r0,#0x6dc5            ;922
000098  8028              STRH     r0,[r5,#0]            ;922
00009a  2000              MOVS     r0,#0                 ;923
00009c  e7da              B        |L11.84|
                  |L11.158|
00009e  e000              B        |L11.162|
                  |L11.160|
0000a0  bf00              NOP                            ;928
                  |L11.162|
0000a2  bf00              NOP                            ;909
0000a4  6a20              LDR      r0,[r4,#0x20]         ;930
0000a6  1c40              ADDS     r0,r0,#1              ;930
0000a8  6220              STR      r0,[r4,#0x20]         ;930
0000aa  f8d4a020          LDR      r10,[r4,#0x20]        ;931
0000ae  f8c49024          STR      r9,[r4,#0x24]         ;932
0000b2  bf00              NOP                            ;933
0000b4  bf00              NOP                            ;933
0000b6  9801              LDR      r0,[sp,#4]            ;933
0000b8  f7fffffe          BL       CPU_SR_Restore
0000bc  bf00              NOP                            ;933
0000be  bf00              NOP                            ;933
0000c0  2000              MOVS     r0,#0                 ;934
0000c2  8028              STRH     r0,[r5,#0]            ;934
0000c4  4650              MOV      r0,r10                ;935
0000c6  e7c5              B        |L11.84|
                  |L11.200|
0000c8  f4087000          AND      r0,r8,#0x200          ;939
0000cc  b108              CBZ      r0,|L11.210|
0000ce  893e              LDRH     r6,[r7,#8]            ;940
0000d0  e000              B        |L11.212|
                  |L11.210|
0000d2  2601              MOVS     r6,#1                 ;942
                  |L11.212|
0000d4  f8d7b000          LDR      r11,[r7,#0]           ;944
0000d8  e011              B        |L11.254|
                  |L11.218|
0000da  f8db0008          LDR      r0,[r11,#8]           ;946
0000de  9002              STR      r0,[sp,#8]            ;946
0000e0  f8db0004          LDR      r0,[r11,#4]           ;947
0000e4  9003              STR      r0,[sp,#0xc]          ;947
0000e6  2300              MOVS     r3,#0                 ;948
0000e8  461a              MOV      r2,r3                 ;948
0000ea  f8cd9000          STR      r9,[sp,#0]            ;948
0000ee  4620              MOV      r0,r4                 ;948
0000f0  9902              LDR      r1,[sp,#8]            ;948
0000f2  f7fffffe          BL       OS_Post
0000f6  f8ddb00c          LDR      r11,[sp,#0xc]         ;953
0000fa  1e70              SUBS     r0,r6,#1              ;954
0000fc  b286              UXTH     r6,r0                 ;954
                  |L11.254|
0000fe  2e00              CMP      r6,#0                 ;945
000100  d1eb              BNE      |L11.218|
000102  f8d4a020          LDR      r10,[r4,#0x20]        ;956
000106  bf00              NOP                            ;957
000108  bf00              NOP                            ;957
00010a  9801              LDR      r0,[sp,#4]            ;957
00010c  f7fffffe          BL       CPU_SR_Restore
000110  bf00              NOP                            ;957
000112  bf00              NOP                            ;957
000114  f4084000          AND      r0,r8,#0x8000         ;958
000118  b908              CBNZ     r0,|L11.286|
00011a  f7fffffe          BL       OSSched
                  |L11.286|
00011e  2000              MOVS     r0,#0                 ;961
000120  8028              STRH     r0,[r5,#0]            ;961
000122  4650              MOV      r0,r10                ;962
000124  e796              B        |L11.84|
;;;964    
                          ENDP

