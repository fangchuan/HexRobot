; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_os.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_os.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_os.crf ..\..\User\bsp_stm32f4xx\bsp_os.c]
                          THUMB

                          AREA ||i.BSP_OS_MutexCreate||, CODE, READONLY, ALIGN=1

                  BSP_OS_MutexCreate PROC
;;;247    
;;;248    CPU_BOOLEAN  BSP_OS_MutexCreate (BSP_OS_MUTEX      *p_mutex,
000000  b538              PUSH     {r3-r5,lr}
;;;249                                     CPU_CHAR          *p_name)
;;;250    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;251        OS_ERR     err;
;;;252    
;;;253    	OSMutexCreate ((OS_MUTEX  *)p_mutex,
000006  466a              MOV      r2,sp
000008  4629              MOV      r1,r5
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       OSMutexCreate
;;;254                       (CPU_CHAR  *)p_name,
;;;255                       (OS_ERR    *)&err);
;;;256    
;;;257        if (err != OS_ERR_NONE) {
000010  f8bd0000          LDRH     r0,[sp,#0]
000014  b108              CBZ      r0,|L1.26|
;;;258            return (DEF_FAIL);
000016  2000              MOVS     r0,#0
                  |L1.24|
;;;259        }
;;;260    
;;;261        return (DEF_OK);
;;;262    }
000018  bd38              POP      {r3-r5,pc}
                  |L1.26|
00001a  2001              MOVS     r0,#1                 ;261
00001c  e7fc              B        |L1.24|
;;;263    
                          ENDP


                          AREA ||i.BSP_OS_MutexPost||, CODE, READONLY, ALIGN=1

                  BSP_OS_MutexPost PROC
;;;321    
;;;322    CPU_BOOLEAN  BSP_OS_MutexPost (BSP_OS_MUTEX *p_mutex)
000000  b538              PUSH     {r3-r5,lr}
;;;323    {
000002  4604              MOV      r4,r0
;;;324        OS_ERR  err;
;;;325    
;;;326    	OSMutexPost ((OS_MUTEX  *)p_mutex,
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       OSMutexPost
;;;327                     (OS_OPT     )OS_OPT_POST_1,
;;;328                     (OS_ERR    *)&err);
;;;329    
;;;330        if (err != OS_ERR_NONE) {
00000e  f8bd0000          LDRH     r0,[sp,#0]
000012  b108              CBZ      r0,|L2.24|
;;;331            return (DEF_FAIL);
000014  2000              MOVS     r0,#0
                  |L2.22|
;;;332        }
;;;333    
;;;334        return (DEF_OK);
;;;335    }
000016  bd38              POP      {r3-r5,pc}
                  |L2.24|
000018  2001              MOVS     r0,#1                 ;334
00001a  e7fc              B        |L2.22|
;;;336    
                          ENDP


                          AREA ||i.BSP_OS_MutexWait||, CODE, READONLY, ALIGN=2

                  BSP_OS_MutexWait PROC
;;;282    
;;;283    CPU_BOOLEAN  BSP_OS_MutexWait (BSP_OS_MUTEX  *p_mutex,
000000  b57c              PUSH     {r2-r6,lr}
;;;284                                   CPU_INT32U    dly_ms)
;;;285    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;286        OS_ERR      err;
;;;287        CPU_INT32U  dly_ticks;
;;;288    
;;;289    
;;;290        dly_ticks  = ((dly_ms * DEF_TIME_NBR_mS_PER_SEC) / OSCfg_TickRate_Hz);
000006  f44f707a          MOV      r0,#0x3e8
00000a  4360              MULS     r0,r4,r0
00000c  4909              LDR      r1,|L3.52|
00000e  6809              LDR      r1,[r1,#0]  ; OSCfg_TickRate_Hz
000010  fbb0f6f1          UDIV     r6,r0,r1
;;;291    
;;;292        OSMutexPend ((OS_MUTEX  *)p_mutex,
000014  a801              ADD      r0,sp,#4
000016  2300              MOVS     r3,#0
000018  461a              MOV      r2,r3
00001a  4631              MOV      r1,r6
00001c  9000              STR      r0,[sp,#0]
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       OSMutexPend
;;;293                     (OS_TICK    )dly_ticks,
;;;294                     (OS_OPT     )OS_OPT_PEND_BLOCKING,
;;;295                     (CPU_TS     )0,
;;;296                     (OS_ERR    *)&err);	
;;;297    
;;;298        if (err != OS_ERR_NONE) {
000024  f8bd0004          LDRH     r0,[sp,#4]
000028  b108              CBZ      r0,|L3.46|
;;;299           return (DEF_FAIL);
00002a  2000              MOVS     r0,#0
                  |L3.44|
;;;300        }
;;;301    
;;;302        return (DEF_OK);
;;;303    }
00002c  bd7c              POP      {r2-r6,pc}
                  |L3.46|
00002e  2001              MOVS     r0,#1                 ;302
000030  e7fc              B        |L3.44|
;;;304    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      OSCfg_TickRate_Hz

                          AREA ||i.BSP_OS_SemCreate||, CODE, READONLY, ALIGN=1

                  BSP_OS_SemCreate PROC
;;;133    
;;;134    CPU_BOOLEAN  BSP_OS_SemCreate (BSP_OS_SEM       *p_sem,
000000  b5f8              PUSH     {r3-r7,lr}
;;;135                                   BSP_OS_SEM_VAL    sem_val,
;;;136                                   CPU_CHAR         *p_sem_name)
;;;137    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;138        OS_ERR     err;
;;;139    
;;;140    
;;;141        OSSemCreate((OS_SEM    *)p_sem,
000008  466b              MOV      r3,sp
00000a  4622              MOV      r2,r4
00000c  4629              MOV      r1,r5
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       OSSemCreate
;;;142                    (CPU_CHAR  *)p_sem_name,
;;;143                    (OS_SEM_CTR )sem_val,
;;;144                    (OS_ERR    *)&err);
;;;145    
;;;146        if (err != OS_ERR_NONE) {
000014  f8bd0000          LDRH     r0,[sp,#0]
000018  b108              CBZ      r0,|L4.30|
;;;147            return (DEF_FAIL);
00001a  2000              MOVS     r0,#0
                  |L4.28|
;;;148        }
;;;149    
;;;150        return (DEF_OK);
;;;151    }
00001c  bdf8              POP      {r3-r7,pc}
                  |L4.30|
00001e  2001              MOVS     r0,#1                 ;150
000020  e7fc              B        |L4.28|
;;;152    
                          ENDP


                          AREA ||i.BSP_OS_SemPost||, CODE, READONLY, ALIGN=1

                  BSP_OS_SemPost PROC
;;;211    
;;;212    CPU_BOOLEAN  BSP_OS_SemPost (BSP_OS_SEM *p_sem)
000000  b538              PUSH     {r3-r5,lr}
;;;213    {
000002  4604              MOV      r4,r0
;;;214        OS_ERR  err;
;;;215    
;;;216    
;;;217        OSSemPost((OS_SEM *)p_sem,
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       OSSemPost
;;;218                  (OS_OPT  )OS_OPT_POST_1,
;;;219                  (OS_ERR *)&err);
;;;220    
;;;221        if (err != OS_ERR_NONE) {
00000e  f8bd0000          LDRH     r0,[sp,#0]
000012  b108              CBZ      r0,|L5.24|
;;;222            return (DEF_FAIL);
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;223        }
;;;224    
;;;225        return (DEF_OK);
;;;226    }
000016  bd38              POP      {r3-r5,pc}
                  |L5.24|
000018  2001              MOVS     r0,#1                 ;225
00001a  e7fc              B        |L5.22|
;;;227    
                          ENDP


                          AREA ||i.BSP_OS_SemWait||, CODE, READONLY, ALIGN=2

                  BSP_OS_SemWait PROC
;;;172    
;;;173    CPU_BOOLEAN  BSP_OS_SemWait (BSP_OS_SEM  *p_sem,
000000  b57c              PUSH     {r2-r6,lr}
;;;174                                 CPU_INT32U   dly_ms)
;;;175    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;176        OS_ERR      err;
;;;177        CPU_INT32U  dly_ticks;
;;;178    
;;;179    
;;;180        dly_ticks  = ((dly_ms * DEF_TIME_NBR_mS_PER_SEC) / OSCfg_TickRate_Hz);
000006  f44f707a          MOV      r0,#0x3e8
00000a  4360              MULS     r0,r4,r0
00000c  4909              LDR      r1,|L6.52|
00000e  6809              LDR      r1,[r1,#0]  ; OSCfg_TickRate_Hz
000010  fbb0f6f1          UDIV     r6,r0,r1
;;;181    
;;;182        OSSemPend((OS_SEM *)p_sem,
000014  a801              ADD      r0,sp,#4
000016  2300              MOVS     r3,#0
000018  461a              MOV      r2,r3
00001a  4631              MOV      r1,r6
00001c  9000              STR      r0,[sp,#0]
00001e  4628              MOV      r0,r5
000020  f7fffffe          BL       OSSemPend
;;;183                  (OS_TICK )dly_ticks,
;;;184                  (OS_OPT  )OS_OPT_PEND_BLOCKING,
;;;185                  (CPU_TS  )0,
;;;186                  (OS_ERR *)&err);
;;;187    
;;;188        if (err != OS_ERR_NONE) {
000024  f8bd0004          LDRH     r0,[sp,#4]
000028  b108              CBZ      r0,|L6.46|
;;;189           return (DEF_FAIL);
00002a  2000              MOVS     r0,#0
                  |L6.44|
;;;190        }
;;;191    
;;;192        return (DEF_OK);
;;;193    }
00002c  bd7c              POP      {r2-r6,pc}
                  |L6.46|
00002e  2001              MOVS     r0,#1                 ;192
000030  e7fc              B        |L6.44|
;;;194    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
                          DCD      OSCfg_TickRate_Hz

                          AREA ||i.BSP_OS_TimeDly||, CODE, READONLY, ALIGN=1

                  BSP_OS_TimeDly PROC
;;;407    
;;;408    void   BSP_OS_TimeDly (CPU_INT32U  dly_tick)
000000  b538              PUSH     {r3-r5,lr}
;;;409    {
000002  4604              MOV      r4,r0
;;;410        OS_ERR err;
;;;411    
;;;412        OSTimeDly(dly_tick, OS_OPT_TIME_DLY, &err);
000004  466a              MOV      r2,sp
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       OSTimeDly
;;;413    
;;;414       (void)&err;
;;;415    }
00000e  bd38              POP      {r3-r5,pc}
;;;416    
                          ENDP


                          AREA ||i.BSP_OS_TimeDlyMs||, CODE, READONLY, ALIGN=1

                  BSP_OS_TimeDlyMs PROC
;;;361    
;;;362    void   BSP_OS_TimeDlyMs (CPU_INT32U  dly_ms)
000000  b5fe              PUSH     {r1-r7,lr}
;;;363    {
000002  4604              MOV      r4,r0
;;;364        CPU_INT16U  ms;
;;;365        CPU_INT16U  sec;
;;;366        OS_ERR      err;
;;;367    
;;;368    
;;;369        if (dly_ms > 10000u) {                                       /* Limit delays to 10 seconds.                        */
000004  f2427010          MOV      r0,#0x2710
000008  4284              CMP      r4,r0
00000a  d900              BLS      |L8.14|
;;;370            dly_ms = 10000u;
00000c  4604              MOV      r4,r0
                  |L8.14|
;;;371        }
;;;372    
;;;373        if (dly_ms >= 1000u) {
00000e  f5b47f7a          CMP      r4,#0x3e8
000012  d309              BCC      |L8.40|
;;;374            ms  = dly_ms % 1000u;
000014  f44f707a          MOV      r0,#0x3e8
000018  fbb4f1f0          UDIV     r1,r4,r0
00001c  fb004511          MLS      r5,r0,r1,r4
;;;375            sec = dly_ms / 1000u;
000020  fbb4f0f0          UDIV     r0,r4,r0
000024  b286              UXTH     r6,r0
000026  e001              B        |L8.44|
                  |L8.40|
;;;376        } else {
;;;377            ms  = dly_ms;
000028  b2a5              UXTH     r5,r4
;;;378            sec = 0u;
00002a  2600              MOVS     r6,#0
                  |L8.44|
;;;379        }
;;;380    
;;;381    
;;;382        OSTimeDlyHMSM((CPU_INT16U) 0u,
00002c  a802              ADD      r0,sp,#8
00002e  2100              MOVS     r1,#0
000030  462b              MOV      r3,r5
000032  4632              MOV      r2,r6
000034  e9cd1000          STRD     r1,r0,[sp,#0]
000038  4608              MOV      r0,r1
00003a  f7fffffe          BL       OSTimeDlyHMSM
;;;383                      (CPU_INT16U) 0u,
;;;384                      (CPU_INT16U) sec,
;;;385                      (CPU_INT32U) ms,
;;;386                      (OS_OPT    ) OS_OPT_TIME_HMSM_STRICT,
;;;387                      (OS_ERR   *)&err);
;;;388    }
00003e  bdfe              POP      {r1-r7,pc}
;;;389    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\bsp_os.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_bsp_os_c_38c9cb18____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_bsp_os_c_38c9cb18____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_bsp_os_c_38c9cb18____REVSH|
#line 144
|__asm___8_bsp_os_c_38c9cb18____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_bsp_os_c_38c9cb18____RRX|
#line 300
|__asm___8_bsp_os_c_38c9cb18____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
