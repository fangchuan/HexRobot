; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\main.crf ..\..\User\main.c]
                          THUMB

                          AREA ||i.AppObjCreate||, CODE, READONLY, ALIGN=2

                  AppObjCreate PROC
;;;308    */
;;;309    static  void  AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;310    {
;;;311    
;;;312    	/* 创建同步信号量 */ 
;;;313       	BSP_OS_SemCreate(&SEM_SYNCH,
000002  a203              ADR      r2,|L1.16|
000004  2100              MOVS     r1,#0
000006  4805              LDR      r0,|L1.28|
000008  f7fffffe          BL       BSP_OS_SemCreate
;;;314    					  0,	
;;;315    					 (CPU_CHAR *)"SEM_SYNCH");				 
;;;316    }
00000c  bd10              POP      {r4,pc}
;;;317    
                          ENDP

00000e  0000              DCW      0x0000
                  |L1.16|
000010  53454d5f          DCB      "SEM_SYNCH",0
000014  53594e43
000018  4800    
00001a  00                DCB      0
00001b  00                DCB      0
                  |L1.28|
                          DCD      SEM_SYNCH

                          AREA ||i.AppTaskCOM||, CODE, READONLY, ALIGN=1

                  AppTaskCOM PROC
;;;200    */
;;;201    static void AppTaskCOM(void *p_arg)
000000  e005              B        |L2.14|
                  |L2.2|
;;;202    {	
;;;203    	(void)p_arg;
;;;204    	 
;;;205    	while(1)
;;;206    	{
;;;207    		bsp_LedToggle(2);
000002  2002              MOVS     r0,#2
000004  f7fffffe          BL       bsp_LedToggle
;;;208    		BSP_OS_TimeDlyMs(100);	
000008  2064              MOVS     r0,#0x64
00000a  f7fffffe          BL       BSP_OS_TimeDlyMs
                  |L2.14|
00000e  e7f8              B        |L2.2|
;;;209    	} 						  	 	       											   
;;;210    }
;;;211    
                          ENDP


                          AREA ||i.AppTaskCreate||, CODE, READONLY, ALIGN=2

                  AppTaskCreate PROC
;;;262    */
;;;263    static  void  AppTaskCreate (void)
000000  b500              PUSH     {lr}
;;;264    {
000002  b08b              SUB      sp,sp,#0x2c
;;;265    	OS_ERR      err;
;;;266    	
;;;267    
;;;268    
;;;269    	/**************创建COM任务*********************/
;;;270    	OSTaskCreate((OS_TCB       *)&AppTaskCOMTCB,            
000004  a80a              ADD      r0,sp,#0x28
000006  2103              MOVS     r1,#3
000008  2200              MOVS     r2,#0
00000a  9205              STR      r2,[sp,#0x14]
00000c  e9cd2106          STRD     r2,r1,[sp,#0x18]
000010  9008              STR      r0,[sp,#0x20]
000012  4610              MOV      r0,r2
000014  f44f6180          MOV      r1,#0x400
000018  2266              MOVS     r2,#0x66
00001a  4b13              LDR      r3,|L3.104|
00001c  e9cd3201          STRD     r3,r2,[sp,#4]
000020  e9cd1003          STRD     r1,r0,[sp,#0xc]
000024  2004              MOVS     r0,#4
000026  2300              MOVS     r3,#0
000028  4a10              LDR      r2,|L3.108|
00002a  a111              ADR      r1,|L3.112|
00002c  9000              STR      r0,[sp,#0]
00002e  4814              LDR      r0,|L3.128|
000030  f7fffffe          BL       OSTaskCreate
;;;271                     (CPU_CHAR     *)"App Task COM",
;;;272                     (OS_TASK_PTR   )AppTaskCOM, 
;;;273                     (void         *)0,
;;;274                     (OS_PRIO       )APP_CFG_TASK_COM_PRIO,
;;;275                     (CPU_STK      *)&AppTaskCOMStk[0],
;;;276                     (CPU_STK_SIZE  )APP_CFG_TASK_COM_STK_SIZE / 10,
;;;277                     (CPU_STK_SIZE  )APP_CFG_TASK_COM_STK_SIZE,
;;;278                     (OS_MSG_QTY    )0,
;;;279                     (OS_TICK       )0,
;;;280                     (void         *)0,
;;;281                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;282                     (OS_ERR       *)&err);
;;;283    	
;;;284    	/**************创建USER IF任务*********************/
;;;285    	OSTaskCreate((OS_TCB       *)&AppTaskUserIFTCB,             
000034  a80a              ADD      r0,sp,#0x28
000036  2103              MOVS     r1,#3
000038  2200              MOVS     r2,#0
00003a  9205              STR      r2,[sp,#0x14]
00003c  e9cd2106          STRD     r2,r1,[sp,#0x18]
000040  9008              STR      r0,[sp,#0x20]
000042  4610              MOV      r0,r2
000044  f44f6180          MOV      r1,#0x400
000048  2266              MOVS     r2,#0x66
00004a  4b0e              LDR      r3,|L3.132|
00004c  e9cd3201          STRD     r3,r2,[sp,#4]
000050  e9cd1003          STRD     r1,r0,[sp,#0xc]
000054  2005              MOVS     r0,#5
000056  2300              MOVS     r3,#0
000058  4a0b              LDR      r2,|L3.136|
00005a  a10c              ADR      r1,|L3.140|
00005c  9000              STR      r0,[sp,#0]
00005e  480f              LDR      r0,|L3.156|
000060  f7fffffe          BL       OSTaskCreate
;;;286                     (CPU_CHAR     *)"App Task UserIF",
;;;287                     (OS_TASK_PTR   )AppTaskUserIF, 
;;;288                     (void         *)0,
;;;289                     (OS_PRIO       )APP_CFG_TASK_USER_IF_PRIO,
;;;290                     (CPU_STK      *)&AppTaskUserIFStk[0],
;;;291                     (CPU_STK_SIZE  )APP_CFG_TASK_USER_IF_STK_SIZE / 10,
;;;292                     (CPU_STK_SIZE  )APP_CFG_TASK_USER_IF_STK_SIZE,
;;;293                     (OS_MSG_QTY    )0,
;;;294                     (OS_TICK       )0,
;;;295                     (void         *)0,
;;;296                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;297                     (OS_ERR       *)&err);
;;;298     
;;;299    }
000064  b00b              ADD      sp,sp,#0x2c
000066  bd00              POP      {pc}
;;;300    
                          ENDP

                  |L3.104|
                          DCD      AppTaskCOMStk
                  |L3.108|
                          DCD      AppTaskCOM
                  |L3.112|
000070  41707020          DCB      "App Task COM",0
000074  5461736b
000078  20434f4d
00007c  00      
00007d  00                DCB      0
00007e  00                DCB      0
00007f  00                DCB      0
                  |L3.128|
                          DCD      AppTaskCOMTCB
                  |L3.132|
                          DCD      AppTaskUserIFStk
                  |L3.136|
                          DCD      AppTaskUserIF
                  |L3.140|
00008c  41707020          DCB      "App Task UserIF",0
000090  5461736b
000094  20557365
000098  72494600
                  |L3.156|
                          DCD      AppTaskUserIFTCB

                          AREA ||i.AppTaskStart||, CODE, READONLY, ALIGN=1

                  AppTaskStart PROC
;;;164    */
;;;165    static  void  AppTaskStart (void *p_arg)
000000  b538              PUSH     {r3-r5,lr}
;;;166    {
000002  4604              MOV      r4,r0
;;;167    
;;;168    	OS_ERR      err;
;;;169    
;;;170       (void)p_arg;
;;;171    	
;;;172    	CPU_Init();
000004  f7fffffe          BL       CPU_Init
;;;173     	bsp_Init();
000008  f7fffffe          BL       bsp_Init
;;;174    	BSP_Tick_Init();                      
00000c  f7fffffe          BL       BSP_Tick_Init
;;;175    
;;;176    #if OS_CFG_STAT_TASK_EN > 0u
;;;177         OSStatTaskCPUUsageInit(&err);   
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       OSStatTaskCPUUsageInit
;;;178    #endif
;;;179    
;;;180    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;181        CPU_IntDisMeasMaxCurReset();
;;;182    #endif
;;;183        
;;;184    	  /* 创建任务 */
;;;185        AppTaskCreate(); 
000016  f7fffffe          BL       AppTaskCreate
;;;186    	  AppObjCreate();
00001a  f7fffffe          BL       AppObjCreate
;;;187    
;;;188    }
00001e  bd38              POP      {r3-r5,pc}
;;;189    
                          ENDP


                          AREA ||i.AppTaskUserIF||, CODE, READONLY, ALIGN=2

                  AppTaskUserIF PROC
;;;222    */
;;;223    static void AppTaskUserIF(void *p_arg)
000000  e014              B        |L5.44|
                  |L5.2|
;;;224    {
;;;225    	uint8_t ucKeyCode;
;;;226    
;;;227    	(void)p_arg;	               /* 避免编译器报警 */
;;;228    
;;;229    	while (1) 
;;;230    	{   		
;;;231    		ucKeyCode = bsp_GetKey();
000002  f7fffffe          BL       bsp_GetKey
000006  4604              MOV      r4,r0
;;;232    		
;;;233    		if (ucKeyCode != KEY_NONE)
000008  b16c              CBZ      r4,|L5.38|
;;;234    		{
;;;235    			switch (ucKeyCode)
00000a  2c01              CMP      r4,#1
00000c  d002              BEQ      |L5.20|
00000e  2c04              CMP      r4,#4
000010  d107              BNE      |L5.34|
000012  e002              B        |L5.26|
                  |L5.20|
;;;236    			{
;;;237    				case KEY_DOWN_K1:			  /* K1键按下 打印任务执行情况 */
;;;238    					DispTaskInfo();	     
000014  f7fffffe          BL       DispTaskInfo
;;;239    					break;
000018  e004              B        |L5.36|
                  |L5.26|
;;;240    
;;;241    				case KEY_DOWN_K2:			  /* K2键按下 实现截图功能 */
;;;242    					BSP_OS_SemPost(&SEM_SYNCH);
00001a  4805              LDR      r0,|L5.48|
00001c  f7fffffe          BL       BSP_OS_SemPost
;;;243    					break;
000020  e000              B        |L5.36|
                  |L5.34|
;;;244    				
;;;245    				default:                      /* 其他的键值不处理 */
;;;246    					break;
000022  bf00              NOP      
                  |L5.36|
000024  bf00              NOP                            ;239
                  |L5.38|
;;;247    			}
;;;248    		}
;;;249    	
;;;250            BSP_OS_TimeDlyMs(20);	   
000026  2014              MOVS     r0,#0x14
000028  f7fffffe          BL       BSP_OS_TimeDlyMs
                  |L5.44|
00002c  e7e9              B        |L5.2|
;;;251    	}
;;;252    }
;;;253    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      SEM_SYNCH

                          AREA ||i.DispTaskInfo||, CODE, READONLY, ALIGN=2

                          REQUIRE _printf_pre_padding
                          REQUIRE _printf_percent
                          REQUIRE _printf_flags
                          REQUIRE _printf_widthprec
                          REQUIRE _printf_d
                          REQUIRE _printf_f
                          REQUIRE _printf_s
                          REQUIRE _printf_int_dec
                          REQUIRE _printf_fp_dec
                          REQUIRE _printf_str
                  DispTaskInfo PROC
;;;325    */
;;;326    static void DispTaskInfo(void)
000000  b570              PUSH     {r4-r6,lr}
;;;327    {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  b086              SUB      sp,sp,#0x18
;;;328    	OS_TCB      *p_tcb;	        /* 定义一个任务控制块指针, TCB = TASK CONTROL BLOCK */
;;;329    	float CPU;
;;;330    	CPU_SR_ALLOC();
000008  2500              MOVS     r5,#0
;;;331    
;;;332    	CPU_CRITICAL_ENTER();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SR_Save
000012  4605              MOV      r5,r0
000014  bf00              NOP      
000016  bf00              NOP      
;;;333        p_tcb = OSTaskDbgListPtr;
000018  4826              LDR      r0,|L6.180|
00001a  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;334        CPU_CRITICAL_EXIT();
00001c  bf00              NOP      
00001e  bf00              NOP      
000020  4628              MOV      r0,r5
000022  f7fffffe          BL       CPU_SR_Restore
000026  bf00              NOP      
000028  bf00              NOP      
;;;335    	
;;;336    	/* 打印标题 */
;;;337    	/* 打印标题 */
;;;338    	printf("===============================================================\r\n");
00002a  4823              LDR      r0,|L6.184|
00002c  f7fffffe          BL       __2printf
;;;339    	printf(" 优先级 使用栈 剩余栈 百分比 利用率   任务名\r\n");
000030  a022              ADR      r0,|L6.188|
000032  f7fffffe          BL       __2printf
;;;340    	printf("  Prio   Used  Free   Per    CPU     Taskname\r\n");
000036  a02d              ADR      r0,|L6.236|
000038  f7fffffe          BL       __2printf
;;;341    
;;;342    	/* 遍历任务控制块列表(TCB list)，打印所有的任务的优先级和名称 */
;;;343    	while (p_tcb != (OS_TCB *)0) 
00003c  e034              B        |L6.168|
                  |L6.62|
;;;344    	{
;;;345    		CPU = (float)p_tcb->CPUUsage / 100;
00003e  f8340f8c          LDRH     r0,[r4,#0x8c]!
000042  ee000a10          VMOV     s0,r0
000046  eeb80a40          VCVT.F32.U32 s0,s0
00004a  eddf0a34          VLDR     s1,|L6.284|
00004e  ee808a20          VDIV.F32 s16,s0,s1
;;;346    		printf("   %2d  %5d  %5d   %02d%%   %5.2f%%   %s\r\n", 
000052  ee180a10          VMOV     r0,s16
000056  f7fffffe          BL       __aeabi_f2d
00005a  ec410b19          VMOV     d9,r0,r1
00005e  e9d40108          LDRD     r0,r1,[r4,#0x20]
000062  4401              ADD      r1,r1,r0
000064  2264              MOVS     r2,#0x64
000066  4350              MULS     r0,r2,r0
000068  fbb0f6f1          UDIV     r6,r0,r1
00006c  f8540c6c          LDR      r0,[r4,#-0x6c]
000070  9004              STR      r0,[sp,#0x10]
000072  ed8d9b02          VSTR     d9,[sp,#8]
000076  9600              STR      r6,[sp,#0]
000078  f8141c55          LDRB     r1,[r4,#-0x55]
00007c  e9d42308          LDRD     r2,r3,[r4,#0x20]
000080  3c8c              SUBS     r4,r4,#0x8c
000082  a027              ADR      r0,|L6.288|
000084  f7fffffe          BL       __2printf
;;;347    		p_tcb->Prio, 
;;;348    		p_tcb->StkUsed, 
;;;349    		p_tcb->StkFree, 
;;;350    		(p_tcb->StkUsed * 100) / (p_tcb->StkUsed + p_tcb->StkFree),
;;;351    		CPU,
;;;352    		p_tcb->NamePtr);		
;;;353    	 	
;;;354    		CPU_CRITICAL_ENTER();
000088  bf00              NOP      
00008a  bf00              NOP      
00008c  f7fffffe          BL       CPU_SR_Save
000090  4605              MOV      r5,r0
000092  bf00              NOP      
000094  bf00              NOP      
;;;355            p_tcb = p_tcb->DbgNextPtr;
000096  f8d440b8          LDR      r4,[r4,#0xb8]
;;;356            CPU_CRITICAL_EXIT();
00009a  bf00              NOP      
00009c  bf00              NOP      
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       CPU_SR_Restore
0000a4  bf00              NOP      
0000a6  bf00              NOP      
                  |L6.168|
0000a8  2c00              CMP      r4,#0                 ;343
0000aa  d1c8              BNE      |L6.62|
;;;357    	}
;;;358    }
0000ac  b006              ADD      sp,sp,#0x18
0000ae  ecbd8b04          VPOP     {d8-d9}
0000b2  bd70              POP      {r4-r6,pc}
;;;359    
                          ENDP

                  |L6.180|
                          DCD      OSTaskDbgListPtr
                  |L6.184|
                          DCD      ||.conststring||
                  |L6.188|
0000bc  20d3c5cf          DCB      " ",211,197,207,200,188,182," ",202,185,211,195,213,187," "
0000c0  c8bcb620
0000c4  cab9d3c3
0000c8  d5bb20  
0000cb  caa3d3e0          DCB      202,163,211,224,213,187," ",176,217,183,214,177,200," ",192
0000cf  d5bb20b0
0000d3  d9b7d6b1
0000d7  c820c0  
0000da  fbd3c3c2          DCB      251,211,195,194,202,"   ",200,206,206,241,195,251,"\r\n",0
0000de  ca202020
0000e2  c8cecef1
0000e6  c3fb0d0a
0000ea  00      
0000eb  00                DCB      0
                  |L6.236|
0000ec  20205072          DCB      "  Prio   Used  Free   Per    CPU     Taskname\r\n",0
0000f0  696f2020
0000f4  20557365
0000f8  64202046
0000fc  72656520
000100  20205065
000104  72202020
000108  20435055
00010c  20202020
000110  20546173
000114  6b6e616d
000118  650d0a00
                  |L6.284|
00011c  42c80000          DCFS     0x42c80000 ; 100
                  |L6.288|
000120  20202025          DCB      "   %2d  %5d  %5d   %02d%%   %5.2f%%   %s\r\n",0
000124  32642020
000128  25356420
00012c  20253564
000130  20202025
000134  30326425
000138  25202020
00013c  25352e32
000140  66252520
000144  20202573
000148  0d0a00  
00014b  00                DCB      0

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;117    */
;;;118    int main(void)
000000  b500              PUSH     {lr}
;;;119    {
000002  b08b              SUB      sp,sp,#0x2c
;;;120        OS_ERR  err;                                         
;;;121        
;;;122    	/* 初始化uC/OS-III 内核 */
;;;123        OSInit(&err);  
000004  a80a              ADD      r0,sp,#0x28
000006  f7fffffe          BL       OSInit
;;;124    
;;;125    
;;;126    	/* 创建一个启动任务（也就是主任务）。启动任务会创建所有的应用程序任务 */
;;;127    	OSTaskCreate((OS_TCB       *)&AppTaskStartTCB,  /* 任务控制块地址 */           
00000a  a80a              ADD      r0,sp,#0x28
00000c  2103              MOVS     r1,#3
00000e  2200              MOVS     r2,#0
000010  9205              STR      r2,[sp,#0x14]
000012  e9cd2106          STRD     r2,r1,[sp,#0x18]
000016  9008              STR      r0,[sp,#0x20]
000018  4610              MOV      r0,r2
00001a  f44f6180          MOV      r1,#0x400
00001e  2266              MOVS     r2,#0x66
000020  4b09              LDR      r3,|L7.72|
000022  e9cd3201          STRD     r3,r2,[sp,#4]
000026  e9cd1003          STRD     r1,r0,[sp,#0xc]
00002a  2002              MOVS     r0,#2
00002c  2300              MOVS     r3,#0
00002e  4a07              LDR      r2,|L7.76|
000030  a107              ADR      r1,|L7.80|
000032  9000              STR      r0,[sp,#0]
000034  480a              LDR      r0,|L7.96|
000036  f7fffffe          BL       OSTaskCreate
;;;128                     (CPU_CHAR     *)"App Task Start",  /* 任务名 */
;;;129                     (OS_TASK_PTR   )AppTaskStart,      /* 启动任务函数地址 */
;;;130                     (void         *)0,                 /* 传递给任务的参数 */
;;;131                     (OS_PRIO       )APP_CFG_TASK_START_PRIO, /* 任务优先级 */
;;;132                     (CPU_STK      *)&AppTaskStartStk[0],     /* 堆栈基地址 */
;;;133                     (CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE / 10, /* 堆栈监测区，这里表示后10%作为监测区 */
;;;134                     (CPU_STK_SIZE  )APP_CFG_TASK_START_STK_SIZE,  /* 堆栈空间大小 */
;;;135                     (OS_MSG_QTY    )0,  /* 本任务支持接受的最大消息数 */
;;;136                     (OS_TICK       )0,  /* 设置时间片 */
;;;137                     (void         *)0,  /* 堆栈空间大小 */  
;;;138                     (OS_OPT        )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;139    		
;;;140    				 /*  定义如下：
;;;141    					OS_TASK_OPT_STK_CHK      使能检测任务栈，统计任务栈已用的和未用的
;;;142    					OS_TASK_OPT_STK_CLR      在创建任务时，清零任务栈
;;;143    					OS_TASK_OPT_SAVE_FP      如果CPU有浮点寄存器，则在任务切换时保存浮点寄存器的内容
;;;144    				 */  
;;;145                     (OS_ERR       *)&err);
;;;146    
;;;147    	/* 启动多任务系统，控制权交给uC/OS-III */
;;;148        OSStart(&err);                                             
00003a  a80a              ADD      r0,sp,#0x28
00003c  f7fffffe          BL       OSStart
;;;149        
;;;150        (void)&err;
;;;151        
;;;152        return (0);
000040  2000              MOVS     r0,#0
;;;153    }
000042  b00b              ADD      sp,sp,#0x2c
000044  bd00              POP      {pc}
;;;154    
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      AppTaskStartStk
                  |L7.76|
                          DCD      AppTaskStart
                  |L7.80|
000050  41707020          DCB      "App Task Start",0
000054  5461736b
000058  20537461
00005c  727400  
00005f  00                DCB      0
                  |L7.96|
                          DCD      AppTaskStartTCB

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  AppTaskStartTCB
                          %        192
                  AppTaskStartStk
                          %        4096
                  AppTaskCOMTCB
                          %        192
                  AppTaskCOMStk
                          %        4096
                  AppTaskUserIFTCB
                          %        192
                  AppTaskUserIFStk
                          %        4096
                  SEM_SYNCH
                          %        40

                          AREA ||.conststring||, DATA, READONLY, MERGE=1, STRINGS, ALIGN=2

000000  3d3d3d3d          DCB      "======================================================="
000004  3d3d3d3d
000008  3d3d3d3d
00000c  3d3d3d3d
000010  3d3d3d3d
000014  3d3d3d3d
000018  3d3d3d3d
00001c  3d3d3d3d
000020  3d3d3d3d
000024  3d3d3d3d
000028  3d3d3d3d
00002c  3d3d3d3d
000030  3d3d3d3d
000034  3d3d3d  
000037  3d3d3d3d          DCB      "========\r\n",0
00003b  3d3d3d3d
00003f  0d0a00  

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___6_main_c_main____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____REVSH|
#line 144
|__asm___6_main_c_main____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___6_main_c_main____RRX|
#line 300
|__asm___6_main_c_main____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
