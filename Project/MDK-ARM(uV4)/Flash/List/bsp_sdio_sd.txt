; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_sdio_sd.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_sdio_sd.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_sdio_sd.crf ..\..\User\bsp_stm32f4xx\src\bsp_sdio_sd.c]
                          THUMB

                          AREA ||i.CmdError||, CODE, READONLY, ALIGN=1

                  CmdError PROC
;;;2064     */
;;;2065   static SD_Error CmdError(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2066   {
;;;2067     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;2068     uint32_t timeout;
;;;2069   
;;;2070     timeout = SDIO_CMD0TIMEOUT; /*!< 10000 */
000004  f44f3480          MOV      r4,#0x10000
;;;2071   
;;;2072     while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
000008  e000              B        |L1.12|
                  |L1.10|
;;;2073     {
;;;2074       timeout--;
00000a  1e64              SUBS     r4,r4,#1
                  |L1.12|
00000c  b124              CBZ      r4,|L1.24|
00000e  2080              MOVS     r0,#0x80              ;2072
000010  f7fffffe          BL       SDIO_GetFlagStatus
000014  2800              CMP      r0,#0                 ;2072
000016  d0f8              BEQ      |L1.10|
                  |L1.24|
;;;2075     }
;;;2076   
;;;2077     if (timeout == 0)
000018  b914              CBNZ     r4,|L1.32|
;;;2078     {
;;;2079       errorstatus = SD_CMD_RSP_TIMEOUT;
00001a  2503              MOVS     r5,#3
;;;2080       return(errorstatus);
00001c  4628              MOV      r0,r5
                  |L1.30|
;;;2081     }
;;;2082   
;;;2083     /*!< Clear all the static flags */
;;;2084     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2085   
;;;2086     return(errorstatus);
;;;2087   }
00001e  bd70              POP      {r4-r6,pc}
                  |L1.32|
000020  f24050ff          MOV      r0,#0x5ff             ;2084
000024  f7fffffe          BL       SDIO_ClearFlag
000028  4628              MOV      r0,r5                 ;2086
00002a  e7f8              B        |L1.30|
;;;2088   
                          ENDP


                          AREA ||i.CmdResp1Error||, CODE, READONLY, ALIGN=2

                  CmdResp1Error PROC
;;;2130     */
;;;2131   static SD_Error CmdResp1Error(uint8_t cmd)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2132   {
000004  4606              MOV      r6,r0
;;;2133     SD_Error errorstatus = SD_OK;
000006  2700              MOVS     r7,#0
;;;2134     uint32_t status;
;;;2135     uint32_t response_r1;
;;;2136   
;;;2137     status = SDIO->STA;
000008  4848              LDR      r0,|L2.300|
00000a  6805              LDR      r5,[r0,#0]
;;;2138   
;;;2139     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
00000c  e001              B        |L2.18|
                  |L2.14|
;;;2140     {
;;;2141       status = SDIO->STA;
00000e  4847              LDR      r0,|L2.300|
000010  6805              LDR      r5,[r0,#0]
                  |L2.18|
000012  f0050045          AND      r0,r5,#0x45           ;2139
000016  2800              CMP      r0,#0                 ;2139
000018  d0f9              BEQ      |L2.14|
;;;2142     }
;;;2143   
;;;2144     if (status & SDIO_FLAG_CTIMEOUT)
00001a  f0050004          AND      r0,r5,#4
00001e  b130              CBZ      r0,|L2.46|
;;;2145     {
;;;2146       errorstatus = SD_CMD_RSP_TIMEOUT;
000020  2703              MOVS     r7,#3
;;;2147       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000022  2004              MOVS     r0,#4
000024  f7fffffe          BL       SDIO_ClearFlag
;;;2148       return(errorstatus);
000028  4638              MOV      r0,r7
                  |L2.42|
;;;2149     }
;;;2150     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2151     {
;;;2152       errorstatus = SD_CMD_CRC_FAIL;
;;;2153       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2154       return(errorstatus);
;;;2155     }
;;;2156   
;;;2157     /*!< Check response received is of desired command */
;;;2158     if (SDIO_GetCommandResponse() != cmd)
;;;2159     {
;;;2160       errorstatus = SD_ILLEGAL_CMD;
;;;2161       return(errorstatus);
;;;2162     }
;;;2163   
;;;2164     /*!< Clear all the static flags */
;;;2165     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2166   
;;;2167     /*!< We have received response, retrieve it for analysis  */
;;;2168     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2169   
;;;2170     if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2171     {
;;;2172       return(errorstatus);
;;;2173     }
;;;2174   
;;;2175     if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2176     {
;;;2177       return(SD_ADDR_OUT_OF_RANGE);
;;;2178     }
;;;2179   
;;;2180     if (response_r1 & SD_OCR_ADDR_MISALIGNED)
;;;2181     {
;;;2182       return(SD_ADDR_MISALIGNED);
;;;2183     }
;;;2184   
;;;2185     if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
;;;2186     {
;;;2187       return(SD_BLOCK_LEN_ERR);
;;;2188     }
;;;2189   
;;;2190     if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
;;;2191     {
;;;2192       return(SD_ERASE_SEQ_ERR);
;;;2193     }
;;;2194   
;;;2195     if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
;;;2196     {
;;;2197       return(SD_BAD_ERASE_PARAM);
;;;2198     }
;;;2199   
;;;2200     if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2201     {
;;;2202       return(SD_WRITE_PROT_VIOLATION);
;;;2203     }
;;;2204   
;;;2205     if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2206     {
;;;2207       return(SD_LOCK_UNLOCK_FAILED);
;;;2208     }
;;;2209   
;;;2210     if (response_r1 & SD_OCR_COM_CRC_FAILED)
;;;2211     {
;;;2212       return(SD_COM_CRC_FAILED);
;;;2213     }
;;;2214   
;;;2215     if (response_r1 & SD_OCR_ILLEGAL_CMD)
;;;2216     {
;;;2217       return(SD_ILLEGAL_CMD);
;;;2218     }
;;;2219   
;;;2220     if (response_r1 & SD_OCR_CARD_ECC_FAILED)
;;;2221     {
;;;2222       return(SD_CARD_ECC_FAILED);
;;;2223     }
;;;2224   
;;;2225     if (response_r1 & SD_OCR_CC_ERROR)
;;;2226     {
;;;2227       return(SD_CC_ERROR);
;;;2228     }
;;;2229   
;;;2230     if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2231     {
;;;2232       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2233     }
;;;2234   
;;;2235     if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2236     {
;;;2237       return(SD_STREAM_READ_UNDERRUN);
;;;2238     }
;;;2239   
;;;2240     if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2241     {
;;;2242       return(SD_STREAM_WRITE_OVERRUN);
;;;2243     }
;;;2244   
;;;2245     if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2246     {
;;;2247       return(SD_CID_CSD_OVERWRITE);
;;;2248     }
;;;2249   
;;;2250     if (response_r1 & SD_OCR_WP_ERASE_SKIP)
;;;2251     {
;;;2252       return(SD_WP_ERASE_SKIP);
;;;2253     }
;;;2254   
;;;2255     if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
;;;2256     {
;;;2257       return(SD_CARD_ECC_DISABLED);
;;;2258     }
;;;2259   
;;;2260     if (response_r1 & SD_OCR_ERASE_RESET)
;;;2261     {
;;;2262       return(SD_ERASE_RESET);
;;;2263     }
;;;2264   
;;;2265     if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
;;;2266     {
;;;2267       return(SD_AKE_SEQ_ERROR);
;;;2268     }
;;;2269     return(errorstatus);
;;;2270   }
00002a  e8bd81f0          POP      {r4-r8,pc}
                  |L2.46|
00002e  f0050001          AND      r0,r5,#1              ;2150
000032  b128              CBZ      r0,|L2.64|
000034  2701              MOVS     r7,#1                 ;2152
000036  2001              MOVS     r0,#1                 ;2153
000038  f7fffffe          BL       SDIO_ClearFlag
00003c  4638              MOV      r0,r7                 ;2154
00003e  e7f4              B        |L2.42|
                  |L2.64|
000040  f7fffffe          BL       SDIO_GetCommandResponse
000044  42b0              CMP      r0,r6                 ;2158
000046  d002              BEQ      |L2.78|
000048  2710              MOVS     r7,#0x10              ;2160
00004a  4638              MOV      r0,r7                 ;2161
00004c  e7ed              B        |L2.42|
                  |L2.78|
00004e  f24050ff          MOV      r0,#0x5ff             ;2165
000052  f7fffffe          BL       SDIO_ClearFlag
000056  2000              MOVS     r0,#0                 ;2168
000058  f7fffffe          BL       SDIO_GetResponse
00005c  4604              MOV      r4,r0                 ;2168
00005e  4834              LDR      r0,|L2.304|
000060  4020              ANDS     r0,r0,r4              ;2170
000062  b908              CBNZ     r0,|L2.104|
000064  4638              MOV      r0,r7                 ;2172
000066  e7e0              B        |L2.42|
                  |L2.104|
000068  f0044000          AND      r0,r4,#0x80000000     ;2175
00006c  b108              CBZ      r0,|L2.114|
00006e  201c              MOVS     r0,#0x1c              ;2177
000070  e7db              B        |L2.42|
                  |L2.114|
000072  f0044080          AND      r0,r4,#0x40000000     ;2180
000076  b108              CBZ      r0,|L2.124|
000078  2009              MOVS     r0,#9                 ;2182
00007a  e7d6              B        |L2.42|
                  |L2.124|
00007c  f0045000          AND      r0,r4,#0x20000000     ;2185
000080  b108              CBZ      r0,|L2.134|
000082  200a              MOVS     r0,#0xa               ;2187
000084  e7d1              B        |L2.42|
                  |L2.134|
000086  f0045080          AND      r0,r4,#0x10000000     ;2190
00008a  b108              CBZ      r0,|L2.144|
00008c  200b              MOVS     r0,#0xb               ;2192
00008e  e7cc              B        |L2.42|
                  |L2.144|
000090  f0046000          AND      r0,r4,#0x8000000      ;2195
000094  b108              CBZ      r0,|L2.154|
000096  200c              MOVS     r0,#0xc               ;2197
000098  e7c7              B        |L2.42|
                  |L2.154|
00009a  f0046080          AND      r0,r4,#0x4000000      ;2200
00009e  b108              CBZ      r0,|L2.164|
0000a0  200d              MOVS     r0,#0xd               ;2202
0000a2  e7c2              B        |L2.42|
                  |L2.164|
0000a4  f0047080          AND      r0,r4,#0x1000000      ;2205
0000a8  b108              CBZ      r0,|L2.174|
0000aa  200e              MOVS     r0,#0xe               ;2207
0000ac  e7bd              B        |L2.42|
                  |L2.174|
0000ae  f4040000          AND      r0,r4,#0x800000       ;2210
0000b2  b108              CBZ      r0,|L2.184|
0000b4  200f              MOVS     r0,#0xf               ;2212
0000b6  e7b8              B        |L2.42|
                  |L2.184|
0000b8  f4040080          AND      r0,r4,#0x400000       ;2215
0000bc  b108              CBZ      r0,|L2.194|
0000be  2010              MOVS     r0,#0x10              ;2217
0000c0  e7b3              B        |L2.42|
                  |L2.194|
0000c2  f4041000          AND      r0,r4,#0x200000       ;2220
0000c6  b108              CBZ      r0,|L2.204|
0000c8  2011              MOVS     r0,#0x11              ;2222
0000ca  e7ae              B        |L2.42|
                  |L2.204|
0000cc  f4041080          AND      r0,r4,#0x100000       ;2225
0000d0  b108              CBZ      r0,|L2.214|
0000d2  2012              MOVS     r0,#0x12              ;2227
0000d4  e7a9              B        |L2.42|
                  |L2.214|
0000d6  f4042000          AND      r0,r4,#0x80000        ;2230
0000da  b108              CBZ      r0,|L2.224|
0000dc  2013              MOVS     r0,#0x13              ;2232
0000de  e7a4              B        |L2.42|
                  |L2.224|
0000e0  f4042080          AND      r0,r4,#0x40000        ;2235
0000e4  b108              CBZ      r0,|L2.234|
0000e6  2014              MOVS     r0,#0x14              ;2237
0000e8  e79f              B        |L2.42|
                  |L2.234|
0000ea  f4043000          AND      r0,r4,#0x20000        ;2240
0000ee  b108              CBZ      r0,|L2.244|
0000f0  2015              MOVS     r0,#0x15              ;2242
0000f2  e79a              B        |L2.42|
                  |L2.244|
0000f4  f4043080          AND      r0,r4,#0x10000        ;2245
0000f8  b108              CBZ      r0,|L2.254|
0000fa  2016              MOVS     r0,#0x16              ;2247
0000fc  e795              B        |L2.42|
                  |L2.254|
0000fe  f4044000          AND      r0,r4,#0x8000         ;2250
000102  b108              CBZ      r0,|L2.264|
000104  2017              MOVS     r0,#0x17              ;2252
000106  e790              B        |L2.42|
                  |L2.264|
000108  f4044080          AND      r0,r4,#0x4000         ;2255
00010c  b108              CBZ      r0,|L2.274|
00010e  2018              MOVS     r0,#0x18              ;2257
000110  e78b              B        |L2.42|
                  |L2.274|
000112  f4045000          AND      r0,r4,#0x2000         ;2260
000116  b108              CBZ      r0,|L2.284|
000118  2019              MOVS     r0,#0x19              ;2262
00011a  e786              B        |L2.42|
                  |L2.284|
00011c  f0040008          AND      r0,r4,#8              ;2265
000120  b108              CBZ      r0,|L2.294|
000122  201a              MOVS     r0,#0x1a              ;2267
000124  e781              B        |L2.42|
                  |L2.294|
000126  4638              MOV      r0,r7                 ;2269
000128  e77f              B        |L2.42|
;;;2271   
                          ENDP

00012a  0000              DCW      0x0000
                  |L2.300|
                          DCD      0x40012c34
                  |L2.304|
                          DCD      0xfdffe008

                          AREA ||i.CmdResp2Error||, CODE, READONLY, ALIGN=2

                  CmdResp2Error PROC
;;;2304     */
;;;2305   static SD_Error CmdResp2Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2306   {
;;;2307     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;2308     uint32_t status;
;;;2309   
;;;2310     status = SDIO->STA;
000004  4810              LDR      r0,|L3.72|
000006  6804              LDR      r4,[r0,#0]
;;;2311   
;;;2312     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000008  e001              B        |L3.14|
                  |L3.10|
;;;2313     {
;;;2314       status = SDIO->STA;
00000a  480f              LDR      r0,|L3.72|
00000c  6804              LDR      r4,[r0,#0]
                  |L3.14|
00000e  f0040045          AND      r0,r4,#0x45           ;2312
000012  2800              CMP      r0,#0                 ;2312
000014  d0f9              BEQ      |L3.10|
;;;2315     }
;;;2316   
;;;2317     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L3.40|
;;;2318     {
;;;2319       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;2320       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2321       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L3.38|
;;;2322     }
;;;2323     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2324     {
;;;2325       errorstatus = SD_CMD_CRC_FAIL;
;;;2326       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2327       return(errorstatus);
;;;2328     }
;;;2329   
;;;2330     /*!< Clear all the static flags */
;;;2331     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2332   
;;;2333     return(errorstatus);
;;;2334   }
000026  bd70              POP      {r4-r6,pc}
                  |L3.40|
000028  f0040001          AND      r0,r4,#1              ;2323
00002c  b128              CBZ      r0,|L3.58|
00002e  2501              MOVS     r5,#1                 ;2325
000030  2001              MOVS     r0,#1                 ;2326
000032  f7fffffe          BL       SDIO_ClearFlag
000036  4628              MOV      r0,r5                 ;2327
000038  e7f5              B        |L3.38|
                  |L3.58|
00003a  f24050ff          MOV      r0,#0x5ff             ;2331
00003e  f7fffffe          BL       SDIO_ClearFlag
000042  4628              MOV      r0,r5                 ;2333
000044  e7ef              B        |L3.38|
;;;2335   
                          ENDP

000046  0000              DCW      0x0000
                  |L3.72|
                          DCD      0x40012c34

                          AREA ||i.CmdResp3Error||, CODE, READONLY, ALIGN=2

                  CmdResp3Error PROC
;;;2276     */
;;;2277   static SD_Error CmdResp3Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2278   {
;;;2279     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;2280     uint32_t status;
;;;2281   
;;;2282     status = SDIO->STA;
000004  480b              LDR      r0,|L4.52|
000006  6804              LDR      r4,[r0,#0]
;;;2283   
;;;2284     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000008  e001              B        |L4.14|
                  |L4.10|
;;;2285     {
;;;2286       status = SDIO->STA;
00000a  480a              LDR      r0,|L4.52|
00000c  6804              LDR      r4,[r0,#0]
                  |L4.14|
00000e  f0040045          AND      r0,r4,#0x45           ;2284
000012  2800              CMP      r0,#0                 ;2284
000014  d0f9              BEQ      |L4.10|
;;;2287     }
;;;2288   
;;;2289     if (status & SDIO_FLAG_CTIMEOUT)
000016  f0040004          AND      r0,r4,#4
00001a  b128              CBZ      r0,|L4.40|
;;;2290     {
;;;2291       errorstatus = SD_CMD_RSP_TIMEOUT;
00001c  2503              MOVS     r5,#3
;;;2292       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
00001e  2004              MOVS     r0,#4
000020  f7fffffe          BL       SDIO_ClearFlag
;;;2293       return(errorstatus);
000024  4628              MOV      r0,r5
                  |L4.38|
;;;2294     }
;;;2295     /*!< Clear all the static flags */
;;;2296     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2297     return(errorstatus);
;;;2298   }
000026  bd70              POP      {r4-r6,pc}
                  |L4.40|
000028  f24050ff          MOV      r0,#0x5ff             ;2296
00002c  f7fffffe          BL       SDIO_ClearFlag
000030  4628              MOV      r0,r5                 ;2297
000032  e7f8              B        |L4.38|
;;;2299   
                          ENDP

                  |L4.52|
                          DCD      0x40012c34

                          AREA ||i.CmdResp6Error||, CODE, READONLY, ALIGN=2

                  CmdResp6Error PROC
;;;2342     */
;;;2343   static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2344   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;2345     SD_Error errorstatus = SD_OK;
000008  f04f0800          MOV      r8,#0
;;;2346     uint32_t status;
;;;2347     uint32_t response_r1;
;;;2348   
;;;2349     status = SDIO->STA;
00000c  4822              LDR      r0,|L5.152|
00000e  6805              LDR      r5,[r0,#0]
;;;2350   
;;;2351     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
000010  e001              B        |L5.22|
                  |L5.18|
;;;2352     {
;;;2353       status = SDIO->STA;
000012  4821              LDR      r0,|L5.152|
000014  6805              LDR      r5,[r0,#0]
                  |L5.22|
000016  f0050045          AND      r0,r5,#0x45           ;2351
00001a  2800              CMP      r0,#0                 ;2351
00001c  d0f9              BEQ      |L5.18|
;;;2354     }
;;;2355   
;;;2356     if (status & SDIO_FLAG_CTIMEOUT)
00001e  f0050004          AND      r0,r5,#4
000022  b138              CBZ      r0,|L5.52|
;;;2357     {
;;;2358       errorstatus = SD_CMD_RSP_TIMEOUT;
000024  f04f0803          MOV      r8,#3
;;;2359       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;2360       return(errorstatus);
00002e  4640              MOV      r0,r8
                  |L5.48|
;;;2361     }
;;;2362     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2363     {
;;;2364       errorstatus = SD_CMD_CRC_FAIL;
;;;2365       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2366       return(errorstatus);
;;;2367     }
;;;2368   
;;;2369     /*!< Check response received is of desired command */
;;;2370     if (SDIO_GetCommandResponse() != cmd)
;;;2371     {
;;;2372       errorstatus = SD_ILLEGAL_CMD;
;;;2373       return(errorstatus);
;;;2374     }
;;;2375   
;;;2376     /*!< Clear all the static flags */
;;;2377     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2378   
;;;2379     /*!< We have received response, retrieve it.  */
;;;2380     response_r1 = SDIO_GetResponse(SDIO_RESP1);
;;;2381   
;;;2382     if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC_FAILED)))
;;;2383     {
;;;2384       *prca = (uint16_t) (response_r1 >> 16);
;;;2385       return(errorstatus);
;;;2386     }
;;;2387   
;;;2388     if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
;;;2389     {
;;;2390       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2391     }
;;;2392   
;;;2393     if (response_r1 & SD_R6_ILLEGAL_CMD)
;;;2394     {
;;;2395       return(SD_ILLEGAL_CMD);
;;;2396     }
;;;2397   
;;;2398     if (response_r1 & SD_R6_COM_CRC_FAILED)
;;;2399     {
;;;2400       return(SD_COM_CRC_FAILED);
;;;2401     }
;;;2402   
;;;2403     return(errorstatus);
;;;2404   }
000030  e8bd81f0          POP      {r4-r8,pc}
                  |L5.52|
000034  f0050001          AND      r0,r5,#1              ;2362
000038  b130              CBZ      r0,|L5.72|
00003a  f04f0801          MOV      r8,#1                 ;2364
00003e  2001              MOVS     r0,#1                 ;2365
000040  f7fffffe          BL       SDIO_ClearFlag
000044  4640              MOV      r0,r8                 ;2366
000046  e7f3              B        |L5.48|
                  |L5.72|
000048  f7fffffe          BL       SDIO_GetCommandResponse
00004c  42b0              CMP      r0,r6                 ;2370
00004e  d003              BEQ      |L5.88|
000050  f04f0810          MOV      r8,#0x10              ;2372
000054  4640              MOV      r0,r8                 ;2373
000056  e7eb              B        |L5.48|
                  |L5.88|
000058  f24050ff          MOV      r0,#0x5ff             ;2377
00005c  f7fffffe          BL       SDIO_ClearFlag
000060  2000              MOVS     r0,#0                 ;2380
000062  f7fffffe          BL       SDIO_GetResponse
000066  4604              MOV      r4,r0                 ;2380
000068  f4044060          AND      r0,r4,#0xe000         ;2382
00006c  b918              CBNZ     r0,|L5.118|
00006e  0c20              LSRS     r0,r4,#16             ;2384
000070  8038              STRH     r0,[r7,#0]            ;2384
000072  4640              MOV      r0,r8                 ;2385
000074  e7dc              B        |L5.48|
                  |L5.118|
000076  f4045000          AND      r0,r4,#0x2000         ;2388
00007a  b108              CBZ      r0,|L5.128|
00007c  2013              MOVS     r0,#0x13              ;2390
00007e  e7d7              B        |L5.48|
                  |L5.128|
000080  f4044080          AND      r0,r4,#0x4000         ;2393
000084  b108              CBZ      r0,|L5.138|
000086  2010              MOVS     r0,#0x10              ;2395
000088  e7d2              B        |L5.48|
                  |L5.138|
00008a  f4044000          AND      r0,r4,#0x8000         ;2398
00008e  b108              CBZ      r0,|L5.148|
000090  200f              MOVS     r0,#0xf               ;2400
000092  e7cd              B        |L5.48|
                  |L5.148|
000094  4640              MOV      r0,r8                 ;2403
000096  e7cb              B        |L5.48|
;;;2405   
                          ENDP

                  |L5.152|
                          DCD      0x40012c34

                          AREA ||i.CmdResp7Error||, CODE, READONLY, ALIGN=2

                  CmdResp7Error PROC
;;;2093     */
;;;2094   static SD_Error CmdResp7Error(void)
000000  b570              PUSH     {r4-r6,lr}
;;;2095   {
;;;2096     SD_Error errorstatus = SD_OK;
000002  2600              MOVS     r6,#0
;;;2097     uint32_t status;
;;;2098     uint32_t timeout = SDIO_CMD0TIMEOUT;
000004  f44f3580          MOV      r5,#0x10000
;;;2099   
;;;2100     status = SDIO->STA;
000008  480f              LDR      r0,|L6.72|
00000a  6804              LDR      r4,[r0,#0]
;;;2101   
;;;2102     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0))
00000c  e002              B        |L6.20|
                  |L6.14|
;;;2103     {
;;;2104       timeout--;
00000e  1e6d              SUBS     r5,r5,#1
;;;2105       status = SDIO->STA;
000010  480d              LDR      r0,|L6.72|
000012  6804              LDR      r4,[r0,#0]
                  |L6.20|
000014  f0040045          AND      r0,r4,#0x45           ;2102
000018  b908              CBNZ     r0,|L6.30|
00001a  2d00              CMP      r5,#0                 ;2102
00001c  d1f7              BNE      |L6.14|
                  |L6.30|
;;;2106     }
;;;2107   
;;;2108     if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
00001e  b115              CBZ      r5,|L6.38|
000020  f0040004          AND      r0,r4,#4
000024  b128              CBZ      r0,|L6.50|
                  |L6.38|
;;;2109     {
;;;2110       /*!< Card is not V2.0 complient or card does not support the set voltage range */
;;;2111       errorstatus = SD_CMD_RSP_TIMEOUT;
000026  2603              MOVS     r6,#3
;;;2112       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000028  2004              MOVS     r0,#4
00002a  f7fffffe          BL       SDIO_ClearFlag
;;;2113       return(errorstatus);
00002e  4630              MOV      r0,r6
                  |L6.48|
;;;2114     }
;;;2115   
;;;2116     if (status & SDIO_FLAG_CMDREND)
;;;2117     {
;;;2118       /*!< Card is SD V2.0 compliant */
;;;2119       errorstatus = SD_OK;
;;;2120       SDIO_ClearFlag(SDIO_FLAG_CMDREND);
;;;2121       return(errorstatus);
;;;2122     }
;;;2123     return(errorstatus);
;;;2124   }
000030  bd70              POP      {r4-r6,pc}
                  |L6.50|
000032  f0040040          AND      r0,r4,#0x40           ;2116
000036  b128              CBZ      r0,|L6.68|
000038  2600              MOVS     r6,#0                 ;2119
00003a  2040              MOVS     r0,#0x40              ;2120
00003c  f7fffffe          BL       SDIO_ClearFlag
000040  4630              MOV      r0,r6                 ;2121
000042  e7f5              B        |L6.48|
                  |L6.68|
000044  4630              MOV      r0,r6                 ;2123
000046  e7f3              B        |L6.48|
;;;2125   
                          ENDP

                  |L6.72|
                          DCD      0x40012c34

                          AREA ||i.DMA2_Stream3_IRQHandler||, CODE, READONLY, ALIGN=1

                  DMA2_Stream3_IRQHandler PROC
;;;3177   */
;;;3178   void SD_SDIO_DMA_IRQHANDLER(void)
000000  b510              PUSH     {r4,lr}
;;;3179   {
;;;3180   #if uCOS_EN == 1 
;;;3181   	CPU_SR_ALLOC();
;;;3182   
;;;3183       CPU_CRITICAL_ENTER();
;;;3184       OSIntEnter();                                          
;;;3185       CPU_CRITICAL_EXIT();
;;;3186   #endif
;;;3187   	
;;;3188   	/* 处理DMA中断 */
;;;3189   	SD_ProcessDMAIRQ();
000002  f7fffffe          BL       SD_ProcessDMAIRQ
;;;3190   	
;;;3191   #if uCOS_EN == 1
;;;3192   	OSIntExit();                           
;;;3193   #endif
;;;3194   }
000006  bd10              POP      {r4,pc}
;;;3195   
                          ENDP


                          AREA ||i.FindSCR||, CODE, READONLY, ALIGN=2

                  FindSCR PROC
;;;2684     */
;;;2685   static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;2686   {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;2687     uint32_t index = 0;
000008  2600              MOVS     r6,#0
;;;2688     SD_Error errorstatus = SD_OK;
00000a  2400              MOVS     r4,#0
;;;2689     uint32_t tempscr[2] = {0, 0};
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
000010  9001              STR      r0,[sp,#4]
;;;2690   
;;;2691     /*!< Set Block Size To 8 Bytes */
;;;2692     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2693     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
000012  2008              MOVS     r0,#8
000014  495b              LDR      r1,|L8.388|
000016  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2694     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000018  2010              MOVS     r0,#0x10
00001a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2695     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001c  2040              MOVS     r0,#0x40
00001e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2696     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000020  2000              MOVS     r0,#0
000022  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2697     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000024  f44f6080          MOV      r0,#0x400
000028  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2698     SDIO_SendCommand(&SDIO_CmdInitStructure);
00002a  4608              MOV      r0,r1
00002c  f7fffffe          BL       SDIO_SendCommand
;;;2699   
;;;2700     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000030  2010              MOVS     r0,#0x10
000032  f7fffffe          BL       CmdResp1Error
000036  4604              MOV      r4,r0
;;;2701   
;;;2702     if (errorstatus != SD_OK)
000038  b114              CBZ      r4,|L8.64|
;;;2703     {
;;;2704       return(errorstatus);
00003a  4620              MOV      r0,r4
                  |L8.60|
;;;2705     }
;;;2706   
;;;2707     /*!< Send CMD55 APP_CMD with argument as card's RCA */
;;;2708     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2709     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2710     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2711     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2712     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2713     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2714   
;;;2715     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2716   
;;;2717     if (errorstatus != SD_OK)
;;;2718     {
;;;2719       return(errorstatus);
;;;2720     }
;;;2721     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2722     SDIO_DataInitStructure.SDIO_DataLength = 8;
;;;2723     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
;;;2724     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2725     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2726     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2727     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2728   
;;;2729   
;;;2730     /*!< Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
;;;2731     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;2732     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_SEND_SCR;
;;;2733     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2734     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2735     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2736     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2737   
;;;2738     errorstatus = CmdResp1Error(SD_CMD_SD_APP_SEND_SCR);
;;;2739   
;;;2740     if (errorstatus != SD_OK)
;;;2741     {
;;;2742       return(errorstatus);
;;;2743     }
;;;2744   
;;;2745     while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2746     {
;;;2747       if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
;;;2748       {
;;;2749         *(tempscr + index) = SDIO_ReadData();
;;;2750         index++;
;;;2751       }
;;;2752     }
;;;2753   
;;;2754     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2755     {
;;;2756       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2757       errorstatus = SD_DATA_TIMEOUT;
;;;2758       return(errorstatus);
;;;2759     }
;;;2760     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2761     {
;;;2762       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2763       errorstatus = SD_DATA_CRC_FAIL;
;;;2764       return(errorstatus);
;;;2765     }
;;;2766     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2767     {
;;;2768       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2769       errorstatus = SD_RX_OVERRUN;
;;;2770       return(errorstatus);
;;;2771     }
;;;2772     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2773     {
;;;2774       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2775       errorstatus = SD_START_BIT_ERR;
;;;2776       return(errorstatus);
;;;2777     }
;;;2778   
;;;2779     /*!< Clear all the static flags */
;;;2780     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2781   
;;;2782     *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr[0] & SD_16TO23BITS) >> 8) | ((tempscr[0] & SD_24TO31BITS) >> 24);
;;;2783   
;;;2784     *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] & SD_16TO23BITS) >> 8) | ((tempscr[1] & SD_24TO31BITS) >> 24);
;;;2785   
;;;2786     return(errorstatus);
;;;2787   }
00003c  e8bd81fc          POP      {r2-r8,pc}
                  |L8.64|
000040  4851              LDR      r0,|L8.392|
000042  8800              LDRH     r0,[r0,#0]            ;2708  ; RCA
000044  0400              LSLS     r0,r0,#16             ;2708
000046  494f              LDR      r1,|L8.388|
000048  6008              STR      r0,[r1,#0]            ;2708  ; SDIO_CmdInitStructure
00004a  2037              MOVS     r0,#0x37              ;2709
00004c  6048              STR      r0,[r1,#4]            ;2709  ; SDIO_CmdInitStructure
00004e  2040              MOVS     r0,#0x40              ;2710
000050  6088              STR      r0,[r1,#8]            ;2710  ; SDIO_CmdInitStructure
000052  2000              MOVS     r0,#0                 ;2711
000054  60c8              STR      r0,[r1,#0xc]          ;2711  ; SDIO_CmdInitStructure
000056  f44f6080          MOV      r0,#0x400             ;2712
00005a  6108              STR      r0,[r1,#0x10]         ;2712  ; SDIO_CmdInitStructure
00005c  4608              MOV      r0,r1                 ;2713
00005e  f7fffffe          BL       SDIO_SendCommand
000062  2037              MOVS     r0,#0x37              ;2715
000064  f7fffffe          BL       CmdResp1Error
000068  4604              MOV      r4,r0                 ;2715
00006a  b10c              CBZ      r4,|L8.112|
00006c  4620              MOV      r0,r4                 ;2719
00006e  e7e5              B        |L8.60|
                  |L8.112|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2721
000074  4945              LDR      r1,|L8.396|
000076  6008              STR      r0,[r1,#0]            ;2721  ; SDIO_DataInitStructure
000078  2008              MOVS     r0,#8                 ;2722
00007a  6048              STR      r0,[r1,#4]            ;2722  ; SDIO_DataInitStructure
00007c  2030              MOVS     r0,#0x30              ;2723
00007e  6088              STR      r0,[r1,#8]            ;2723  ; SDIO_DataInitStructure
000080  2002              MOVS     r0,#2                 ;2724
000082  60c8              STR      r0,[r1,#0xc]          ;2724  ; SDIO_DataInitStructure
000084  2000              MOVS     r0,#0                 ;2725
000086  6108              STR      r0,[r1,#0x10]         ;2725  ; SDIO_DataInitStructure
000088  2001              MOVS     r0,#1                 ;2726
00008a  6148              STR      r0,[r1,#0x14]         ;2726  ; SDIO_DataInitStructure
00008c  4608              MOV      r0,r1                 ;2727
00008e  f7fffffe          BL       SDIO_DataConfig
000092  2000              MOVS     r0,#0                 ;2731
000094  493b              LDR      r1,|L8.388|
000096  6008              STR      r0,[r1,#0]            ;2731  ; SDIO_CmdInitStructure
000098  2033              MOVS     r0,#0x33              ;2732
00009a  6048              STR      r0,[r1,#4]            ;2732  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;2733
00009e  6088              STR      r0,[r1,#8]            ;2733  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;2734
0000a2  60c8              STR      r0,[r1,#0xc]          ;2734  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;2735
0000a8  6108              STR      r0,[r1,#0x10]         ;2735  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;2736
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2033              MOVS     r0,#0x33              ;2738
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  4604              MOV      r4,r0                 ;2738
0000b8  b10c              CBZ      r4,|L8.190|
0000ba  4620              MOV      r0,r4                 ;2742
0000bc  e7be              B        |L8.60|
                  |L8.190|
0000be  e009              B        |L8.212|
                  |L8.192|
0000c0  f44f1000          MOV      r0,#0x200000          ;2747
0000c4  f7fffffe          BL       SDIO_GetFlagStatus
0000c8  b120              CBZ      r0,|L8.212|
0000ca  f7fffffe          BL       SDIO_ReadData
0000ce  f84d0026          STR      r0,[sp,r6,LSL #2]     ;2749
0000d2  1c76              ADDS     r6,r6,#1              ;2750
                  |L8.212|
0000d4  482e              LDR      r0,|L8.400|
0000d6  6800              LDR      r0,[r0,#0]            ;2745
0000d8  f240612a          MOV      r1,#0x62a             ;2745
0000dc  4008              ANDS     r0,r0,r1              ;2745
0000de  2800              CMP      r0,#0                 ;2745
0000e0  d0ee              BEQ      |L8.192|
0000e2  2008              MOVS     r0,#8                 ;2754
0000e4  f7fffffe          BL       SDIO_GetFlagStatus
0000e8  b128              CBZ      r0,|L8.246|
0000ea  2008              MOVS     r0,#8                 ;2756
0000ec  f7fffffe          BL       SDIO_ClearFlag
0000f0  2404              MOVS     r4,#4                 ;2757
0000f2  4620              MOV      r0,r4                 ;2758
0000f4  e7a2              B        |L8.60|
                  |L8.246|
0000f6  2002              MOVS     r0,#2                 ;2760
0000f8  f7fffffe          BL       SDIO_GetFlagStatus
0000fc  b128              CBZ      r0,|L8.266|
0000fe  2002              MOVS     r0,#2                 ;2762
000100  f7fffffe          BL       SDIO_ClearFlag
000104  2402              MOVS     r4,#2                 ;2763
000106  4620              MOV      r0,r4                 ;2764
000108  e798              B        |L8.60|
                  |L8.266|
00010a  2020              MOVS     r0,#0x20              ;2766
00010c  f7fffffe          BL       SDIO_GetFlagStatus
000110  b128              CBZ      r0,|L8.286|
000112  2020              MOVS     r0,#0x20              ;2768
000114  f7fffffe          BL       SDIO_ClearFlag
000118  2406              MOVS     r4,#6                 ;2769
00011a  4620              MOV      r0,r4                 ;2770
00011c  e78e              B        |L8.60|
                  |L8.286|
00011e  f44f7000          MOV      r0,#0x200             ;2772
000122  f7fffffe          BL       SDIO_GetFlagStatus
000126  b130              CBZ      r0,|L8.310|
000128  f44f7000          MOV      r0,#0x200             ;2774
00012c  f7fffffe          BL       SDIO_ClearFlag
000130  2407              MOVS     r4,#7                 ;2775
000132  4620              MOV      r0,r4                 ;2776
000134  e782              B        |L8.60|
                  |L8.310|
000136  f24050ff          MOV      r0,#0x5ff             ;2780
00013a  f7fffffe          BL       SDIO_ClearFlag
00013e  9800              LDR      r0,[sp,#0]            ;2782
000140  0600              LSLS     r0,r0,#24             ;2782
000142  9900              LDR      r1,[sp,#0]            ;2782
000144  f401417f          AND      r1,r1,#0xff00         ;2782
000148  ea402001          ORR      r0,r0,r1,LSL #8       ;2782
00014c  9900              LDR      r1,[sp,#0]            ;2782
00014e  f401017f          AND      r1,r1,#0xff0000       ;2782
000152  ea402011          ORR      r0,r0,r1,LSR #8       ;2782
000156  9900              LDR      r1,[sp,#0]            ;2782
000158  ea406011          ORR      r0,r0,r1,LSR #24      ;2782
00015c  6068              STR      r0,[r5,#4]            ;2782
00015e  9801              LDR      r0,[sp,#4]            ;2784
000160  0600              LSLS     r0,r0,#24             ;2784
000162  9901              LDR      r1,[sp,#4]            ;2784
000164  f401417f          AND      r1,r1,#0xff00         ;2784
000168  ea402001          ORR      r0,r0,r1,LSL #8       ;2784
00016c  9901              LDR      r1,[sp,#4]            ;2784
00016e  f401017f          AND      r1,r1,#0xff0000       ;2784
000172  ea402011          ORR      r0,r0,r1,LSR #8       ;2784
000176  9901              LDR      r1,[sp,#4]            ;2784
000178  ea406011          ORR      r0,r0,r1,LSR #24      ;2784
00017c  6028              STR      r0,[r5,#0]            ;2784
00017e  4620              MOV      r0,r4                 ;2786
000180  e75c              B        |L8.60|
;;;2788   
                          ENDP

000182  0000              DCW      0x0000
                  |L8.388|
                          DCD      SDIO_CmdInitStructure
                  |L8.392|
                          DCD      ||RCA||
                  |L8.396|
                          DCD      SDIO_DataInitStructure
                  |L8.400|
                          DCD      0x40012c34

                          AREA ||i.IsCardProgramming||, CODE, READONLY, ALIGN=2

                  IsCardProgramming PROC
;;;2525     */
;;;2526   static SD_Error IsCardProgramming(uint8_t *pstatus)
000000  b57c              PUSH     {r2-r6,lr}
;;;2527   {
000002  4604              MOV      r4,r0
;;;2528     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;2529     __IO uint32_t respR1 = 0, status = 0;
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  9000              STR      r0,[sp,#0]
;;;2530   
;;;2531     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
00000c  485f              LDR      r0,|L9.396|
00000e  8800              LDRH     r0,[r0,#0]  ; RCA
000010  0400              LSLS     r0,r0,#16
000012  495f              LDR      r1,|L9.400|
000014  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;2532     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
000016  200d              MOVS     r0,#0xd
000018  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;2533     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00001a  2040              MOVS     r0,#0x40
00001c  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;2534     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00001e  2000              MOVS     r0,#0
000020  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;2535     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000022  f44f6080          MOV      r0,#0x400
000026  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;2536     SDIO_SendCommand(&SDIO_CmdInitStructure);
000028  4608              MOV      r0,r1
00002a  f7fffffe          BL       SDIO_SendCommand
;;;2537   
;;;2538     status = SDIO->STA;
00002e  4859              LDR      r0,|L9.404|
000030  6800              LDR      r0,[r0,#0]
000032  9000              STR      r0,[sp,#0]
;;;2539     while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
000034  e002              B        |L9.60|
                  |L9.54|
;;;2540     {
;;;2541       status = SDIO->STA;
000036  4857              LDR      r0,|L9.404|
000038  6800              LDR      r0,[r0,#0]
00003a  9000              STR      r0,[sp,#0]
                  |L9.60|
00003c  9800              LDR      r0,[sp,#0]            ;2539
00003e  f0000045          AND      r0,r0,#0x45           ;2539
000042  2800              CMP      r0,#0                 ;2539
000044  d0f7              BEQ      |L9.54|
;;;2542     }
;;;2543   
;;;2544     if (status & SDIO_FLAG_CTIMEOUT)
000046  9800              LDR      r0,[sp,#0]
000048  f0000004          AND      r0,r0,#4
00004c  b128              CBZ      r0,|L9.90|
;;;2545     {
;;;2546       errorstatus = SD_CMD_RSP_TIMEOUT;
00004e  2503              MOVS     r5,#3
;;;2547       SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
000050  2004              MOVS     r0,#4
000052  f7fffffe          BL       SDIO_ClearFlag
;;;2548       return(errorstatus);
000056  4628              MOV      r0,r5
                  |L9.88|
;;;2549     }
;;;2550     else if (status & SDIO_FLAG_CCRCFAIL)
;;;2551     {
;;;2552       errorstatus = SD_CMD_CRC_FAIL;
;;;2553       SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
;;;2554       return(errorstatus);
;;;2555     }
;;;2556   
;;;2557     status = (uint32_t)SDIO_GetCommandResponse();
;;;2558   
;;;2559     /*!< Check response received is of desired command */
;;;2560     if (status != SD_CMD_SEND_STATUS)
;;;2561     {
;;;2562       errorstatus = SD_ILLEGAL_CMD;
;;;2563       return(errorstatus);
;;;2564     }
;;;2565   
;;;2566     /*!< Clear all the static flags */
;;;2567     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2568   
;;;2569   
;;;2570     /*!< We have received response, retrieve it for analysis  */
;;;2571     respR1 = SDIO_GetResponse(SDIO_RESP1);
;;;2572   
;;;2573     /*!< Find out card status */
;;;2574     *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
;;;2575   
;;;2576     if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
;;;2577     {
;;;2578       return(errorstatus);
;;;2579     }
;;;2580   
;;;2581     if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
;;;2582     {
;;;2583       return(SD_ADDR_OUT_OF_RANGE);
;;;2584     }
;;;2585   
;;;2586     if (respR1 & SD_OCR_ADDR_MISALIGNED)
;;;2587     {
;;;2588       return(SD_ADDR_MISALIGNED);
;;;2589     }
;;;2590   
;;;2591     if (respR1 & SD_OCR_BLOCK_LEN_ERR)
;;;2592     {
;;;2593       return(SD_BLOCK_LEN_ERR);
;;;2594     }
;;;2595   
;;;2596     if (respR1 & SD_OCR_ERASE_SEQ_ERR)
;;;2597     {
;;;2598       return(SD_ERASE_SEQ_ERR);
;;;2599     }
;;;2600   
;;;2601     if (respR1 & SD_OCR_BAD_ERASE_PARAM)
;;;2602     {
;;;2603       return(SD_BAD_ERASE_PARAM);
;;;2604     }
;;;2605   
;;;2606     if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
;;;2607     {
;;;2608       return(SD_WRITE_PROT_VIOLATION);
;;;2609     }
;;;2610   
;;;2611     if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
;;;2612     {
;;;2613       return(SD_LOCK_UNLOCK_FAILED);
;;;2614     }
;;;2615   
;;;2616     if (respR1 & SD_OCR_COM_CRC_FAILED)
;;;2617     {
;;;2618       return(SD_COM_CRC_FAILED);
;;;2619     }
;;;2620   
;;;2621     if (respR1 & SD_OCR_ILLEGAL_CMD)
;;;2622     {
;;;2623       return(SD_ILLEGAL_CMD);
;;;2624     }
;;;2625   
;;;2626     if (respR1 & SD_OCR_CARD_ECC_FAILED)
;;;2627     {
;;;2628       return(SD_CARD_ECC_FAILED);
;;;2629     }
;;;2630   
;;;2631     if (respR1 & SD_OCR_CC_ERROR)
;;;2632     {
;;;2633       return(SD_CC_ERROR);
;;;2634     }
;;;2635   
;;;2636     if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
;;;2637     {
;;;2638       return(SD_GENERAL_UNKNOWN_ERROR);
;;;2639     }
;;;2640   
;;;2641     if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
;;;2642     {
;;;2643       return(SD_STREAM_READ_UNDERRUN);
;;;2644     }
;;;2645   
;;;2646     if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
;;;2647     {
;;;2648       return(SD_STREAM_WRITE_OVERRUN);
;;;2649     }
;;;2650   
;;;2651     if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
;;;2652     {
;;;2653       return(SD_CID_CSD_OVERWRITE);
;;;2654     }
;;;2655   
;;;2656     if (respR1 & SD_OCR_WP_ERASE_SKIP)
;;;2657     {
;;;2658       return(SD_WP_ERASE_SKIP);
;;;2659     }
;;;2660   
;;;2661     if (respR1 & SD_OCR_CARD_ECC_DISABLED)
;;;2662     {
;;;2663       return(SD_CARD_ECC_DISABLED);
;;;2664     }
;;;2665   
;;;2666     if (respR1 & SD_OCR_ERASE_RESET)
;;;2667     {
;;;2668       return(SD_ERASE_RESET);
;;;2669     }
;;;2670   
;;;2671     if (respR1 & SD_OCR_AKE_SEQ_ERROR)
;;;2672     {
;;;2673       return(SD_AKE_SEQ_ERROR);
;;;2674     }
;;;2675   
;;;2676     return(errorstatus);
;;;2677   }
000058  bd7c              POP      {r2-r6,pc}
                  |L9.90|
00005a  9800              LDR      r0,[sp,#0]            ;2550
00005c  f0000001          AND      r0,r0,#1              ;2550
000060  b128              CBZ      r0,|L9.110|
000062  2501              MOVS     r5,#1                 ;2552
000064  2001              MOVS     r0,#1                 ;2553
000066  f7fffffe          BL       SDIO_ClearFlag
00006a  4628              MOV      r0,r5                 ;2554
00006c  e7f4              B        |L9.88|
                  |L9.110|
00006e  f7fffffe          BL       SDIO_GetCommandResponse
000072  9000              STR      r0,[sp,#0]            ;2557
000074  9800              LDR      r0,[sp,#0]            ;2560
000076  280d              CMP      r0,#0xd               ;2560
000078  d002              BEQ      |L9.128|
00007a  2510              MOVS     r5,#0x10              ;2562
00007c  4628              MOV      r0,r5                 ;2563
00007e  e7eb              B        |L9.88|
                  |L9.128|
000080  f24050ff          MOV      r0,#0x5ff             ;2567
000084  f7fffffe          BL       SDIO_ClearFlag
000088  2000              MOVS     r0,#0                 ;2571
00008a  f7fffffe          BL       SDIO_GetResponse
00008e  9001              STR      r0,[sp,#4]            ;2571
000090  9801              LDR      r0,[sp,#4]            ;2574
000092  f3c02043          UBFX     r0,r0,#9,#4           ;2574
000096  7020              STRB     r0,[r4,#0]            ;2574
000098  493f              LDR      r1,|L9.408|
00009a  9801              LDR      r0,[sp,#4]            ;2576
00009c  4008              ANDS     r0,r0,r1              ;2576
00009e  b908              CBNZ     r0,|L9.164|
0000a0  4628              MOV      r0,r5                 ;2578
0000a2  e7d9              B        |L9.88|
                  |L9.164|
0000a4  9801              LDR      r0,[sp,#4]            ;2581
0000a6  f0004000          AND      r0,r0,#0x80000000     ;2581
0000aa  b108              CBZ      r0,|L9.176|
0000ac  201c              MOVS     r0,#0x1c              ;2583
0000ae  e7d3              B        |L9.88|
                  |L9.176|
0000b0  9801              LDR      r0,[sp,#4]            ;2586
0000b2  f0004080          AND      r0,r0,#0x40000000     ;2586
0000b6  b108              CBZ      r0,|L9.188|
0000b8  2009              MOVS     r0,#9                 ;2588
0000ba  e7cd              B        |L9.88|
                  |L9.188|
0000bc  9801              LDR      r0,[sp,#4]            ;2591
0000be  f0005000          AND      r0,r0,#0x20000000     ;2591
0000c2  b108              CBZ      r0,|L9.200|
0000c4  200a              MOVS     r0,#0xa               ;2593
0000c6  e7c7              B        |L9.88|
                  |L9.200|
0000c8  9801              LDR      r0,[sp,#4]            ;2596
0000ca  f0005080          AND      r0,r0,#0x10000000     ;2596
0000ce  b108              CBZ      r0,|L9.212|
0000d0  200b              MOVS     r0,#0xb               ;2598
0000d2  e7c1              B        |L9.88|
                  |L9.212|
0000d4  9801              LDR      r0,[sp,#4]            ;2601
0000d6  f0006000          AND      r0,r0,#0x8000000      ;2601
0000da  b108              CBZ      r0,|L9.224|
0000dc  200c              MOVS     r0,#0xc               ;2603
0000de  e7bb              B        |L9.88|
                  |L9.224|
0000e0  9801              LDR      r0,[sp,#4]            ;2606
0000e2  f0006080          AND      r0,r0,#0x4000000      ;2606
0000e6  b108              CBZ      r0,|L9.236|
0000e8  200d              MOVS     r0,#0xd               ;2608
0000ea  e7b5              B        |L9.88|
                  |L9.236|
0000ec  9801              LDR      r0,[sp,#4]            ;2611
0000ee  f0007080          AND      r0,r0,#0x1000000      ;2611
0000f2  b108              CBZ      r0,|L9.248|
0000f4  200e              MOVS     r0,#0xe               ;2613
0000f6  e7af              B        |L9.88|
                  |L9.248|
0000f8  9801              LDR      r0,[sp,#4]            ;2616
0000fa  f4000000          AND      r0,r0,#0x800000       ;2616
0000fe  b108              CBZ      r0,|L9.260|
000100  200f              MOVS     r0,#0xf               ;2618
000102  e7a9              B        |L9.88|
                  |L9.260|
000104  9801              LDR      r0,[sp,#4]            ;2621
000106  f4000080          AND      r0,r0,#0x400000       ;2621
00010a  b108              CBZ      r0,|L9.272|
00010c  2010              MOVS     r0,#0x10              ;2623
00010e  e7a3              B        |L9.88|
                  |L9.272|
000110  9801              LDR      r0,[sp,#4]            ;2626
000112  f4001000          AND      r0,r0,#0x200000       ;2626
000116  b108              CBZ      r0,|L9.284|
000118  2011              MOVS     r0,#0x11              ;2628
00011a  e79d              B        |L9.88|
                  |L9.284|
00011c  9801              LDR      r0,[sp,#4]            ;2631
00011e  f4001080          AND      r0,r0,#0x100000       ;2631
000122  b108              CBZ      r0,|L9.296|
000124  2012              MOVS     r0,#0x12              ;2633
000126  e797              B        |L9.88|
                  |L9.296|
000128  9801              LDR      r0,[sp,#4]            ;2636
00012a  f4002000          AND      r0,r0,#0x80000        ;2636
00012e  b108              CBZ      r0,|L9.308|
000130  2013              MOVS     r0,#0x13              ;2638
000132  e791              B        |L9.88|
                  |L9.308|
000134  9801              LDR      r0,[sp,#4]            ;2641
000136  f4002080          AND      r0,r0,#0x40000        ;2641
00013a  b108              CBZ      r0,|L9.320|
00013c  2014              MOVS     r0,#0x14              ;2643
00013e  e78b              B        |L9.88|
                  |L9.320|
000140  9801              LDR      r0,[sp,#4]            ;2646
000142  f4003000          AND      r0,r0,#0x20000        ;2646
000146  b108              CBZ      r0,|L9.332|
000148  2015              MOVS     r0,#0x15              ;2648
00014a  e785              B        |L9.88|
                  |L9.332|
00014c  9801              LDR      r0,[sp,#4]            ;2651
00014e  f4003080          AND      r0,r0,#0x10000        ;2651
000152  b108              CBZ      r0,|L9.344|
000154  2016              MOVS     r0,#0x16              ;2653
000156  e77f              B        |L9.88|
                  |L9.344|
000158  9801              LDR      r0,[sp,#4]            ;2656
00015a  f4004000          AND      r0,r0,#0x8000         ;2656
00015e  b108              CBZ      r0,|L9.356|
000160  2017              MOVS     r0,#0x17              ;2658
000162  e779              B        |L9.88|
                  |L9.356|
000164  9801              LDR      r0,[sp,#4]            ;2661
000166  f4004080          AND      r0,r0,#0x4000         ;2661
00016a  b108              CBZ      r0,|L9.368|
00016c  2018              MOVS     r0,#0x18              ;2663
00016e  e773              B        |L9.88|
                  |L9.368|
000170  9801              LDR      r0,[sp,#4]            ;2666
000172  f4005000          AND      r0,r0,#0x2000         ;2666
000176  b108              CBZ      r0,|L9.380|
000178  2019              MOVS     r0,#0x19              ;2668
00017a  e76d              B        |L9.88|
                  |L9.380|
00017c  9801              LDR      r0,[sp,#4]            ;2671
00017e  f0000008          AND      r0,r0,#8              ;2671
000182  b108              CBZ      r0,|L9.392|
000184  201a              MOVS     r0,#0x1a              ;2673
000186  e767              B        |L9.88|
                  |L9.392|
000188  4628              MOV      r0,r5                 ;2676
00018a  e765              B        |L9.88|
;;;2678   
                          ENDP

                  |L9.396|
                          DCD      ||RCA||
                  |L9.400|
                          DCD      SDIO_CmdInitStructure
                  |L9.404|
                          DCD      0x40012c34
                  |L9.408|
                          DCD      0xfdffe008

                          AREA ||i.SDEnWideBus||, CODE, READONLY, ALIGN=2

                  SDEnWideBus PROC
;;;2411     */
;;;2412   static SD_Error SDEnWideBus(FunctionalState NewState)
000000  b57c              PUSH     {r2-r6,lr}
;;;2413   {
000002  4605              MOV      r5,r0
;;;2414     SD_Error errorstatus = SD_OK;
000004  2400              MOVS     r4,#0
;;;2415   
;;;2416     uint32_t scr[2] = {0, 0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
00000a  9001              STR      r0,[sp,#4]
;;;2417   
;;;2418     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
00000c  f7fffffe          BL       SDIO_GetResponse
000010  f0007000          AND      r0,r0,#0x2000000
000014  b110              CBZ      r0,|L10.28|
;;;2419     {
;;;2420       errorstatus = SD_LOCK_UNLOCK_FAILED;
000016  240e              MOVS     r4,#0xe
;;;2421       return(errorstatus);
000018  4620              MOV      r0,r4
                  |L10.26|
;;;2422     }
;;;2423   
;;;2424     /*!< Get SCR Register */
;;;2425     errorstatus = FindSCR(RCA, scr);
;;;2426   
;;;2427     if (errorstatus != SD_OK)
;;;2428     {
;;;2429       return(errorstatus);
;;;2430     }
;;;2431   
;;;2432     /*!< If wide bus operation to be enabled */
;;;2433     if (NewState == ENABLE)
;;;2434     {
;;;2435       /*!< If requested card supports wide bus operation */
;;;2436       if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
;;;2437       {
;;;2438         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2439         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2440         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2441         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2442         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2443         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2444         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2445   
;;;2446         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2447   
;;;2448         if (errorstatus != SD_OK)
;;;2449         {
;;;2450           return(errorstatus);
;;;2451         }
;;;2452   
;;;2453         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2454         SDIO_CmdInitStructure.SDIO_Argument = 0x2;
;;;2455         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2456         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2457         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2458         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2459         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2460   
;;;2461         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2462   
;;;2463         if (errorstatus != SD_OK)
;;;2464         {
;;;2465           return(errorstatus);
;;;2466         }
;;;2467         return(errorstatus);
;;;2468       }
;;;2469       else
;;;2470       {
;;;2471         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2472         return(errorstatus);
;;;2473       }
;;;2474     }   /*!< If wide bus operation to be disabled */
;;;2475     else
;;;2476     {
;;;2477       /*!< If requested card supports 1 bit mode operation */
;;;2478       if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
;;;2479       {
;;;2480         /*!< Send CMD55 APP_CMD with argument as card's RCA.*/
;;;2481         SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;2482         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;2483         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2484         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2485         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2486         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2487   
;;;2488   
;;;2489         errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;2490   
;;;2491         if (errorstatus != SD_OK)
;;;2492         {
;;;2493           return(errorstatus);
;;;2494         }
;;;2495   
;;;2496         /*!< Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
;;;2497         SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;2498         SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_SD_SET_BUSWIDTH;
;;;2499         SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2500         SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2501         SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2502         SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2503   
;;;2504         errorstatus = CmdResp1Error(SD_CMD_APP_SD_SET_BUSWIDTH);
;;;2505   
;;;2506         if (errorstatus != SD_OK)
;;;2507         {
;;;2508           return(errorstatus);
;;;2509         }
;;;2510   
;;;2511         return(errorstatus);
;;;2512       }
;;;2513       else
;;;2514       {
;;;2515         errorstatus = SD_REQUEST_NOT_APPLICABLE;
;;;2516         return(errorstatus);
;;;2517       }
;;;2518     }
;;;2519   }
00001a  bd7c              POP      {r2-r6,pc}
                  |L10.28|
00001c  493d              LDR      r1,|L10.276|
00001e  8809              LDRH     r1,[r1,#0]            ;2425  ; RCA
000020  b288              UXTH     r0,r1                 ;2425
000022  4669              MOV      r1,sp                 ;2425
000024  f7fffffe          BL       FindSCR
000028  4604              MOV      r4,r0                 ;2425
00002a  b10c              CBZ      r4,|L10.48|
00002c  4620              MOV      r0,r4                 ;2429
00002e  e7f4              B        |L10.26|
                  |L10.48|
000030  2d01              CMP      r5,#1                 ;2433
000032  d136              BNE      |L10.162|
000034  9801              LDR      r0,[sp,#4]            ;2436
000036  f4002080          AND      r0,r0,#0x40000        ;2436
00003a  2800              CMP      r0,#0                 ;2436
00003c  d02e              BEQ      |L10.156|
00003e  4835              LDR      r0,|L10.276|
000040  8800              LDRH     r0,[r0,#0]            ;2439  ; RCA
000042  0400              LSLS     r0,r0,#16             ;2439
000044  4934              LDR      r1,|L10.280|
000046  6008              STR      r0,[r1,#0]            ;2439  ; SDIO_CmdInitStructure
000048  2037              MOVS     r0,#0x37              ;2440
00004a  6048              STR      r0,[r1,#4]            ;2440  ; SDIO_CmdInitStructure
00004c  2040              MOVS     r0,#0x40              ;2441
00004e  6088              STR      r0,[r1,#8]            ;2441  ; SDIO_CmdInitStructure
000050  2000              MOVS     r0,#0                 ;2442
000052  60c8              STR      r0,[r1,#0xc]          ;2442  ; SDIO_CmdInitStructure
000054  02a8              LSLS     r0,r5,#10             ;2443
000056  6108              STR      r0,[r1,#0x10]         ;2443  ; SDIO_CmdInitStructure
000058  4608              MOV      r0,r1                 ;2444
00005a  f7fffffe          BL       SDIO_SendCommand
00005e  2037              MOVS     r0,#0x37              ;2446
000060  f7fffffe          BL       CmdResp1Error
000064  4604              MOV      r4,r0                 ;2446
000066  b10c              CBZ      r4,|L10.108|
000068  4620              MOV      r0,r4                 ;2450
00006a  e7d6              B        |L10.26|
                  |L10.108|
00006c  2002              MOVS     r0,#2                 ;2454
00006e  492a              LDR      r1,|L10.280|
000070  6008              STR      r0,[r1,#0]            ;2454  ; SDIO_CmdInitStructure
000072  2006              MOVS     r0,#6                 ;2455
000074  6048              STR      r0,[r1,#4]            ;2455  ; SDIO_CmdInitStructure
000076  2040              MOVS     r0,#0x40              ;2456
000078  6088              STR      r0,[r1,#8]            ;2456  ; SDIO_CmdInitStructure
00007a  2000              MOVS     r0,#0                 ;2457
00007c  60c8              STR      r0,[r1,#0xc]          ;2457  ; SDIO_CmdInitStructure
00007e  f44f6080          MOV      r0,#0x400             ;2458
000082  6108              STR      r0,[r1,#0x10]         ;2458  ; SDIO_CmdInitStructure
000084  4608              MOV      r0,r1                 ;2459
000086  f7fffffe          BL       SDIO_SendCommand
00008a  2006              MOVS     r0,#6                 ;2461
00008c  f7fffffe          BL       CmdResp1Error
000090  4604              MOV      r4,r0                 ;2461
000092  b10c              CBZ      r4,|L10.152|
000094  4620              MOV      r0,r4                 ;2465
000096  e7c0              B        |L10.26|
                  |L10.152|
000098  4620              MOV      r0,r4                 ;2467
00009a  e7be              B        |L10.26|
                  |L10.156|
00009c  2425              MOVS     r4,#0x25              ;2471
00009e  4620              MOV      r0,r4                 ;2472
0000a0  e7bb              B        |L10.26|
                  |L10.162|
0000a2  9801              LDR      r0,[sp,#4]            ;2478
0000a4  f4003080          AND      r0,r0,#0x10000        ;2478
0000a8  b378              CBZ      r0,|L10.266|
0000aa  481a              LDR      r0,|L10.276|
0000ac  8800              LDRH     r0,[r0,#0]            ;2481  ; RCA
0000ae  0400              LSLS     r0,r0,#16             ;2481
0000b0  4919              LDR      r1,|L10.280|
0000b2  6008              STR      r0,[r1,#0]            ;2481  ; SDIO_CmdInitStructure
0000b4  2037              MOVS     r0,#0x37              ;2482
0000b6  6048              STR      r0,[r1,#4]            ;2482  ; SDIO_CmdInitStructure
0000b8  2040              MOVS     r0,#0x40              ;2483
0000ba  6088              STR      r0,[r1,#8]            ;2483  ; SDIO_CmdInitStructure
0000bc  2000              MOVS     r0,#0                 ;2484
0000be  60c8              STR      r0,[r1,#0xc]          ;2484  ; SDIO_CmdInitStructure
0000c0  f44f6080          MOV      r0,#0x400             ;2485
0000c4  6108              STR      r0,[r1,#0x10]         ;2485  ; SDIO_CmdInitStructure
0000c6  4608              MOV      r0,r1                 ;2486
0000c8  f7fffffe          BL       SDIO_SendCommand
0000cc  2037              MOVS     r0,#0x37              ;2489
0000ce  f7fffffe          BL       CmdResp1Error
0000d2  4604              MOV      r4,r0                 ;2489
0000d4  b10c              CBZ      r4,|L10.218|
0000d6  4620              MOV      r0,r4                 ;2493
0000d8  e79f              B        |L10.26|
                  |L10.218|
0000da  2000              MOVS     r0,#0                 ;2497
0000dc  490e              LDR      r1,|L10.280|
0000de  6008              STR      r0,[r1,#0]            ;2497  ; SDIO_CmdInitStructure
0000e0  2006              MOVS     r0,#6                 ;2498
0000e2  6048              STR      r0,[r1,#4]            ;2498  ; SDIO_CmdInitStructure
0000e4  2040              MOVS     r0,#0x40              ;2499
0000e6  6088              STR      r0,[r1,#8]            ;2499  ; SDIO_CmdInitStructure
0000e8  2000              MOVS     r0,#0                 ;2500
0000ea  60c8              STR      r0,[r1,#0xc]          ;2500  ; SDIO_CmdInitStructure
0000ec  f44f6080          MOV      r0,#0x400             ;2501
0000f0  6108              STR      r0,[r1,#0x10]         ;2501  ; SDIO_CmdInitStructure
0000f2  4608              MOV      r0,r1                 ;2502
0000f4  f7fffffe          BL       SDIO_SendCommand
0000f8  2006              MOVS     r0,#6                 ;2504
0000fa  f7fffffe          BL       CmdResp1Error
0000fe  4604              MOV      r4,r0                 ;2504
000100  b10c              CBZ      r4,|L10.262|
000102  4620              MOV      r0,r4                 ;2508
000104  e789              B        |L10.26|
                  |L10.262|
000106  4620              MOV      r0,r4                 ;2511
000108  e787              B        |L10.26|
                  |L10.266|
00010a  e7ff              B        |L10.268|
                  |L10.268|
00010c  2425              MOVS     r4,#0x25              ;2515
00010e  4620              MOV      r0,r4                 ;2516
000110  e783              B        |L10.26|
;;;2520   
                          ENDP

000112  0000              DCW      0x0000
                  |L10.276|
                          DCD      ||RCA||
                  |L10.280|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SDIO_IRQHandler||, CODE, READONLY, ALIGN=1

                  SDIO_IRQHandler PROC
;;;3151   */
;;;3152   void SDIO_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;3153   { 
;;;3154   #if uCOS_EN == 1 
;;;3155   	CPU_SR_ALLOC();
;;;3156   
;;;3157       CPU_CRITICAL_ENTER();
;;;3158       OSIntEnter();                                          
;;;3159       CPU_CRITICAL_EXIT();
;;;3160   #endif
;;;3161   	
;;;3162   	/* 处理所有的SDIO中断源 */
;;;3163   	SD_ProcessIRQSrc();
000002  f7fffffe          BL       SD_ProcessIRQSrc
;;;3164   
;;;3165   #if uCOS_EN == 1
;;;3166   	OSIntExit();                           
;;;3167   #endif	
;;;3168   }
000006  bd10              POP      {r4,pc}
;;;3169   
                          ENDP


                          AREA ||i.SDIO_Interrupts_Config||, CODE, READONLY, ALIGN=1

                  SDIO_Interrupts_Config PROC
;;;3128   */
;;;3129   void SDIO_Interrupts_Config(void)
000000  b508              PUSH     {r3,lr}
;;;3130   {
;;;3131     NVIC_InitTypeDef NVIC_InitStructure;
;;;3132   
;;;3133     NVIC_InitStructure.NVIC_IRQChannel = SDIO_IRQn;
000002  2031              MOVS     r0,#0x31
000004  f88d0000          STRB     r0,[sp,#0]
;;;3134     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
000008  2000              MOVS     r0,#0
00000a  f88d0001          STRB     r0,[sp,#1]
;;;3135     NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  f88d0002          STRB     r0,[sp,#2]
;;;3136     NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000012  2001              MOVS     r0,#1
000014  f88d0003          STRB     r0,[sp,#3]
;;;3137     NVIC_Init(&NVIC_InitStructure);
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       NVIC_Init
;;;3138   
;;;3139     NVIC_InitStructure.NVIC_IRQChannel = SD_SDIO_DMA_IRQn;
00001e  203b              MOVS     r0,#0x3b
000020  f88d0000          STRB     r0,[sp,#0]
;;;3140     NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
000024  2001              MOVS     r0,#1
000026  f88d0001          STRB     r0,[sp,#1]
;;;3141     NVIC_Init(&NVIC_InitStructure);
00002a  4668              MOV      r0,sp
00002c  f7fffffe          BL       NVIC_Init
;;;3142   }
000030  bd08              POP      {r3,pc}
;;;3143   
                          ENDP


                          AREA ||i.SD_DeInit||, CODE, READONLY, ALIGN=1

                  SD_DeInit PROC
;;;388      */
;;;389    void SD_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;390    { 
;;;391      SD_LowLevel_DeInit();
000002  f7fffffe          BL       SD_LowLevel_DeInit
;;;392    }
000006  bd10              POP      {r4,pc}
;;;393    
                          ENDP


                          AREA ||i.SD_Detect||, CODE, READONLY, ALIGN=2

                  SD_Detect PROC
;;;516     */
;;;517    uint8_t SD_Detect(void)
000000  b508              PUSH     {r3,lr}
;;;518    {
;;;519      __IO uint8_t status = SD_PRESENT;
000002  2001              MOVS     r0,#1
000004  9000              STR      r0,[sp,#0]
;;;520    
;;;521      /*!< Check GPIO to detect SD */
;;;522      if (GPIO_ReadInputDataBit(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != Bit_RESET)
000006  2104              MOVS     r1,#4
000008  4804              LDR      r0,|L14.28|
00000a  f7fffffe          BL       GPIO_ReadInputDataBit
00000e  b108              CBZ      r0,|L14.20|
;;;523      {
;;;524        status = SD_NOT_PRESENT;
000010  2000              MOVS     r0,#0
000012  9000              STR      r0,[sp,#0]
                  |L14.20|
;;;525      }
;;;526      return status;
000014  f89d0000          LDRB     r0,[sp,#0]
;;;527    }
000018  bd08              POP      {r3,pc}
;;;528    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
                          DCD      0x40021000

                          AREA ||i.SD_EnableWideBusOperation||, CODE, READONLY, ALIGN=2

                  SD_EnableWideBusOperation PROC
;;;1080     */
;;;1081   SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
000000  b570              PUSH     {r4-r6,lr}
;;;1082   {
000002  4604              MOV      r4,r0
;;;1083     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1084   
;;;1085     /*!< MMC Card doesn't support this feature */
;;;1086     if (SDIO_MULTIMEDIA_CARD == CardType)
000006  4820              LDR      r0,|L15.136|
000008  6800              LDR      r0,[r0,#0]  ; CardType
00000a  2803              CMP      r0,#3
00000c  d102              BNE      |L15.20|
;;;1087     {
;;;1088       errorstatus = SD_UNSUPPORTED_FEATURE;
00000e  2527              MOVS     r5,#0x27
;;;1089       return(errorstatus);
000010  4628              MOV      r0,r5
                  |L15.18|
;;;1090     }
;;;1091     else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1092     {
;;;1093       if (SDIO_BusWide_8b == WideMode)
;;;1094       {
;;;1095         errorstatus = SD_UNSUPPORTED_FEATURE;
;;;1096         return(errorstatus);
;;;1097       }
;;;1098       else if (SDIO_BusWide_4b == WideMode)
;;;1099       {
;;;1100         errorstatus = SDEnWideBus(ENABLE);
;;;1101   
;;;1102         if (SD_OK == errorstatus)
;;;1103         {
;;;1104           /*!< Configure the SDIO peripheral */
;;;1105           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1106           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1107           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1108           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1109           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
;;;1110           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1111           SDIO_Init(&SDIO_InitStructure);
;;;1112         }
;;;1113       }
;;;1114       else
;;;1115       {
;;;1116         errorstatus = SDEnWideBus(DISABLE);
;;;1117   
;;;1118         if (SD_OK == errorstatus)
;;;1119         {
;;;1120           /*!< Configure the SDIO peripheral */
;;;1121           SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
;;;1122           SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;1123           SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;1124           SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;1125           SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;1126           SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;1127           SDIO_Init(&SDIO_InitStructure);
;;;1128         }
;;;1129       }
;;;1130     }
;;;1131   
;;;1132     return(errorstatus);
;;;1133   }
000012  bd70              POP      {r4-r6,pc}
                  |L15.20|
000014  481c              LDR      r0,|L15.136|
000016  6800              LDR      r0,[r0,#0]            ;1091  ; CardType
000018  b138              CBZ      r0,|L15.42|
00001a  481b              LDR      r0,|L15.136|
00001c  6800              LDR      r0,[r0,#0]            ;1091  ; CardType
00001e  2801              CMP      r0,#1                 ;1091
000020  d003              BEQ      |L15.42|
000022  4819              LDR      r0,|L15.136|
000024  6800              LDR      r0,[r0,#0]            ;1091  ; CardType
000026  2802              CMP      r0,#2                 ;1091
000028  d12c              BNE      |L15.132|
                  |L15.42|
00002a  f5b45f80          CMP      r4,#0x1000            ;1093
00002e  d102              BNE      |L15.54|
000030  2527              MOVS     r5,#0x27              ;1095
000032  4628              MOV      r0,r5                 ;1096
000034  e7ed              B        |L15.18|
                  |L15.54|
000036  f5b46f00          CMP      r4,#0x800             ;1098
00003a  d113              BNE      |L15.100|
00003c  2001              MOVS     r0,#1                 ;1100
00003e  f7fffffe          BL       SDEnWideBus
000042  4605              MOV      r5,r0                 ;1100
000044  b9f5              CBNZ     r5,|L15.132|
000046  2000              MOVS     r0,#0                 ;1105
000048  4910              LDR      r1,|L15.140|
00004a  7508              STRB     r0,[r1,#0x14]         ;1105
00004c  6008              STR      r0,[r1,#0]            ;1106  ; SDIO_InitStructure
00004e  6048              STR      r0,[r1,#4]            ;1107  ; SDIO_InitStructure
000050  6088              STR      r0,[r1,#8]            ;1108  ; SDIO_InitStructure
000052  f44f6000          MOV      r0,#0x800             ;1109
000056  60c8              STR      r0,[r1,#0xc]          ;1109  ; SDIO_InitStructure
000058  2000              MOVS     r0,#0                 ;1110
00005a  6108              STR      r0,[r1,#0x10]         ;1110  ; SDIO_InitStructure
00005c  4608              MOV      r0,r1                 ;1111
00005e  f7fffffe          BL       SDIO_Init
000062  e00f              B        |L15.132|
                  |L15.100|
000064  2000              MOVS     r0,#0                 ;1116
000066  f7fffffe          BL       SDEnWideBus
00006a  4605              MOV      r5,r0                 ;1116
00006c  b955              CBNZ     r5,|L15.132|
00006e  2000              MOVS     r0,#0                 ;1121
000070  4906              LDR      r1,|L15.140|
000072  7508              STRB     r0,[r1,#0x14]         ;1121
000074  6008              STR      r0,[r1,#0]            ;1122  ; SDIO_InitStructure
000076  6048              STR      r0,[r1,#4]            ;1123  ; SDIO_InitStructure
000078  6088              STR      r0,[r1,#8]            ;1124  ; SDIO_InitStructure
00007a  60c8              STR      r0,[r1,#0xc]          ;1125  ; SDIO_InitStructure
00007c  6108              STR      r0,[r1,#0x10]         ;1126  ; SDIO_InitStructure
00007e  4608              MOV      r0,r1                 ;1127
000080  f7fffffe          BL       SDIO_Init
                  |L15.132|
000084  4628              MOV      r0,r5                 ;1132
000086  e7c4              B        |L15.18|
;;;1134   
                          ENDP

                  |L15.136|
                          DCD      CardType
                  |L15.140|
                          DCD      SDIO_InitStructure

                          AREA ||i.SD_Erase||, CODE, READONLY, ALIGN=2

                  SD_Erase PROC
;;;1757     */
;;;1758   SD_Error SD_Erase(uint64_t startaddr, uint64_t endaddr)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;1759   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1760     SD_Error errorstatus = SD_OK;
00000c  2400              MOVS     r4,#0
;;;1761     uint32_t delay = 0;
00000e  46a1              MOV      r9,r4
;;;1762     __IO uint32_t maxdelay = 0;
000010  2000              MOVS     r0,#0
000012  9001              STR      r0,[sp,#4]
;;;1763     uint8_t cardstate = 0;
000014  9000              STR      r0,[sp,#0]
;;;1764   
;;;1765     /*!< Check if the card coomnd class supports erase command */
;;;1766     if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
000016  4850              LDR      r0,|L16.344|
000018  6840              LDR      r0,[r0,#4]  ; CSD_Tab
00001a  2120              MOVS     r1,#0x20
00001c  ea015010          AND      r0,r1,r0,LSR #20
000020  b918              CBNZ     r0,|L16.42|
;;;1767     {
;;;1768       errorstatus = SD_REQUEST_NOT_APPLICABLE;
000022  2425              MOVS     r4,#0x25
;;;1769       return(errorstatus);
000024  4620              MOV      r0,r4
                  |L16.38|
;;;1770     }
;;;1771   
;;;1772     maxdelay = 120000 / ((SDIO->CLKCR & 0xFF) + 2);
;;;1773   
;;;1774     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
;;;1775     {
;;;1776       errorstatus = SD_LOCK_UNLOCK_FAILED;
;;;1777       return(errorstatus);
;;;1778     }
;;;1779   
;;;1780     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
;;;1781     {
;;;1782       startaddr /= 512;
;;;1783       endaddr /= 512;
;;;1784     }
;;;1785     
;;;1786     /*!< According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
;;;1787     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;1788     {
;;;1789       /*!< Send CMD32 SD_ERASE_GRP_START with argument as addr  */
;;;1790       SDIO_CmdInitStructure.SDIO_Argument =(uint32_t)startaddr;
;;;1791       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_START;
;;;1792       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1793       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1794       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1795       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1796   
;;;1797       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_START);
;;;1798       if (errorstatus != SD_OK)
;;;1799       {
;;;1800         return(errorstatus);
;;;1801       }
;;;1802   
;;;1803       /*!< Send CMD33 SD_ERASE_GRP_END with argument as addr  */
;;;1804       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)endaddr;
;;;1805       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_ERASE_GRP_END;
;;;1806       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1807       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1808       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1809       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1810   
;;;1811       errorstatus = CmdResp1Error(SD_CMD_SD_ERASE_GRP_END);
;;;1812       if (errorstatus != SD_OK)
;;;1813       {
;;;1814         return(errorstatus);
;;;1815       }
;;;1816     }
;;;1817   
;;;1818     /*!< Send CMD38 ERASE */
;;;1819     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1820     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ERASE;
;;;1821     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1822     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1823     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1824     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1825   
;;;1826     errorstatus = CmdResp1Error(SD_CMD_ERASE);
;;;1827   
;;;1828     if (errorstatus != SD_OK)
;;;1829     {
;;;1830       return(errorstatus);
;;;1831     }
;;;1832   
;;;1833     for (delay = 0; delay < maxdelay; delay++)
;;;1834     {}
;;;1835   
;;;1836     /*!< Wait till the card is in programming state */
;;;1837     errorstatus = IsCardProgramming(&cardstate);
;;;1838     delay = SD_DATATIMEOUT;
;;;1839     while ((delay > 0) && (errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == cardstate)))
;;;1840     {
;;;1841       errorstatus = IsCardProgramming(&cardstate);
;;;1842       delay--;
;;;1843     }
;;;1844   
;;;1845     return(errorstatus);
;;;1846   }
000026  e8bd87fc          POP      {r2-r10,pc}
                  |L16.42|
00002a  484c              LDR      r0,|L16.348|
00002c  6800              LDR      r0,[r0,#0]            ;1772
00002e  b2c0              UXTB     r0,r0                 ;1772
000030  1c80              ADDS     r0,r0,#2              ;1772
000032  494b              LDR      r1,|L16.352|
000034  fbb1f0f0          UDIV     r0,r1,r0              ;1772
000038  9001              STR      r0,[sp,#4]            ;1772
00003a  2000              MOVS     r0,#0                 ;1774
00003c  f7fffffe          BL       SDIO_GetResponse
000040  f0007000          AND      r0,r0,#0x2000000      ;1774
000044  b110              CBZ      r0,|L16.76|
000046  240e              MOVS     r4,#0xe               ;1776
000048  4620              MOV      r0,r4                 ;1777
00004a  e7ec              B        |L16.38|
                  |L16.76|
00004c  4845              LDR      r0,|L16.356|
00004e  6800              LDR      r0,[r0,#0]            ;1780  ; CardType
000050  2802              CMP      r0,#2                 ;1780
000052  d110              BNE      |L16.118|
000054  0202              LSLS     r2,r0,#8              ;1782
000056  2300              MOVS     r3,#0                 ;1782
000058  4628              MOV      r0,r5                 ;1782
00005a  4631              MOV      r1,r6                 ;1782
00005c  f7fffffe          BL       __aeabi_uldivmod
000060  4605              MOV      r5,r0                 ;1782
000062  460e              MOV      r6,r1                 ;1782
000064  f44f7200          MOV      r2,#0x200             ;1783
000068  2300              MOVS     r3,#0                 ;1783
00006a  4638              MOV      r0,r7                 ;1783
00006c  4641              MOV      r1,r8                 ;1783
00006e  f7fffffe          BL       __aeabi_uldivmod
000072  4607              MOV      r7,r0                 ;1783
000074  4688              MOV      r8,r1                 ;1783
                  |L16.118|
000076  483b              LDR      r0,|L16.356|
000078  6800              LDR      r0,[r0,#0]            ;1787  ; CardType
00007a  b138              CBZ      r0,|L16.140|
00007c  4839              LDR      r0,|L16.356|
00007e  6800              LDR      r0,[r0,#0]            ;1787  ; CardType
000080  2801              CMP      r0,#1                 ;1787
000082  d003              BEQ      |L16.140|
000084  4837              LDR      r0,|L16.356|
000086  6800              LDR      r0,[r0,#0]            ;1787  ; CardType
000088  2802              CMP      r0,#2                 ;1787
00008a  d12b              BNE      |L16.228|
                  |L16.140|
00008c  4836              LDR      r0,|L16.360|
00008e  6005              STR      r5,[r0,#0]            ;1790  ; SDIO_CmdInitStructure
000090  2020              MOVS     r0,#0x20              ;1791
000092  4935              LDR      r1,|L16.360|
000094  6048              STR      r0,[r1,#4]            ;1791  ; SDIO_CmdInitStructure
000096  2040              MOVS     r0,#0x40              ;1792
000098  6088              STR      r0,[r1,#8]            ;1792  ; SDIO_CmdInitStructure
00009a  2000              MOVS     r0,#0                 ;1793
00009c  60c8              STR      r0,[r1,#0xc]          ;1793  ; SDIO_CmdInitStructure
00009e  f44f6080          MOV      r0,#0x400             ;1794
0000a2  6108              STR      r0,[r1,#0x10]         ;1794  ; SDIO_CmdInitStructure
0000a4  4608              MOV      r0,r1                 ;1795
0000a6  f7fffffe          BL       SDIO_SendCommand
0000aa  2020              MOVS     r0,#0x20              ;1797
0000ac  f7fffffe          BL       CmdResp1Error
0000b0  4604              MOV      r4,r0                 ;1797
0000b2  b10c              CBZ      r4,|L16.184|
0000b4  4620              MOV      r0,r4                 ;1800
0000b6  e7b6              B        |L16.38|
                  |L16.184|
0000b8  482b              LDR      r0,|L16.360|
0000ba  6007              STR      r7,[r0,#0]            ;1804  ; SDIO_CmdInitStructure
0000bc  2021              MOVS     r0,#0x21              ;1805
0000be  492a              LDR      r1,|L16.360|
0000c0  6048              STR      r0,[r1,#4]            ;1805  ; SDIO_CmdInitStructure
0000c2  2040              MOVS     r0,#0x40              ;1806
0000c4  6088              STR      r0,[r1,#8]            ;1806  ; SDIO_CmdInitStructure
0000c6  2000              MOVS     r0,#0                 ;1807
0000c8  60c8              STR      r0,[r1,#0xc]          ;1807  ; SDIO_CmdInitStructure
0000ca  f44f6080          MOV      r0,#0x400             ;1808
0000ce  6108              STR      r0,[r1,#0x10]         ;1808  ; SDIO_CmdInitStructure
0000d0  4608              MOV      r0,r1                 ;1809
0000d2  f7fffffe          BL       SDIO_SendCommand
0000d6  2021              MOVS     r0,#0x21              ;1811
0000d8  f7fffffe          BL       CmdResp1Error
0000dc  4604              MOV      r4,r0                 ;1811
0000de  b10c              CBZ      r4,|L16.228|
0000e0  4620              MOV      r0,r4                 ;1814
0000e2  e7a0              B        |L16.38|
                  |L16.228|
0000e4  2000              MOVS     r0,#0                 ;1819
0000e6  4920              LDR      r1,|L16.360|
0000e8  6008              STR      r0,[r1,#0]            ;1819  ; SDIO_CmdInitStructure
0000ea  2026              MOVS     r0,#0x26              ;1820
0000ec  6048              STR      r0,[r1,#4]            ;1820  ; SDIO_CmdInitStructure
0000ee  2040              MOVS     r0,#0x40              ;1821
0000f0  6088              STR      r0,[r1,#8]            ;1821  ; SDIO_CmdInitStructure
0000f2  2000              MOVS     r0,#0                 ;1822
0000f4  60c8              STR      r0,[r1,#0xc]          ;1822  ; SDIO_CmdInitStructure
0000f6  f44f6080          MOV      r0,#0x400             ;1823
0000fa  6108              STR      r0,[r1,#0x10]         ;1823  ; SDIO_CmdInitStructure
0000fc  4608              MOV      r0,r1                 ;1824
0000fe  f7fffffe          BL       SDIO_SendCommand
000102  2026              MOVS     r0,#0x26              ;1826
000104  f7fffffe          BL       CmdResp1Error
000108  4604              MOV      r4,r0                 ;1826
00010a  b10c              CBZ      r4,|L16.272|
00010c  4620              MOV      r0,r4                 ;1830
00010e  e78a              B        |L16.38|
                  |L16.272|
000110  f04f0900          MOV      r9,#0                 ;1833
000114  e001              B        |L16.282|
                  |L16.278|
000116  f1090901          ADD      r9,r9,#1              ;1833
                  |L16.282|
00011a  9801              LDR      r0,[sp,#4]            ;1833
00011c  4581              CMP      r9,r0                 ;1833
00011e  d3fa              BCC      |L16.278|
000120  4668              MOV      r0,sp                 ;1837
000122  f7fffffe          BL       IsCardProgramming
000126  4604              MOV      r4,r0                 ;1837
000128  f04f39ff          MOV      r9,#0xffffffff        ;1838
00012c  e005              B        |L16.314|
                  |L16.302|
00012e  4668              MOV      r0,sp                 ;1841
000130  f7fffffe          BL       IsCardProgramming
000134  4604              MOV      r4,r0                 ;1841
000136  f1a90901          SUB      r9,r9,#1              ;1842
                  |L16.314|
00013a  f1b90f00          CMP      r9,#0                 ;1839
00013e  d008              BEQ      |L16.338|
000140  b93c              CBNZ     r4,|L16.338|
000142  f89d0000          LDRB     r0,[sp,#0]            ;1839
000146  2807              CMP      r0,#7                 ;1839
000148  d0f1              BEQ      |L16.302|
00014a  f89d0000          LDRB     r0,[sp,#0]            ;1839
00014e  2806              CMP      r0,#6                 ;1839
000150  d0ed              BEQ      |L16.302|
                  |L16.338|
000152  4620              MOV      r0,r4                 ;1845
000154  e767              B        |L16.38|
;;;1847   
                          ENDP

000156  0000              DCW      0x0000
                  |L16.344|
                          DCD      CSD_Tab
                  |L16.348|
                          DCD      0x40012c04
                  |L16.352|
                          DCD      0x0001d4c0
                  |L16.356|
                          DCD      CardType
                  |L16.360|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_GetCardInfo||, CODE, READONLY, ALIGN=2

                  SD_GetCardInfo PROC
;;;783      */
;;;784    SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
000000  b5f0              PUSH     {r4-r7,lr}
;;;785    {
000002  4601              MOV      r1,r0
;;;786      SD_Error errorstatus = SD_OK;
000004  2000              MOVS     r0,#0
;;;787      uint8_t tmp = 0;
000006  2200              MOVS     r2,#0
;;;788    
;;;789      cardinfo->CardType = (uint8_t)CardType;
000008  4bc0              LDR      r3,|L17.780|
00000a  781b              LDRB     r3,[r3,#0]  ; CardType
00000c  f8813056          STRB     r3,[r1,#0x56]
;;;790      cardinfo->RCA = (uint16_t)RCA;
000010  4bbf              LDR      r3,|L17.784|
000012  881b              LDRH     r3,[r3,#0]  ; RCA
000014  f8a13054          STRH     r3,[r1,#0x54]
;;;791    
;;;792      /*!< Byte 0 */
;;;793      tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
000018  4bbe              LDR      r3,|L17.788|
00001a  681b              LDR      r3,[r3,#0]  ; CSD_Tab
00001c  0e1a              LSRS     r2,r3,#24
;;;794      cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
00001e  0993              LSRS     r3,r2,#6
000020  700b              STRB     r3,[r1,#0]
;;;795      cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
000022  f3c20383          UBFX     r3,r2,#2,#4
000026  704b              STRB     r3,[r1,#1]
;;;796      cardinfo->SD_csd.Reserved1 = tmp & 0x03;
000028  f0020303          AND      r3,r2,#3
00002c  708b              STRB     r3,[r1,#2]
;;;797    
;;;798      /*!< Byte 1 */
;;;799      tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
00002e  4bb9              LDR      r3,|L17.788|
000030  681b              LDR      r3,[r3,#0]  ; CSD_Tab
000032  f3c34207          UBFX     r2,r3,#16,#8
;;;800      cardinfo->SD_csd.TAAC = tmp;
000036  70ca              STRB     r2,[r1,#3]
;;;801    
;;;802      /*!< Byte 2 */
;;;803      tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
000038  4bb6              LDR      r3,|L17.788|
00003a  881b              LDRH     r3,[r3,#0]  ; CSD_Tab
00003c  f3c32207          UBFX     r2,r3,#8,#8
;;;804      cardinfo->SD_csd.NSAC = tmp;
000040  710a              STRB     r2,[r1,#4]
;;;805    
;;;806      /*!< Byte 3 */
;;;807      tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
000042  4bb4              LDR      r3,|L17.788|
000044  781a              LDRB     r2,[r3,#0]  ; CSD_Tab
;;;808      cardinfo->SD_csd.MaxBusClkFrec = tmp;
000046  714a              STRB     r2,[r1,#5]
;;;809    
;;;810      /*!< Byte 4 */
;;;811      tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
000048  685b              LDR      r3,[r3,#4]  ; CSD_Tab
00004a  0e1a              LSRS     r2,r3,#24
;;;812      cardinfo->SD_csd.CardComdClasses = tmp << 4;
00004c  0113              LSLS     r3,r2,#4
00004e  80cb              STRH     r3,[r1,#6]
;;;813    
;;;814      /*!< Byte 5 */
;;;815      tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
000050  4bb0              LDR      r3,|L17.788|
000052  685b              LDR      r3,[r3,#4]  ; CSD_Tab
000054  f3c34207          UBFX     r2,r3,#16,#8
;;;816      cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
000058  88cb              LDRH     r3,[r1,#6]
00005a  ea431312          ORR      r3,r3,r2,LSR #4
00005e  80cb              STRH     r3,[r1,#6]
;;;817      cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
000060  f002030f          AND      r3,r2,#0xf
000064  720b              STRB     r3,[r1,#8]
;;;818    
;;;819      /*!< Byte 6 */
;;;820      tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
000066  4bab              LDR      r3,|L17.788|
000068  889b              LDRH     r3,[r3,#4]  ; CSD_Tab
00006a  f3c32207          UBFX     r2,r3,#8,#8
;;;821      cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
00006e  09d3              LSRS     r3,r2,#7
000070  724b              STRB     r3,[r1,#9]
;;;822      cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
000072  f3c21380          UBFX     r3,r2,#6,#1
000076  728b              STRB     r3,[r1,#0xa]
;;;823      cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
000078  f3c21340          UBFX     r3,r2,#5,#1
00007c  72cb              STRB     r3,[r1,#0xb]
;;;824      cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
00007e  f3c21300          UBFX     r3,r2,#4,#1
000082  730b              STRB     r3,[r1,#0xc]
;;;825      cardinfo->SD_csd.Reserved2 = 0; /*!< Reserved */
000084  2300              MOVS     r3,#0
000086  734b              STRB     r3,[r1,#0xd]
;;;826    
;;;827      if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
000088  4ba0              LDR      r3,|L17.780|
00008a  681b              LDR      r3,[r3,#0]  ; CardType
00008c  b11b              CBZ      r3,|L17.150|
00008e  4b9f              LDR      r3,|L17.780|
000090  681b              LDR      r3,[r3,#0]  ; CardType
000092  2b01              CMP      r3,#1
000094  d14f              BNE      |L17.310|
                  |L17.150|
;;;828      {
;;;829        cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
000096  0793              LSLS     r3,r2,#30
000098  0d1b              LSRS     r3,r3,#20
00009a  610b              STR      r3,[r1,#0x10]
;;;830    
;;;831        /*!< Byte 7 */
;;;832        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
00009c  4b9d              LDR      r3,|L17.788|
00009e  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;833        cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
0000a0  690b              LDR      r3,[r1,#0x10]
0000a2  ea430382          ORR      r3,r3,r2,LSL #2
0000a6  610b              STR      r3,[r1,#0x10]
;;;834    
;;;835        /*!< Byte 8 */
;;;836        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
0000a8  4b9a              LDR      r3,|L17.788|
0000aa  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000ac  0e1a              LSRS     r2,r3,#24
;;;837        cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
0000ae  690b              LDR      r3,[r1,#0x10]
0000b0  ea431392          ORR      r3,r3,r2,LSR #6
0000b4  610b              STR      r3,[r1,#0x10]
;;;838    
;;;839        cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
0000b6  f3c203c2          UBFX     r3,r2,#3,#3
0000ba  750b              STRB     r3,[r1,#0x14]
;;;840        cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
0000bc  f0020307          AND      r3,r2,#7
0000c0  754b              STRB     r3,[r1,#0x15]
;;;841    
;;;842        /*!< Byte 9 */
;;;843        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
0000c2  4b94              LDR      r3,|L17.788|
0000c4  689b              LDR      r3,[r3,#8]  ; CSD_Tab
0000c6  f3c34207          UBFX     r2,r3,#16,#8
;;;844        cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
0000ca  0953              LSRS     r3,r2,#5
0000cc  758b              STRB     r3,[r1,#0x16]
;;;845        cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
0000ce  f3c20382          UBFX     r3,r2,#2,#3
0000d2  75cb              STRB     r3,[r1,#0x17]
;;;846        cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
0000d4  0793              LSLS     r3,r2,#30
0000d6  0f5b              LSRS     r3,r3,#29
0000d8  760b              STRB     r3,[r1,#0x18]
;;;847        /*!< Byte 10 */
;;;848        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
0000da  4b8e              LDR      r3,|L17.788|
0000dc  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
0000de  f3c32207          UBFX     r2,r3,#8,#8
;;;849        cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
0000e2  7e0b              LDRB     r3,[r1,#0x18]
0000e4  ea4313d2          ORR      r3,r3,r2,LSR #7
0000e8  760b              STRB     r3,[r1,#0x18]
;;;850        
;;;851        cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
0000ea  690b              LDR      r3,[r1,#0x10]
0000ec  1c5b              ADDS     r3,r3,#1
0000ee  2400              MOVS     r4,#0
0000f0  e9c13412          STRD     r3,r4,[r1,#0x48]
;;;852        cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
0000f4  7e0b              LDRB     r3,[r1,#0x18]
0000f6  e9d14612          LDRD     r4,r6,[r1,#0x48]
0000fa  1c9b              ADDS     r3,r3,#2
0000fc  2501              MOVS     r5,#1
0000fe  fa05f303          LSL      r3,r5,r3
000102  17df              ASRS     r7,r3,#31
000104  fba45c03          UMULL    r5,r12,r4,r3
000108  fb06c303          MLA      r3,r6,r3,r12
00010c  fb043307          MLA      r3,r4,r7,r3
000110  e9c15312          STRD     r5,r3,[r1,#0x48]
;;;853        cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
000114  7a0c              LDRB     r4,[r1,#8]
000116  2301              MOVS     r3,#1
000118  40a3              LSLS     r3,r3,r4
00011a  650b              STR      r3,[r1,#0x50]
;;;854        cardinfo->CardCapacity *= cardinfo->CardBlockSize;
00011c  2700              MOVS     r7,#0
00011e  e9d15612          LDRD     r5,r6,[r1,#0x48]
000122  6d0b              LDR      r3,[r1,#0x50]
000124  fba54c03          UMULL    r4,r12,r5,r3
000128  fb06c303          MLA      r3,r6,r3,r12
00012c  fb053307          MLA      r3,r5,r7,r3
000130  e9c14312          STRD     r4,r3,[r1,#0x48]
000134  e036              B        |L17.420|
                  |L17.310|
;;;855      }
;;;856      else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000136  4b75              LDR      r3,|L17.780|
000138  681b              LDR      r3,[r3,#0]  ; CardType
00013a  2b02              CMP      r3,#2
00013c  d132              BNE      |L17.420|
;;;857      {
;;;858        /*!< Byte 7 */
;;;859        tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
00013e  4b75              LDR      r3,|L17.788|
000140  791a              LDRB     r2,[r3,#4]  ; CSD_Tab
;;;860        cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
000142  0693              LSLS     r3,r2,#26
000144  0a9b              LSRS     r3,r3,#10
000146  610b              STR      r3,[r1,#0x10]
;;;861    
;;;862        /*!< Byte 8 */
;;;863        tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
000148  4b72              LDR      r3,|L17.788|
00014a  689b              LDR      r3,[r3,#8]  ; CSD_Tab
00014c  0e1a              LSRS     r2,r3,#24
;;;864    
;;;865        cardinfo->SD_csd.DeviceSize |= (tmp << 8);
00014e  690b              LDR      r3,[r1,#0x10]
000150  ea432302          ORR      r3,r3,r2,LSL #8
000154  610b              STR      r3,[r1,#0x10]
;;;866    
;;;867        /*!< Byte 9 */
;;;868        tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
000156  4b6f              LDR      r3,|L17.788|
000158  689b              LDR      r3,[r3,#8]  ; CSD_Tab
00015a  f3c34207          UBFX     r2,r3,#16,#8
;;;869    
;;;870        cardinfo->SD_csd.DeviceSize |= (tmp);
00015e  690b              LDR      r3,[r1,#0x10]
000160  4313              ORRS     r3,r3,r2
000162  610b              STR      r3,[r1,#0x10]
;;;871    
;;;872        /*!< Byte 10 */
;;;873        tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
000164  4b6b              LDR      r3,|L17.788|
000166  891b              LDRH     r3,[r3,#8]  ; CSD_Tab
000168  f3c32207          UBFX     r2,r3,#8,#8
;;;874        
;;;875        cardinfo->CardCapacity = ((uint64_t)cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
00016c  690b              LDR      r3,[r1,#0x10]
00016e  2400              MOVS     r4,#0
000170  1c5b              ADDS     r3,r3,#1
000172  eb440704          ADC      r7,r4,r4
000176  f44f7600          MOV      r6,#0x200
00017a  2500              MOVS     r5,#0
00017c  fba34c06          UMULL    r4,r12,r3,r6
000180  fb07c606          MLA      r6,r7,r6,r12
000184  fb036605          MLA      r6,r3,r5,r6
000188  f44f6580          MOV      r5,#0x400
00018c  2700              MOVS     r7,#0
00018e  fba43c05          UMULL    r3,r12,r4,r5
000192  fb06c505          MLA      r5,r6,r5,r12
000196  fb045407          MLA      r4,r4,r7,r5
00019a  e9c13412          STRD     r3,r4,[r1,#0x48]
;;;876        cardinfo->CardBlockSize = 512;    
00019e  f44f7300          MOV      r3,#0x200
0001a2  650b              STR      r3,[r1,#0x50]
                  |L17.420|
;;;877      }
;;;878    
;;;879    
;;;880      cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
0001a4  f3c21380          UBFX     r3,r2,#6,#1
0001a8  f8013f19          STRB     r3,[r1,#0x19]!
;;;881      cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
0001ac  0693              LSLS     r3,r2,#26
0001ae  0e5b              LSRS     r3,r3,#25
0001b0  704b              STRB     r3,[r1,#1]
;;;882    
;;;883      /*!< Byte 11 */
;;;884      tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
0001b2  4b58              LDR      r3,|L17.788|
0001b4  7a1a              LDRB     r2,[r3,#8]  ; CSD_Tab
;;;885      cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
0001b6  784b              LDRB     r3,[r1,#1]
0001b8  ea4313d2          ORR      r3,r3,r2,LSR #7
0001bc  704b              STRB     r3,[r1,#1]
;;;886      cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
0001be  f002037f          AND      r3,r2,#0x7f
0001c2  708b              STRB     r3,[r1,#2]
;;;887    
;;;888      /*!< Byte 12 */
;;;889      tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
0001c4  4b53              LDR      r3,|L17.788|
0001c6  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001c8  0e1a              LSRS     r2,r3,#24
;;;890      cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
0001ca  09d3              LSRS     r3,r2,#7
0001cc  70cb              STRB     r3,[r1,#3]
;;;891      cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
0001ce  f3c21341          UBFX     r3,r2,#5,#2
0001d2  710b              STRB     r3,[r1,#4]
;;;892      cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
0001d4  f3c20382          UBFX     r3,r2,#2,#3
0001d8  714b              STRB     r3,[r1,#5]
;;;893      cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
0001da  0793              LSLS     r3,r2,#30
0001dc  0f1b              LSRS     r3,r3,#28
0001de  718b              STRB     r3,[r1,#6]
;;;894    
;;;895      /*!< Byte 13 */
;;;896      tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
0001e0  4b4c              LDR      r3,|L17.788|
0001e2  68db              LDR      r3,[r3,#0xc]  ; CSD_Tab
0001e4  f3c34207          UBFX     r2,r3,#16,#8
;;;897      cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
0001e8  798b              LDRB     r3,[r1,#6]
0001ea  ea431392          ORR      r3,r3,r2,LSR #6
0001ee  718b              STRB     r3,[r1,#6]
;;;898      cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
0001f0  f3c21340          UBFX     r3,r2,#5,#1
0001f4  71cb              STRB     r3,[r1,#7]
;;;899      cardinfo->SD_csd.Reserved3 = 0;
0001f6  2300              MOVS     r3,#0
0001f8  720b              STRB     r3,[r1,#8]
;;;900      cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
0001fa  f0020301          AND      r3,r2,#1
0001fe  724b              STRB     r3,[r1,#9]
;;;901    
;;;902      /*!< Byte 14 */
;;;903      tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
000200  4b44              LDR      r3,|L17.788|
000202  899b              LDRH     r3,[r3,#0xc]  ; CSD_Tab
000204  f3c32207          UBFX     r2,r3,#8,#8
;;;904      cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
000208  09d3              LSRS     r3,r2,#7
00020a  728b              STRB     r3,[r1,#0xa]
;;;905      cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
00020c  f3c21380          UBFX     r3,r2,#6,#1
000210  72cb              STRB     r3,[r1,#0xb]
;;;906      cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
000212  f3c21340          UBFX     r3,r2,#5,#1
000216  730b              STRB     r3,[r1,#0xc]
;;;907      cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
000218  f3c21300          UBFX     r3,r2,#4,#1
00021c  734b              STRB     r3,[r1,#0xd]
;;;908      cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
00021e  f3c20381          UBFX     r3,r2,#2,#2
000222  738b              STRB     r3,[r1,#0xe]
;;;909      cardinfo->SD_csd.ECC = (tmp & 0x03);
000224  f0020303          AND      r3,r2,#3
000228  73cb              STRB     r3,[r1,#0xf]
;;;910    
;;;911      /*!< Byte 15 */
;;;912      tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
00022a  4b3a              LDR      r3,|L17.788|
00022c  7b1a              LDRB     r2,[r3,#0xc]  ; CSD_Tab
;;;913      cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
00022e  0853              LSRS     r3,r2,#1
000230  740b              STRB     r3,[r1,#0x10]
;;;914      cardinfo->SD_csd.Reserved4 = 1;
000232  2301              MOVS     r3,#1
000234  744b              STRB     r3,[r1,#0x11]
;;;915    
;;;916    
;;;917      /*!< Byte 0 */
;;;918      tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
000236  4b38              LDR      r3,|L17.792|
000238  681b              LDR      r3,[r3,#0]  ; CID_Tab
00023a  0e1a              LSRS     r2,r3,#24
;;;919      cardinfo->SD_cid.ManufacturerID = tmp;
00023c  74ca              STRB     r2,[r1,#0x13]
00023e  3919              SUBS     r1,r1,#0x19
;;;920    
;;;921      /*!< Byte 1 */
;;;922      tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
000240  4b35              LDR      r3,|L17.792|
000242  681b              LDR      r3,[r3,#0]  ; CID_Tab
000244  f3c34207          UBFX     r2,r3,#16,#8
;;;923      cardinfo->SD_cid.OEM_AppliID = tmp << 8;
000248  0214              LSLS     r4,r2,#8
00024a  85cc              STRH     r4,[r1,#0x2e]
;;;924    
;;;925      /*!< Byte 2 */
;;;926      tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
00024c  4b32              LDR      r3,|L17.792|
00024e  881b              LDRH     r3,[r3,#0]  ; CID_Tab
000250  f3c32207          UBFX     r2,r3,#8,#8
;;;927      cardinfo->SD_cid.OEM_AppliID |= tmp;
000254  8dcb              LDRH     r3,[r1,#0x2e]
000256  4313              ORRS     r3,r3,r2
000258  85cb              STRH     r3,[r1,#0x2e]
;;;928    
;;;929      /*!< Byte 3 */
;;;930      tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
00025a  4b2f              LDR      r3,|L17.792|
00025c  781a              LDRB     r2,[r3,#0]  ; CID_Tab
;;;931      cardinfo->SD_cid.ProdName1 = tmp << 24;
00025e  0614              LSLS     r4,r2,#24
000260  630c              STR      r4,[r1,#0x30]
;;;932    
;;;933      /*!< Byte 4 */
;;;934      tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
000262  685b              LDR      r3,[r3,#4]  ; CID_Tab
000264  0e1a              LSRS     r2,r3,#24
;;;935      cardinfo->SD_cid.ProdName1 |= tmp << 16;
000266  6b0b              LDR      r3,[r1,#0x30]
000268  ea434402          ORR      r4,r3,r2,LSL #16
00026c  630c              STR      r4,[r1,#0x30]
;;;936    
;;;937      /*!< Byte 5 */
;;;938      tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
00026e  4b2a              LDR      r3,|L17.792|
000270  685b              LDR      r3,[r3,#4]  ; CID_Tab
000272  f3c34207          UBFX     r2,r3,#16,#8
;;;939      cardinfo->SD_cid.ProdName1 |= tmp << 8;
000276  6b0b              LDR      r3,[r1,#0x30]
000278  ea432402          ORR      r4,r3,r2,LSL #8
00027c  630c              STR      r4,[r1,#0x30]
;;;940    
;;;941      /*!< Byte 6 */
;;;942      tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
00027e  4b26              LDR      r3,|L17.792|
000280  889b              LDRH     r3,[r3,#4]  ; CID_Tab
000282  f3c32207          UBFX     r2,r3,#8,#8
;;;943      cardinfo->SD_cid.ProdName1 |= tmp;
000286  6b0b              LDR      r3,[r1,#0x30]
000288  4313              ORRS     r3,r3,r2
00028a  630b              STR      r3,[r1,#0x30]
;;;944    
;;;945      /*!< Byte 7 */
;;;946      tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
00028c  4b22              LDR      r3,|L17.792|
00028e  791a              LDRB     r2,[r3,#4]  ; CID_Tab
;;;947      cardinfo->SD_cid.ProdName2 = tmp;
000290  2334              MOVS     r3,#0x34
000292  545a              STRB     r2,[r3,r1]
;;;948    
;;;949      /*!< Byte 8 */
;;;950      tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
000294  4b20              LDR      r3,|L17.792|
000296  689b              LDR      r3,[r3,#8]  ; CID_Tab
000298  0e1a              LSRS     r2,r3,#24
;;;951      cardinfo->SD_cid.ProdRev = tmp;
00029a  2335              MOVS     r3,#0x35
00029c  545a              STRB     r2,[r3,r1]
;;;952    
;;;953      /*!< Byte 9 */
;;;954      tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
00029e  4b1e              LDR      r3,|L17.792|
0002a0  689b              LDR      r3,[r3,#8]  ; CID_Tab
0002a2  f3c34207          UBFX     r2,r3,#16,#8
;;;955      cardinfo->SD_cid.ProdSN = tmp << 24;
0002a6  0614              LSLS     r4,r2,#24
0002a8  638c              STR      r4,[r1,#0x38]
;;;956    
;;;957      /*!< Byte 10 */
;;;958      tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
0002aa  4b1b              LDR      r3,|L17.792|
0002ac  891b              LDRH     r3,[r3,#8]  ; CID_Tab
0002ae  f3c32207          UBFX     r2,r3,#8,#8
;;;959      cardinfo->SD_cid.ProdSN |= tmp << 16;
0002b2  6b8b              LDR      r3,[r1,#0x38]
0002b4  ea434402          ORR      r4,r3,r2,LSL #16
0002b8  638c              STR      r4,[r1,#0x38]
;;;960    
;;;961      /*!< Byte 11 */
;;;962      tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
0002ba  4b17              LDR      r3,|L17.792|
0002bc  7a1a              LDRB     r2,[r3,#8]  ; CID_Tab
;;;963      cardinfo->SD_cid.ProdSN |= tmp << 8;
0002be  6b8b              LDR      r3,[r1,#0x38]
0002c0  ea432402          ORR      r4,r3,r2,LSL #8
0002c4  638c              STR      r4,[r1,#0x38]
;;;964    
;;;965      /*!< Byte 12 */
;;;966      tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
0002c6  4b14              LDR      r3,|L17.792|
0002c8  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002ca  0e1a              LSRS     r2,r3,#24
;;;967      cardinfo->SD_cid.ProdSN |= tmp;
0002cc  6b8b              LDR      r3,[r1,#0x38]
0002ce  4313              ORRS     r3,r3,r2
0002d0  638b              STR      r3,[r1,#0x38]
;;;968    
;;;969      /*!< Byte 13 */
;;;970      tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
0002d2  4b11              LDR      r3,|L17.792|
0002d4  68db              LDR      r3,[r3,#0xc]  ; CID_Tab
0002d6  f3c34207          UBFX     r2,r3,#16,#8
;;;971      cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
0002da  233c              MOVS     r3,#0x3c
0002dc  5c5b              LDRB     r3,[r3,r1]
0002de  ea431412          ORR      r4,r3,r2,LSR #4
0002e2  233c              MOVS     r3,#0x3c
0002e4  545c              STRB     r4,[r3,r1]
;;;972      cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
0002e6  0713              LSLS     r3,r2,#28
0002e8  0d1c              LSRS     r4,r3,#20
0002ea  87cc              STRH     r4,[r1,#0x3e]
;;;973    
;;;974      /*!< Byte 14 */
;;;975      tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
0002ec  4b0a              LDR      r3,|L17.792|
0002ee  899b              LDRH     r3,[r3,#0xc]  ; CID_Tab
0002f0  f3c32207          UBFX     r2,r3,#8,#8
;;;976      cardinfo->SD_cid.ManufactDate |= tmp;
0002f4  8fcb              LDRH     r3,[r1,#0x3e]
0002f6  4313              ORRS     r3,r3,r2
0002f8  87cb              STRH     r3,[r1,#0x3e]
;;;977    
;;;978      /*!< Byte 15 */
;;;979      tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
0002fa  4b07              LDR      r3,|L17.792|
0002fc  7b1a              LDRB     r2,[r3,#0xc]  ; CID_Tab
;;;980      cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
0002fe  0854              LSRS     r4,r2,#1
000300  2340              MOVS     r3,#0x40
000302  545c              STRB     r4,[r3,r1]
;;;981      cardinfo->SD_cid.Reserved2 = 1;
000304  2401              MOVS     r4,#1
000306  2341              MOVS     r3,#0x41
000308  545c              STRB     r4,[r3,r1]
;;;982      
;;;983      return(errorstatus);
;;;984    }
00030a  bdf0              POP      {r4-r7,pc}
;;;985    
                          ENDP

                  |L17.780|
                          DCD      CardType
                  |L17.784|
                          DCD      ||RCA||
                  |L17.788|
                          DCD      CSD_Tab
                  |L17.792|
                          DCD      CID_Tab

                          AREA ||i.SD_GetCardStatus||, CODE, READONLY, ALIGN=2

                  SD_GetCardStatus PROC
;;;995      */
;;;996    SD_Error SD_GetCardStatus(SD_CardStatus *cardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;997    {
000002  4604              MOV      r4,r0
;;;998      SD_Error errorstatus = SD_OK;
000004  2600              MOVS     r6,#0
;;;999      uint8_t tmp = 0;
000006  2500              MOVS     r5,#0
;;;1000   
;;;1001     errorstatus = SD_SendSDStatus((uint32_t *)SDSTATUS_Tab);
000008  4824              LDR      r0,|L18.156|
00000a  f7fffffe          BL       SD_SendSDStatus
00000e  4606              MOV      r6,r0
;;;1002   
;;;1003     if (errorstatus  != SD_OK)
000010  b10e              CBZ      r6,|L18.22|
;;;1004     {
;;;1005       return(errorstatus);
000012  4630              MOV      r0,r6
                  |L18.20|
;;;1006     }
;;;1007   
;;;1008     /*!< Byte 0 */
;;;1009     tmp = (uint8_t)((SDSTATUS_Tab[0] & 0xC0) >> 6);
;;;1010     cardstatus->DAT_BUS_WIDTH = tmp;
;;;1011   
;;;1012     /*!< Byte 0 */
;;;1013     tmp = (uint8_t)((SDSTATUS_Tab[0] & 0x20) >> 5);
;;;1014     cardstatus->SECURED_MODE = tmp;
;;;1015   
;;;1016     /*!< Byte 2 */
;;;1017     tmp = (uint8_t)((SDSTATUS_Tab[2] & 0xFF));
;;;1018     cardstatus->SD_CARD_TYPE = tmp << 8;
;;;1019   
;;;1020     /*!< Byte 3 */
;;;1021     tmp = (uint8_t)((SDSTATUS_Tab[3] & 0xFF));
;;;1022     cardstatus->SD_CARD_TYPE |= tmp;
;;;1023   
;;;1024     /*!< Byte 4 */
;;;1025     tmp = (uint8_t)(SDSTATUS_Tab[4] & 0xFF);
;;;1026     cardstatus->SIZE_OF_PROTECTED_AREA = tmp << 24;
;;;1027   
;;;1028     /*!< Byte 5 */
;;;1029     tmp = (uint8_t)(SDSTATUS_Tab[5] & 0xFF);
;;;1030     cardstatus->SIZE_OF_PROTECTED_AREA |= tmp << 16;
;;;1031   
;;;1032     /*!< Byte 6 */
;;;1033     tmp = (uint8_t)(SDSTATUS_Tab[6] & 0xFF);
;;;1034     cardstatus->SIZE_OF_PROTECTED_AREA |= tmp << 8;
;;;1035   
;;;1036     /*!< Byte 7 */
;;;1037     tmp = (uint8_t)(SDSTATUS_Tab[7] & 0xFF);
;;;1038     cardstatus->SIZE_OF_PROTECTED_AREA |= tmp;
;;;1039   
;;;1040     /*!< Byte 8 */
;;;1041     tmp = (uint8_t)((SDSTATUS_Tab[8] & 0xFF));
;;;1042     cardstatus->SPEED_CLASS = tmp;
;;;1043   
;;;1044     /*!< Byte 9 */
;;;1045     tmp = (uint8_t)((SDSTATUS_Tab[9] & 0xFF));
;;;1046     cardstatus->PERFORMANCE_MOVE = tmp;
;;;1047   
;;;1048     /*!< Byte 10 */
;;;1049     tmp = (uint8_t)((SDSTATUS_Tab[10] & 0xF0) >> 4);
;;;1050     cardstatus->AU_SIZE = tmp;
;;;1051   
;;;1052     /*!< Byte 11 */
;;;1053     tmp = (uint8_t)(SDSTATUS_Tab[11] & 0xFF);
;;;1054     cardstatus->ERASE_SIZE = tmp << 8;
;;;1055   
;;;1056     /*!< Byte 12 */
;;;1057     tmp = (uint8_t)(SDSTATUS_Tab[12] & 0xFF);
;;;1058     cardstatus->ERASE_SIZE |= tmp;
;;;1059   
;;;1060     /*!< Byte 13 */
;;;1061     tmp = (uint8_t)((SDSTATUS_Tab[13] & 0xFC) >> 2);
;;;1062     cardstatus->ERASE_TIMEOUT = tmp;
;;;1063   
;;;1064     /*!< Byte 13 */
;;;1065     tmp = (uint8_t)((SDSTATUS_Tab[13] & 0x3));
;;;1066     cardstatus->ERASE_OFFSET = tmp;
;;;1067    
;;;1068     return(errorstatus);
;;;1069   }
000014  bd70              POP      {r4-r6,pc}
                  |L18.22|
000016  4821              LDR      r0,|L18.156|
000018  7800              LDRB     r0,[r0,#0]            ;1009  ; SDSTATUS_Tab
00001a  0985              LSRS     r5,r0,#6              ;1009
00001c  7025              STRB     r5,[r4,#0]            ;1010
00001e  481f              LDR      r0,|L18.156|
000020  7800              LDRB     r0,[r0,#0]            ;1013  ; SDSTATUS_Tab
000022  f3c01540          UBFX     r5,r0,#5,#1           ;1013
000026  7065              STRB     r5,[r4,#1]            ;1014
000028  481c              LDR      r0,|L18.156|
00002a  7885              LDRB     r5,[r0,#2]            ;1017  ; SDSTATUS_Tab
00002c  0228              LSLS     r0,r5,#8              ;1018
00002e  8060              STRH     r0,[r4,#2]            ;1018
000030  481a              LDR      r0,|L18.156|
000032  78c5              LDRB     r5,[r0,#3]            ;1021  ; SDSTATUS_Tab
000034  8860              LDRH     r0,[r4,#2]            ;1022
000036  4328              ORRS     r0,r0,r5              ;1022
000038  8060              STRH     r0,[r4,#2]            ;1022
00003a  4818              LDR      r0,|L18.156|
00003c  7905              LDRB     r5,[r0,#4]            ;1025  ; SDSTATUS_Tab
00003e  0628              LSLS     r0,r5,#24             ;1026
000040  6060              STR      r0,[r4,#4]            ;1026
000042  4816              LDR      r0,|L18.156|
000044  7945              LDRB     r5,[r0,#5]            ;1029  ; SDSTATUS_Tab
000046  6860              LDR      r0,[r4,#4]            ;1030
000048  ea404005          ORR      r0,r0,r5,LSL #16      ;1030
00004c  6060              STR      r0,[r4,#4]            ;1030
00004e  4813              LDR      r0,|L18.156|
000050  7985              LDRB     r5,[r0,#6]            ;1033  ; SDSTATUS_Tab
000052  6860              LDR      r0,[r4,#4]            ;1034
000054  ea402005          ORR      r0,r0,r5,LSL #8       ;1034
000058  6060              STR      r0,[r4,#4]            ;1034
00005a  4810              LDR      r0,|L18.156|
00005c  79c5              LDRB     r5,[r0,#7]            ;1037  ; SDSTATUS_Tab
00005e  6860              LDR      r0,[r4,#4]            ;1038
000060  4328              ORRS     r0,r0,r5              ;1038
000062  6060              STR      r0,[r4,#4]            ;1038
000064  480d              LDR      r0,|L18.156|
000066  7a05              LDRB     r5,[r0,#8]            ;1041  ; SDSTATUS_Tab
000068  7225              STRB     r5,[r4,#8]            ;1042
00006a  7a45              LDRB     r5,[r0,#9]            ;1045  ; SDSTATUS_Tab
00006c  7265              STRB     r5,[r4,#9]            ;1046
00006e  7a80              LDRB     r0,[r0,#0xa]          ;1049  ; SDSTATUS_Tab
000070  0905              LSRS     r5,r0,#4              ;1049
000072  72a5              STRB     r5,[r4,#0xa]          ;1050
000074  4809              LDR      r0,|L18.156|
000076  7ac5              LDRB     r5,[r0,#0xb]          ;1053  ; SDSTATUS_Tab
000078  0228              LSLS     r0,r5,#8              ;1054
00007a  81a0              STRH     r0,[r4,#0xc]          ;1054
00007c  4807              LDR      r0,|L18.156|
00007e  7b05              LDRB     r5,[r0,#0xc]          ;1057  ; SDSTATUS_Tab
000080  89a0              LDRH     r0,[r4,#0xc]          ;1058
000082  4328              ORRS     r0,r0,r5              ;1058
000084  81a0              STRH     r0,[r4,#0xc]          ;1058
000086  4805              LDR      r0,|L18.156|
000088  7b40              LDRB     r0,[r0,#0xd]          ;1061  ; SDSTATUS_Tab
00008a  0885              LSRS     r5,r0,#2              ;1061
00008c  73a5              STRB     r5,[r4,#0xe]          ;1062
00008e  4803              LDR      r0,|L18.156|
000090  7b40              LDRB     r0,[r0,#0xd]          ;1065  ; SDSTATUS_Tab
000092  f0000503          AND      r5,r0,#3              ;1065
000096  73e5              STRB     r5,[r4,#0xf]          ;1066
000098  4630              MOV      r0,r6                 ;1068
00009a  e7bb              B        |L18.20|
;;;1070   
                          ENDP

                  |L18.156|
                          DCD      SDSTATUS_Tab

                          AREA ||i.SD_GetState||, CODE, READONLY, ALIGN=1

                  SD_GetState PROC
;;;490      */
;;;491    SDCardState SD_GetState(void)
000000  b508              PUSH     {r3,lr}
;;;492    {
;;;493      uint32_t resp1 = 0;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;494      
;;;495      if(SD_Detect()== SD_PRESENT)
000006  f7fffffe          BL       SD_Detect
00000a  2801              CMP      r0,#1
00000c  d109              BNE      |L19.34|
;;;496      {
;;;497        if (SD_SendStatus(&resp1) != SD_OK)
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       SD_SendStatus
000014  b108              CBZ      r0,|L19.26|
;;;498        {
;;;499          return SD_CARD_ERROR;
000016  20ff              MOVS     r0,#0xff
                  |L19.24|
;;;500        }
;;;501        else
;;;502        {
;;;503          return (SDCardState)((resp1 >> 9) & 0x0F);
;;;504        }
;;;505      }
;;;506      else
;;;507      {
;;;508        return SD_CARD_ERROR;
;;;509      }
;;;510    }
000018  bd08              POP      {r3,pc}
                  |L19.26|
00001a  9800              LDR      r0,[sp,#0]            ;503
00001c  f3c02043          UBFX     r0,r0,#9,#4           ;503
000020  e7fa              B        |L19.24|
                  |L19.34|
000022  20ff              MOVS     r0,#0xff              ;508
000024  e7f8              B        |L19.24|
;;;511    
                          ENDP


                          AREA ||i.SD_GetStatus||, CODE, READONLY, ALIGN=1

                  SD_GetStatus PROC
;;;465      */
;;;466    SDTransferState SD_GetStatus(void)
000000  b510              PUSH     {r4,lr}
;;;467    {
;;;468      SDCardState cardstate =  SD_CARD_TRANSFER;
000002  2404              MOVS     r4,#4
;;;469    
;;;470      cardstate = SD_GetState();
000004  f7fffffe          BL       SD_GetState
000008  4604              MOV      r4,r0
;;;471      
;;;472      if (cardstate == SD_CARD_TRANSFER)
00000a  2c04              CMP      r4,#4
00000c  d101              BNE      |L20.18|
;;;473      {
;;;474        return(SD_TRANSFER_OK);
00000e  2000              MOVS     r0,#0
                  |L20.16|
;;;475      }
;;;476      else if(cardstate == SD_CARD_ERROR)
;;;477      {
;;;478        return (SD_TRANSFER_ERROR);
;;;479      }
;;;480      else
;;;481      {
;;;482        return(SD_TRANSFER_BUSY);
;;;483      }
;;;484    }
000010  bd10              POP      {r4,pc}
                  |L20.18|
000012  2cff              CMP      r4,#0xff              ;476
000014  d101              BNE      |L20.26|
000016  2002              MOVS     r0,#2                 ;478
000018  e7fa              B        |L20.16|
                  |L20.26|
00001a  2001              MOVS     r0,#1                 ;482
00001c  e7f8              B        |L20.16|
;;;485    
                          ENDP


                          AREA ||i.SD_GetTransferState||, CODE, READONLY, ALIGN=2

                  SD_GetTransferState PROC
;;;1717     */
;;;1718   SDTransferState SD_GetTransferState(void)
000000  4804              LDR      r0,|L21.20|
;;;1719   {
;;;1720     if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
000002  6800              LDR      r0,[r0,#0]
000004  f4005040          AND      r0,r0,#0x3000
000008  b108              CBZ      r0,|L21.14|
;;;1721     {
;;;1722       return(SD_TRANSFER_BUSY);
00000a  2001              MOVS     r0,#1
                  |L21.12|
;;;1723     }
;;;1724     else
;;;1725     {
;;;1726       return(SD_TRANSFER_OK);
;;;1727     }
;;;1728   }
00000c  4770              BX       lr
                  |L21.14|
00000e  2000              MOVS     r0,#0                 ;1726
000010  e7fc              B        |L21.12|
;;;1729   
                          ENDP

000012  0000              DCW      0x0000
                  |L21.20|
                          DCD      0x40012c34

                          AREA ||i.SD_HighSpeed||, CODE, READONLY, ALIGN=2

                  SD_HighSpeed PROC
;;;2813   */
;;;2814   SD_Error SD_HighSpeed (void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;2815   {
000002  b093              SUB      sp,sp,#0x4c
;;;2816     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;2817     uint32_t scr[2] = {0, 0};
000006  2000              MOVS     r0,#0
000008  9011              STR      r0,[sp,#0x44]
00000a  9012              STR      r0,[sp,#0x48]
;;;2818     uint32_t SD_SPEC = 0 ;
00000c  2700              MOVS     r7,#0
;;;2819     uint8_t hs[64] = {0} ;
00000e  2140              MOVS     r1,#0x40
000010  a801              ADD      r0,sp,#4
000012  f7fffffe          BL       __aeabi_memclr4
;;;2820     uint32_t  count = 0, *tempbuff = (uint32_t *)hs;
000016  2400              MOVS     r4,#0
000018  ae01              ADD      r6,sp,#4
;;;2821     TransferError = SD_OK;
00001a  2000              MOVS     r0,#0
00001c  495f              LDR      r1,|L22.412|
00001e  7008              STRB     r0,[r1,#0]
;;;2822     TransferEnd = 0;
000020  495f              LDR      r1,|L22.416|
000022  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;2823     StopCondition = 0;
000024  495f              LDR      r1,|L22.420|
000026  6008              STR      r0,[r1,#0]  ; StopCondition
;;;2824   
;;;2825     SDIO->DCTRL = 0x0;
000028  495f              LDR      r1,|L22.424|
00002a  6008              STR      r0,[r1,#0]
;;;2826   
;;;2827     /*!< Get SCR Register */
;;;2828     errorstatus = FindSCR(RCA, scr);
00002c  495f              LDR      r1,|L22.428|
00002e  8809              LDRH     r1,[r1,#0]  ; RCA
000030  b288              UXTH     r0,r1
000032  a911              ADD      r1,sp,#0x44
000034  f7fffffe          BL       FindSCR
000038  4605              MOV      r5,r0
;;;2829   
;;;2830     if (errorstatus != SD_OK)
00003a  b115              CBZ      r5,|L22.66|
;;;2831     {
;;;2832       return(errorstatus);
00003c  4628              MOV      r0,r5
                  |L22.62|
;;;2833     }
;;;2834   
;;;2835     /* Test the Version supported by the card*/ 
;;;2836     SD_SPEC = (scr[1]  & 0x01000000)||(scr[1]  & 0x02000000);
;;;2837   
;;;2838     if (SD_SPEC != SD_ALLZERO)
;;;2839     {
;;;2840       /* Set Block Size for Card */
;;;2841       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)64;
;;;2842       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;2843       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2844       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2845       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2846       SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;2847       errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;2848       if (errorstatus != SD_OK)
;;;2849       {
;;;2850         return(errorstatus);
;;;2851       }
;;;2852       SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;2853       SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;2854       SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b ;
;;;2855       SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;2856       SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;2857       SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;2858       SDIO_DataConfig(&SDIO_DataInitStructure);
;;;2859   
;;;2860       /*!< Send CMD6 switch mode */
;;;2861       SDIO_CmdInitStructure.SDIO_Argument = 0x80FFFF01;
;;;2862       SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_HS_SWITCH;
;;;2863       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;2864       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;2865       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;2866       SDIO_SendCommand(&SDIO_CmdInitStructure); 
;;;2867       errorstatus = CmdResp1Error(SD_CMD_HS_SWITCH);
;;;2868   
;;;2869       if (errorstatus != SD_OK)
;;;2870       {
;;;2871         return(errorstatus);
;;;2872       }
;;;2873       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;2874       {
;;;2875         if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;2876         {
;;;2877           for (count = 0; count < 8; count++)
;;;2878           {
;;;2879             *(tempbuff + count) = SDIO_ReadData();
;;;2880           }
;;;2881           tempbuff += 8;
;;;2882         }
;;;2883       }
;;;2884       
;;;2885       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;2886       {
;;;2887         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;2888         errorstatus = SD_DATA_TIMEOUT;
;;;2889         return(errorstatus);
;;;2890       }
;;;2891       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;2892       {
;;;2893         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;2894         errorstatus = SD_DATA_CRC_FAIL;
;;;2895         return(errorstatus);
;;;2896       }
;;;2897       else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;2898       {
;;;2899         SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;2900         errorstatus = SD_RX_OVERRUN;
;;;2901         return(errorstatus);
;;;2902       }
;;;2903       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;2904       {
;;;2905         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;2906         errorstatus = SD_START_BIT_ERR;
;;;2907         return(errorstatus);
;;;2908       }
;;;2909       count = SD_DATATIMEOUT;
;;;2910       while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET) && (count > 0))
;;;2911       {
;;;2912         *tempbuff = SDIO_ReadData();
;;;2913         tempbuff++;
;;;2914         count--;
;;;2915       }
;;;2916   
;;;2917       /*!< Clear all the static flags */
;;;2918       SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;2919   
;;;2920       /* Test if the switch mode HS is ok */
;;;2921       if ((hs[13]& 0x2)==0x2)
;;;2922       {
;;;2923         errorstatus=SD_OK;
;;;2924       }
;;;2925       else
;;;2926       {
;;;2927         errorstatus=SD_UNSUPPORTED_FEATURE ;
;;;2928       }  
;;;2929     }
;;;2930     return(errorstatus);
;;;2931   }
00003e  b013              ADD      sp,sp,#0x4c
000040  bdf0              POP      {r4-r7,pc}
                  |L22.66|
000042  9812              LDR      r0,[sp,#0x48]         ;2836
000044  f0007080          AND      r0,r0,#0x1000000      ;2836
000048  b918              CBNZ     r0,|L22.82|
00004a  9812              LDR      r0,[sp,#0x48]         ;2836
00004c  f0007000          AND      r0,r0,#0x2000000      ;2836
000050  b108              CBZ      r0,|L22.86|
                  |L22.82|
000052  2001              MOVS     r0,#1                 ;2836
000054  e000              B        |L22.88|
                  |L22.86|
000056  2000              MOVS     r0,#0                 ;2836
                  |L22.88|
000058  4607              MOV      r7,r0                 ;2836
00005a  2f00              CMP      r7,#0                 ;2838
00005c  d072              BEQ      |L22.324|
00005e  2040              MOVS     r0,#0x40              ;2841
000060  4953              LDR      r1,|L22.432|
000062  6008              STR      r0,[r1,#0]            ;2841  ; SDIO_CmdInitStructure
000064  2010              MOVS     r0,#0x10              ;2842
000066  6048              STR      r0,[r1,#4]            ;2842  ; SDIO_CmdInitStructure
000068  2040              MOVS     r0,#0x40              ;2843
00006a  6088              STR      r0,[r1,#8]            ;2843  ; SDIO_CmdInitStructure
00006c  2000              MOVS     r0,#0                 ;2844
00006e  60c8              STR      r0,[r1,#0xc]          ;2844  ; SDIO_CmdInitStructure
000070  f44f6080          MOV      r0,#0x400             ;2845
000074  6108              STR      r0,[r1,#0x10]         ;2845  ; SDIO_CmdInitStructure
000076  4608              MOV      r0,r1                 ;2846
000078  f7fffffe          BL       SDIO_SendCommand
00007c  2010              MOVS     r0,#0x10              ;2847
00007e  f7fffffe          BL       CmdResp1Error
000082  4605              MOV      r5,r0                 ;2847
000084  b10d              CBZ      r5,|L22.138|
000086  4628              MOV      r0,r5                 ;2850
000088  e7d9              B        |L22.62|
                  |L22.138|
00008a  f04f30ff          MOV      r0,#0xffffffff        ;2852
00008e  4949              LDR      r1,|L22.436|
000090  6008              STR      r0,[r1,#0]            ;2852  ; SDIO_DataInitStructure
000092  2040              MOVS     r0,#0x40              ;2853
000094  6048              STR      r0,[r1,#4]            ;2853  ; SDIO_DataInitStructure
000096  2060              MOVS     r0,#0x60              ;2854
000098  6088              STR      r0,[r1,#8]            ;2854  ; SDIO_DataInitStructure
00009a  2002              MOVS     r0,#2                 ;2855
00009c  60c8              STR      r0,[r1,#0xc]          ;2855  ; SDIO_DataInitStructure
00009e  2000              MOVS     r0,#0                 ;2856
0000a0  6108              STR      r0,[r1,#0x10]         ;2856  ; SDIO_DataInitStructure
0000a2  2001              MOVS     r0,#1                 ;2857
0000a4  6148              STR      r0,[r1,#0x14]         ;2857  ; SDIO_DataInitStructure
0000a6  4608              MOV      r0,r1                 ;2858
0000a8  f7fffffe          BL       SDIO_DataConfig
0000ac  4842              LDR      r0,|L22.440|
0000ae  4940              LDR      r1,|L22.432|
0000b0  6008              STR      r0,[r1,#0]            ;2861  ; SDIO_CmdInitStructure
0000b2  2006              MOVS     r0,#6                 ;2862
0000b4  6048              STR      r0,[r1,#4]            ;2862  ; SDIO_CmdInitStructure
0000b6  2040              MOVS     r0,#0x40              ;2863
0000b8  6088              STR      r0,[r1,#8]            ;2863  ; SDIO_CmdInitStructure
0000ba  2000              MOVS     r0,#0                 ;2864
0000bc  60c8              STR      r0,[r1,#0xc]          ;2864  ; SDIO_CmdInitStructure
0000be  f44f6080          MOV      r0,#0x400             ;2865
0000c2  6108              STR      r0,[r1,#0x10]         ;2865  ; SDIO_CmdInitStructure
0000c4  4608              MOV      r0,r1                 ;2866
0000c6  f7fffffe          BL       SDIO_SendCommand
0000ca  2006              MOVS     r0,#6                 ;2867
0000cc  f7fffffe          BL       CmdResp1Error
0000d0  4605              MOV      r5,r0                 ;2867
0000d2  b10d              CBZ      r5,|L22.216|
0000d4  4628              MOV      r0,r5                 ;2871
0000d6  e7b2              B        |L22.62|
                  |L22.216|
0000d8  e00e              B        |L22.248|
                  |L22.218|
0000da  f44f4000          MOV      r0,#0x8000            ;2875
0000de  f7fffffe          BL       SDIO_GetFlagStatus
0000e2  b148              CBZ      r0,|L22.248|
0000e4  2400              MOVS     r4,#0                 ;2877
0000e6  e004              B        |L22.242|
                  |L22.232|
0000e8  f7fffffe          BL       SDIO_ReadData
0000ec  f8460024          STR      r0,[r6,r4,LSL #2]     ;2879
0000f0  1c64              ADDS     r4,r4,#1              ;2877
                  |L22.242|
0000f2  2c08              CMP      r4,#8                 ;2877
0000f4  d3f8              BCC      |L22.232|
0000f6  3620              ADDS     r6,r6,#0x20           ;2881
                  |L22.248|
0000f8  482b              LDR      r0,|L22.424|
0000fa  3008              ADDS     r0,r0,#8              ;2873
0000fc  6800              LDR      r0,[r0,#0]            ;2873
0000fe  f240612a          MOV      r1,#0x62a             ;2873
000102  4008              ANDS     r0,r0,r1              ;2873
000104  2800              CMP      r0,#0                 ;2873
000106  d0e8              BEQ      |L22.218|
000108  2008              MOVS     r0,#8                 ;2885
00010a  f7fffffe          BL       SDIO_GetFlagStatus
00010e  b128              CBZ      r0,|L22.284|
000110  2008              MOVS     r0,#8                 ;2887
000112  f7fffffe          BL       SDIO_ClearFlag
000116  2504              MOVS     r5,#4                 ;2888
000118  4628              MOV      r0,r5                 ;2889
00011a  e790              B        |L22.62|
                  |L22.284|
00011c  2002              MOVS     r0,#2                 ;2891
00011e  f7fffffe          BL       SDIO_GetFlagStatus
000122  b128              CBZ      r0,|L22.304|
000124  2002              MOVS     r0,#2                 ;2893
000126  f7fffffe          BL       SDIO_ClearFlag
00012a  2502              MOVS     r5,#2                 ;2894
00012c  4628              MOV      r0,r5                 ;2895
00012e  e786              B        |L22.62|
                  |L22.304|
000130  2020              MOVS     r0,#0x20              ;2897
000132  f7fffffe          BL       SDIO_GetFlagStatus
000136  b130              CBZ      r0,|L22.326|
000138  2020              MOVS     r0,#0x20              ;2899
00013a  f7fffffe          BL       SDIO_ClearFlag
00013e  2506              MOVS     r5,#6                 ;2900
000140  4628              MOV      r0,r5                 ;2901
000142  e77c              B        |L22.62|
                  |L22.324|
000144  e027              B        |L22.406|
                  |L22.326|
000146  f44f7000          MOV      r0,#0x200             ;2903
00014a  f7fffffe          BL       SDIO_GetFlagStatus
00014e  b130              CBZ      r0,|L22.350|
000150  f44f7000          MOV      r0,#0x200             ;2905
000154  f7fffffe          BL       SDIO_ClearFlag
000158  2507              MOVS     r5,#7                 ;2906
00015a  4628              MOV      r0,r5                 ;2907
00015c  e76f              B        |L22.62|
                  |L22.350|
00015e  f04f34ff          MOV      r4,#0xffffffff        ;2909
000162  e004              B        |L22.366|
                  |L22.356|
000164  f7fffffe          BL       SDIO_ReadData
000168  6030              STR      r0,[r6,#0]            ;2912
00016a  1d36              ADDS     r6,r6,#4              ;2913
00016c  1e64              SUBS     r4,r4,#1              ;2914
                  |L22.366|
00016e  f44f1000          MOV      r0,#0x200000          ;2910
000172  f7fffffe          BL       SDIO_GetFlagStatus
000176  b108              CBZ      r0,|L22.380|
000178  2c00              CMP      r4,#0                 ;2910
00017a  d1f3              BNE      |L22.356|
                  |L22.380|
00017c  f24050ff          MOV      r0,#0x5ff             ;2918
000180  f7fffffe          BL       SDIO_ClearFlag
000184  f89d0011          LDRB     r0,[sp,#0x11]         ;2921
000188  f0000002          AND      r0,r0,#2              ;2921
00018c  2802              CMP      r0,#2                 ;2921
00018e  d101              BNE      |L22.404|
000190  2500              MOVS     r5,#0                 ;2923
000192  e000              B        |L22.406|
                  |L22.404|
000194  2527              MOVS     r5,#0x27              ;2927
                  |L22.406|
000196  4628              MOV      r0,r5                 ;2930
000198  e751              B        |L22.62|
;;;2932   
                          ENDP

00019a  0000              DCW      0x0000
                  |L22.412|
                          DCD      TransferError
                  |L22.416|
                          DCD      TransferEnd
                  |L22.420|
                          DCD      StopCondition
                  |L22.424|
                          DCD      0x40012c2c
                  |L22.428|
                          DCD      ||RCA||
                  |L22.432|
                          DCD      SDIO_CmdInitStructure
                  |L22.436|
                          DCD      SDIO_DataInitStructure
                  |L22.440|
                          DCD      0x80ffff01

                          AREA ||i.SD_Init||, CODE, READONLY, ALIGN=2

                  SD_Init PROC
;;;399      */
;;;400    SD_Error SD_Init(void)
000000  b508              PUSH     {r3,lr}
;;;401    {
;;;402      __IO SD_Error errorstatus = SD_OK;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;403    	
;;;404      
;;;405       /* 配置NVIC */
;;;406       SDIO_Interrupts_Config();
000006  f7fffffe          BL       SDIO_Interrupts_Config
;;;407    	
;;;408    /* SDIO Peripheral Low Level Init */
;;;409      SD_LowLevel_Init();
00000a  f7fffffe          BL       SD_LowLevel_Init
;;;410      
;;;411      SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;412    
;;;413      errorstatus = SD_PowerON();
000012  f7fffffe          BL       SD_PowerON
000016  9000              STR      r0,[sp,#0]
;;;414    
;;;415      if (errorstatus != SD_OK)
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  b110              CBZ      r0,|L23.36|
;;;416      {
;;;417        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;418        return(errorstatus);
00001e  f89d0000          LDRB     r0,[sp,#0]
                  |L23.34|
;;;419      }
;;;420    
;;;421      errorstatus = SD_InitializeCards();
;;;422    
;;;423      if (errorstatus != SD_OK)
;;;424      {
;;;425        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;426        return(errorstatus);
;;;427      }
;;;428    
;;;429      /*!< Configure the SDIO peripheral */
;;;430      /*!< SDIO_CK = SDIOCLK / (SDIO_TRANSFER_CLK_DIV + 2) */
;;;431      /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
;;;432      SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV;
;;;433      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
;;;434      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
;;;435      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
;;;436      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
;;;437      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
;;;438      SDIO_Init(&SDIO_InitStructure);
;;;439    
;;;440      /*----------------- Read CSD/CID MSD registers ------------------*/
;;;441      errorstatus = SD_GetCardInfo(&SDCardInfo);
;;;442    
;;;443      if (errorstatus == SD_OK)
;;;444      {
;;;445        /*----------------- Select Card --------------------------------*/
;;;446        errorstatus = SD_SelectDeselect((uint32_t) (SDCardInfo.RCA << 16));
;;;447      }
;;;448    
;;;449      if (errorstatus == SD_OK)
;;;450      {
;;;451        errorstatus = SD_EnableWideBusOperation(SDIO_BusWide_4b);
;;;452      }  
;;;453      
;;;454    
;;;455      return(errorstatus);
;;;456    }
000022  bd08              POP      {r3,pc}
                  |L23.36|
000024  f7fffffe          BL       SD_InitializeCards
000028  9000              STR      r0,[sp,#0]            ;421
00002a  f89d0000          LDRB     r0,[sp,#0]            ;423
00002e  b110              CBZ      r0,|L23.54|
000030  f89d0000          LDRB     r0,[sp,#0]            ;426
000034  e7f5              B        |L23.34|
                  |L23.54|
000036  2000              MOVS     r0,#0                 ;432
000038  4912              LDR      r1,|L23.132|
00003a  7508              STRB     r0,[r1,#0x14]         ;432
00003c  6008              STR      r0,[r1,#0]            ;433  ; SDIO_InitStructure
00003e  6048              STR      r0,[r1,#4]            ;434  ; SDIO_InitStructure
000040  6088              STR      r0,[r1,#8]            ;435  ; SDIO_InitStructure
000042  60c8              STR      r0,[r1,#0xc]          ;436  ; SDIO_InitStructure
000044  6108              STR      r0,[r1,#0x10]         ;437  ; SDIO_InitStructure
000046  4608              MOV      r0,r1                 ;438
000048  f7fffffe          BL       SDIO_Init
00004c  480e              LDR      r0,|L23.136|
00004e  f7fffffe          BL       SD_GetCardInfo
000052  9000              STR      r0,[sp,#0]            ;441
000054  f89d0000          LDRB     r0,[sp,#0]            ;443
000058  b940              CBNZ     r0,|L23.108|
00005a  480b              LDR      r0,|L23.136|
00005c  f8b00054          LDRH     r0,[r0,#0x54]         ;446  ; SDCardInfo
000060  0402              LSLS     r2,r0,#16             ;446
000062  4610              MOV      r0,r2                 ;446
000064  2100              MOVS     r1,#0                 ;446
000066  f7fffffe          BL       SD_SelectDeselect
00006a  9000              STR      r0,[sp,#0]            ;446
                  |L23.108|
00006c  f89d0000          LDRB     r0,[sp,#0]            ;449
000070  b920              CBNZ     r0,|L23.124|
000072  f44f6000          MOV      r0,#0x800             ;451
000076  f7fffffe          BL       SD_EnableWideBusOperation
00007a  9000              STR      r0,[sp,#0]            ;451
                  |L23.124|
00007c  f89d0000          LDRB     r0,[sp,#0]            ;455
000080  e7cf              B        |L23.34|
;;;457    
                          ENDP

000082  0000              DCW      0x0000
                  |L23.132|
                          DCD      SDIO_InitStructure
                  |L23.136|
                          DCD      SDCardInfo

                          AREA ||i.SD_InitializeCards||, CODE, READONLY, ALIGN=2

                  SD_InitializeCards PROC
;;;694      */
;;;695    SD_Error SD_InitializeCards(void)
000000  b538              PUSH     {r3-r5,lr}
;;;696    {
;;;697      SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;698      uint16_t rca = 0x01;
000004  2001              MOVS     r0,#1
000006  9000              STR      r0,[sp,#0]
;;;699    
;;;700      if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
000008  f7fffffe          BL       SDIO_GetPowerState
00000c  b910              CBNZ     r0,|L24.20|
;;;701      {
;;;702        errorstatus = SD_REQUEST_NOT_APPLICABLE;
00000e  2425              MOVS     r4,#0x25
;;;703        return(errorstatus);
000010  4620              MOV      r0,r4
                  |L24.18|
;;;704      }
;;;705    
;;;706      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;707      {
;;;708        /*!< Send CMD2 ALL_SEND_CID */
;;;709        SDIO_CmdInitStructure.SDIO_Argument = 0x0;
;;;710        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_ALL_SEND_CID;
;;;711        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;712        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;713        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;714        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;715    
;;;716        errorstatus = CmdResp2Error();
;;;717    
;;;718        if (SD_OK != errorstatus)
;;;719        {
;;;720          return(errorstatus);
;;;721        }
;;;722    
;;;723        CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;724        CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;725        CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;726        CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;727      }
;;;728      if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) ||  (SDIO_SECURE_DIGITAL_IO_COMBO_CARD == CardType)
;;;729          ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
;;;730      {
;;;731        /*!< Send CMD3 SET_REL_ADDR with argument 0 */
;;;732        /*!< SD Card publishes its RCA. */
;;;733        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;734        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_REL_ADDR;
;;;735        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;736        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;737        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;738        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;739    
;;;740        errorstatus = CmdResp6Error(SD_CMD_SET_REL_ADDR, &rca);
;;;741    
;;;742        if (SD_OK != errorstatus)
;;;743        {
;;;744          return(errorstatus);
;;;745        }
;;;746      }
;;;747    
;;;748      if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
;;;749      {
;;;750        RCA = rca;
;;;751    
;;;752        /*!< Send CMD9 SEND_CSD with argument as card's RCA */
;;;753        SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
;;;754        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_CSD;
;;;755        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
;;;756        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;757        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;758        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;759    
;;;760        errorstatus = CmdResp2Error();
;;;761    
;;;762        if (SD_OK != errorstatus)
;;;763        {
;;;764          return(errorstatus);
;;;765        }
;;;766    
;;;767        CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
;;;768        CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
;;;769        CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
;;;770        CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
;;;771      }
;;;772    
;;;773      errorstatus = SD_OK; /*!< All cards get intialized */
;;;774    
;;;775      return(errorstatus);
;;;776    }
000012  bd38              POP      {r3-r5,pc}
                  |L24.20|
000014  4844              LDR      r0,|L24.296|
000016  6800              LDR      r0,[r0,#0]            ;706  ; CardType
000018  2804              CMP      r0,#4                 ;706
00001a  d028              BEQ      |L24.110|
00001c  2000              MOVS     r0,#0                 ;709
00001e  4943              LDR      r1,|L24.300|
000020  6008              STR      r0,[r1,#0]            ;709  ; SDIO_CmdInitStructure
000022  2002              MOVS     r0,#2                 ;710
000024  6048              STR      r0,[r1,#4]            ;710  ; SDIO_CmdInitStructure
000026  20c0              MOVS     r0,#0xc0              ;711
000028  6088              STR      r0,[r1,#8]            ;711  ; SDIO_CmdInitStructure
00002a  2000              MOVS     r0,#0                 ;712
00002c  60c8              STR      r0,[r1,#0xc]          ;712  ; SDIO_CmdInitStructure
00002e  f44f6080          MOV      r0,#0x400             ;713
000032  6108              STR      r0,[r1,#0x10]         ;713  ; SDIO_CmdInitStructure
000034  4608              MOV      r0,r1                 ;714
000036  f7fffffe          BL       SDIO_SendCommand
00003a  f7fffffe          BL       CmdResp2Error
00003e  4604              MOV      r4,r0                 ;716
000040  b10c              CBZ      r4,|L24.70|
000042  4620              MOV      r0,r4                 ;720
000044  e7e5              B        |L24.18|
                  |L24.70|
000046  2000              MOVS     r0,#0                 ;723
000048  f7fffffe          BL       SDIO_GetResponse
00004c  4938              LDR      r1,|L24.304|
00004e  6008              STR      r0,[r1,#0]            ;723  ; CID_Tab
000050  2004              MOVS     r0,#4                 ;724
000052  f7fffffe          BL       SDIO_GetResponse
000056  4936              LDR      r1,|L24.304|
000058  6048              STR      r0,[r1,#4]            ;724  ; CID_Tab
00005a  2008              MOVS     r0,#8                 ;725
00005c  f7fffffe          BL       SDIO_GetResponse
000060  4933              LDR      r1,|L24.304|
000062  6088              STR      r0,[r1,#8]            ;725  ; CID_Tab
000064  200c              MOVS     r0,#0xc               ;726
000066  f7fffffe          BL       SDIO_GetResponse
00006a  4931              LDR      r1,|L24.304|
00006c  60c8              STR      r0,[r1,#0xc]          ;726  ; CID_Tab
                  |L24.110|
00006e  482e              LDR      r0,|L24.296|
000070  6800              LDR      r0,[r0,#0]            ;728  ; CardType
000072  b158              CBZ      r0,|L24.140|
000074  482c              LDR      r0,|L24.296|
000076  6800              LDR      r0,[r0,#0]            ;728  ; CardType
000078  2801              CMP      r0,#1                 ;728
00007a  d007              BEQ      |L24.140|
00007c  482a              LDR      r0,|L24.296|
00007e  6800              LDR      r0,[r0,#0]            ;728  ; CardType
000080  2806              CMP      r0,#6                 ;728
000082  d003              BEQ      |L24.140|
000084  4828              LDR      r0,|L24.296|
000086  6800              LDR      r0,[r0,#0]            ;729  ; CardType
000088  2802              CMP      r0,#2                 ;729
00008a  d116              BNE      |L24.186|
                  |L24.140|
00008c  2000              MOVS     r0,#0                 ;733
00008e  4927              LDR      r1,|L24.300|
000090  6008              STR      r0,[r1,#0]            ;733  ; SDIO_CmdInitStructure
000092  2003              MOVS     r0,#3                 ;734
000094  6048              STR      r0,[r1,#4]            ;734  ; SDIO_CmdInitStructure
000096  2040              MOVS     r0,#0x40              ;735
000098  6088              STR      r0,[r1,#8]            ;735  ; SDIO_CmdInitStructure
00009a  2000              MOVS     r0,#0                 ;736
00009c  60c8              STR      r0,[r1,#0xc]          ;736  ; SDIO_CmdInitStructure
00009e  f44f6080          MOV      r0,#0x400             ;737
0000a2  6108              STR      r0,[r1,#0x10]         ;737  ; SDIO_CmdInitStructure
0000a4  4608              MOV      r0,r1                 ;738
0000a6  f7fffffe          BL       SDIO_SendCommand
0000aa  4669              MOV      r1,sp                 ;740
0000ac  2003              MOVS     r0,#3                 ;740
0000ae  f7fffffe          BL       CmdResp6Error
0000b2  4604              MOV      r4,r0                 ;740
0000b4  b10c              CBZ      r4,|L24.186|
0000b6  4620              MOV      r0,r4                 ;744
0000b8  e7ab              B        |L24.18|
                  |L24.186|
0000ba  481b              LDR      r0,|L24.296|
0000bc  6800              LDR      r0,[r0,#0]            ;748  ; CardType
0000be  2804              CMP      r0,#4                 ;748
0000c0  d02e              BEQ      |L24.288|
0000c2  f8bd0000          LDRH     r0,[sp,#0]            ;750
0000c6  491b              LDR      r1,|L24.308|
0000c8  6008              STR      r0,[r1,#0]            ;750  ; RCA
0000ca  f8bd0000          LDRH     r0,[sp,#0]            ;753
0000ce  0400              LSLS     r0,r0,#16             ;753
0000d0  4916              LDR      r1,|L24.300|
0000d2  6008              STR      r0,[r1,#0]            ;753  ; SDIO_CmdInitStructure
0000d4  2009              MOVS     r0,#9                 ;754
0000d6  6048              STR      r0,[r1,#4]            ;754  ; SDIO_CmdInitStructure
0000d8  20c0              MOVS     r0,#0xc0              ;755
0000da  6088              STR      r0,[r1,#8]            ;755  ; SDIO_CmdInitStructure
0000dc  2000              MOVS     r0,#0                 ;756
0000de  60c8              STR      r0,[r1,#0xc]          ;756  ; SDIO_CmdInitStructure
0000e0  f44f6080          MOV      r0,#0x400             ;757
0000e4  6108              STR      r0,[r1,#0x10]         ;757  ; SDIO_CmdInitStructure
0000e6  4608              MOV      r0,r1                 ;758
0000e8  f7fffffe          BL       SDIO_SendCommand
0000ec  f7fffffe          BL       CmdResp2Error
0000f0  4604              MOV      r4,r0                 ;760
0000f2  b10c              CBZ      r4,|L24.248|
0000f4  4620              MOV      r0,r4                 ;764
0000f6  e78c              B        |L24.18|
                  |L24.248|
0000f8  2000              MOVS     r0,#0                 ;767
0000fa  f7fffffe          BL       SDIO_GetResponse
0000fe  490e              LDR      r1,|L24.312|
000100  6008              STR      r0,[r1,#0]            ;767  ; CSD_Tab
000102  2004              MOVS     r0,#4                 ;768
000104  f7fffffe          BL       SDIO_GetResponse
000108  490b              LDR      r1,|L24.312|
00010a  6048              STR      r0,[r1,#4]            ;768  ; CSD_Tab
00010c  2008              MOVS     r0,#8                 ;769
00010e  f7fffffe          BL       SDIO_GetResponse
000112  4909              LDR      r1,|L24.312|
000114  6088              STR      r0,[r1,#8]            ;769  ; CSD_Tab
000116  200c              MOVS     r0,#0xc               ;770
000118  f7fffffe          BL       SDIO_GetResponse
00011c  4906              LDR      r1,|L24.312|
00011e  60c8              STR      r0,[r1,#0xc]          ;770  ; CSD_Tab
                  |L24.288|
000120  2400              MOVS     r4,#0                 ;773
000122  4620              MOV      r0,r4                 ;775
000124  e775              B        |L24.18|
;;;777    
                          ENDP

000126  0000              DCW      0x0000
                  |L24.296|
                          DCD      CardType
                  |L24.300|
                          DCD      SDIO_CmdInitStructure
                  |L24.304|
                          DCD      CID_Tab
                  |L24.308|
                          DCD      ||RCA||
                  |L24.312|
                          DCD      CSD_Tab

                          AREA ||i.SD_LowLevel_DMA_RxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_RxConfig PROC
;;;3076     */
;;;3077   void SD_LowLevel_DMA_RxConfig(uint32_t *BufferDST, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;3078   {
000002  b08f              SUB      sp,sp,#0x3c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;3079     DMA_InitTypeDef SDDMA_InitStructure;
;;;3080   
;;;3081     DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
000008  f04f51fa          MOV      r1,#0x1f400000
00000c  481d              LDR      r0,|L25.132|
00000e  f7fffffe          BL       DMA_ClearFlag
;;;3082   
;;;3083     /* DMA2 Stream3  or Stream6 disable */
;;;3084     DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
000012  2100              MOVS     r1,#0
000014  481b              LDR      r0,|L25.132|
000016  f7fffffe          BL       DMA_Cmd
;;;3085   
;;;3086     /* DMA2 Stream3 or Stream6 Config */
;;;3087     DMA_DeInit(SD_SDIO_DMA_STREAM);
00001a  481a              LDR      r0,|L25.132|
00001c  f7fffffe          BL       DMA_DeInit
;;;3088   
;;;3089     SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
000020  f04f6000          MOV      r0,#0x8000000
000024  9000              STR      r0,[sp,#0]
;;;3090     SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000026  4818              LDR      r0,|L25.136|
000028  9001              STR      r0,[sp,#4]
;;;3091     SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferDST;
00002a  9502              STR      r5,[sp,#8]
;;;3092     SDDMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
00002c  2000              MOVS     r0,#0
00002e  9003              STR      r0,[sp,#0xc]
;;;3093     SDDMA_InitStructure.DMA_BufferSize = BufferSize;
000030  9404              STR      r4,[sp,#0x10]
;;;3094     SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000032  9005              STR      r0,[sp,#0x14]
;;;3095     SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000034  f44f6080          MOV      r0,#0x400
000038  9006              STR      r0,[sp,#0x18]
;;;3096     SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00003a  0080              LSLS     r0,r0,#2
00003c  9007              STR      r0,[sp,#0x1c]
;;;3097     SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
00003e  2000              MOVS     r0,#0
000040  9008              STR      r0,[sp,#0x20]
;;;3098     SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000042  9009              STR      r0,[sp,#0x24]
;;;3099     SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
000044  f44f3040          MOV      r0,#0x30000
000048  900a              STR      r0,[sp,#0x28]
;;;3100     SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
00004a  2004              MOVS     r0,#4
00004c  900b              STR      r0,[sp,#0x2c]
;;;3101     SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
00004e  2003              MOVS     r0,#3
000050  900c              STR      r0,[sp,#0x30]
;;;3102     SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
000052  f44f0000          MOV      r0,#0x800000
000056  900d              STR      r0,[sp,#0x34]
;;;3103     SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
000058  1080              ASRS     r0,r0,#2
00005a  900e              STR      r0,[sp,#0x38]
;;;3104     DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
00005c  4669              MOV      r1,sp
00005e  4809              LDR      r0,|L25.132|
000060  f7fffffe          BL       DMA_Init
;;;3105     DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
000064  2201              MOVS     r2,#1
000066  2110              MOVS     r1,#0x10
000068  4806              LDR      r0,|L25.132|
00006a  f7fffffe          BL       DMA_ITConfig
;;;3106     DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
00006e  2120              MOVS     r1,#0x20
000070  4804              LDR      r0,|L25.132|
000072  f7fffffe          BL       DMA_FlowControllerConfig
;;;3107   
;;;3108     /* DMA2 Stream3 or Stream6 enable */
;;;3109     DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
000076  2101              MOVS     r1,#1
000078  4802              LDR      r0,|L25.132|
00007a  f7fffffe          BL       DMA_Cmd
;;;3110   }
00007e  b00f              ADD      sp,sp,#0x3c
000080  bd30              POP      {r4,r5,pc}
;;;3111   
                          ENDP

000082  0000              DCW      0x0000
                  |L25.132|
                          DCD      0x40026458
                  |L25.136|
                          DCD      0x40012c80

                          AREA ||i.SD_LowLevel_DMA_TxConfig||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DMA_TxConfig PROC
;;;3034     */
;;;3035   void SD_LowLevel_DMA_TxConfig(uint32_t *BufferSRC, uint32_t BufferSize)
000000  b530              PUSH     {r4,r5,lr}
;;;3036   {
000002  b08f              SUB      sp,sp,#0x3c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;3037     DMA_InitTypeDef SDDMA_InitStructure;
;;;3038   
;;;3039     DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_FEIF | SD_SDIO_DMA_FLAG_DMEIF | SD_SDIO_DMA_FLAG_TEIF | SD_SDIO_DMA_FLAG_HTIF | SD_SDIO_DMA_FLAG_TCIF);
000008  f04f51fa          MOV      r1,#0x1f400000
00000c  481d              LDR      r0,|L26.132|
00000e  f7fffffe          BL       DMA_ClearFlag
;;;3040   
;;;3041     /* DMA2 Stream3  or Stream6 disable */
;;;3042     DMA_Cmd(SD_SDIO_DMA_STREAM, DISABLE);
000012  2100              MOVS     r1,#0
000014  481b              LDR      r0,|L26.132|
000016  f7fffffe          BL       DMA_Cmd
;;;3043   
;;;3044     /* DMA2 Stream3  or Stream6 Config */
;;;3045     DMA_DeInit(SD_SDIO_DMA_STREAM);
00001a  481a              LDR      r0,|L26.132|
00001c  f7fffffe          BL       DMA_DeInit
;;;3046   
;;;3047     SDDMA_InitStructure.DMA_Channel = SD_SDIO_DMA_CHANNEL;
000020  f04f6000          MOV      r0,#0x8000000
000024  9000              STR      r0,[sp,#0]
;;;3048     SDDMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_ADDRESS;
000026  4818              LDR      r0,|L26.136|
000028  9001              STR      r0,[sp,#4]
;;;3049     SDDMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)BufferSRC;
00002a  9502              STR      r5,[sp,#8]
;;;3050     SDDMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
00002c  2040              MOVS     r0,#0x40
00002e  9003              STR      r0,[sp,#0xc]
;;;3051     SDDMA_InitStructure.DMA_BufferSize = BufferSize;
000030  9404              STR      r4,[sp,#0x10]
;;;3052     SDDMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000032  2000              MOVS     r0,#0
000034  9005              STR      r0,[sp,#0x14]
;;;3053     SDDMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000036  f44f6080          MOV      r0,#0x400
00003a  9006              STR      r0,[sp,#0x18]
;;;3054     SDDMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
00003c  0080              LSLS     r0,r0,#2
00003e  9007              STR      r0,[sp,#0x1c]
;;;3055     SDDMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000040  2000              MOVS     r0,#0
000042  9008              STR      r0,[sp,#0x20]
;;;3056     SDDMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000044  9009              STR      r0,[sp,#0x24]
;;;3057     SDDMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
000046  f44f3040          MOV      r0,#0x30000
00004a  900a              STR      r0,[sp,#0x28]
;;;3058     SDDMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Enable;
00004c  2004              MOVS     r0,#4
00004e  900b              STR      r0,[sp,#0x2c]
;;;3059     SDDMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_Full;
000050  2003              MOVS     r0,#3
000052  900c              STR      r0,[sp,#0x30]
;;;3060     SDDMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_INC4;
000054  f44f0000          MOV      r0,#0x800000
000058  900d              STR      r0,[sp,#0x34]
;;;3061     SDDMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_INC4;
00005a  1080              ASRS     r0,r0,#2
00005c  900e              STR      r0,[sp,#0x38]
;;;3062     DMA_Init(SD_SDIO_DMA_STREAM, &SDDMA_InitStructure);
00005e  4669              MOV      r1,sp
000060  4808              LDR      r0,|L26.132|
000062  f7fffffe          BL       DMA_Init
;;;3063     DMA_ITConfig(SD_SDIO_DMA_STREAM, DMA_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  2110              MOVS     r1,#0x10
00006a  4806              LDR      r0,|L26.132|
00006c  f7fffffe          BL       DMA_ITConfig
;;;3064     DMA_FlowControllerConfig(SD_SDIO_DMA_STREAM, DMA_FlowCtrl_Peripheral);
000070  2120              MOVS     r1,#0x20
000072  4804              LDR      r0,|L26.132|
000074  f7fffffe          BL       DMA_FlowControllerConfig
;;;3065   
;;;3066     /* DMA2 Stream3  or Stream6 enable */
;;;3067     DMA_Cmd(SD_SDIO_DMA_STREAM, ENABLE);
000078  2101              MOVS     r1,#1
00007a  4802              LDR      r0,|L26.132|
00007c  f7fffffe          BL       DMA_Cmd
;;;3068       
;;;3069   }
000080  b00f              ADD      sp,sp,#0x3c
000082  bd30              POP      {r4,r5,pc}
;;;3070   
                          ENDP

                  |L26.132|
                          DCD      0x40026458
                  |L26.136|
                          DCD      0x40012c80

                          AREA ||i.SD_LowLevel_DeInit||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_DeInit PROC
;;;2940     */
;;;2941   void SD_LowLevel_DeInit(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;2942   {
;;;2943     GPIO_InitTypeDef  GPIO_InitStructure;
;;;2944     
;;;2945     /*!< Disable SDIO Clock */
;;;2946     SDIO_ClockCmd(DISABLE);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       SDIO_ClockCmd
;;;2947     
;;;2948     /*!< Set Power State to OFF */
;;;2949     SDIO_SetPowerState(SDIO_PowerState_OFF);
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_SetPowerState
;;;2950   
;;;2951     /*!< DeInitializes the SDIO peripheral */
;;;2952     SDIO_DeInit();
00000e  f7fffffe          BL       SDIO_DeInit
;;;2953     
;;;2954     /* Disable the SDIO APB2 Clock */
;;;2955     RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, DISABLE);
000012  2100              MOVS     r1,#0
000014  f44f6000          MOV      r0,#0x800
000018  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;2956   
;;;2957     GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_MCO);
00001c  2200              MOVS     r2,#0
00001e  2108              MOVS     r1,#8
000020  481a              LDR      r0,|L27.140|
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;2958     GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_MCO);
000026  2200              MOVS     r2,#0
000028  2109              MOVS     r1,#9
00002a  4818              LDR      r0,|L27.140|
00002c  f7fffffe          BL       GPIO_PinAFConfig
;;;2959     GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_MCO);
000030  2200              MOVS     r2,#0
000032  210a              MOVS     r1,#0xa
000034  4815              LDR      r0,|L27.140|
000036  f7fffffe          BL       GPIO_PinAFConfig
;;;2960     GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_MCO);
00003a  2200              MOVS     r2,#0
00003c  210b              MOVS     r1,#0xb
00003e  4813              LDR      r0,|L27.140|
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;2961     GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_MCO);
000044  2200              MOVS     r2,#0
000046  210c              MOVS     r1,#0xc
000048  4810              LDR      r0,|L27.140|
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;2962     GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_MCO);
00004e  2200              MOVS     r2,#0
000050  2102              MOVS     r1,#2
000052  480f              LDR      r0,|L27.144|
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;2963   
;;;2964     /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
;;;2965     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
000058  f44f6070          MOV      r0,#0xf00
00005c  9000              STR      r0,[sp,#0]
;;;2966     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00005e  2000              MOVS     r0,#0
000060  f88d0004          STRB     r0,[sp,#4]
;;;2967     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
000064  f88d0007          STRB     r0,[sp,#7]
;;;2968     GPIO_Init(GPIOC, &GPIO_InitStructure);
000068  4669              MOV      r1,sp
00006a  4808              LDR      r0,|L27.140|
00006c  f7fffffe          BL       GPIO_Init
;;;2969   
;;;2970     /* Configure PD.02 CMD line */
;;;2971     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
000070  2004              MOVS     r0,#4
000072  9000              STR      r0,[sp,#0]
;;;2972     GPIO_Init(GPIOD, &GPIO_InitStructure);
000074  4669              MOV      r1,sp
000076  4806              LDR      r0,|L27.144|
000078  f7fffffe          BL       GPIO_Init
;;;2973   
;;;2974     /* Configure PC.12 pin: CLK pin */
;;;2975     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
00007c  f44f5080          MOV      r0,#0x1000
000080  9000              STR      r0,[sp,#0]
;;;2976     GPIO_Init(GPIOC, &GPIO_InitStructure);
000082  4669              MOV      r1,sp
000084  4801              LDR      r0,|L27.140|
000086  f7fffffe          BL       GPIO_Init
;;;2977   }
00008a  bd1c              POP      {r2-r4,pc}
;;;2978   
                          ENDP

                  |L27.140|
                          DCD      0x40020800
                  |L27.144|
                          DCD      0x40020c00

                          AREA ||i.SD_LowLevel_Init||, CODE, READONLY, ALIGN=2

                  SD_LowLevel_Init PROC
;;;2984     */
;;;2985   void SD_LowLevel_Init(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;2986   {
;;;2987     GPIO_InitTypeDef  GPIO_InitStructure;
;;;2988   
;;;2989     /* GPIOC and GPIOD Periph clock enable */
;;;2990     RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC | RCC_AHB1Periph_GPIOD | SD_DETECT_GPIO_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  201c              MOVS     r0,#0x1c
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;2991   
;;;2992     GPIO_PinAFConfig(GPIOC, GPIO_PinSource8, GPIO_AF_SDIO);
00000a  220c              MOVS     r2,#0xc
00000c  2108              MOVS     r1,#8
00000e  4829              LDR      r0,|L28.180|
000010  f7fffffe          BL       GPIO_PinAFConfig
;;;2993     GPIO_PinAFConfig(GPIOC, GPIO_PinSource9, GPIO_AF_SDIO);
000014  220c              MOVS     r2,#0xc
000016  2109              MOVS     r1,#9
000018  4826              LDR      r0,|L28.180|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;2994     GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_SDIO);
00001e  220c              MOVS     r2,#0xc
000020  210a              MOVS     r1,#0xa
000022  4824              LDR      r0,|L28.180|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;2995     GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_SDIO);
000028  220c              MOVS     r2,#0xc
00002a  210b              MOVS     r1,#0xb
00002c  4821              LDR      r0,|L28.180|
00002e  f7fffffe          BL       GPIO_PinAFConfig
;;;2996     GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_SDIO);
000032  220c              MOVS     r2,#0xc
000034  4611              MOV      r1,r2
000036  481f              LDR      r0,|L28.180|
000038  f7fffffe          BL       GPIO_PinAFConfig
;;;2997     GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_SDIO);
00003c  220c              MOVS     r2,#0xc
00003e  2102              MOVS     r1,#2
000040  481d              LDR      r0,|L28.184|
000042  f7fffffe          BL       GPIO_PinAFConfig
;;;2998   
;;;2999     /* Configure PC.08, PC.09, PC.10, PC.11 pins: D0, D1, D2, D3 pins */
;;;3000     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11;
000046  f44f6070          MOV      r0,#0xf00
00004a  9000              STR      r0,[sp,#0]
;;;3001     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00004c  2002              MOVS     r0,#2
00004e  f88d0005          STRB     r0,[sp,#5]
;;;3002     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000052  f88d0004          STRB     r0,[sp,#4]
;;;3003     GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000056  2000              MOVS     r0,#0
000058  f88d0006          STRB     r0,[sp,#6]
;;;3004     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
00005c  2001              MOVS     r0,#1
00005e  f88d0007          STRB     r0,[sp,#7]
;;;3005     GPIO_Init(GPIOC, &GPIO_InitStructure);
000062  4669              MOV      r1,sp
000064  4813              LDR      r0,|L28.180|
000066  f7fffffe          BL       GPIO_Init
;;;3006   
;;;3007     /* Configure PD.02 CMD line */
;;;3008     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
00006a  2004              MOVS     r0,#4
00006c  9000              STR      r0,[sp,#0]
;;;3009     GPIO_Init(GPIOD, &GPIO_InitStructure);
00006e  4669              MOV      r1,sp
000070  4811              LDR      r0,|L28.184|
000072  f7fffffe          BL       GPIO_Init
;;;3010   
;;;3011     /* Configure PC.12 pin: CLK pin */
;;;3012     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
000076  f44f5080          MOV      r0,#0x1000
00007a  9000              STR      r0,[sp,#0]
;;;3013     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
00007c  2000              MOVS     r0,#0
00007e  f88d0007          STRB     r0,[sp,#7]
;;;3014     GPIO_Init(GPIOC, &GPIO_InitStructure);
000082  4669              MOV      r1,sp
000084  480b              LDR      r0,|L28.180|
000086  f7fffffe          BL       GPIO_Init
;;;3015     
;;;3016     /*!< Configure SD_SPI_DETECT_PIN pin: SD Card detect pin */
;;;3017     GPIO_InitStructure.GPIO_Pin = SD_DETECT_PIN;
00008a  2004              MOVS     r0,#4
00008c  9000              STR      r0,[sp,#0]
;;;3018     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN;
00008e  2000              MOVS     r0,#0
000090  f88d0004          STRB     r0,[sp,#4]
;;;3019     GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000094  2001              MOVS     r0,#1
000096  f88d0007          STRB     r0,[sp,#7]
;;;3020     GPIO_Init(SD_DETECT_GPIO_PORT, &GPIO_InitStructure);
00009a  4669              MOV      r1,sp
00009c  4807              LDR      r0,|L28.188|
00009e  f7fffffe          BL       GPIO_Init
;;;3021   
;;;3022     /* Enable the SDIO APB2 Clock */
;;;3023     RCC_APB2PeriphClockCmd(RCC_APB2Periph_SDIO, ENABLE);
0000a2  2101              MOVS     r1,#1
0000a4  02c8              LSLS     r0,r1,#11
0000a6  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;3024   
;;;3025     /* Enable the DMA2 Clock */
;;;3026     RCC_AHB1PeriphClockCmd(SD_SDIO_DMA_CLK, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  0588              LSLS     r0,r1,#22
0000ae  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;3027   }
0000b2  bd1c              POP      {r2-r4,pc}
;;;3028   
                          ENDP

                  |L28.180|
                          DCD      0x40020800
                  |L28.184|
                          DCD      0x40020c00
                  |L28.188|
                          DCD      0x40021000

                          AREA ||i.SD_PowerOFF||, CODE, READONLY, ALIGN=1

                  SD_PowerOFF PROC
;;;678      */
;;;679    SD_Error SD_PowerOFF(void)
000000  b510              PUSH     {r4,lr}
;;;680    {
;;;681      SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;682    
;;;683      /*!< Set Power State to OFF */
;;;684      SDIO_SetPowerState(SDIO_PowerState_OFF);
000004  2000              MOVS     r0,#0
000006  f7fffffe          BL       SDIO_SetPowerState
;;;685    
;;;686      return(errorstatus);
00000a  4620              MOV      r0,r4
;;;687    }
00000c  bd10              POP      {r4,pc}
;;;688    
                          ENDP


                          AREA ||i.SD_PowerON||, CODE, READONLY, ALIGN=2

                  SD_PowerON PROC
;;;534      */
;;;535    SD_Error SD_PowerON(void)
000000  b5f8              PUSH     {r3-r7,lr}
;;;536    {
;;;537      __IO SD_Error errorstatus = SD_OK;
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;538      uint32_t response = 0, count = 0, validvoltage = 0;
000006  2500              MOVS     r5,#0
000008  2400              MOVS     r4,#0
00000a  2600              MOVS     r6,#0
;;;539      uint32_t SDType = SD_STD_CAPACITY;
00000c  2700              MOVS     r7,#0
;;;540    
;;;541      /*!< Power ON Sequence -----------------------------------------------------*/
;;;542      /*!< Configure the SDIO peripheral */
;;;543      /*!< SDIO_CK = SDIOCLK / (SDIO_INIT_CLK_DIV + 2) */
;;;544      /*!< on STM32F4xx devices, SDIOCLK is fixed to 48MHz */
;;;545      /*!< SDIO_CK for initialization should not exceed 400 KHz */  
;;;546      SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV;
00000e  2076              MOVS     r0,#0x76
000010  495f              LDR      r1,|L30.400|
000012  7508              STRB     r0,[r1,#0x14]
;;;547      SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
000014  2000              MOVS     r0,#0
000016  6008              STR      r0,[r1,#0]  ; SDIO_InitStructure
;;;548      SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
000018  6048              STR      r0,[r1,#4]  ; SDIO_InitStructure
;;;549      SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
00001a  6088              STR      r0,[r1,#8]  ; SDIO_InitStructure
;;;550      SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
00001c  60c8              STR      r0,[r1,#0xc]  ; SDIO_InitStructure
;;;551      SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
00001e  6108              STR      r0,[r1,#0x10]  ; SDIO_InitStructure
;;;552      SDIO_Init(&SDIO_InitStructure);
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       SDIO_Init
;;;553    
;;;554      /*!< Set Power State to ON */
;;;555      SDIO_SetPowerState(SDIO_PowerState_ON);
000026  2003              MOVS     r0,#3
000028  f7fffffe          BL       SDIO_SetPowerState
;;;556    
;;;557      /*!< Enable SDIO Clock */
;;;558      SDIO_ClockCmd(ENABLE);
00002c  2001              MOVS     r0,#1
00002e  f7fffffe          BL       SDIO_ClockCmd
;;;559    
;;;560      /*!< CMD0: GO_IDLE_STATE ---------------------------------------------------*/
;;;561      /*!< No CMD response required */
;;;562      SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000032  2000              MOVS     r0,#0
000034  4957              LDR      r1,|L30.404|
000036  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;563      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_GO_IDLE_STATE;
000038  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;564      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
00003a  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;565      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
00003c  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;566      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00003e  f44f6080          MOV      r0,#0x400
000042  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;567      SDIO_SendCommand(&SDIO_CmdInitStructure);
000044  4608              MOV      r0,r1
000046  f7fffffe          BL       SDIO_SendCommand
;;;568    
;;;569      errorstatus = CmdError();
00004a  f7fffffe          BL       CmdError
00004e  9000              STR      r0,[sp,#0]
;;;570    
;;;571      if (errorstatus != SD_OK)
000050  f89d0000          LDRB     r0,[sp,#0]
000054  b110              CBZ      r0,|L30.92|
;;;572      {
;;;573        /*!< CMD Response TimeOut (wait for CMDSENT flag) */
;;;574        return(errorstatus);
000056  f89d0000          LDRB     r0,[sp,#0]
                  |L30.90|
;;;575      }
;;;576    
;;;577      /*!< CMD8: SEND_IF_COND ----------------------------------------------------*/
;;;578      /*!< Send CMD8 to verify SD card interface operating condition */
;;;579      /*!< Argument: - [31:12]: Reserved (shall be set to '0')
;;;580                   - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
;;;581                   - [7:0]: Check Pattern (recommended 0xAA) */
;;;582      /*!< CMD Response: R7 */
;;;583      SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
;;;584      SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
;;;585      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;586      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;587      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;588      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;589    
;;;590      errorstatus = CmdResp7Error();
;;;591    
;;;592      if (errorstatus == SD_OK)
;;;593      {
;;;594        CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /*!< SD Card 2.0 */
;;;595        SDType = SD_HIGH_CAPACITY;
;;;596      }
;;;597      else
;;;598      {
;;;599        /*!< CMD55 */
;;;600        SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;601        SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;602        SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;603        SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;604        SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;605        SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;606        errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;607      }
;;;608      /*!< CMD55 */
;;;609      SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;610      SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;611      SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;612      SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;613      SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;614      SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;615      errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;616    
;;;617      /*!< If errorstatus is Command TimeOut, it is a MMC card */
;;;618      /*!< If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
;;;619         or SD card 1.x */
;;;620      if (errorstatus == SD_OK)
;;;621      {
;;;622        /*!< SD CARD */
;;;623        /*!< Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
;;;624        while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
;;;625        {
;;;626    
;;;627          /*!< SEND CMD55 APP_CMD with RCA as 0 */
;;;628          SDIO_CmdInitStructure.SDIO_Argument = 0x00;
;;;629          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;630          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;631          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;632          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;633          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;634    
;;;635          errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;636    
;;;637          if (errorstatus != SD_OK)
;;;638          {
;;;639            return(errorstatus);
;;;640          }
;;;641          SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
;;;642          SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_OP_COND;
;;;643          SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;644          SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;645          SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;646          SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;647    
;;;648          errorstatus = CmdResp3Error();
;;;649          if (errorstatus != SD_OK)
;;;650          {
;;;651            return(errorstatus);
;;;652          }
;;;653    
;;;654          response = SDIO_GetResponse(SDIO_RESP1);
;;;655          validvoltage = (((response >> 31) == 1) ? 1 : 0);
;;;656          count++;
;;;657        }
;;;658        if (count >= SD_MAX_VOLT_TRIAL)
;;;659        {
;;;660          errorstatus = SD_INVALID_VOLTRANGE;
;;;661          return(errorstatus);
;;;662        }
;;;663    
;;;664        if (response &= SD_HIGH_CAPACITY)
;;;665        {
;;;666          CardType = SDIO_HIGH_CAPACITY_SD_CARD;
;;;667        }
;;;668    
;;;669      }/*!< else MMC Card */
;;;670    
;;;671      return(errorstatus);
;;;672    }
00005a  bdf8              POP      {r3-r7,pc}
                  |L30.92|
00005c  f44f70d5          MOV      r0,#0x1aa             ;583
000060  494c              LDR      r1,|L30.404|
000062  6008              STR      r0,[r1,#0]            ;583  ; SDIO_CmdInitStructure
000064  2008              MOVS     r0,#8                 ;584
000066  6048              STR      r0,[r1,#4]            ;584  ; SDIO_CmdInitStructure
000068  2040              MOVS     r0,#0x40              ;585
00006a  6088              STR      r0,[r1,#8]            ;585  ; SDIO_CmdInitStructure
00006c  2000              MOVS     r0,#0                 ;586
00006e  60c8              STR      r0,[r1,#0xc]          ;586  ; SDIO_CmdInitStructure
000070  f44f6080          MOV      r0,#0x400             ;587
000074  6108              STR      r0,[r1,#0x10]         ;587  ; SDIO_CmdInitStructure
000076  4608              MOV      r0,r1                 ;588
000078  f7fffffe          BL       SDIO_SendCommand
00007c  f7fffffe          BL       CmdResp7Error
000080  9000              STR      r0,[sp,#0]            ;590
000082  f89d0000          LDRB     r0,[sp,#0]            ;592
000086  b920              CBNZ     r0,|L30.146|
000088  2001              MOVS     r0,#1                 ;594
00008a  4943              LDR      r1,|L30.408|
00008c  6008              STR      r0,[r1,#0]            ;594  ; CardType
00008e  0787              LSLS     r7,r0,#30             ;595
000090  e012              B        |L30.184|
                  |L30.146|
000092  2000              MOVS     r0,#0                 ;600
000094  493f              LDR      r1,|L30.404|
000096  6008              STR      r0,[r1,#0]            ;600  ; SDIO_CmdInitStructure
000098  2037              MOVS     r0,#0x37              ;601
00009a  6048              STR      r0,[r1,#4]            ;601  ; SDIO_CmdInitStructure
00009c  2040              MOVS     r0,#0x40              ;602
00009e  6088              STR      r0,[r1,#8]            ;602  ; SDIO_CmdInitStructure
0000a0  2000              MOVS     r0,#0                 ;603
0000a2  60c8              STR      r0,[r1,#0xc]          ;603  ; SDIO_CmdInitStructure
0000a4  f44f6080          MOV      r0,#0x400             ;604
0000a8  6108              STR      r0,[r1,#0x10]         ;604  ; SDIO_CmdInitStructure
0000aa  4608              MOV      r0,r1                 ;605
0000ac  f7fffffe          BL       SDIO_SendCommand
0000b0  2037              MOVS     r0,#0x37              ;606
0000b2  f7fffffe          BL       CmdResp1Error
0000b6  9000              STR      r0,[sp,#0]            ;606
                  |L30.184|
0000b8  2000              MOVS     r0,#0                 ;609
0000ba  4936              LDR      r1,|L30.404|
0000bc  6008              STR      r0,[r1,#0]            ;609  ; SDIO_CmdInitStructure
0000be  2037              MOVS     r0,#0x37              ;610
0000c0  6048              STR      r0,[r1,#4]            ;610  ; SDIO_CmdInitStructure
0000c2  2040              MOVS     r0,#0x40              ;611
0000c4  6088              STR      r0,[r1,#8]            ;611  ; SDIO_CmdInitStructure
0000c6  2000              MOVS     r0,#0                 ;612
0000c8  60c8              STR      r0,[r1,#0xc]          ;612  ; SDIO_CmdInitStructure
0000ca  f44f6080          MOV      r0,#0x400             ;613
0000ce  6108              STR      r0,[r1,#0x10]         ;613  ; SDIO_CmdInitStructure
0000d0  4608              MOV      r0,r1                 ;614
0000d2  f7fffffe          BL       SDIO_SendCommand
0000d6  2037              MOVS     r0,#0x37              ;615
0000d8  f7fffffe          BL       CmdResp1Error
0000dc  9000              STR      r0,[sp,#0]            ;615
0000de  f89d0000          LDRB     r0,[sp,#0]            ;620
0000e2  2800              CMP      r0,#0                 ;620
0000e4  d151              BNE      |L30.394|
0000e6  e03b              B        |L30.352|
                  |L30.232|
0000e8  2000              MOVS     r0,#0                 ;628
0000ea  492a              LDR      r1,|L30.404|
0000ec  6008              STR      r0,[r1,#0]            ;628  ; SDIO_CmdInitStructure
0000ee  2037              MOVS     r0,#0x37              ;629
0000f0  6048              STR      r0,[r1,#4]            ;629  ; SDIO_CmdInitStructure
0000f2  2040              MOVS     r0,#0x40              ;630
0000f4  6088              STR      r0,[r1,#8]            ;630  ; SDIO_CmdInitStructure
0000f6  2000              MOVS     r0,#0                 ;631
0000f8  60c8              STR      r0,[r1,#0xc]          ;631  ; SDIO_CmdInitStructure
0000fa  f44f6080          MOV      r0,#0x400             ;632
0000fe  6108              STR      r0,[r1,#0x10]         ;632  ; SDIO_CmdInitStructure
000100  4608              MOV      r0,r1                 ;633
000102  f7fffffe          BL       SDIO_SendCommand
000106  2037              MOVS     r0,#0x37              ;635
000108  f7fffffe          BL       CmdResp1Error
00010c  9000              STR      r0,[sp,#0]            ;635
00010e  f89d0000          LDRB     r0,[sp,#0]            ;637
000112  b110              CBZ      r0,|L30.282|
000114  f89d0000          LDRB     r0,[sp,#0]            ;639
000118  e79f              B        |L30.90|
                  |L30.282|
00011a  4820              LDR      r0,|L30.412|
00011c  4338              ORRS     r0,r0,r7              ;641
00011e  491d              LDR      r1,|L30.404|
000120  6008              STR      r0,[r1,#0]            ;641  ; SDIO_CmdInitStructure
000122  2029              MOVS     r0,#0x29              ;642
000124  6048              STR      r0,[r1,#4]            ;642  ; SDIO_CmdInitStructure
000126  2040              MOVS     r0,#0x40              ;643
000128  6088              STR      r0,[r1,#8]            ;643  ; SDIO_CmdInitStructure
00012a  2000              MOVS     r0,#0                 ;644
00012c  60c8              STR      r0,[r1,#0xc]          ;644  ; SDIO_CmdInitStructure
00012e  f44f6080          MOV      r0,#0x400             ;645
000132  6108              STR      r0,[r1,#0x10]         ;645  ; SDIO_CmdInitStructure
000134  4608              MOV      r0,r1                 ;646
000136  f7fffffe          BL       SDIO_SendCommand
00013a  f7fffffe          BL       CmdResp3Error
00013e  9000              STR      r0,[sp,#0]            ;648
000140  f89d0000          LDRB     r0,[sp,#0]            ;649
000144  b110              CBZ      r0,|L30.332|
000146  f89d0000          LDRB     r0,[sp,#0]            ;651
00014a  e786              B        |L30.90|
                  |L30.332|
00014c  2000              MOVS     r0,#0                 ;654
00014e  f7fffffe          BL       SDIO_GetResponse
000152  4605              MOV      r5,r0                 ;654
000154  2001              MOVS     r0,#1                 ;655
000156  ea8070d5          EOR      r0,r0,r5,LSR #31      ;655
00015a  f0800601          EOR      r6,r0,#1              ;655
00015e  1c64              ADDS     r4,r4,#1              ;656
                  |L30.352|
000160  b91e              CBNZ     r6,|L30.362|
000162  f64f70ff          MOV      r0,#0xffff            ;624
000166  4284              CMP      r4,r0                 ;624
000168  d3be              BCC      |L30.232|
                  |L30.362|
00016a  f64f70ff          MOV      r0,#0xffff            ;658
00016e  4284              CMP      r4,r0                 ;658
000170  d304              BCC      |L30.380|
000172  201b              MOVS     r0,#0x1b              ;660
000174  9000              STR      r0,[sp,#0]            ;660
000176  f89d0000          LDRB     r0,[sp,#0]            ;661
00017a  e76e              B        |L30.90|
                  |L30.380|
00017c  f0054080          AND      r0,r5,#0x40000000     ;664
000180  0005              MOVS     r5,r0                 ;664
000182  d002              BEQ      |L30.394|
000184  2002              MOVS     r0,#2                 ;666
000186  4904              LDR      r1,|L30.408|
000188  6008              STR      r0,[r1,#0]            ;666  ; CardType
                  |L30.394|
00018a  f89d0000          LDRB     r0,[sp,#0]            ;671
00018e  e764              B        |L30.90|
;;;673    
                          ENDP

                  |L30.400|
                          DCD      SDIO_InitStructure
                  |L30.404|
                          DCD      SDIO_CmdInitStructure
                  |L30.408|
                          DCD      CardType
                  |L30.412|
                          DCD      0x80100000

                          AREA ||i.SD_ProcessDMAIRQ||, CODE, READONLY, ALIGN=2

                  SD_ProcessDMAIRQ PROC
;;;2050     */
;;;2051   void SD_ProcessDMAIRQ(void)
000000  b510              PUSH     {r4,lr}
;;;2052   {
;;;2053     if(DMA2->LISR & SD_SDIO_DMA_FLAG_TCIF)
000002  4807              LDR      r0,|L31.32|
000004  6800              LDR      r0,[r0,#0]
000006  f00050c0          AND      r0,r0,#0x18000000
00000a  b140              CBZ      r0,|L31.30|
;;;2054     {
;;;2055       DMAEndOfTransfer = 0x01;
00000c  2001              MOVS     r0,#1
00000e  4905              LDR      r1,|L31.36|
000010  6008              STR      r0,[r1,#0]  ; DMAEndOfTransfer
;;;2056       DMA_ClearFlag(SD_SDIO_DMA_STREAM, SD_SDIO_DMA_FLAG_TCIF|SD_SDIO_DMA_FLAG_FEIF);
000012  f04f51c2          MOV      r1,#0x18400000
000016  4802              LDR      r0,|L31.32|
000018  3058              ADDS     r0,r0,#0x58
00001a  f7fffffe          BL       DMA_ClearFlag
                  |L31.30|
;;;2057     }
;;;2058   }
00001e  bd10              POP      {r4,pc}
;;;2059   
                          ENDP

                  |L31.32|
                          DCD      0x40026400
                  |L31.36|
                          DCD      DMAEndOfTransfer

                          AREA ||i.SD_ProcessIRQSrc||, CODE, READONLY, ALIGN=2

                  SD_ProcessIRQSrc PROC
;;;2005     */
;;;2006   SD_Error SD_ProcessIRQSrc(void)
000000  b510              PUSH     {r4,lr}
;;;2007   { 
;;;2008     if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
000002  f44f7080          MOV      r0,#0x100
000006  f7fffffe          BL       SDIO_GetITStatus
00000a  b150              CBZ      r0,|L32.34|
;;;2009     {
;;;2010       TransferError = SD_OK;
00000c  2000              MOVS     r0,#0
00000e  4925              LDR      r1,|L32.164|
000010  7008              STRB     r0,[r1,#0]
;;;2011       SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
000012  f44f7080          MOV      r0,#0x100
000016  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2012       TransferEnd = 1;
00001a  2001              MOVS     r0,#1
00001c  4922              LDR      r1,|L32.168|
00001e  6008              STR      r0,[r1,#0]  ; TransferEnd
000020  e037              B        |L32.146|
                  |L32.34|
;;;2013     }  
;;;2014     else if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
000022  2002              MOVS     r0,#2
000024  f7fffffe          BL       SDIO_GetITStatus
000028  b130              CBZ      r0,|L32.56|
;;;2015     {
;;;2016       SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
00002a  2002              MOVS     r0,#2
00002c  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2017       TransferError = SD_DATA_CRC_FAIL;
000030  2002              MOVS     r0,#2
000032  491c              LDR      r1,|L32.164|
000034  7008              STRB     r0,[r1,#0]
000036  e02c              B        |L32.146|
                  |L32.56|
;;;2018     }
;;;2019     else if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
000038  2008              MOVS     r0,#8
00003a  f7fffffe          BL       SDIO_GetITStatus
00003e  b130              CBZ      r0,|L32.78|
;;;2020     {
;;;2021       SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
000040  2008              MOVS     r0,#8
000042  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2022       TransferError = SD_DATA_TIMEOUT;
000046  2004              MOVS     r0,#4
000048  4916              LDR      r1,|L32.164|
00004a  7008              STRB     r0,[r1,#0]
00004c  e021              B        |L32.146|
                  |L32.78|
;;;2023     }
;;;2024     else if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
00004e  2020              MOVS     r0,#0x20
000050  f7fffffe          BL       SDIO_GetITStatus
000054  b130              CBZ      r0,|L32.100|
;;;2025     {
;;;2026       SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
000056  2020              MOVS     r0,#0x20
000058  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2027       TransferError = SD_RX_OVERRUN;
00005c  2006              MOVS     r0,#6
00005e  4911              LDR      r1,|L32.164|
000060  7008              STRB     r0,[r1,#0]
000062  e016              B        |L32.146|
                  |L32.100|
;;;2028     }
;;;2029     else if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
000064  2010              MOVS     r0,#0x10
000066  f7fffffe          BL       SDIO_GetITStatus
00006a  b130              CBZ      r0,|L32.122|
;;;2030     {
;;;2031       SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
00006c  2010              MOVS     r0,#0x10
00006e  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2032       TransferError = SD_TX_UNDERRUN;
000072  2005              MOVS     r0,#5
000074  490b              LDR      r1,|L32.164|
000076  7008              STRB     r0,[r1,#0]
000078  e00b              B        |L32.146|
                  |L32.122|
;;;2033     }
;;;2034     else if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
00007a  f44f7000          MOV      r0,#0x200
00007e  f7fffffe          BL       SDIO_GetITStatus
000082  b130              CBZ      r0,|L32.146|
;;;2035     {
;;;2036       SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
000084  f44f7000          MOV      r0,#0x200
000088  f7fffffe          BL       SDIO_ClearITPendingBit
;;;2037       TransferError = SD_START_BIT_ERR;
00008c  2007              MOVS     r0,#7
00008e  4905              LDR      r1,|L32.164|
000090  7008              STRB     r0,[r1,#0]
                  |L32.146|
;;;2038     }
;;;2039   
;;;2040     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
000092  2100              MOVS     r1,#0
000094  f24c303a          MOV      r0,#0xc33a
000098  f7fffffe          BL       SDIO_ITConfig
;;;2041                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
;;;2042                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
;;;2043     return(TransferError);
00009c  4801              LDR      r0,|L32.164|
00009e  7800              LDRB     r0,[r0,#0]  ; TransferError
;;;2044   }
0000a0  bd10              POP      {r4,pc}
;;;2045   
                          ENDP

0000a2  0000              DCW      0x0000
                  |L32.164|
                          DCD      TransferError
                  |L32.168|
                          DCD      TransferEnd

                          AREA ||i.SD_ReadBlock||, CODE, READONLY, ALIGN=2

                  SD_ReadBlock PROC
;;;1170     */
;;;1171   SD_Error SD_ReadBlock(uint8_t *readbuff, uint64_t ReadAddr, uint16_t BlockSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1172   {
000004  4680              MOV      r8,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e06              LDR      r6,[sp,#0x18]
;;;1173     SD_Error errorstatus = SD_OK;
00000c  2700              MOVS     r7,#0
;;;1174   #if defined (SD_POLLING_MODE) 
;;;1175     uint32_t count = 0, *tempbuff = (uint32_t *)readbuff;
;;;1176   #endif
;;;1177   
;;;1178     TransferError = SD_OK;
00000e  2000              MOVS     r0,#0
000010  4930              LDR      r1,|L33.212|
000012  7008              STRB     r0,[r1,#0]
;;;1179     TransferEnd = 0;
000014  4930              LDR      r1,|L33.216|
000016  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1180     StopCondition = 0;
000018  4930              LDR      r1,|L33.220|
00001a  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1181   
;;;1182     SDIO->DCTRL = 0x0;
00001c  4930              LDR      r1,|L33.224|
00001e  6008              STR      r0,[r1,#0]
;;;1183   
;;;1184   #if defined (SD_DMA_MODE)
;;;1185     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
000020  2101              MOVS     r1,#1
000022  f240302a          MOV      r0,#0x32a
000026  f7fffffe          BL       SDIO_ITConfig
;;;1186     SDIO_DMACmd(ENABLE);
00002a  2001              MOVS     r0,#1
00002c  f7fffffe          BL       SDIO_DMACmd
;;;1187     SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, BlockSize);
000030  4631              MOV      r1,r6
000032  4640              MOV      r0,r8
000034  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
;;;1188   #endif
;;;1189   
;;;1190     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000038  482a              LDR      r0,|L33.228|
00003a  6800              LDR      r0,[r0,#0]  ; CardType
00003c  2802              CMP      r0,#2
00003e  d108              BNE      |L33.82|
;;;1191     {
;;;1192       BlockSize = 512;
000040  0206              LSLS     r6,r0,#8
;;;1193       ReadAddr /= 512;
000042  0202              LSLS     r2,r0,#8
000044  2300              MOVS     r3,#0
000046  4620              MOV      r0,r4
000048  4629              MOV      r1,r5
00004a  f7fffffe          BL       __aeabi_uldivmod
00004e  4604              MOV      r4,r0
000050  460d              MOV      r5,r1
                  |L33.82|
;;;1194     }
;;;1195   
;;;1196     /* Set Block Size for Card */ 
;;;1197     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
000052  4825              LDR      r0,|L33.232|
000054  6006              STR      r6,[r0,#0]  ; SDIO_CmdInitStructure
;;;1198     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000056  2010              MOVS     r0,#0x10
000058  4923              LDR      r1,|L33.232|
00005a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1199     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00005c  2040              MOVS     r0,#0x40
00005e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1200     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000060  2000              MOVS     r0,#0
000062  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1201     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000064  f44f6080          MOV      r0,#0x400
000068  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1202     SDIO_SendCommand(&SDIO_CmdInitStructure);
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       SDIO_SendCommand
;;;1203   
;;;1204     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000070  2010              MOVS     r0,#0x10
000072  f7fffffe          BL       CmdResp1Error
000076  4607              MOV      r7,r0
;;;1205   
;;;1206     if (SD_OK != errorstatus)
000078  b117              CBZ      r7,|L33.128|
;;;1207     {
;;;1208       return(errorstatus);
00007a  4638              MOV      r0,r7
                  |L33.124|
;;;1209     }
;;;1210   
;;;1211     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1212     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1213     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
;;;1214     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1215     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1216     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1217     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1218   
;;;1219     /*!< Send CMD17 READ_SINGLE_BLOCK */
;;;1220     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1221     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_SINGLE_BLOCK;
;;;1222     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1223     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1224     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1225     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1226   
;;;1227     errorstatus = CmdResp1Error(SD_CMD_READ_SINGLE_BLOCK);
;;;1228   
;;;1229     if (errorstatus != SD_OK)
;;;1230     {
;;;1231       return(errorstatus);
;;;1232     }
;;;1233   
;;;1234   #if defined (SD_POLLING_MODE)  
;;;1235     /*!< In case of single block transfer, no need of stop transfer at all.*/
;;;1236     /*!< Polling mode */
;;;1237     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1238     {
;;;1239       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1240       {
;;;1241         for (count = 0; count < 8; count++)
;;;1242         {
;;;1243           *(tempbuff + count) = SDIO_ReadData();
;;;1244         }
;;;1245         tempbuff += 8;
;;;1246       }
;;;1247     }
;;;1248   
;;;1249     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1250     {
;;;1251       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1252       errorstatus = SD_DATA_TIMEOUT;
;;;1253       return(errorstatus);
;;;1254     }
;;;1255     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1256     {
;;;1257       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1258       errorstatus = SD_DATA_CRC_FAIL;
;;;1259       return(errorstatus);
;;;1260     }
;;;1261     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1262     {
;;;1263       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1264       errorstatus = SD_RX_OVERRUN;
;;;1265       return(errorstatus);
;;;1266     }
;;;1267     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1268     {
;;;1269       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1270       errorstatus = SD_START_BIT_ERR;
;;;1271       return(errorstatus);
;;;1272     }
;;;1273     count = SD_DATATIMEOUT;
;;;1274     while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET) && (count > 0))
;;;1275     {
;;;1276       *tempbuff = SDIO_ReadData();
;;;1277       tempbuff++;
;;;1278       count--;
;;;1279     }
;;;1280   
;;;1281     /*!< Clear all the static flags */
;;;1282     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1283   
;;;1284   #endif
;;;1285   
;;;1286     return(errorstatus);
;;;1287   }
00007c  e8bd81f0          POP      {r4-r8,pc}
                  |L33.128|
000080  f04f30ff          MOV      r0,#0xffffffff        ;1211
000084  4919              LDR      r1,|L33.236|
000086  6008              STR      r0,[r1,#0]            ;1211  ; SDIO_DataInitStructure
000088  4608              MOV      r0,r1                 ;1212
00008a  6046              STR      r6,[r0,#4]            ;1212  ; SDIO_DataInitStructure
00008c  2090              MOVS     r0,#0x90              ;1213
00008e  6088              STR      r0,[r1,#8]            ;1213  ; SDIO_DataInitStructure
000090  2002              MOVS     r0,#2                 ;1214
000092  60c8              STR      r0,[r1,#0xc]          ;1214  ; SDIO_DataInitStructure
000094  2000              MOVS     r0,#0                 ;1215
000096  6108              STR      r0,[r1,#0x10]         ;1215  ; SDIO_DataInitStructure
000098  2001              MOVS     r0,#1                 ;1216
00009a  6148              STR      r0,[r1,#0x14]         ;1216  ; SDIO_DataInitStructure
00009c  4608              MOV      r0,r1                 ;1217
00009e  f7fffffe          BL       SDIO_DataConfig
0000a2  4811              LDR      r0,|L33.232|
0000a4  6004              STR      r4,[r0,#0]            ;1220  ; SDIO_CmdInitStructure
0000a6  2011              MOVS     r0,#0x11              ;1221
0000a8  490f              LDR      r1,|L33.232|
0000aa  6048              STR      r0,[r1,#4]            ;1221  ; SDIO_CmdInitStructure
0000ac  2040              MOVS     r0,#0x40              ;1222
0000ae  6088              STR      r0,[r1,#8]            ;1222  ; SDIO_CmdInitStructure
0000b0  2000              MOVS     r0,#0                 ;1223
0000b2  60c8              STR      r0,[r1,#0xc]          ;1223  ; SDIO_CmdInitStructure
0000b4  f44f6080          MOV      r0,#0x400             ;1224
0000b8  6108              STR      r0,[r1,#0x10]         ;1224  ; SDIO_CmdInitStructure
0000ba  4608              MOV      r0,r1                 ;1225
0000bc  f7fffffe          BL       SDIO_SendCommand
0000c0  2011              MOVS     r0,#0x11              ;1227
0000c2  f7fffffe          BL       CmdResp1Error
0000c6  4607              MOV      r7,r0                 ;1227
0000c8  b10f              CBZ      r7,|L33.206|
0000ca  4638              MOV      r0,r7                 ;1231
0000cc  e7d6              B        |L33.124|
                  |L33.206|
0000ce  4638              MOV      r0,r7                 ;1286
0000d0  e7d4              B        |L33.124|
;;;1288   
                          ENDP

0000d2  0000              DCW      0x0000
                  |L33.212|
                          DCD      TransferError
                  |L33.216|
                          DCD      TransferEnd
                  |L33.220|
                          DCD      StopCondition
                  |L33.224|
                          DCD      0x40012c2c
                  |L33.228|
                          DCD      CardType
                  |L33.232|
                          DCD      SDIO_CmdInitStructure
                  |L33.236|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.SD_ReadMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_ReadMultiBlocks PROC
;;;1303     */
;;;1304   SD_Error SD_ReadMultiBlocks(uint8_t *readbuff, uint64_t ReadAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1305   {
000004  4681              MOV      r9,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  e9dd6808          LDRD     r6,r8,[sp,#0x20]
;;;1306     SD_Error errorstatus = SD_OK;
00000e  2700              MOVS     r7,#0
;;;1307     TransferError = SD_OK;
000010  2000              MOVS     r0,#0
000012  4932              LDR      r1,|L34.220|
000014  7008              STRB     r0,[r1,#0]
;;;1308     TransferEnd = 0;
000016  4932              LDR      r1,|L34.224|
000018  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1309     StopCondition = 1;
00001a  2001              MOVS     r0,#1
00001c  4931              LDR      r1,|L34.228|
00001e  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1310   	
;;;1311     SDIO->DCTRL = 0x0;
000020  2000              MOVS     r0,#0
000022  4931              LDR      r1,|L34.232|
000024  6008              STR      r0,[r1,#0]
;;;1312   
;;;1313     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
000026  2101              MOVS     r1,#1
000028  f240302a          MOV      r0,#0x32a
00002c  f7fffffe          BL       SDIO_ITConfig
;;;1314     SD_LowLevel_DMA_RxConfig((uint32_t *)readbuff, (NumberOfBlocks * BlockSize));
000030  fb08f106          MUL      r1,r8,r6
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       SD_LowLevel_DMA_RxConfig
;;;1315     SDIO_DMACmd(ENABLE);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       SDIO_DMACmd
;;;1316   
;;;1317     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000040  482a              LDR      r0,|L34.236|
000042  6800              LDR      r0,[r0,#0]  ; CardType
000044  2802              CMP      r0,#2
000046  d108              BNE      |L34.90|
;;;1318     {
;;;1319       BlockSize = 512;
000048  0206              LSLS     r6,r0,#8
;;;1320       ReadAddr /= 512;
00004a  0202              LSLS     r2,r0,#8
00004c  2300              MOVS     r3,#0
00004e  4620              MOV      r0,r4
000050  4629              MOV      r1,r5
000052  f7fffffe          BL       __aeabi_uldivmod
000056  4604              MOV      r4,r0
000058  460d              MOV      r5,r1
                  |L34.90|
;;;1321     }
;;;1322   
;;;1323     /*!< Set Block Size for Card */
;;;1324     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
00005a  4825              LDR      r0,|L34.240|
00005c  6006              STR      r6,[r0,#0]  ; SDIO_CmdInitStructure
;;;1325     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
00005e  2010              MOVS     r0,#0x10
000060  4923              LDR      r1,|L34.240|
000062  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1326     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000064  2040              MOVS     r0,#0x40
000066  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1327     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000068  2000              MOVS     r0,#0
00006a  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1328     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00006c  f44f6080          MOV      r0,#0x400
000070  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1329     SDIO_SendCommand(&SDIO_CmdInitStructure);
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       SDIO_SendCommand
;;;1330   
;;;1331     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000078  2010              MOVS     r0,#0x10
00007a  f7fffffe          BL       CmdResp1Error
00007e  4607              MOV      r7,r0
;;;1332   
;;;1333     if (SD_OK != errorstatus)
000080  b117              CBZ      r7,|L34.136|
;;;1334     {
;;;1335       return(errorstatus);
000082  4638              MOV      r0,r7
                  |L34.132|
;;;1336     }
;;;1337       
;;;1338     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1339     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1340     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
;;;1341     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1342     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1343     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1344     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1345   
;;;1346     /*!< Send CMD18 READ_MULT_BLOCK with argument data address */
;;;1347     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)ReadAddr;
;;;1348     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_READ_MULT_BLOCK;
;;;1349     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1350     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1351     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1352     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1353   
;;;1354     errorstatus = CmdResp1Error(SD_CMD_READ_MULT_BLOCK);
;;;1355   
;;;1356     if (errorstatus != SD_OK)
;;;1357     {
;;;1358       return(errorstatus);
;;;1359     }
;;;1360   
;;;1361     return(errorstatus);
;;;1362   }
000084  e8bd87f0          POP      {r4-r10,pc}
                  |L34.136|
000088  f04f30ff          MOV      r0,#0xffffffff        ;1338
00008c  4919              LDR      r1,|L34.244|
00008e  6008              STR      r0,[r1,#0]            ;1338  ; SDIO_DataInitStructure
000090  fb08f006          MUL      r0,r8,r6              ;1339
000094  6048              STR      r0,[r1,#4]            ;1339  ; SDIO_DataInitStructure
000096  2090              MOVS     r0,#0x90              ;1340
000098  6088              STR      r0,[r1,#8]            ;1340  ; SDIO_DataInitStructure
00009a  2002              MOVS     r0,#2                 ;1341
00009c  60c8              STR      r0,[r1,#0xc]          ;1341  ; SDIO_DataInitStructure
00009e  2000              MOVS     r0,#0                 ;1342
0000a0  6108              STR      r0,[r1,#0x10]         ;1342  ; SDIO_DataInitStructure
0000a2  2001              MOVS     r0,#1                 ;1343
0000a4  6148              STR      r0,[r1,#0x14]         ;1343  ; SDIO_DataInitStructure
0000a6  4608              MOV      r0,r1                 ;1344
0000a8  f7fffffe          BL       SDIO_DataConfig
0000ac  4810              LDR      r0,|L34.240|
0000ae  6004              STR      r4,[r0,#0]            ;1347  ; SDIO_CmdInitStructure
0000b0  2012              MOVS     r0,#0x12              ;1348
0000b2  490f              LDR      r1,|L34.240|
0000b4  6048              STR      r0,[r1,#4]            ;1348  ; SDIO_CmdInitStructure
0000b6  2040              MOVS     r0,#0x40              ;1349
0000b8  6088              STR      r0,[r1,#8]            ;1349  ; SDIO_CmdInitStructure
0000ba  2000              MOVS     r0,#0                 ;1350
0000bc  60c8              STR      r0,[r1,#0xc]          ;1350  ; SDIO_CmdInitStructure
0000be  f44f6080          MOV      r0,#0x400             ;1351
0000c2  6108              STR      r0,[r1,#0x10]         ;1351  ; SDIO_CmdInitStructure
0000c4  4608              MOV      r0,r1                 ;1352
0000c6  f7fffffe          BL       SDIO_SendCommand
0000ca  2012              MOVS     r0,#0x12              ;1354
0000cc  f7fffffe          BL       CmdResp1Error
0000d0  4607              MOV      r7,r0                 ;1354
0000d2  b10f              CBZ      r7,|L34.216|
0000d4  4638              MOV      r0,r7                 ;1358
0000d6  e7d5              B        |L34.132|
                  |L34.216|
0000d8  4638              MOV      r0,r7                 ;1361
0000da  e7d3              B        |L34.132|
;;;1363   
                          ENDP

                  |L34.220|
                          DCD      TransferError
                  |L34.224|
                          DCD      TransferEnd
                  |L34.228|
                          DCD      StopCondition
                  |L34.232|
                          DCD      0x40012c2c
                  |L34.236|
                          DCD      CardType
                  |L34.240|
                          DCD      SDIO_CmdInitStructure
                  |L34.244|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.SD_SelectDeselect||, CODE, READONLY, ALIGN=2

                  SD_SelectDeselect PROC
;;;1139     */
;;;1140   SD_Error SD_SelectDeselect(uint64_t addr)
000000  b570              PUSH     {r4-r6,lr}
;;;1141   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1142     SD_Error errorstatus = SD_OK;
000006  2600              MOVS     r6,#0
;;;1143   
;;;1144     /*!< Send CMD7 SDIO_SEL_DESEL_CARD */
;;;1145     SDIO_CmdInitStructure.SDIO_Argument =  (uint32_t)addr;
000008  480a              LDR      r0,|L35.52|
00000a  6004              STR      r4,[r0,#0]  ; SDIO_CmdInitStructure
;;;1146     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEL_DESEL_CARD;
00000c  2007              MOVS     r0,#7
00000e  4909              LDR      r1,|L35.52|
000010  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1147     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000012  2040              MOVS     r0,#0x40
000014  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1148     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000016  2000              MOVS     r0,#0
000018  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1149     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00001a  f44f6080          MOV      r0,#0x400
00001e  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1150     SDIO_SendCommand(&SDIO_CmdInitStructure);
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       SDIO_SendCommand
;;;1151   
;;;1152     errorstatus = CmdResp1Error(SD_CMD_SEL_DESEL_CARD);
000026  2007              MOVS     r0,#7
000028  f7fffffe          BL       CmdResp1Error
00002c  4606              MOV      r6,r0
;;;1153   
;;;1154     return(errorstatus);
00002e  4630              MOV      r0,r6
;;;1155   }
000030  bd70              POP      {r4-r6,pc}
;;;1156   
                          ENDP

000032  0000              DCW      0x0000
                  |L35.52|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_SendSDStatus||, CODE, READONLY, ALIGN=2

                  SD_SendSDStatus PROC
;;;1888     */
;;;1889   SD_Error SD_SendSDStatus(uint32_t *psdstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1890   {
000002  4604              MOV      r4,r0
;;;1891     SD_Error errorstatus = SD_OK;
000004  2600              MOVS     r6,#0
;;;1892     uint32_t count = 0;
000006  2500              MOVS     r5,#0
;;;1893   
;;;1894     if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       SDIO_GetResponse
00000e  f0007000          AND      r0,r0,#0x2000000
000012  b110              CBZ      r0,|L36.26|
;;;1895     {
;;;1896       errorstatus = SD_LOCK_UNLOCK_FAILED;
000014  260e              MOVS     r6,#0xe
;;;1897       return(errorstatus);
000016  4630              MOV      r0,r6
                  |L36.24|
;;;1898     }
;;;1899   
;;;1900     /*!< Set block size for card if it is not equal to current block size for card. */
;;;1901     SDIO_CmdInitStructure.SDIO_Argument = 64;
;;;1902     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
;;;1903     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1904     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1905     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1906     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1907   
;;;1908     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
;;;1909   
;;;1910     if (errorstatus != SD_OK)
;;;1911     {
;;;1912       return(errorstatus);
;;;1913     }
;;;1914   
;;;1915     /*!< CMD55 */
;;;1916     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1917     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1918     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1919     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1920     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1921     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1922     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1923   
;;;1924     if (errorstatus != SD_OK)
;;;1925     {
;;;1926       return(errorstatus);
;;;1927     }
;;;1928   
;;;1929     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1930     SDIO_DataInitStructure.SDIO_DataLength = 64;
;;;1931     SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
;;;1932     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
;;;1933     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1934     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1935     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1936   
;;;1937     /*!< Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
;;;1938     SDIO_CmdInitStructure.SDIO_Argument = 0;
;;;1939     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SD_APP_STAUS;
;;;1940     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1941     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1942     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1943     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1944     errorstatus = CmdResp1Error(SD_CMD_SD_APP_STAUS);
;;;1945   
;;;1946     if (errorstatus != SD_OK)
;;;1947     {
;;;1948       return(errorstatus);
;;;1949     }
;;;1950   
;;;1951     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND | SDIO_FLAG_STBITERR)))
;;;1952     {
;;;1953       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
;;;1954       {
;;;1955         for (count = 0; count < 8; count++)
;;;1956         {
;;;1957           *(psdstatus + count) = SDIO_ReadData();
;;;1958         }
;;;1959         psdstatus += 8;
;;;1960       }
;;;1961     }
;;;1962   
;;;1963     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1964     {
;;;1965       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1966       errorstatus = SD_DATA_TIMEOUT;
;;;1967       return(errorstatus);
;;;1968     }
;;;1969     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1970     {
;;;1971       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1972       errorstatus = SD_DATA_CRC_FAIL;
;;;1973       return(errorstatus);
;;;1974     }
;;;1975     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
;;;1976     {
;;;1977       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
;;;1978       errorstatus = SD_RX_OVERRUN;
;;;1979       return(errorstatus);
;;;1980     }
;;;1981     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1982     {
;;;1983       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1984       errorstatus = SD_START_BIT_ERR;
;;;1985       return(errorstatus);
;;;1986     }
;;;1987   
;;;1988     count = SD_DATATIMEOUT;
;;;1989     while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET) && (count > 0))
;;;1990     {
;;;1991       *psdstatus = SDIO_ReadData();
;;;1992       psdstatus++;
;;;1993       count--;
;;;1994     }
;;;1995     /*!< Clear all the static status flags*/
;;;1996     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
;;;1997   
;;;1998     return(errorstatus);
;;;1999   }
000018  bd70              POP      {r4-r6,pc}
                  |L36.26|
00001a  2040              MOVS     r0,#0x40              ;1901
00001c  4954              LDR      r1,|L36.368|
00001e  6008              STR      r0,[r1,#0]            ;1901  ; SDIO_CmdInitStructure
000020  2010              MOVS     r0,#0x10              ;1902
000022  6048              STR      r0,[r1,#4]            ;1902  ; SDIO_CmdInitStructure
000024  2040              MOVS     r0,#0x40              ;1903
000026  6088              STR      r0,[r1,#8]            ;1903  ; SDIO_CmdInitStructure
000028  2000              MOVS     r0,#0                 ;1904
00002a  60c8              STR      r0,[r1,#0xc]          ;1904  ; SDIO_CmdInitStructure
00002c  f44f6080          MOV      r0,#0x400             ;1905
000030  6108              STR      r0,[r1,#0x10]         ;1905  ; SDIO_CmdInitStructure
000032  4608              MOV      r0,r1                 ;1906
000034  f7fffffe          BL       SDIO_SendCommand
000038  2010              MOVS     r0,#0x10              ;1908
00003a  f7fffffe          BL       CmdResp1Error
00003e  4606              MOV      r6,r0                 ;1908
000040  b10e              CBZ      r6,|L36.70|
000042  4630              MOV      r0,r6                 ;1912
000044  e7e8              B        |L36.24|
                  |L36.70|
000046  484b              LDR      r0,|L36.372|
000048  8800              LDRH     r0,[r0,#0]            ;1916  ; RCA
00004a  0400              LSLS     r0,r0,#16             ;1916
00004c  4948              LDR      r1,|L36.368|
00004e  6008              STR      r0,[r1,#0]            ;1916  ; SDIO_CmdInitStructure
000050  2037              MOVS     r0,#0x37              ;1917
000052  6048              STR      r0,[r1,#4]            ;1917  ; SDIO_CmdInitStructure
000054  2040              MOVS     r0,#0x40              ;1918
000056  6088              STR      r0,[r1,#8]            ;1918  ; SDIO_CmdInitStructure
000058  2000              MOVS     r0,#0                 ;1919
00005a  60c8              STR      r0,[r1,#0xc]          ;1919  ; SDIO_CmdInitStructure
00005c  f44f6080          MOV      r0,#0x400             ;1920
000060  6108              STR      r0,[r1,#0x10]         ;1920  ; SDIO_CmdInitStructure
000062  4608              MOV      r0,r1                 ;1921
000064  f7fffffe          BL       SDIO_SendCommand
000068  2037              MOVS     r0,#0x37              ;1922
00006a  f7fffffe          BL       CmdResp1Error
00006e  4606              MOV      r6,r0                 ;1922
000070  b10e              CBZ      r6,|L36.118|
000072  4630              MOV      r0,r6                 ;1926
000074  e7d0              B        |L36.24|
                  |L36.118|
000076  f04f30ff          MOV      r0,#0xffffffff        ;1929
00007a  493f              LDR      r1,|L36.376|
00007c  6008              STR      r0,[r1,#0]            ;1929  ; SDIO_DataInitStructure
00007e  2040              MOVS     r0,#0x40              ;1930
000080  6048              STR      r0,[r1,#4]            ;1930  ; SDIO_DataInitStructure
000082  2060              MOVS     r0,#0x60              ;1931
000084  6088              STR      r0,[r1,#8]            ;1931  ; SDIO_DataInitStructure
000086  2002              MOVS     r0,#2                 ;1932
000088  60c8              STR      r0,[r1,#0xc]          ;1932  ; SDIO_DataInitStructure
00008a  2000              MOVS     r0,#0                 ;1933
00008c  6108              STR      r0,[r1,#0x10]         ;1933  ; SDIO_DataInitStructure
00008e  2001              MOVS     r0,#1                 ;1934
000090  6148              STR      r0,[r1,#0x14]         ;1934  ; SDIO_DataInitStructure
000092  4608              MOV      r0,r1                 ;1935
000094  f7fffffe          BL       SDIO_DataConfig
000098  2000              MOVS     r0,#0                 ;1938
00009a  4935              LDR      r1,|L36.368|
00009c  6008              STR      r0,[r1,#0]            ;1938  ; SDIO_CmdInitStructure
00009e  200d              MOVS     r0,#0xd               ;1939
0000a0  6048              STR      r0,[r1,#4]            ;1939  ; SDIO_CmdInitStructure
0000a2  2040              MOVS     r0,#0x40              ;1940
0000a4  6088              STR      r0,[r1,#8]            ;1940  ; SDIO_CmdInitStructure
0000a6  2000              MOVS     r0,#0                 ;1941
0000a8  60c8              STR      r0,[r1,#0xc]          ;1941  ; SDIO_CmdInitStructure
0000aa  f44f6080          MOV      r0,#0x400             ;1942
0000ae  6108              STR      r0,[r1,#0x10]         ;1942  ; SDIO_CmdInitStructure
0000b0  4608              MOV      r0,r1                 ;1943
0000b2  f7fffffe          BL       SDIO_SendCommand
0000b6  200d              MOVS     r0,#0xd               ;1944
0000b8  f7fffffe          BL       CmdResp1Error
0000bc  4606              MOV      r6,r0                 ;1944
0000be  b10e              CBZ      r6,|L36.196|
0000c0  4630              MOV      r0,r6                 ;1948
0000c2  e7a9              B        |L36.24|
                  |L36.196|
0000c4  e00e              B        |L36.228|
                  |L36.198|
0000c6  f44f4000          MOV      r0,#0x8000            ;1953
0000ca  f7fffffe          BL       SDIO_GetFlagStatus
0000ce  b148              CBZ      r0,|L36.228|
0000d0  2500              MOVS     r5,#0                 ;1955
0000d2  e004              B        |L36.222|
                  |L36.212|
0000d4  f7fffffe          BL       SDIO_ReadData
0000d8  f8440025          STR      r0,[r4,r5,LSL #2]     ;1957
0000dc  1c6d              ADDS     r5,r5,#1              ;1955
                  |L36.222|
0000de  2d08              CMP      r5,#8                 ;1955
0000e0  d3f8              BCC      |L36.212|
0000e2  3420              ADDS     r4,r4,#0x20           ;1959
                  |L36.228|
0000e4  4825              LDR      r0,|L36.380|
0000e6  6800              LDR      r0,[r0,#0]            ;1951
0000e8  f240612a          MOV      r1,#0x62a             ;1951
0000ec  4008              ANDS     r0,r0,r1              ;1951
0000ee  2800              CMP      r0,#0                 ;1951
0000f0  d0e9              BEQ      |L36.198|
0000f2  2008              MOVS     r0,#8                 ;1963
0000f4  f7fffffe          BL       SDIO_GetFlagStatus
0000f8  b128              CBZ      r0,|L36.262|
0000fa  2008              MOVS     r0,#8                 ;1965
0000fc  f7fffffe          BL       SDIO_ClearFlag
000100  2604              MOVS     r6,#4                 ;1966
000102  4630              MOV      r0,r6                 ;1967
000104  e788              B        |L36.24|
                  |L36.262|
000106  2002              MOVS     r0,#2                 ;1969
000108  f7fffffe          BL       SDIO_GetFlagStatus
00010c  b128              CBZ      r0,|L36.282|
00010e  2002              MOVS     r0,#2                 ;1971
000110  f7fffffe          BL       SDIO_ClearFlag
000114  2602              MOVS     r6,#2                 ;1972
000116  4630              MOV      r0,r6                 ;1973
000118  e77e              B        |L36.24|
                  |L36.282|
00011a  2020              MOVS     r0,#0x20              ;1975
00011c  f7fffffe          BL       SDIO_GetFlagStatus
000120  b128              CBZ      r0,|L36.302|
000122  2020              MOVS     r0,#0x20              ;1977
000124  f7fffffe          BL       SDIO_ClearFlag
000128  2606              MOVS     r6,#6                 ;1978
00012a  4630              MOV      r0,r6                 ;1979
00012c  e774              B        |L36.24|
                  |L36.302|
00012e  f44f7000          MOV      r0,#0x200             ;1981
000132  f7fffffe          BL       SDIO_GetFlagStatus
000136  b130              CBZ      r0,|L36.326|
000138  f44f7000          MOV      r0,#0x200             ;1983
00013c  f7fffffe          BL       SDIO_ClearFlag
000140  2607              MOVS     r6,#7                 ;1984
000142  4630              MOV      r0,r6                 ;1985
000144  e768              B        |L36.24|
                  |L36.326|
000146  f04f35ff          MOV      r5,#0xffffffff        ;1988
00014a  e004              B        |L36.342|
                  |L36.332|
00014c  f7fffffe          BL       SDIO_ReadData
000150  6020              STR      r0,[r4,#0]            ;1991
000152  1d24              ADDS     r4,r4,#4              ;1992
000154  1e6d              SUBS     r5,r5,#1              ;1993
                  |L36.342|
000156  f44f1000          MOV      r0,#0x200000          ;1989
00015a  f7fffffe          BL       SDIO_GetFlagStatus
00015e  b108              CBZ      r0,|L36.356|
000160  2d00              CMP      r5,#0                 ;1989
000162  d1f3              BNE      |L36.332|
                  |L36.356|
000164  f24050ff          MOV      r0,#0x5ff             ;1996
000168  f7fffffe          BL       SDIO_ClearFlag
00016c  4630              MOV      r0,r6                 ;1998
00016e  e753              B        |L36.24|
;;;2000   
                          ENDP

                  |L36.368|
                          DCD      SDIO_CmdInitStructure
                  |L36.372|
                          DCD      ||RCA||
                  |L36.376|
                          DCD      SDIO_DataInitStructure
                  |L36.380|
                          DCD      0x40012c34

                          AREA ||i.SD_SendStatus||, CODE, READONLY, ALIGN=2

                  SD_SendStatus PROC
;;;1853     */
;;;1854   SD_Error SD_SendStatus(uint32_t *pcardstatus)
000000  b570              PUSH     {r4-r6,lr}
;;;1855   {
000002  4604              MOV      r4,r0
;;;1856     SD_Error errorstatus = SD_OK;
000004  2500              MOVS     r5,#0
;;;1857   
;;;1858     if (pcardstatus == NULL)
000006  b914              CBNZ     r4,|L37.14|
;;;1859     {
;;;1860       errorstatus = SD_INVALID_PARAMETER;
000008  2526              MOVS     r5,#0x26
;;;1861       return(errorstatus);
00000a  4628              MOV      r0,r5
                  |L37.12|
;;;1862     }
;;;1863   
;;;1864     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
;;;1865     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SEND_STATUS;
;;;1866     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1867     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1868     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1869     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1870   
;;;1871     errorstatus = CmdResp1Error(SD_CMD_SEND_STATUS);
;;;1872   
;;;1873     if (errorstatus != SD_OK)
;;;1874     {
;;;1875       return(errorstatus);
;;;1876     }
;;;1877   
;;;1878     *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
;;;1879   
;;;1880     return(errorstatus);
;;;1881   }
00000c  bd70              POP      {r4-r6,pc}
                  |L37.14|
00000e  480f              LDR      r0,|L37.76|
000010  8800              LDRH     r0,[r0,#0]            ;1864  ; RCA
000012  0400              LSLS     r0,r0,#16             ;1864
000014  490e              LDR      r1,|L37.80|
000016  6008              STR      r0,[r1,#0]            ;1864  ; SDIO_CmdInitStructure
000018  200d              MOVS     r0,#0xd               ;1865
00001a  6048              STR      r0,[r1,#4]            ;1865  ; SDIO_CmdInitStructure
00001c  2040              MOVS     r0,#0x40              ;1866
00001e  6088              STR      r0,[r1,#8]            ;1866  ; SDIO_CmdInitStructure
000020  2000              MOVS     r0,#0                 ;1867
000022  60c8              STR      r0,[r1,#0xc]          ;1867  ; SDIO_CmdInitStructure
000024  f44f6080          MOV      r0,#0x400             ;1868
000028  6108              STR      r0,[r1,#0x10]         ;1868  ; SDIO_CmdInitStructure
00002a  4608              MOV      r0,r1                 ;1869
00002c  f7fffffe          BL       SDIO_SendCommand
000030  200d              MOVS     r0,#0xd               ;1871
000032  f7fffffe          BL       CmdResp1Error
000036  4605              MOV      r5,r0                 ;1871
000038  b10d              CBZ      r5,|L37.62|
00003a  4628              MOV      r0,r5                 ;1875
00003c  e7e6              B        |L37.12|
                  |L37.62|
00003e  2000              MOVS     r0,#0                 ;1878
000040  f7fffffe          BL       SDIO_GetResponse
000044  6020              STR      r0,[r4,#0]            ;1878
000046  4628              MOV      r0,r5                 ;1880
000048  e7e0              B        |L37.12|
;;;1882   
                          ENDP

00004a  0000              DCW      0x0000
                  |L37.76|
                          DCD      ||RCA||
                  |L37.80|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_StopTransfer||, CODE, READONLY, ALIGN=2

                  SD_StopTransfer PROC
;;;1734     */
;;;1735   SD_Error SD_StopTransfer(void)
000000  b510              PUSH     {r4,lr}
;;;1736   {
;;;1737     SD_Error errorstatus = SD_OK;
000002  2400              MOVS     r4,#0
;;;1738   
;;;1739     /*!< Send CMD12 STOP_TRANSMISSION  */
;;;1740     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
000004  2000              MOVS     r0,#0
000006  490a              LDR      r1,|L38.48|
000008  6008              STR      r0,[r1,#0]  ; SDIO_CmdInitStructure
;;;1741     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_STOP_TRANSMISSION;
00000a  200c              MOVS     r0,#0xc
00000c  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1742     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00000e  2040              MOVS     r0,#0x40
000010  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1743     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000012  2000              MOVS     r0,#0
000014  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1744     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000016  f44f6080          MOV      r0,#0x400
00001a  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1745     SDIO_SendCommand(&SDIO_CmdInitStructure);
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       SDIO_SendCommand
;;;1746   
;;;1747     errorstatus = CmdResp1Error(SD_CMD_STOP_TRANSMISSION);
000022  200c              MOVS     r0,#0xc
000024  f7fffffe          BL       CmdResp1Error
000028  4604              MOV      r4,r0
;;;1748   
;;;1749     return(errorstatus);
00002a  4620              MOV      r0,r4
;;;1750   }
00002c  bd10              POP      {r4,pc}
;;;1751   
                          ENDP

00002e  0000              DCW      0x0000
                  |L38.48|
                          DCD      SDIO_CmdInitStructure

                          AREA ||i.SD_WaitReadOperation||, CODE, READONLY, ALIGN=2

                  SD_WaitReadOperation PROC
;;;1371     */
;;;1372   SD_Error SD_WaitReadOperation(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1373   {
;;;1374     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;1375     uint32_t timeout;
;;;1376   
;;;1377     timeout = SD_DATATIMEOUT;
000004  1e6c              SUBS     r4,r5,#1
;;;1378     
;;;1379     while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
000006  e000              B        |L39.10|
                  |L39.8|
;;;1380     {
;;;1381       timeout--;
000008  1e64              SUBS     r4,r4,#1
                  |L39.10|
00000a  4818              LDR      r0,|L39.108|
00000c  6800              LDR      r0,[r0,#0]            ;1379  ; DMAEndOfTransfer
00000e  b938              CBNZ     r0,|L39.32|
000010  4817              LDR      r0,|L39.112|
000012  6800              LDR      r0,[r0,#0]            ;1379  ; TransferEnd
000014  b920              CBNZ     r0,|L39.32|
000016  4817              LDR      r0,|L39.116|
000018  7800              LDRB     r0,[r0,#0]            ;1379  ; TransferError
00001a  b908              CBNZ     r0,|L39.32|
00001c  2c00              CMP      r4,#0                 ;1379
00001e  d1f3              BNE      |L39.8|
                  |L39.32|
;;;1382     }
;;;1383     
;;;1384     DMAEndOfTransfer = 0x00;
000020  2000              MOVS     r0,#0
000022  4912              LDR      r1,|L39.108|
000024  6008              STR      r0,[r1,#0]  ; DMAEndOfTransfer
;;;1385   
;;;1386     timeout = SD_DATATIMEOUT;
000026  1e44              SUBS     r4,r0,#1
;;;1387     
;;;1388     while(((SDIO->STA & SDIO_FLAG_RXACT)) && (timeout > 0))
000028  e000              B        |L39.44|
                  |L39.42|
;;;1389     {
;;;1390       timeout--;  
00002a  1e64              SUBS     r4,r4,#1
                  |L39.44|
00002c  4812              LDR      r0,|L39.120|
00002e  6800              LDR      r0,[r0,#0]            ;1388
000030  f4005000          AND      r0,r0,#0x2000         ;1388
000034  b108              CBZ      r0,|L39.58|
000036  2c00              CMP      r4,#0                 ;1388
000038  d1f7              BNE      |L39.42|
                  |L39.58|
;;;1391     }
;;;1392   
;;;1393     if (StopCondition == 1)
00003a  4810              LDR      r0,|L39.124|
00003c  6800              LDR      r0,[r0,#0]  ; StopCondition
00003e  2801              CMP      r0,#1
000040  d105              BNE      |L39.78|
;;;1394     {
;;;1395       errorstatus = SD_StopTransfer();
000042  f7fffffe          BL       SD_StopTransfer
000046  4605              MOV      r5,r0
;;;1396       StopCondition = 0;
000048  2000              MOVS     r0,#0
00004a  490c              LDR      r1,|L39.124|
00004c  6008              STR      r0,[r1,#0]  ; StopCondition
                  |L39.78|
;;;1397     }
;;;1398     
;;;1399     if ((timeout == 0) && (errorstatus == SD_OK))
00004e  b90c              CBNZ     r4,|L39.84|
000050  b905              CBNZ     r5,|L39.84|
;;;1400     {
;;;1401       errorstatus = SD_DATA_TIMEOUT;
000052  2504              MOVS     r5,#4
                  |L39.84|
;;;1402     }
;;;1403     
;;;1404     /*!< Clear all the static flags */
;;;1405     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
000054  f24050ff          MOV      r0,#0x5ff
000058  f7fffffe          BL       SDIO_ClearFlag
;;;1406   
;;;1407     if (TransferError != SD_OK)
00005c  4805              LDR      r0,|L39.116|
00005e  7800              LDRB     r0,[r0,#0]  ; TransferError
000060  b110              CBZ      r0,|L39.104|
;;;1408     {
;;;1409       return(TransferError);
000062  4804              LDR      r0,|L39.116|
000064  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L39.102|
;;;1410     }
;;;1411     else
;;;1412     {
;;;1413       return(errorstatus);  
;;;1414     }
;;;1415   }
000066  bd70              POP      {r4-r6,pc}
                  |L39.104|
000068  4628              MOV      r0,r5                 ;1413
00006a  e7fc              B        |L39.102|
;;;1416   
                          ENDP

                  |L39.108|
                          DCD      DMAEndOfTransfer
                  |L39.112|
                          DCD      TransferEnd
                  |L39.116|
                          DCD      TransferError
                  |L39.120|
                          DCD      0x40012c34
                  |L39.124|
                          DCD      StopCondition

                          AREA ||i.SD_WaitWriteOperation||, CODE, READONLY, ALIGN=2

                  SD_WaitWriteOperation PROC
;;;1664     */
;;;1665   SD_Error SD_WaitWriteOperation(void)
000000  b570              PUSH     {r4-r6,lr}
;;;1666   {
;;;1667     SD_Error errorstatus = SD_OK;
000002  2500              MOVS     r5,#0
;;;1668     uint32_t timeout;
;;;1669   
;;;1670     timeout = SD_DATATIMEOUT;
000004  1e6c              SUBS     r4,r5,#1
;;;1671     
;;;1672     while ((DMAEndOfTransfer == 0x00) && (TransferEnd == 0) && (TransferError == SD_OK) && (timeout > 0))
000006  e000              B        |L40.10|
                  |L40.8|
;;;1673     {
;;;1674       timeout--;
000008  1e64              SUBS     r4,r4,#1
                  |L40.10|
00000a  4818              LDR      r0,|L40.108|
00000c  6800              LDR      r0,[r0,#0]            ;1672  ; DMAEndOfTransfer
00000e  b938              CBNZ     r0,|L40.32|
000010  4817              LDR      r0,|L40.112|
000012  6800              LDR      r0,[r0,#0]            ;1672  ; TransferEnd
000014  b920              CBNZ     r0,|L40.32|
000016  4817              LDR      r0,|L40.116|
000018  7800              LDRB     r0,[r0,#0]            ;1672  ; TransferError
00001a  b908              CBNZ     r0,|L40.32|
00001c  2c00              CMP      r4,#0                 ;1672
00001e  d1f3              BNE      |L40.8|
                  |L40.32|
;;;1675     }
;;;1676     
;;;1677     DMAEndOfTransfer = 0x00;
000020  2000              MOVS     r0,#0
000022  4912              LDR      r1,|L40.108|
000024  6008              STR      r0,[r1,#0]  ; DMAEndOfTransfer
;;;1678   
;;;1679     timeout = SD_DATATIMEOUT;
000026  1e44              SUBS     r4,r0,#1
;;;1680     
;;;1681     while(((SDIO->STA & SDIO_FLAG_TXACT)) && (timeout > 0))
000028  e000              B        |L40.44|
                  |L40.42|
;;;1682     {
;;;1683       timeout--;  
00002a  1e64              SUBS     r4,r4,#1
                  |L40.44|
00002c  4812              LDR      r0,|L40.120|
00002e  6800              LDR      r0,[r0,#0]            ;1681
000030  f4005080          AND      r0,r0,#0x1000         ;1681
000034  b108              CBZ      r0,|L40.58|
000036  2c00              CMP      r4,#0                 ;1681
000038  d1f7              BNE      |L40.42|
                  |L40.58|
;;;1684     }
;;;1685   
;;;1686     if (StopCondition == 1)
00003a  4810              LDR      r0,|L40.124|
00003c  6800              LDR      r0,[r0,#0]  ; StopCondition
00003e  2801              CMP      r0,#1
000040  d105              BNE      |L40.78|
;;;1687     {
;;;1688       errorstatus = SD_StopTransfer();
000042  f7fffffe          BL       SD_StopTransfer
000046  4605              MOV      r5,r0
;;;1689       StopCondition = 0;
000048  2000              MOVS     r0,#0
00004a  490c              LDR      r1,|L40.124|
00004c  6008              STR      r0,[r1,#0]  ; StopCondition
                  |L40.78|
;;;1690     }
;;;1691     
;;;1692     if ((timeout == 0) && (errorstatus == SD_OK))
00004e  b90c              CBNZ     r4,|L40.84|
000050  b905              CBNZ     r5,|L40.84|
;;;1693     {
;;;1694       errorstatus = SD_DATA_TIMEOUT;
000052  2504              MOVS     r5,#4
                  |L40.84|
;;;1695     }
;;;1696     
;;;1697     /*!< Clear all the static flags */
;;;1698     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
000054  f24050ff          MOV      r0,#0x5ff
000058  f7fffffe          BL       SDIO_ClearFlag
;;;1699     
;;;1700     if (TransferError != SD_OK)
00005c  4805              LDR      r0,|L40.116|
00005e  7800              LDRB     r0,[r0,#0]  ; TransferError
000060  b110              CBZ      r0,|L40.104|
;;;1701     {
;;;1702       return(TransferError);
000062  4804              LDR      r0,|L40.116|
000064  7800              LDRB     r0,[r0,#0]  ; TransferError
                  |L40.102|
;;;1703     }
;;;1704     else
;;;1705     {
;;;1706       return(errorstatus);
;;;1707     }
;;;1708   }
000066  bd70              POP      {r4-r6,pc}
                  |L40.104|
000068  4628              MOV      r0,r5                 ;1706
00006a  e7fc              B        |L40.102|
;;;1709   
                          ENDP

                  |L40.108|
                          DCD      DMAEndOfTransfer
                  |L40.112|
                          DCD      TransferEnd
                  |L40.116|
                          DCD      TransferError
                  |L40.120|
                          DCD      0x40012c34
                  |L40.124|
                          DCD      StopCondition

                          AREA ||i.SD_WriteBlock||, CODE, READONLY, ALIGN=2

                  SD_WriteBlock PROC
;;;1430     */
;;;1431   SD_Error SD_WriteBlock(uint8_t *writebuff, uint64_t WriteAddr, uint16_t BlockSize)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1432   {
000004  4680              MOV      r8,r0
000006  4614              MOV      r4,r2
000008  461d              MOV      r5,r3
00000a  9e06              LDR      r6,[sp,#0x18]
;;;1433     SD_Error errorstatus = SD_OK;
00000c  2700              MOVS     r7,#0
;;;1434   
;;;1435   #if defined (SD_POLLING_MODE)
;;;1436     uint32_t bytestransferred = 0, count = 0, restwords = 0;
;;;1437     uint32_t *tempbuff = (uint32_t *)writebuff;
;;;1438   #endif
;;;1439   
;;;1440     TransferError = SD_OK;
00000e  2000              MOVS     r0,#0
000010  492f              LDR      r1,|L41.208|
000012  7008              STRB     r0,[r1,#0]
;;;1441     TransferEnd = 0;
000014  492f              LDR      r1,|L41.212|
000016  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1442     StopCondition = 0;
000018  492f              LDR      r1,|L41.216|
00001a  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1443   
;;;1444     SDIO->DCTRL = 0x0;
00001c  492f              LDR      r1,|L41.220|
00001e  6008              STR      r0,[r1,#0]
;;;1445   
;;;1446   #if defined (SD_DMA_MODE)
;;;1447     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
000020  2101              MOVS     r1,#1
000022  f240302a          MOV      r0,#0x32a
000026  f7fffffe          BL       SDIO_ITConfig
;;;1448     SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, BlockSize);
00002a  4631              MOV      r1,r6
00002c  4640              MOV      r0,r8
00002e  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
;;;1449     SDIO_DMACmd(ENABLE);
000032  2001              MOVS     r0,#1
000034  f7fffffe          BL       SDIO_DMACmd
;;;1450   #endif
;;;1451   
;;;1452     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000038  4829              LDR      r0,|L41.224|
00003a  6800              LDR      r0,[r0,#0]  ; CardType
00003c  2802              CMP      r0,#2
00003e  d108              BNE      |L41.82|
;;;1453     {
;;;1454       BlockSize = 512;
000040  0206              LSLS     r6,r0,#8
;;;1455       WriteAddr /= 512;
000042  0202              LSLS     r2,r0,#8
000044  2300              MOVS     r3,#0
000046  4620              MOV      r0,r4
000048  4629              MOV      r1,r5
00004a  f7fffffe          BL       __aeabi_uldivmod
00004e  4604              MOV      r4,r0
000050  460d              MOV      r5,r1
                  |L41.82|
;;;1456     }
;;;1457   
;;;1458     /* Set Block Size for Card */ 
;;;1459     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
000052  4824              LDR      r0,|L41.228|
000054  6006              STR      r6,[r0,#0]  ; SDIO_CmdInitStructure
;;;1460     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
000056  2010              MOVS     r0,#0x10
000058  4922              LDR      r1,|L41.228|
00005a  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1461     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
00005c  2040              MOVS     r0,#0x40
00005e  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1462     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000060  2000              MOVS     r0,#0
000062  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1463     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
000064  f44f6080          MOV      r0,#0x400
000068  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1464     SDIO_SendCommand(&SDIO_CmdInitStructure);
00006a  4608              MOV      r0,r1
00006c  f7fffffe          BL       SDIO_SendCommand
;;;1465   
;;;1466     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000070  2010              MOVS     r0,#0x10
000072  f7fffffe          BL       CmdResp1Error
000076  4607              MOV      r7,r0
;;;1467   
;;;1468     if (SD_OK != errorstatus)
000078  b117              CBZ      r7,|L41.128|
;;;1469     {
;;;1470       return(errorstatus);
00007a  4638              MOV      r0,r7
                  |L41.124|
;;;1471     }
;;;1472   
;;;1473     /*!< Send CMD24 WRITE_SINGLE_BLOCK */
;;;1474     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
;;;1475     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_SINGLE_BLOCK;
;;;1476     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1477     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1478     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1479     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1480   
;;;1481     errorstatus = CmdResp1Error(SD_CMD_WRITE_SINGLE_BLOCK);
;;;1482   
;;;1483     if (errorstatus != SD_OK)
;;;1484     {
;;;1485       return(errorstatus);
;;;1486     }
;;;1487   
;;;1488     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1489     SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
;;;1490     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
;;;1491     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1492     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1493     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1494     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1495   
;;;1496     /*!< In case of single data block transfer no need of stop command at all */
;;;1497   #if defined (SD_POLLING_MODE) 
;;;1498     while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_STBITERR)))
;;;1499     {
;;;1500       if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
;;;1501       {
;;;1502         if ((512 - bytestransferred) < 32)
;;;1503         {
;;;1504           restwords = ((512 - bytestransferred) % 4 == 0) ? ((512 - bytestransferred) / 4) : (( 512 -  bytestransferred) / 4 + 1);
;;;1505           for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
;;;1506           {
;;;1507             SDIO_WriteData(*tempbuff);
;;;1508           }
;;;1509         }
;;;1510         else
;;;1511         {
;;;1512           for (count = 0; count < 8; count++)
;;;1513           {
;;;1514             SDIO_WriteData(*(tempbuff + count));
;;;1515           }
;;;1516           tempbuff += 8;
;;;1517           bytestransferred += 32;
;;;1518         }
;;;1519       }
;;;1520     }
;;;1521     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
;;;1522     {
;;;1523       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
;;;1524       errorstatus = SD_DATA_TIMEOUT;
;;;1525       return(errorstatus);
;;;1526     }
;;;1527     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
;;;1528     {
;;;1529       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
;;;1530       errorstatus = SD_DATA_CRC_FAIL;
;;;1531       return(errorstatus);
;;;1532     }
;;;1533     else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
;;;1534     {
;;;1535       SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
;;;1536       errorstatus = SD_TX_UNDERRUN;
;;;1537       return(errorstatus);
;;;1538     }
;;;1539     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
;;;1540     {
;;;1541       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
;;;1542       errorstatus = SD_START_BIT_ERR;
;;;1543       return(errorstatus);
;;;1544     }
;;;1545     
;;;1546   #endif
;;;1547     
;;;1548     return(errorstatus);
;;;1549   }
00007c  e8bd81f0          POP      {r4-r8,pc}
                  |L41.128|
000080  4818              LDR      r0,|L41.228|
000082  6004              STR      r4,[r0,#0]            ;1474  ; SDIO_CmdInitStructure
000084  2018              MOVS     r0,#0x18              ;1475
000086  4917              LDR      r1,|L41.228|
000088  6048              STR      r0,[r1,#4]            ;1475  ; SDIO_CmdInitStructure
00008a  2040              MOVS     r0,#0x40              ;1476
00008c  6088              STR      r0,[r1,#8]            ;1476  ; SDIO_CmdInitStructure
00008e  2000              MOVS     r0,#0                 ;1477
000090  60c8              STR      r0,[r1,#0xc]          ;1477  ; SDIO_CmdInitStructure
000092  f44f6080          MOV      r0,#0x400             ;1478
000096  6108              STR      r0,[r1,#0x10]         ;1478  ; SDIO_CmdInitStructure
000098  4608              MOV      r0,r1                 ;1479
00009a  f7fffffe          BL       SDIO_SendCommand
00009e  2018              MOVS     r0,#0x18              ;1481
0000a0  f7fffffe          BL       CmdResp1Error
0000a4  4607              MOV      r7,r0                 ;1481
0000a6  b10f              CBZ      r7,|L41.172|
0000a8  4638              MOV      r0,r7                 ;1485
0000aa  e7e7              B        |L41.124|
                  |L41.172|
0000ac  f04f30ff          MOV      r0,#0xffffffff        ;1488
0000b0  490d              LDR      r1,|L41.232|
0000b2  6008              STR      r0,[r1,#0]            ;1488  ; SDIO_DataInitStructure
0000b4  4608              MOV      r0,r1                 ;1489
0000b6  6046              STR      r6,[r0,#4]            ;1489  ; SDIO_DataInitStructure
0000b8  2090              MOVS     r0,#0x90              ;1490
0000ba  6088              STR      r0,[r1,#8]            ;1490  ; SDIO_DataInitStructure
0000bc  2000              MOVS     r0,#0                 ;1491
0000be  60c8              STR      r0,[r1,#0xc]          ;1491  ; SDIO_DataInitStructure
0000c0  6108              STR      r0,[r1,#0x10]         ;1492  ; SDIO_DataInitStructure
0000c2  2001              MOVS     r0,#1                 ;1493
0000c4  6148              STR      r0,[r1,#0x14]         ;1493  ; SDIO_DataInitStructure
0000c6  4608              MOV      r0,r1                 ;1494
0000c8  f7fffffe          BL       SDIO_DataConfig
0000cc  4638              MOV      r0,r7                 ;1548
0000ce  e7d5              B        |L41.124|
;;;1550   
                          ENDP

                  |L41.208|
                          DCD      TransferError
                  |L41.212|
                          DCD      TransferEnd
                  |L41.216|
                          DCD      StopCondition
                  |L41.220|
                          DCD      0x40012c2c
                  |L41.224|
                          DCD      CardType
                  |L41.228|
                          DCD      SDIO_CmdInitStructure
                  |L41.232|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.SD_WriteMultiBlocks||, CODE, READONLY, ALIGN=2

                  SD_WriteMultiBlocks PROC
;;;1565     */
;;;1566   SD_Error SD_WriteMultiBlocks(uint8_t *writebuff, uint64_t WriteAddr, uint16_t BlockSize, uint32_t NumberOfBlocks)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1567   {
000004  4681              MOV      r9,r0
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
00000a  e9dd7808          LDRD     r7,r8,[sp,#0x20]
;;;1568     SD_Error errorstatus = SD_OK;
00000e  2400              MOVS     r4,#0
;;;1569   
;;;1570     TransferError = SD_OK;
000010  2000              MOVS     r0,#0
000012  4949              LDR      r1,|L42.312|
000014  7008              STRB     r0,[r1,#0]
;;;1571     TransferEnd = 0;
000016  4949              LDR      r1,|L42.316|
000018  6008              STR      r0,[r1,#0]  ; TransferEnd
;;;1572     StopCondition = 1;
00001a  2001              MOVS     r0,#1
00001c  4948              LDR      r1,|L42.320|
00001e  6008              STR      r0,[r1,#0]  ; StopCondition
;;;1573     SDIO->DCTRL = 0x0;
000020  2000              MOVS     r0,#0
000022  4948              LDR      r1,|L42.324|
000024  6008              STR      r0,[r1,#0]
;;;1574   
;;;1575     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT_STBITERR, ENABLE);
000026  2101              MOVS     r1,#1
000028  f240302a          MOV      r0,#0x32a
00002c  f7fffffe          BL       SDIO_ITConfig
;;;1576     SD_LowLevel_DMA_TxConfig((uint32_t *)writebuff, (NumberOfBlocks * BlockSize));
000030  fb08f107          MUL      r1,r8,r7
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       SD_LowLevel_DMA_TxConfig
;;;1577     SDIO_DMACmd(ENABLE);
00003a  2001              MOVS     r0,#1
00003c  f7fffffe          BL       SDIO_DMACmd
;;;1578   
;;;1579     if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
000040  4841              LDR      r0,|L42.328|
000042  6800              LDR      r0,[r0,#0]  ; CardType
000044  2802              CMP      r0,#2
000046  d108              BNE      |L42.90|
;;;1580     {
;;;1581       BlockSize = 512;
000048  0207              LSLS     r7,r0,#8
;;;1582       WriteAddr /= 512;
00004a  0202              LSLS     r2,r0,#8
00004c  2300              MOVS     r3,#0
00004e  4628              MOV      r0,r5
000050  4631              MOV      r1,r6
000052  f7fffffe          BL       __aeabi_uldivmod
000056  4605              MOV      r5,r0
000058  460e              MOV      r6,r1
                  |L42.90|
;;;1583     }
;;;1584   
;;;1585     /* Set Block Size for Card */ 
;;;1586     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
00005a  483c              LDR      r0,|L42.332|
00005c  6007              STR      r7,[r0,#0]  ; SDIO_CmdInitStructure
;;;1587     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCKLEN;
00005e  2010              MOVS     r0,#0x10
000060  493a              LDR      r1,|L42.332|
000062  6048              STR      r0,[r1,#4]  ; SDIO_CmdInitStructure
;;;1588     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
000064  2040              MOVS     r0,#0x40
000066  6088              STR      r0,[r1,#8]  ; SDIO_CmdInitStructure
;;;1589     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
000068  2000              MOVS     r0,#0
00006a  60c8              STR      r0,[r1,#0xc]  ; SDIO_CmdInitStructure
;;;1590     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
00006c  f44f6080          MOV      r0,#0x400
000070  6108              STR      r0,[r1,#0x10]  ; SDIO_CmdInitStructure
;;;1591     SDIO_SendCommand(&SDIO_CmdInitStructure);
000072  4608              MOV      r0,r1
000074  f7fffffe          BL       SDIO_SendCommand
;;;1592   
;;;1593     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCKLEN);
000078  2010              MOVS     r0,#0x10
00007a  f7fffffe          BL       CmdResp1Error
00007e  4604              MOV      r4,r0
;;;1594   
;;;1595     if (SD_OK != errorstatus)
000080  b114              CBZ      r4,|L42.136|
;;;1596     {
;;;1597       return(errorstatus);
000082  4620              MOV      r0,r4
                  |L42.132|
;;;1598     }
;;;1599     
;;;1600     /*!< To improve performance */
;;;1601     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
;;;1602     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_APP_CMD;
;;;1603     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1604     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1605     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1606     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1607   
;;;1608   
;;;1609     errorstatus = CmdResp1Error(SD_CMD_APP_CMD);
;;;1610   
;;;1611     if (errorstatus != SD_OK)
;;;1612     {
;;;1613       return(errorstatus);
;;;1614     }
;;;1615     /*!< To improve performance */
;;;1616     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
;;;1617     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_SET_BLOCK_COUNT;
;;;1618     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1619     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1620     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1621     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1622   
;;;1623     errorstatus = CmdResp1Error(SD_CMD_SET_BLOCK_COUNT);
;;;1624   
;;;1625     if (errorstatus != SD_OK)
;;;1626     {
;;;1627       return(errorstatus);
;;;1628     }
;;;1629   
;;;1630   
;;;1631     /*!< Send CMD25 WRITE_MULT_BLOCK with argument data address */
;;;1632     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)WriteAddr;
;;;1633     SDIO_CmdInitStructure.SDIO_CmdIndex = SD_CMD_WRITE_MULT_BLOCK;
;;;1634     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
;;;1635     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
;;;1636     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
;;;1637     SDIO_SendCommand(&SDIO_CmdInitStructure);
;;;1638   
;;;1639     errorstatus = CmdResp1Error(SD_CMD_WRITE_MULT_BLOCK);
;;;1640   
;;;1641     if (SD_OK != errorstatus)
;;;1642     {
;;;1643       return(errorstatus);
;;;1644     }
;;;1645   
;;;1646     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
;;;1647     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
;;;1648     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) 9 << 4;
;;;1649     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
;;;1650     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
;;;1651     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
;;;1652     SDIO_DataConfig(&SDIO_DataInitStructure);
;;;1653   
;;;1654     return(errorstatus);
;;;1655   }
000084  e8bd87f0          POP      {r4-r10,pc}
                  |L42.136|
000088  4831              LDR      r0,|L42.336|
00008a  8800              LDRH     r0,[r0,#0]            ;1601  ; RCA
00008c  0400              LSLS     r0,r0,#16             ;1601
00008e  492f              LDR      r1,|L42.332|
000090  6008              STR      r0,[r1,#0]            ;1601  ; SDIO_CmdInitStructure
000092  2037              MOVS     r0,#0x37              ;1602
000094  6048              STR      r0,[r1,#4]            ;1602  ; SDIO_CmdInitStructure
000096  2040              MOVS     r0,#0x40              ;1603
000098  6088              STR      r0,[r1,#8]            ;1603  ; SDIO_CmdInitStructure
00009a  2000              MOVS     r0,#0                 ;1604
00009c  60c8              STR      r0,[r1,#0xc]          ;1604  ; SDIO_CmdInitStructure
00009e  f44f6080          MOV      r0,#0x400             ;1605
0000a2  6108              STR      r0,[r1,#0x10]         ;1605  ; SDIO_CmdInitStructure
0000a4  4608              MOV      r0,r1                 ;1606
0000a6  f7fffffe          BL       SDIO_SendCommand
0000aa  2037              MOVS     r0,#0x37              ;1609
0000ac  f7fffffe          BL       CmdResp1Error
0000b0  4604              MOV      r4,r0                 ;1609
0000b2  b10c              CBZ      r4,|L42.184|
0000b4  4620              MOV      r0,r4                 ;1613
0000b6  e7e5              B        |L42.132|
                  |L42.184|
0000b8  4824              LDR      r0,|L42.332|
0000ba  f8c08000          STR      r8,[r0,#0]            ;1616  ; SDIO_CmdInitStructure
0000be  2017              MOVS     r0,#0x17              ;1617
0000c0  4922              LDR      r1,|L42.332|
0000c2  6048              STR      r0,[r1,#4]            ;1617  ; SDIO_CmdInitStructure
0000c4  2040              MOVS     r0,#0x40              ;1618
0000c6  6088              STR      r0,[r1,#8]            ;1618  ; SDIO_CmdInitStructure
0000c8  2000              MOVS     r0,#0                 ;1619
0000ca  60c8              STR      r0,[r1,#0xc]          ;1619  ; SDIO_CmdInitStructure
0000cc  f44f6080          MOV      r0,#0x400             ;1620
0000d0  6108              STR      r0,[r1,#0x10]         ;1620  ; SDIO_CmdInitStructure
0000d2  4608              MOV      r0,r1                 ;1621
0000d4  f7fffffe          BL       SDIO_SendCommand
0000d8  2017              MOVS     r0,#0x17              ;1623
0000da  f7fffffe          BL       CmdResp1Error
0000de  4604              MOV      r4,r0                 ;1623
0000e0  b10c              CBZ      r4,|L42.230|
0000e2  4620              MOV      r0,r4                 ;1627
0000e4  e7ce              B        |L42.132|
                  |L42.230|
0000e6  4819              LDR      r0,|L42.332|
0000e8  6005              STR      r5,[r0,#0]            ;1632  ; SDIO_CmdInitStructure
0000ea  2019              MOVS     r0,#0x19              ;1633
0000ec  4917              LDR      r1,|L42.332|
0000ee  6048              STR      r0,[r1,#4]            ;1633  ; SDIO_CmdInitStructure
0000f0  2040              MOVS     r0,#0x40              ;1634
0000f2  6088              STR      r0,[r1,#8]            ;1634  ; SDIO_CmdInitStructure
0000f4  2000              MOVS     r0,#0                 ;1635
0000f6  60c8              STR      r0,[r1,#0xc]          ;1635  ; SDIO_CmdInitStructure
0000f8  f44f6080          MOV      r0,#0x400             ;1636
0000fc  6108              STR      r0,[r1,#0x10]         ;1636  ; SDIO_CmdInitStructure
0000fe  4608              MOV      r0,r1                 ;1637
000100  f7fffffe          BL       SDIO_SendCommand
000104  2019              MOVS     r0,#0x19              ;1639
000106  f7fffffe          BL       CmdResp1Error
00010a  4604              MOV      r4,r0                 ;1639
00010c  b10c              CBZ      r4,|L42.274|
00010e  4620              MOV      r0,r4                 ;1643
000110  e7b8              B        |L42.132|
                  |L42.274|
000112  f04f30ff          MOV      r0,#0xffffffff        ;1646
000116  490f              LDR      r1,|L42.340|
000118  6008              STR      r0,[r1,#0]            ;1646  ; SDIO_DataInitStructure
00011a  fb08f007          MUL      r0,r8,r7              ;1647
00011e  6048              STR      r0,[r1,#4]            ;1647  ; SDIO_DataInitStructure
000120  2090              MOVS     r0,#0x90              ;1648
000122  6088              STR      r0,[r1,#8]            ;1648  ; SDIO_DataInitStructure
000124  2000              MOVS     r0,#0                 ;1649
000126  60c8              STR      r0,[r1,#0xc]          ;1649  ; SDIO_DataInitStructure
000128  6108              STR      r0,[r1,#0x10]         ;1650  ; SDIO_DataInitStructure
00012a  2001              MOVS     r0,#1                 ;1651
00012c  6148              STR      r0,[r1,#0x14]         ;1651  ; SDIO_DataInitStructure
00012e  4608              MOV      r0,r1                 ;1652
000130  f7fffffe          BL       SDIO_DataConfig
000134  4620              MOV      r0,r4                 ;1654
000136  e7a5              B        |L42.132|
;;;1656   
                          ENDP

                  |L42.312|
                          DCD      TransferError
                  |L42.316|
                          DCD      TransferEnd
                  |L42.320|
                          DCD      StopCondition
                  |L42.324|
                          DCD      0x40012c2c
                  |L42.328|
                          DCD      CardType
                  |L42.332|
                          DCD      SDIO_CmdInitStructure
                  |L42.336|
                          DCD      ||RCA||
                  |L42.340|
                          DCD      SDIO_DataInitStructure

                          AREA ||i.convert_from_bytes_to_power_of_two||, CODE, READONLY, ALIGN=1

                  convert_from_bytes_to_power_of_two PROC
;;;2793     */
;;;2794   uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
000000  4601              MOV      r1,r0
;;;2795   {
;;;2796     uint8_t count = 0;
000002  2000              MOVS     r0,#0
;;;2797   
;;;2798     while (NumberOfBytes != 1)
000004  e002              B        |L43.12|
                  |L43.6|
;;;2799     {
;;;2800       NumberOfBytes >>= 1;
000006  1049              ASRS     r1,r1,#1
;;;2801       count++;
000008  1c42              ADDS     r2,r0,#1
00000a  b2d0              UXTB     r0,r2
                  |L43.12|
00000c  2901              CMP      r1,#1                 ;2798
00000e  d1fa              BNE      |L43.6|
;;;2802     }
;;;2803     return(count);
;;;2804   }
000010  4770              BX       lr
;;;2805   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  CSD_Tab
                          %        16
                  CID_Tab
                          %        16
                  SDSTATUS_Tab
                          %        16
                  SDCardInfo
                          %        88
                  SDIO_InitStructure
                          %        24
                  SDIO_CmdInitStructure
                          %        20
                  SDIO_DataInitStructure
                          %        24

                          AREA ||.data||, DATA, ALIGN=2

                  CardType
                          DCD      0x00000000
                  ||RCA||
                          DCD      0x00000000
                  StopCondition
                          DCD      0x00000000
                  TransferError
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  TransferEnd
                          DCD      0x00000000
                  DMAEndOfTransfer
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_sdio_sd.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_sdio_sd_c_70335e9e____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_sdio_sd_c_70335e9e____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_sdio_sd_c_70335e9e____REVSH|
#line 144
|__asm___13_bsp_sdio_sd_c_70335e9e____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_sdio_sd_c_70335e9e____RRX|
#line 300
|__asm___13_bsp_sdio_sd_c_70335e9e____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
