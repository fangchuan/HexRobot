; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\lcd_ili9488.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\lcd_ili9488.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\lcd_ili9488.crf ..\..\User\bsp_stm32f4xx\src\LCD_ILI9488.c]
                          THUMB

                          AREA ||i.ILI9488_ClrScr||, CODE, READONLY, ALIGN=2

                  ILI9488_ClrScr PROC
;;;398    */
;;;399    void ILI9488_ClrScr(uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;400    {
000002  4604              MOV      r4,r0
;;;401    	uint32_t i;
;;;402    	uint32_t n;
;;;403    
;;;404    	ILI9488_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000004  4812              LDR      r0,|L1.80|
000006  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
000008  4812              LDR      r0,|L1.84|
00000a  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00000c  2100              MOVS     r1,#0
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       ILI9488_SetDispWin
;;;405    
;;;406    	ILI9488_REG = 0x2C; 			/* 准备读写显存 */
000014  202c              MOVS     r0,#0x2c
000016  f04f41d8          MOV      r1,#0x6c000000
00001a  8008              STRH     r0,[r1,#0]
;;;407    
;;;408    #if 1		/* 优化代码执行速度 */
;;;409    	n = (g_LcdHeight * g_LcdWidth) / 8;
00001c  490d              LDR      r1,|L1.84|
00001e  8809              LDRH     r1,[r1,#0]  ; g_LcdHeight
000020  4a0b              LDR      r2,|L1.80|
000022  8812              LDRH     r2,[r2,#0]  ; g_LcdWidth
000024  fb01f002          MUL      r0,r1,r2
000028  17c1              ASRS     r1,r0,#31
00002a  eb007151          ADD      r1,r0,r1,LSR #29
00002e  10ce              ASRS     r6,r1,#3
;;;410    	for (i = 0; i < n; i++)
000030  2500              MOVS     r5,#0
000032  e009              B        |L1.72|
                  |L1.52|
;;;411    	{
;;;412    		ILI9488_RAM = _usColor;
000034  4808              LDR      r0,|L1.88|
000036  8004              STRH     r4,[r0,#0]
;;;413    		ILI9488_RAM = _usColor;
000038  8004              STRH     r4,[r0,#0]
;;;414    		ILI9488_RAM = _usColor;
00003a  8004              STRH     r4,[r0,#0]
;;;415    		ILI9488_RAM = _usColor;
00003c  8004              STRH     r4,[r0,#0]
;;;416    
;;;417    		ILI9488_RAM = _usColor;
00003e  8004              STRH     r4,[r0,#0]
;;;418    		ILI9488_RAM = _usColor;
000040  8004              STRH     r4,[r0,#0]
;;;419    		ILI9488_RAM = _usColor;
000042  8004              STRH     r4,[r0,#0]
;;;420    		ILI9488_RAM = _usColor;
000044  8004              STRH     r4,[r0,#0]
000046  1c6d              ADDS     r5,r5,#1              ;410
                  |L1.72|
000048  42b5              CMP      r5,r6                 ;410
00004a  d3f3              BCC      |L1.52|
;;;421    	}
;;;422    #else
;;;423    	n = g_LcdHeight * g_LcdWidth;
;;;424    	for (i = 0; i < n; i++)
;;;425    	{
;;;426    		ILI9488_RAM = _usColor;
;;;427    	}
;;;428    #endif
;;;429    
;;;430    }
00004c  bd70              POP      {r4-r6,pc}
;;;431    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      g_LcdWidth
                  |L1.84|
                          DCD      g_LcdHeight
                  |L1.88|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_DispOff||, CODE, READONLY, ALIGN=1

                  ILI9488_DispOff PROC
;;;385    */
;;;386    void ILI9488_DispOff(void)
000000  4770              BX       lr
;;;387    {
;;;388    	;
;;;389    }
;;;390    
                          ENDP


                          AREA ||i.ILI9488_DispOn||, CODE, READONLY, ALIGN=1

                  ILI9488_DispOn PROC
;;;372    */
;;;373    void ILI9488_DispOn(void)
000000  4770              BX       lr
;;;374    {
;;;375    	;
;;;376    }
;;;377    
                          ENDP


                          AREA ||i.ILI9488_DrawBMP||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawBMP PROC
;;;789    */
;;;790    void ILI9488_DrawBMP(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t *_ptr)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;791    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dda020          LDR      r10,[sp,#0x20]
;;;792    	uint32_t index = 0;
000010  2600              MOVS     r6,#0
;;;793    	const uint16_t *p;
;;;794    
;;;795    	/* 设置图片的位置和大小， 即设置显示窗口 */
;;;796    	ILI9488_SetDispWin(_usX, _usY, _usHeight, _usWidth);
000012  462b              MOV      r3,r5
000014  4622              MOV      r2,r4
000016  4649              MOV      r1,r9
000018  4640              MOV      r0,r8
00001a  f7fffffe          BL       ILI9488_SetDispWin
;;;797    
;;;798    	p = _ptr;
00001e  4657              MOV      r7,r10
;;;799    	for (index = 0; index < _usHeight * _usWidth; index++)
000020  bf00              NOP      
000022  e006              B        |L4.50|
                  |L4.36|
;;;800    	{
;;;801    		ILI9488_PutPixel(_usX, _usY, *p++);
000024  f8372b02          LDRH     r2,[r7],#2
000028  4649              MOV      r1,r9
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       ILI9488_PutPixel
000030  1c76              ADDS     r6,r6,#1              ;799
                  |L4.50|
000032  fb04f005          MUL      r0,r4,r5              ;799
000036  42b0              CMP      r0,r6                 ;799
000038  d8f4              BHI      |L4.36|
;;;802    	}
;;;803    
;;;804    	/* 退出窗口绘图模式 */
;;;805    	ILI9488_QuitWinMode();
00003a  f7fffffe          BL       ILI9488_QuitWinMode
;;;806    }
00003e  e8bd87f0          POP      {r4-r10,pc}
;;;807    
                          ENDP


                          AREA ||i.ILI9488_DrawCircle||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawCircle PROC
;;;743    */
;;;744    void ILI9488_DrawCircle(uint16_t _usX, uint16_t _usY, uint16_t _usRadius, uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;745    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  469a              MOV      r10,r3
;;;746    	int32_t  D;			/* Decision Variable */
;;;747    	uint32_t  CurX;		/* 当前 X 值 */
;;;748    	uint32_t  CurY;		/* 当前 Y 值 */
;;;749    
;;;750    	D = 3 - (_usRadius << 1);
00000c  2003              MOVS     r0,#3
00000e  eba00948          SUB      r9,r0,r8,LSL #1
;;;751    	CurX = 0;
000012  2400              MOVS     r4,#0
;;;752    	CurY = _usRadius;
000014  4645              MOV      r5,r8
;;;753    
;;;754    	while (CurX <= CurY)
000016  e046              B        |L5.166|
                  |L5.24|
;;;755    	{
;;;756    		ILI9488_PutPixel(_usX + CurX, _usY + CurY, _usColor);
000018  197a              ADDS     r2,r7,r5
00001a  b291              UXTH     r1,r2
00001c  1932              ADDS     r2,r6,r4
00001e  b290              UXTH     r0,r2
000020  4652              MOV      r2,r10
000022  f7fffffe          BL       ILI9488_PutPixel
;;;757    		ILI9488_PutPixel(_usX + CurX, _usY - CurY, _usColor);
000026  1b7a              SUBS     r2,r7,r5
000028  b291              UXTH     r1,r2
00002a  1932              ADDS     r2,r6,r4
00002c  b290              UXTH     r0,r2
00002e  4652              MOV      r2,r10
000030  f7fffffe          BL       ILI9488_PutPixel
;;;758    		ILI9488_PutPixel(_usX - CurX, _usY + CurY, _usColor);
000034  197a              ADDS     r2,r7,r5
000036  b291              UXTH     r1,r2
000038  1b32              SUBS     r2,r6,r4
00003a  b290              UXTH     r0,r2
00003c  4652              MOV      r2,r10
00003e  f7fffffe          BL       ILI9488_PutPixel
;;;759    		ILI9488_PutPixel(_usX - CurX, _usY - CurY, _usColor);
000042  1b7a              SUBS     r2,r7,r5
000044  b291              UXTH     r1,r2
000046  1b32              SUBS     r2,r6,r4
000048  b290              UXTH     r0,r2
00004a  4652              MOV      r2,r10
00004c  f7fffffe          BL       ILI9488_PutPixel
;;;760    		ILI9488_PutPixel(_usX + CurY, _usY + CurX, _usColor);
000050  193a              ADDS     r2,r7,r4
000052  b291              UXTH     r1,r2
000054  1972              ADDS     r2,r6,r5
000056  b290              UXTH     r0,r2
000058  4652              MOV      r2,r10
00005a  f7fffffe          BL       ILI9488_PutPixel
;;;761    		ILI9488_PutPixel(_usX + CurY, _usY - CurX, _usColor);
00005e  1b3a              SUBS     r2,r7,r4
000060  b291              UXTH     r1,r2
000062  1972              ADDS     r2,r6,r5
000064  b290              UXTH     r0,r2
000066  4652              MOV      r2,r10
000068  f7fffffe          BL       ILI9488_PutPixel
;;;762    		ILI9488_PutPixel(_usX - CurY, _usY + CurX, _usColor);
00006c  193a              ADDS     r2,r7,r4
00006e  b291              UXTH     r1,r2
000070  1b72              SUBS     r2,r6,r5
000072  b290              UXTH     r0,r2
000074  4652              MOV      r2,r10
000076  f7fffffe          BL       ILI9488_PutPixel
;;;763    		ILI9488_PutPixel(_usX - CurY, _usY - CurX, _usColor);
00007a  1b3a              SUBS     r2,r7,r4
00007c  b291              UXTH     r1,r2
00007e  1b72              SUBS     r2,r6,r5
000080  b290              UXTH     r0,r2
000082  4652              MOV      r2,r10
000084  f7fffffe          BL       ILI9488_PutPixel
;;;764    
;;;765    		if (D < 0)
000088  f1b90f00          CMP      r9,#0
00008c  da04              BGE      |L5.152|
;;;766    		{
;;;767    			D += (CurX << 2) + 6;
00008e  2006              MOVS     r0,#6
000090  eb000084          ADD      r0,r0,r4,LSL #2
000094  4481              ADD      r9,r9,r0
000096  e005              B        |L5.164|
                  |L5.152|
;;;768    		}
;;;769    		else
;;;770    		{
;;;771    			D += ((CurX - CurY) << 2) + 10;
000098  1b60              SUBS     r0,r4,r5
00009a  210a              MOVS     r1,#0xa
00009c  eb010080          ADD      r0,r1,r0,LSL #2
0000a0  4481              ADD      r9,r9,r0
;;;772    			CurY--;
0000a2  1e6d              SUBS     r5,r5,#1
                  |L5.164|
;;;773    		}
;;;774    		CurX++;
0000a4  1c64              ADDS     r4,r4,#1
                  |L5.166|
0000a6  42ac              CMP      r4,r5                 ;754
0000a8  d9b6              BLS      |L5.24|
;;;775    	}
;;;776    }
0000aa  e8bd87f0          POP      {r4-r10,pc}
;;;777    
                          ENDP


                          AREA ||i.ILI9488_DrawHColorLine||, CODE, READONLY, ALIGN=2

                  ILI9488_DrawHColorLine PROC
;;;619    */
;;;620    void ILI9488_DrawHColorLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;621    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;622    	uint16_t i;
;;;623    	
;;;624    	ILI9488_SetDispWin(_usX1, _usY1, 1, _usWidth);
00000c  4623              MOV      r3,r4
00000e  2201              MOVS     r2,#1
000010  4641              MOV      r1,r8
000012  4638              MOV      r0,r7
000014  f7fffffe          BL       ILI9488_SetDispWin
;;;625    
;;;626    	ILI9488_REG = 0x2C;
000018  202c              MOVS     r0,#0x2c
00001a  f04f41d8          MOV      r1,#0x6c000000
00001e  8008              STRH     r0,[r1,#0]
;;;627    
;;;628    	/* 写显存 */
;;;629    	for (i = 0; i <_usWidth; i++)
000020  2600              MOVS     r6,#0
000022  e005              B        |L6.48|
                  |L6.36|
;;;630    	{
;;;631    		ILI9488_RAM = *_pColor++;
000024  f8350b02          LDRH     r0,[r5],#2
000028  4903              LDR      r1,|L6.56|
00002a  8008              STRH     r0,[r1,#0]
00002c  1c70              ADDS     r0,r6,#1              ;629
00002e  b286              UXTH     r6,r0                 ;629
                  |L6.48|
000030  42a6              CMP      r6,r4                 ;629
000032  dbf7              BLT      |L6.36|
;;;632    	}
;;;633    }
000034  e8bd81f0          POP      {r4-r8,pc}
;;;634    
                          ENDP

                  |L6.56|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_DrawHLine||, CODE, READONLY, ALIGN=2

                  ILI9488_DrawHLine PROC
;;;575    */
;;;576    void ILI9488_DrawHLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;577    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;578    	uint16_t i;
;;;579    
;;;580    	ILI9488_SetDispWin(_usX1, _usY1, 1, _usX2 - _usX1 + 1);
00000c  1b28              SUBS     r0,r5,r4
00000e  1c40              ADDS     r0,r0,#1
000010  b283              UXTH     r3,r0
000012  2201              MOVS     r2,#1
000014  4641              MOV      r1,r8
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       ILI9488_SetDispWin
;;;581    
;;;582    	ILI9488_REG = 0x2C;
00001c  202c              MOVS     r0,#0x2c
00001e  f04f41d8          MOV      r1,#0x6c000000
000022  8008              STRH     r0,[r1,#0]
;;;583    
;;;584    	/* 写显存 */
;;;585    	for (i = 0; i <_usX2-_usX1 + 1; i++)
000024  2700              MOVS     r7,#0
000026  e003              B        |L7.48|
                  |L7.40|
;;;586    	{
;;;587    		ILI9488_RAM = _usColor;
000028  4804              LDR      r0,|L7.60|
00002a  8006              STRH     r6,[r0,#0]
00002c  1c78              ADDS     r0,r7,#1              ;585
00002e  b287              UXTH     r7,r0                 ;585
                  |L7.48|
000030  1b28              SUBS     r0,r5,r4              ;585
000032  1c40              ADDS     r0,r0,#1              ;585
000034  42b8              CMP      r0,r7                 ;585
000036  dcf7              BGT      |L7.40|
;;;588    	}
;;;589    }
000038  e8bd81f0          POP      {r4-r8,pc}
;;;590    
                          ENDP

                  |L7.60|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_DrawHTransLine||, CODE, READONLY, ALIGN=2

                  ILI9488_DrawHTransLine PROC
;;;645    */
;;;646    void ILI9488_DrawHTransLine(uint16_t _usX1 , uint16_t _usY1, uint16_t _usWidth, const uint16_t *_pColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;647    {
000004  4606              MOV      r6,r0
000006  468a              MOV      r10,r1
000008  4617              MOV      r7,r2
00000a  461d              MOV      r5,r3
;;;648    	uint16_t i, j;
;;;649    	uint16_t Index;
;;;650    
;;;651    	ILI9488_SetCursor(_usX1, _usY1);
00000c  4651              MOV      r1,r10
00000e  4630              MOV      r0,r6
000010  f7fffffe          BL       ILI9488_SetCursor
;;;652    
;;;653    	/* 写显存 */
;;;654    	ILI9488_REG = 0x2C;
000014  202c              MOVS     r0,#0x2c
000016  f04f41d8          MOV      r1,#0x6c000000
00001a  8008              STRH     r0,[r1,#0]
;;;655    	for (i = 0,j = 0; i < _usWidth; i++, j++)
00001c  f04f0800          MOV      r8,#0
000020  f04f0900          MOV      r9,#0
000024  e019              B        |L8.90|
                  |L8.38|
;;;656    	{
;;;657    		Index = *_pColor++;
000026  f8354b02          LDRH     r4,[r5],#2
;;;658    	    if (Index)
00002a  b114              CBZ      r4,|L8.50|
;;;659            {
;;;660    			 ILI9488_RAM = Index;
00002c  480d              LDR      r0,|L8.100|
00002e  8004              STRH     r4,[r0,#0]
000030  e00b              B        |L8.74|
                  |L8.50|
;;;661    		}
;;;662    		else
;;;663    		{
;;;664    			ILI9488_SetCursor(_usX1 + j, _usY1);
000032  eb060109          ADD      r1,r6,r9
000036  b288              UXTH     r0,r1
000038  4651              MOV      r1,r10
00003a  f7fffffe          BL       ILI9488_SetCursor
;;;665    			ILI9488_REG = 0x2C;
00003e  202c              MOVS     r0,#0x2c
000040  f04f41d8          MOV      r1,#0x6c000000
000044  8008              STRH     r0,[r1,#0]
;;;666    			ILI9488_RAM = Index;
000046  4807              LDR      r0,|L8.100|
000048  8004              STRH     r4,[r0,#0]
                  |L8.74|
00004a  f1080001          ADD      r0,r8,#1              ;655
00004e  fa1ff880          UXTH     r8,r0                 ;655
000052  f1090001          ADD      r0,r9,#1              ;655
000056  fa1ff980          UXTH     r9,r0                 ;655
                  |L8.90|
00005a  45b8              CMP      r8,r7                 ;655
00005c  dbe3              BLT      |L8.38|
;;;667    		}
;;;668    	}
;;;669    }
00005e  e8bd87f0          POP      {r4-r10,pc}
;;;670    
                          ENDP

000062  0000              DCW      0x0000
                  |L8.100|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_DrawLine||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawLine PROC
;;;486    */
;;;487    void ILI9488_DrawLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usX2 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;488    {
000004  b087              SUB      sp,sp,#0x1c
000006  4604              MOV      r4,r0
000008  460d              MOV      r5,r1
00000a  4616              MOV      r6,r2
00000c  461f              MOV      r7,r3
;;;489    	int32_t dx , dy ;
;;;490    	int32_t tx , ty ;
;;;491    	int32_t inc1 , inc2 ;
;;;492    	int32_t d , iTag ;
;;;493    	int32_t x , y ;
;;;494    
;;;495    	/* 采用 Bresenham 算法，在2点间画一条直线 */
;;;496    
;;;497    	ILI9488_PutPixel(_usX1 , _usY1 , _usColor);
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  9a10              LDR      r2,[sp,#0x40]
000014  f7fffffe          BL       ILI9488_PutPixel
;;;498    
;;;499    	/* 如果两点重合，结束后面的动作。*/
;;;500    	if ( _usX1 == _usX2 && _usY1 == _usY2 )
000018  42b4              CMP      r4,r6
00001a  d104              BNE      |L9.38|
00001c  42bd              CMP      r5,r7
00001e  d102              BNE      |L9.38|
                  |L9.32|
;;;501    	{
;;;502    		return;
;;;503    	}
;;;504    
;;;505    	iTag = 0 ;
;;;506    	/* dx = abs ( _usX2 - _usX1 ); */
;;;507    	if (_usX2 >= _usX1)
;;;508    	{
;;;509    		dx = _usX2 - _usX1;
;;;510    	}
;;;511    	else
;;;512    	{
;;;513    		dx = _usX1 - _usX2;
;;;514    	}
;;;515    
;;;516    	/* dy = abs ( _usY2 - _usY1 ); */
;;;517    	if (_usY2 >= _usY1)
;;;518    	{
;;;519    		dy = _usY2 - _usY1;
;;;520    	}
;;;521    	else
;;;522    	{
;;;523    		dy = _usY1 - _usY2;
;;;524    	}
;;;525    
;;;526    	if ( dx < dy )   /*如果dy为计长方向，则交换纵横坐标。*/
;;;527    	{
;;;528    		uint16_t temp;
;;;529    
;;;530    		iTag = 1 ;
;;;531    		temp = _usX1; _usX1 = _usY1; _usY1 = temp;
;;;532    		temp = _usX2; _usX2 = _usY2; _usY2 = temp;
;;;533    		temp = dx; dx = dy; dy = temp;
;;;534    	}
;;;535    	tx = _usX2 > _usX1 ? 1 : -1 ;    /* 确定是增1还是减1 */
;;;536    	ty = _usY2 > _usY1 ? 1 : -1 ;
;;;537    	x = _usX1 ;
;;;538    	y = _usY1 ;
;;;539    	inc1 = 2 * dy ;
;;;540    	inc2 = 2 * ( dy - dx );
;;;541    	d = inc1 - dx ;
;;;542    	while ( x != _usX2 )     /* 循环画点 */
;;;543    	{
;;;544    		if ( d < 0 )
;;;545    		{
;;;546    			d += inc1 ;
;;;547    		}
;;;548    		else
;;;549    		{
;;;550    			y += ty ;
;;;551    			d += inc2 ;
;;;552    		}
;;;553    		if ( iTag )
;;;554    		{
;;;555    			ILI9488_PutPixel ( y , x , _usColor) ;
;;;556    		}
;;;557    		else
;;;558    		{
;;;559    			ILI9488_PutPixel ( x , y , _usColor) ;
;;;560    		}
;;;561    		x += tx ;
;;;562    	}
;;;563    }
000020  b007              ADD      sp,sp,#0x1c
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L9.38|
000026  2000              MOVS     r0,#0                 ;505
000028  9002              STR      r0,[sp,#8]            ;505
00002a  42a6              CMP      r6,r4                 ;507
00002c  db02              BLT      |L9.52|
00002e  eba60804          SUB      r8,r6,r4              ;509
000032  e001              B        |L9.56|
                  |L9.52|
000034  eba40806          SUB      r8,r4,r6              ;513
                  |L9.56|
000038  42af              CMP      r7,r5                 ;517
00003a  db02              BLT      |L9.66|
00003c  eba70905          SUB      r9,r7,r5              ;519
000040  e001              B        |L9.70|
                  |L9.66|
000042  eba50907          SUB      r9,r5,r7              ;523
                  |L9.70|
000046  45c8              CMP      r8,r9                 ;526
000048  da0c              BGE      |L9.100|
00004a  2101              MOVS     r1,#1                 ;530
00004c  9102              STR      r1,[sp,#8]            ;530
00004e  4620              MOV      r0,r4                 ;531
000050  462c              MOV      r4,r5                 ;531
000052  4605              MOV      r5,r0                 ;531
000054  4630              MOV      r0,r6                 ;532
000056  463e              MOV      r6,r7                 ;532
000058  4607              MOV      r7,r0                 ;532
00005a  fa1ff088          UXTH     r0,r8                 ;533
00005e  46c8              MOV      r8,r9                 ;533
000060  4681              MOV      r9,r0                 ;533
000062  bf00              NOP                            ;534
                  |L9.100|
000064  42a6              CMP      r6,r4                 ;535
000066  dd01              BLE      |L9.108|
000068  2001              MOVS     r0,#1                 ;535
00006a  e001              B        |L9.112|
                  |L9.108|
00006c  f04f30ff          MOV      r0,#0xffffffff        ;535
                  |L9.112|
000070  9006              STR      r0,[sp,#0x18]         ;535
000072  42af              CMP      r7,r5                 ;536
000074  dd01              BLE      |L9.122|
000076  2001              MOVS     r0,#1                 ;536
000078  e001              B        |L9.126|
                  |L9.122|
00007a  f04f30ff          MOV      r0,#0xffffffff        ;536
                  |L9.126|
00007e  9005              STR      r0,[sp,#0x14]         ;536
000080  46a2              MOV      r10,r4                ;537
000082  9501              STR      r5,[sp,#4]            ;538
000084  ea4f0049          LSL      r0,r9,#1              ;539
000088  9004              STR      r0,[sp,#0x10]         ;539
00008a  eba90008          SUB      r0,r9,r8              ;540
00008e  0040              LSLS     r0,r0,#1              ;540
000090  9003              STR      r0,[sp,#0xc]          ;540
000092  9804              LDR      r0,[sp,#0x10]         ;541
000094  eba00b08          SUB      r11,r0,r8             ;541
000098  e01e              B        |L9.216|
                  |L9.154|
00009a  f1bb0f00          CMP      r11,#0                ;544
00009e  da02              BGE      |L9.166|
0000a0  9804              LDR      r0,[sp,#0x10]         ;546
0000a2  4483              ADD      r11,r11,r0            ;546
0000a4  e005              B        |L9.178|
                  |L9.166|
0000a6  9905              LDR      r1,[sp,#0x14]         ;550
0000a8  9801              LDR      r0,[sp,#4]            ;550
0000aa  4408              ADD      r0,r0,r1              ;550
0000ac  9001              STR      r0,[sp,#4]            ;550
0000ae  9803              LDR      r0,[sp,#0xc]          ;551
0000b0  4483              ADD      r11,r11,r0            ;551
                  |L9.178|
0000b2  9802              LDR      r0,[sp,#8]            ;553
0000b4  b138              CBZ      r0,|L9.198|
0000b6  fa1ff18a          UXTH     r1,r10                ;555
0000ba  9a01              LDR      r2,[sp,#4]            ;555
0000bc  b290              UXTH     r0,r2                 ;555
0000be  9a10              LDR      r2,[sp,#0x40]         ;555
0000c0  f7fffffe          BL       ILI9488_PutPixel
0000c4  e006              B        |L9.212|
                  |L9.198|
0000c6  9a01              LDR      r2,[sp,#4]            ;559
0000c8  b291              UXTH     r1,r2                 ;559
0000ca  fa1ff08a          UXTH     r0,r10                ;559
0000ce  9a10              LDR      r2,[sp,#0x40]         ;559
0000d0  f7fffffe          BL       ILI9488_PutPixel
                  |L9.212|
0000d4  9806              LDR      r0,[sp,#0x18]         ;561
0000d6  4482              ADD      r10,r10,r0            ;561
                  |L9.216|
0000d8  45b2              CMP      r10,r6                ;542
0000da  d1de              BNE      |L9.154|
0000dc  bf00              NOP      
0000de  e79f              B        |L9.32|
;;;564    
                          ENDP


                          AREA ||i.ILI9488_DrawRect||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawRect PROC
;;;681    */
;;;682    void ILI9488_DrawRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;683    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;684    	/*
;;;685    	 ---------------->---
;;;686    	|(_usX，_usY)        |
;;;687    	V                    V  _usHeight
;;;688    	|                    |
;;;689    	 ---------------->---
;;;690    		  _usWidth
;;;691    	*/
;;;692    
;;;693    	ILI9488_DrawLine(_usX, _usY, _usX + _usWidth - 1, _usY, _usColor);	/* 顶 */
000010  19e0              ADDS     r0,r4,r7
000012  1e40              SUBS     r0,r0,#1
000014  b282              UXTH     r2,r0
000016  462b              MOV      r3,r5
000018  4629              MOV      r1,r5
00001a  4620              MOV      r0,r4
00001c  f8cd8000          STR      r8,[sp,#0]
000020  f7fffffe          BL       ILI9488_DrawLine
;;;694    	ILI9488_DrawLine(_usX, _usY + _usHeight - 1, _usX + _usWidth - 1, _usY + _usHeight - 1, _usColor);	/* 底 */
000024  19a8              ADDS     r0,r5,r6
000026  1e40              SUBS     r0,r0,#1
000028  b283              UXTH     r3,r0
00002a  19e0              ADDS     r0,r4,r7
00002c  1e40              SUBS     r0,r0,#1
00002e  b282              UXTH     r2,r0
000030  19a8              ADDS     r0,r5,r6
000032  1e40              SUBS     r0,r0,#1
000034  b281              UXTH     r1,r0
000036  4620              MOV      r0,r4
000038  f8cd8000          STR      r8,[sp,#0]
00003c  f7fffffe          BL       ILI9488_DrawLine
;;;695    
;;;696    	ILI9488_DrawLine(_usX, _usY, _usX, _usY + _usHeight - 1, _usColor);	/* 左 */
000040  19a8              ADDS     r0,r5,r6
000042  1e40              SUBS     r0,r0,#1
000044  b283              UXTH     r3,r0
000046  4622              MOV      r2,r4
000048  4629              MOV      r1,r5
00004a  4620              MOV      r0,r4
00004c  f8cd8000          STR      r8,[sp,#0]
000050  f7fffffe          BL       ILI9488_DrawLine
;;;697    	ILI9488_DrawLine(_usX + _usWidth - 1, _usY, _usX + _usWidth - 1, _usY + _usHeight, _usColor);	/* 右 */
000054  19a9              ADDS     r1,r5,r6
000056  b28b              UXTH     r3,r1
000058  19e1              ADDS     r1,r4,r7
00005a  1e49              SUBS     r1,r1,#1
00005c  b28a              UXTH     r2,r1
00005e  19e1              ADDS     r1,r4,r7
000060  1e49              SUBS     r1,r1,#1
000062  b288              UXTH     r0,r1
000064  4629              MOV      r1,r5
000066  f8cd8000          STR      r8,[sp,#0]
00006a  f7fffffe          BL       ILI9488_DrawLine
;;;698    }
00006e  e8bd83f8          POP      {r3-r9,pc}
;;;699    
                          ENDP


                          AREA ||i.ILI9488_DrawVLine||, CODE, READONLY, ALIGN=1

                  ILI9488_DrawVLine PROC
;;;598    */
;;;599    void ILI9488_DrawVLine(uint16_t _usX1 , uint16_t _usY1 , uint16_t _usY2 , uint16_t _usColor)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;600    {
000004  4680              MOV      r8,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;601    	uint16_t i;
;;;602    	
;;;603    	for (i = _usY1; i <=_usY2; i++)
00000c  462c              MOV      r4,r5
00000e  e006              B        |L11.30|
                  |L11.16|
;;;604    	{	
;;;605    		ILI9488_PutPixel(_usX1, i, _usColor);	
000010  463a              MOV      r2,r7
000012  4621              MOV      r1,r4
000014  4640              MOV      r0,r8
000016  f7fffffe          BL       ILI9488_PutPixel
00001a  1c60              ADDS     r0,r4,#1              ;603
00001c  b284              UXTH     r4,r0                 ;603
                  |L11.30|
00001e  42b4              CMP      r4,r6                 ;603
000020  ddf6              BLE      |L11.16|
;;;606    	}
;;;607    }
000022  e8bd81f0          POP      {r4-r8,pc}
;;;608    
                          ENDP


                          AREA ||i.ILI9488_FillRect||, CODE, READONLY, ALIGN=2

                  ILI9488_FillRect PROC
;;;710    */
;;;711    void ILI9488_FillRect(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth, uint16_t _usColor)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;712    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd9020          LDR      r9,[sp,#0x20]
;;;713    	uint32_t i;
;;;714    
;;;715    	/*
;;;716    	 ---------------->---
;;;717    	|(_usX，_usY)        |
;;;718    	V                    V  _usHeight
;;;719    	|                    |
;;;720    	 ---------------->---
;;;721    		  _usWidth
;;;722    	*/
;;;723    
;;;724    	ILI9488_SetDispWin(_usX, _usY, _usHeight, _usWidth);
000010  462b              MOV      r3,r5
000012  4622              MOV      r2,r4
000014  4641              MOV      r1,r8
000016  4638              MOV      r0,r7
000018  f7fffffe          BL       ILI9488_SetDispWin
;;;725    
;;;726    	ILI9488_REG = 0x2C;
00001c  202c              MOVS     r0,#0x2c
00001e  f04f41d8          MOV      r1,#0x6c000000
000022  8008              STRH     r0,[r1,#0]
;;;727    	for (i = 0; i < _usHeight * _usWidth; i++)
000024  2600              MOVS     r6,#0
000026  e003              B        |L12.48|
                  |L12.40|
;;;728    	{
;;;729    		ILI9488_RAM = _usColor;
000028  4804              LDR      r0,|L12.60|
00002a  f8a09000          STRH     r9,[r0,#0]
00002e  1c76              ADDS     r6,r6,#1              ;727
                  |L12.48|
000030  fb04f005          MUL      r0,r4,r5              ;727
000034  42b0              CMP      r0,r6                 ;727
000036  d8f7              BHI      |L12.40|
;;;730    	}
;;;731    }
000038  e8bd87f0          POP      {r4-r10,pc}
;;;732    
                          ENDP

                  |L12.60|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_GetPixel||, CODE, READONLY, ALIGN=2

                  ILI9488_GetPixel PROC
;;;460    */
;;;461    uint16_t ILI9488_GetPixel(uint16_t _usX, uint16_t _usY)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;462    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;463    	uint16_t R = 0, G = 0, B = 0 ;
000008  2600              MOVS     r6,#0
00000a  46b0              MOV      r8,r6
00000c  2700              MOVS     r7,#0
;;;464    
;;;465    	ILI9488_SetCursor(_usX, _usY);	/* 设置光标位置 */
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       ILI9488_SetCursor
;;;466    
;;;467    	ILI9488_REG = 0x2E;
000016  202e              MOVS     r0,#0x2e
000018  f04f41d8          MOV      r1,#0x6c000000
00001c  8008              STRH     r0,[r1,#0]
;;;468    	R = ILI9488_RAM; 	/* 第1个哑读，丢弃 */
00001e  4808              LDR      r0,|L13.64|
000020  8806              LDRH     r6,[r0,#0]
;;;469    	R = ILI9488_RAM;
000022  8806              LDRH     r6,[r0,#0]
;;;470    	B = ILI9488_RAM;
000024  8807              LDRH     r7,[r0,#0]
;;;471    	G = ILI9488_RAM;
000026  f8b08000          LDRH     r8,[r0,#0]
;;;472    
;;;473        return (((R >> 11) << 11) | ((G >> 10 ) << 5) | (B >> 11));
00002a  12f0              ASRS     r0,r6,#11
00002c  02c0              LSLS     r0,r0,#11
00002e  ea4f21a8          ASR      r1,r8,#10
000032  ea401041          ORR      r0,r0,r1,LSL #5
000036  ea4020e7          ORR      r0,r0,r7,ASR #11
;;;474    }
00003a  e8bd81f0          POP      {r4-r8,pc}
;;;475    
                          ENDP

00003e  0000              DCW      0x0000
                  |L13.64|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_InitHard||, CODE, READONLY, ALIGN=2

                  ILI9488_InitHard PROC
;;;42     */
;;;43     void ILI9488_InitHard(void)
000000  b510              PUSH     {r4,lr}
;;;44     {
;;;45     	uint32_t id;
;;;46     
;;;47     	id = ILI9488_ReadID();
000002  f7fffffe          BL       ILI9488_ReadID
000006  4604              MOV      r4,r0
;;;48     
;;;49     	if (id == 0x548066)
000008  4816              LDR      r0,|L14.100|
00000a  4284              CMP      r4,r0
00000c  d128              BNE      |L14.96|
;;;50     	{
;;;51     		Init_9488();	/* 初始化5420和4001屏硬件 */
00000e  f7fffffe          BL       Init_9488
;;;52     
;;;53     		//ILI9488_WriteCmd(0x23);
;;;54     		//ILI9488_WriteCmd(0x22);
;;;55     
;;;56     		s_RGBChgEn = 0;
000012  2000              MOVS     r0,#0
000014  4914              LDR      r1,|L14.104|
000016  7008              STRB     r0,[r1,#0]
;;;57     
;;;58     		ILI9488_PutPixel(1,1, 0x12);
000018  2212              MOVS     r2,#0x12
00001a  2101              MOVS     r1,#1
00001c  4608              MOV      r0,r1
00001e  f7fffffe          BL       ILI9488_PutPixel
;;;59     		g_ChipID = ILI9488_GetPixel(1,1);
000022  2101              MOVS     r1,#1
000024  4608              MOV      r0,r1
000026  f7fffffe          BL       ILI9488_GetPixel
00002a  4910              LDR      r1,|L14.108|
00002c  8008              STRH     r0,[r1,#0]
;;;60     
;;;61     		ILI9488_PutPixel(1,1, 0x34);
00002e  2234              MOVS     r2,#0x34
000030  2101              MOVS     r1,#1
000032  4608              MOV      r0,r1
000034  f7fffffe          BL       ILI9488_PutPixel
;;;62     		g_ChipID = ILI9488_GetPixel(1,1);
000038  2101              MOVS     r1,#1
00003a  4608              MOV      r0,r1
00003c  f7fffffe          BL       ILI9488_GetPixel
000040  490a              LDR      r1,|L14.108|
000042  8008              STRH     r0,[r1,#0]
;;;63     
;;;64     		ILI9488_PutPixel(1,1, 0x56);
000044  2256              MOVS     r2,#0x56
000046  2101              MOVS     r1,#1
000048  4608              MOV      r0,r1
00004a  f7fffffe          BL       ILI9488_PutPixel
;;;65     		g_ChipID = ILI9488_GetPixel(1,1);
00004e  2101              MOVS     r1,#1
000050  4608              MOV      r0,r1
000052  f7fffffe          BL       ILI9488_GetPixel
000056  4905              LDR      r1,|L14.108|
000058  8008              STRH     r0,[r1,#0]
;;;66     
;;;67     		g_ChipID = IC_9488;
00005a  f2494088          MOV      r0,#0x9488
00005e  8008              STRH     r0,[r1,#0]
                  |L14.96|
;;;68     	}
;;;69     }
000060  bd10              POP      {r4,pc}
;;;70     
                          ENDP

000062  0000              DCW      0x0000
                  |L14.100|
                          DCD      0x00548066
                  |L14.104|
                          DCD      s_RGBChgEn
                  |L14.108|
                          DCD      g_ChipID

                          AREA ||i.ILI9488_PutPixel||, CODE, READONLY, ALIGN=2

                  ILI9488_PutPixel PROC
;;;441    */
;;;442    void ILI9488_PutPixel(uint16_t _usX, uint16_t _usY, uint16_t _usColor)
000000  b570              PUSH     {r4-r6,lr}
;;;443    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;444    	ILI9488_SetCursor(_usX, _usY);	/* 设置光标位置 */
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ILI9488_SetCursor
;;;445    
;;;446    	/* 写显存 */
;;;447    	ILI9488_REG = 0x2C;
000010  202c              MOVS     r0,#0x2c
000012  f04f41d8          MOV      r1,#0x6c000000
000016  8008              STRH     r0,[r1,#0]
;;;448    	ILI9488_RAM = _usColor;
000018  4801              LDR      r0,|L15.32|
00001a  8004              STRH     r4,[r0,#0]
;;;449    }
00001c  bd70              POP      {r4-r6,pc}
;;;450    
                          ENDP

00001e  0000              DCW      0x0000
                  |L15.32|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_QuitWinMode||, CODE, READONLY, ALIGN=2

                  ILI9488_QuitWinMode PROC
;;;338    */
;;;339    static void ILI9488_QuitWinMode(void)
000000  b510              PUSH     {r4,lr}
;;;340    {
;;;341    	ILI9488_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000002  4804              LDR      r0,|L16.20|
000004  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
000006  4804              LDR      r0,|L16.24|
000008  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00000a  2100              MOVS     r1,#0
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       ILI9488_SetDispWin
;;;342    }
000012  bd10              POP      {r4,pc}
;;;343    
                          ENDP

                  |L16.20|
                          DCD      g_LcdWidth
                  |L16.24|
                          DCD      g_LcdHeight

                          AREA ||i.ILI9488_ReadID||, CODE, READONLY, ALIGN=2

                  ILI9488_ReadID PROC
;;;351    */
;;;352    uint32_t ILI9488_ReadID(void)
000000  b508              PUSH     {r3,lr}
;;;353    {
;;;354    	uint8_t buf[4];
;;;355    
;;;356    	ILI9488_REG = 0x04;
000002  2004              MOVS     r0,#4
000004  f04f41d8          MOV      r1,#0x6c000000
000008  8008              STRH     r0,[r1,#0]
;;;357    	buf[0] = ILI9488_RAM;
00000a  480f              LDR      r0,|L17.72|
00000c  8800              LDRH     r0,[r0,#0]
00000e  b2c0              UXTB     r0,r0
000010  f88d0000          STRB     r0,[sp,#0]
;;;358    	buf[1] = ILI9488_RAM;
000014  480c              LDR      r0,|L17.72|
000016  8800              LDRH     r0,[r0,#0]
000018  b2c0              UXTB     r0,r0
00001a  f88d0001          STRB     r0,[sp,#1]
;;;359    	buf[2] = ILI9488_RAM;
00001e  480a              LDR      r0,|L17.72|
000020  8800              LDRH     r0,[r0,#0]
000022  b2c0              UXTB     r0,r0
000024  f88d0002          STRB     r0,[sp,#2]
;;;360    	buf[3] = ILI9488_RAM;
000028  4807              LDR      r0,|L17.72|
00002a  8800              LDRH     r0,[r0,#0]
00002c  b2c0              UXTB     r0,r0
00002e  f88d0003          STRB     r0,[sp,#3]
;;;361    
;;;362    	return (buf[1] << 16) + (buf[2] << 8) + buf[3];
000032  f89d0001          LDRB     r0,[sp,#1]
000036  0400              LSLS     r0,r0,#16
000038  f89d1002          LDRB     r1,[sp,#2]
00003c  eb002001          ADD      r0,r0,r1,LSL #8
000040  f89d1003          LDRB     r1,[sp,#3]
000044  4408              ADD      r0,r0,r1
;;;363    }
000046  bd08              POP      {r3,pc}
;;;364    
                          ENDP

                  |L17.72|
                          DCD      0x6c080000

                          AREA ||i.ILI9488_SetCursor||, CODE, READONLY, ALIGN=1

                  ILI9488_SetCursor PROC
;;;315    */
;;;316    static void ILI9488_SetCursor(uint16_t _usX, uint16_t _usY)
000000  b570              PUSH     {r4-r6,lr}
;;;317    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;318    	ILI9488_WriteCmd(0X2A); 		/* 设置X坐标 */
000006  202a              MOVS     r0,#0x2a
000008  f7fffffe          BL       ILI9488_WriteCmd
;;;319    	ILI9488_WriteParam(_usX >> 8);	/* 先高8位，然后低8位 */
00000c  1220              ASRS     r0,r4,#8
00000e  f7fffffe          BL       ILI9488_WriteParam
;;;320    	ILI9488_WriteParam(_usX);		/* 设置起始点和结束点*/
000012  b2e0              UXTB     r0,r4
000014  f7fffffe          BL       ILI9488_WriteParam
;;;321    	ILI9488_WriteParam(_usX >> 8);	/* 先高8位，然后低8位 */
000018  1220              ASRS     r0,r4,#8
00001a  f7fffffe          BL       ILI9488_WriteParam
;;;322    	ILI9488_WriteParam(_usX);		/* 设置起始点和结束点*/
00001e  b2e0              UXTB     r0,r4
000020  f7fffffe          BL       ILI9488_WriteParam
;;;323    
;;;324        ILI9488_WriteCmd(0X2B); 		/* 设置Y坐标*/
000024  202b              MOVS     r0,#0x2b
000026  f7fffffe          BL       ILI9488_WriteCmd
;;;325    	ILI9488_WriteParam(_usY >> 8);
00002a  1228              ASRS     r0,r5,#8
00002c  f7fffffe          BL       ILI9488_WriteParam
;;;326    	ILI9488_WriteParam(_usY);
000030  b2e8              UXTB     r0,r5
000032  f7fffffe          BL       ILI9488_WriteParam
;;;327    	ILI9488_WriteParam(_usY >> 8);
000036  1228              ASRS     r0,r5,#8
000038  f7fffffe          BL       ILI9488_WriteParam
;;;328    	ILI9488_WriteParam(_usY);
00003c  b2e8              UXTB     r0,r5
00003e  f7fffffe          BL       ILI9488_WriteParam
;;;329    }
000042  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP


                          AREA ||i.ILI9488_SetDirection||, CODE, READONLY, ALIGN=2

                  ILI9488_SetDirection PROC
;;;78     */
;;;79     void ILI9488_SetDirection(uint8_t _ucDir)
000000  b510              PUSH     {r4,lr}
;;;80     {
000002  4604              MOV      r4,r0
;;;81     	
;;;82     	/*
;;;83     		Memory Access Control (36h)
;;;84     		This command defines read/write scanning direction of the frame memory.
;;;85     
;;;86     		These 3 bits control the direction from the MPU to memory write/read.
;;;87     
;;;88     		Bit  Symbol  Name  Description
;;;89     		D7   MY  Row Address Order
;;;90     		D6   MX  Column Address Order
;;;91     		D5   MV  Row/Column Exchange
;;;92     		D4   ML  Vertical Refresh Order  LCD vertical refresh direction control. 、
;;;93     
;;;94     		D3   BGR RGB-BGR Order   Color selector switch control
;;;95     		     (0 = RGB color filter panel, 1 = BGR color filter panel )
;;;96     		D2   MH  Horizontal Refresh ORDER  LCD horizontal refreshing direction control.
;;;97     		D1   X   Reserved  Reserved
;;;98     		D0   X   Reserved  Reserved
;;;99     	*/
;;;100    	ILI9488_WriteCmd(0x36);
000004  2036              MOVS     r0,#0x36
000006  f7fffffe          BL       ILI9488_WriteCmd
;;;101    	/* 0 表示竖屏(排线在下)，1表示竖屏(排线在上), 2表示横屏(排线在左边)  3表示横屏 (排线在右边) */
;;;102    	if (_ucDir == 0)
00000a  b95c              CBNZ     r4,|L19.36|
;;;103    	{
;;;104    		ILI9488_WriteParam(0xA8);	/* 横屏(排线在左边) */
00000c  20a8              MOVS     r0,#0xa8
00000e  f7fffffe          BL       ILI9488_WriteParam
;;;105    		g_LcdHeight = 320;
000012  f44f70a0          MOV      r0,#0x140
000016  4918              LDR      r1,|L19.120|
000018  8008              STRH     r0,[r1,#0]
;;;106    		g_LcdWidth = 480;
00001a  f44f70f0          MOV      r0,#0x1e0
00001e  4917              LDR      r1,|L19.124|
000020  8008              STRH     r0,[r1,#0]
000022  e028              B        |L19.118|
                  |L19.36|
;;;107    	}
;;;108    	else if (_ucDir == 1)
000024  2c01              CMP      r4,#1
000026  d10b              BNE      |L19.64|
;;;109    	{
;;;110    		ILI9488_WriteParam(0x68);	/* 横屏 (排线在右边) */
000028  2068              MOVS     r0,#0x68
00002a  f7fffffe          BL       ILI9488_WriteParam
;;;111    		g_LcdHeight = 320;
00002e  f44f70a0          MOV      r0,#0x140
000032  4911              LDR      r1,|L19.120|
000034  8008              STRH     r0,[r1,#0]
;;;112    		g_LcdWidth = 480;
000036  f44f70f0          MOV      r0,#0x1e0
00003a  4910              LDR      r1,|L19.124|
00003c  8008              STRH     r0,[r1,#0]
00003e  e01a              B        |L19.118|
                  |L19.64|
;;;113    	}
;;;114    	else if (_ucDir == 2)
000040  2c02              CMP      r4,#2
000042  d10b              BNE      |L19.92|
;;;115    	{
;;;116    		ILI9488_WriteParam(0xC8);	/* 竖屏(排线在上) */
000044  20c8              MOVS     r0,#0xc8
000046  f7fffffe          BL       ILI9488_WriteParam
;;;117    		g_LcdHeight = 480;
00004a  f44f70f0          MOV      r0,#0x1e0
00004e  490a              LDR      r1,|L19.120|
000050  8008              STRH     r0,[r1,#0]
;;;118    		g_LcdWidth = 320;
000052  f44f70a0          MOV      r0,#0x140
000056  4909              LDR      r1,|L19.124|
000058  8008              STRH     r0,[r1,#0]
00005a  e00c              B        |L19.118|
                  |L19.92|
;;;119    	}
;;;120    	else if (_ucDir == 3)
00005c  2c03              CMP      r4,#3
00005e  d10a              BNE      |L19.118|
;;;121    	{
;;;122    		ILI9488_WriteParam(0x08);	/* 竖屏(排线在下) */
000060  2008              MOVS     r0,#8
000062  f7fffffe          BL       ILI9488_WriteParam
;;;123    		g_LcdHeight = 480;
000066  f44f70f0          MOV      r0,#0x1e0
00006a  4903              LDR      r1,|L19.120|
00006c  8008              STRH     r0,[r1,#0]
;;;124    		g_LcdWidth = 320;
00006e  f44f70a0          MOV      r0,#0x140
000072  4902              LDR      r1,|L19.124|
000074  8008              STRH     r0,[r1,#0]
                  |L19.118|
;;;125    	}
;;;126    }
000076  bd10              POP      {r4,pc}
;;;127    
                          ENDP

                  |L19.120|
                          DCD      g_LcdHeight
                  |L19.124|
                          DCD      g_LcdWidth

                          AREA ||i.ILI9488_SetDispWin||, CODE, READONLY, ALIGN=1

                  ILI9488_SetDispWin PROC
;;;292    */
;;;293    static void ILI9488_SetDispWin(uint16_t _usX, uint16_t _usY, uint16_t _usHeight, uint16_t _usWidth)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;294    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;295    	ILI9488_WriteCmd(0X2A); 		/* 设置X坐标 */
00000c  202a              MOVS     r0,#0x2a
00000e  f7fffffe          BL       ILI9488_WriteCmd
;;;296    	ILI9488_WriteParam(_usX >> 8);	/* 起始点 */
000012  1220              ASRS     r0,r4,#8
000014  f7fffffe          BL       ILI9488_WriteParam
;;;297    	ILI9488_WriteParam(_usX);
000018  b2e0              UXTB     r0,r4
00001a  f7fffffe          BL       ILI9488_WriteParam
;;;298    	ILI9488_WriteParam((_usX + _usWidth - 1) >> 8);	/* 结束点 */
00001e  19e1              ADDS     r1,r4,r7
000020  1e49              SUBS     r1,r1,#1
000022  f3c12007          UBFX     r0,r1,#8,#8
000026  f7fffffe          BL       ILI9488_WriteParam
;;;299    	ILI9488_WriteParam(_usX + _usWidth - 1);
00002a  19e1              ADDS     r1,r4,r7
00002c  1e49              SUBS     r1,r1,#1
00002e  b2c8              UXTB     r0,r1
000030  f7fffffe          BL       ILI9488_WriteParam
;;;300    
;;;301    	ILI9488_WriteCmd(0X2B); 				  /* 设置Y坐标*/
000034  202b              MOVS     r0,#0x2b
000036  f7fffffe          BL       ILI9488_WriteCmd
;;;302    	ILI9488_WriteParam(_usY >> 8);   /* 起始点 */
00003a  1228              ASRS     r0,r5,#8
00003c  f7fffffe          BL       ILI9488_WriteParam
;;;303    	ILI9488_WriteParam(_usY);
000040  b2e8              UXTB     r0,r5
000042  f7fffffe          BL       ILI9488_WriteParam
;;;304    	ILI9488_WriteParam((_usY + _usHeight - 1) >>8);		/* 结束点 */
000046  19a9              ADDS     r1,r5,r6
000048  1e49              SUBS     r1,r1,#1
00004a  f3c12007          UBFX     r0,r1,#8,#8
00004e  f7fffffe          BL       ILI9488_WriteParam
;;;305    	ILI9488_WriteParam((_usY + _usHeight - 1));
000052  19a9              ADDS     r1,r5,r6
000054  1e49              SUBS     r1,r1,#1
000056  b2c8              UXTB     r0,r1
000058  f7fffffe          BL       ILI9488_WriteParam
;;;306    }
00005c  e8bd81f0          POP      {r4-r8,pc}
;;;307    
                          ENDP


                          AREA ||i.ILI9488_WriteCmd||, CODE, READONLY, ALIGN=1

                  ILI9488_WriteCmd PROC
;;;261    */
;;;262    static void ILI9488_WriteCmd(uint8_t _ucCmd)
000000  f04f41d8          MOV      r1,#0x6c000000
;;;263    {
;;;264    	ILI9488_REG = _ucCmd;	/* 发送CMD */
000004  8008              STRH     r0,[r1,#0]
;;;265    }
000006  4770              BX       lr
;;;266    
                          ENDP


                          AREA ||i.ILI9488_WriteParam||, CODE, READONLY, ALIGN=2

                  ILI9488_WriteParam PROC
;;;275    */
;;;276    static void ILI9488_WriteParam(uint8_t _ucParam)
000000  4901              LDR      r1,|L22.8|
;;;277    {
;;;278    	ILI9488_RAM = _ucParam;
000002  8008              STRH     r0,[r1,#0]
;;;279    }
000004  4770              BX       lr
;;;280    
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x6c080000

                          AREA ||i.Init_9488||, CODE, READONLY, ALIGN=2

                  Init_9488 PROC
;;;135    */
;;;136    static void Init_9488(void)
000000  b510              PUSH     {r4,lr}
;;;137    {
;;;138    	/* 初始化LCD，写LCD寄存器进行配置 */
;;;139    
;;;140    #if 0
;;;141    	// VCI=2.8V
;;;142    	//************* Reset LCD Driver ****************//
;;;143    	LCD_nRESET = 1;
;;;144    	Delayms(1); // Delay 1ms
;;;145    	LCD_nRESET = 0;
;;;146    	Delayms(10); // Delay 10ms // This delay time is necessary
;;;147    	LCD_nRESET = 1;
;;;148    	Delayms(120); // Delay 100 ms
;;;149    #endif
;;;150    
;;;151    	//************* Start Initial Sequence **********//
;;;152    	/* Adjust Control 3 (F7h)  */
;;;153    	ILI9488_WriteCmd(0XF7);
000002  20f7              MOVS     r0,#0xf7
000004  f7fffffe          BL       ILI9488_WriteCmd
;;;154    	ILI9488_WriteParam(0xA9);
000008  20a9              MOVS     r0,#0xa9
00000a  f7fffffe          BL       ILI9488_WriteParam
;;;155    	ILI9488_WriteParam(0x51);
00000e  2051              MOVS     r0,#0x51
000010  f7fffffe          BL       ILI9488_WriteParam
;;;156    	ILI9488_WriteParam(0x2C);
000014  202c              MOVS     r0,#0x2c
000016  f7fffffe          BL       ILI9488_WriteParam
;;;157    	ILI9488_WriteParam(0x82);	/* DSI write DCS command, use loose packet RGB 666 */
00001a  2082              MOVS     r0,#0x82
00001c  f7fffffe          BL       ILI9488_WriteParam
;;;158    
;;;159    	/* Power Control 1 (C0h)  */
;;;160    	ILI9488_WriteCmd(0xC0);
000020  20c0              MOVS     r0,#0xc0
000022  f7fffffe          BL       ILI9488_WriteCmd
;;;161    	ILI9488_WriteParam(0x11);
000026  2011              MOVS     r0,#0x11
000028  f7fffffe          BL       ILI9488_WriteParam
;;;162    	ILI9488_WriteParam(0x09);
00002c  2009              MOVS     r0,#9
00002e  f7fffffe          BL       ILI9488_WriteParam
;;;163    
;;;164    	/* Power Control 2 (C1h) */
;;;165    	ILI9488_WriteCmd(0xC1);
000032  20c1              MOVS     r0,#0xc1
000034  f7fffffe          BL       ILI9488_WriteCmd
;;;166    	ILI9488_WriteParam(0x41);
000038  2041              MOVS     r0,#0x41
00003a  f7fffffe          BL       ILI9488_WriteParam
;;;167    
;;;168    	/* VCOM Control (C5h)  */
;;;169    	ILI9488_WriteCmd(0XC5);
00003e  20c5              MOVS     r0,#0xc5
000040  f7fffffe          BL       ILI9488_WriteCmd
;;;170    	ILI9488_WriteParam(0x00);
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       ILI9488_WriteParam
;;;171    	ILI9488_WriteParam(0x0A);
00004a  200a              MOVS     r0,#0xa
00004c  f7fffffe          BL       ILI9488_WriteParam
;;;172    	ILI9488_WriteParam(0x80);
000050  2080              MOVS     r0,#0x80
000052  f7fffffe          BL       ILI9488_WriteParam
;;;173    
;;;174    	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
;;;175    	ILI9488_WriteCmd(0xB1);
000056  20b1              MOVS     r0,#0xb1
000058  f7fffffe          BL       ILI9488_WriteCmd
;;;176    	ILI9488_WriteParam(0xB0);
00005c  20b0              MOVS     r0,#0xb0
00005e  f7fffffe          BL       ILI9488_WriteParam
;;;177    	ILI9488_WriteParam(0x11);
000062  2011              MOVS     r0,#0x11
000064  f7fffffe          BL       ILI9488_WriteParam
;;;178    
;;;179    	/* Display Inversion Control (B4h) */
;;;180    	ILI9488_WriteCmd(0xB4);
000068  20b4              MOVS     r0,#0xb4
00006a  f7fffffe          BL       ILI9488_WriteCmd
;;;181    	ILI9488_WriteParam(0x02);
00006e  2002              MOVS     r0,#2
000070  f7fffffe          BL       ILI9488_WriteParam
;;;182    
;;;183    	/* Display Function Control (B6h)  */
;;;184    	ILI9488_WriteCmd(0xB6);
000074  20b6              MOVS     r0,#0xb6
000076  f7fffffe          BL       ILI9488_WriteCmd
;;;185    	ILI9488_WriteParam(0x02);
00007a  2002              MOVS     r0,#2
00007c  f7fffffe          BL       ILI9488_WriteParam
;;;186    	ILI9488_WriteParam(0x22);
000080  2022              MOVS     r0,#0x22
000082  f7fffffe          BL       ILI9488_WriteParam
;;;187    
;;;188    	/* Entry Mode Set (B7h)  */
;;;189    	ILI9488_WriteCmd(0xB7);
000086  20b7              MOVS     r0,#0xb7
000088  f7fffffe          BL       ILI9488_WriteCmd
;;;190    	ILI9488_WriteParam(0xc6);
00008c  20c6              MOVS     r0,#0xc6
00008e  f7fffffe          BL       ILI9488_WriteParam
;;;191    
;;;192    	/* HS Lanes Control (BEh) */
;;;193    	ILI9488_WriteCmd(0xBE);
000092  20be              MOVS     r0,#0xbe
000094  f7fffffe          BL       ILI9488_WriteCmd
;;;194    	ILI9488_WriteParam(0x00);
000098  2000              MOVS     r0,#0
00009a  f7fffffe          BL       ILI9488_WriteParam
;;;195    	ILI9488_WriteParam(0x04);
00009e  2004              MOVS     r0,#4
0000a0  f7fffffe          BL       ILI9488_WriteParam
;;;196    
;;;197    	/* Set Image Function (E9h)  */
;;;198    	ILI9488_WriteCmd(0xE9);
0000a4  20e9              MOVS     r0,#0xe9
0000a6  f7fffffe          BL       ILI9488_WriteCmd
;;;199    	ILI9488_WriteParam(0x00);
0000aa  2000              MOVS     r0,#0
0000ac  f7fffffe          BL       ILI9488_WriteParam
;;;200    
;;;201    	ILI9488_SetDirection(0);	/* 横屏(排线在左边) */
0000b0  2000              MOVS     r0,#0
0000b2  f7fffffe          BL       ILI9488_SetDirection
;;;202    
;;;203    	/* Interface Pixel Format (3Ah) */
;;;204    	ILI9488_WriteCmd(0x3A);
0000b6  203a              MOVS     r0,#0x3a
0000b8  f7fffffe          BL       ILI9488_WriteCmd
;;;205    	ILI9488_WriteParam(0x55);	/* 0x55 : 16 bits/pixel  */
0000bc  2055              MOVS     r0,#0x55
0000be  f7fffffe          BL       ILI9488_WriteParam
;;;206    
;;;207    	/* PGAMCTRL (Positive Gamma Control) (E0h) */
;;;208    	ILI9488_WriteCmd(0xE0);
0000c2  20e0              MOVS     r0,#0xe0
0000c4  f7fffffe          BL       ILI9488_WriteCmd
;;;209    	ILI9488_WriteParam(0x00);
0000c8  2000              MOVS     r0,#0
0000ca  f7fffffe          BL       ILI9488_WriteParam
;;;210    	ILI9488_WriteParam(0x07);
0000ce  2007              MOVS     r0,#7
0000d0  f7fffffe          BL       ILI9488_WriteParam
;;;211    	ILI9488_WriteParam(0x10);
0000d4  2010              MOVS     r0,#0x10
0000d6  f7fffffe          BL       ILI9488_WriteParam
;;;212    	ILI9488_WriteParam(0x09);
0000da  2009              MOVS     r0,#9
0000dc  f7fffffe          BL       ILI9488_WriteParam
;;;213    	ILI9488_WriteParam(0x17);
0000e0  2017              MOVS     r0,#0x17
0000e2  f7fffffe          BL       ILI9488_WriteParam
;;;214    	ILI9488_WriteParam(0x0B);
0000e6  200b              MOVS     r0,#0xb
0000e8  f7fffffe          BL       ILI9488_WriteParam
;;;215    	ILI9488_WriteParam(0x41);
0000ec  2041              MOVS     r0,#0x41
0000ee  f7fffffe          BL       ILI9488_WriteParam
;;;216    	ILI9488_WriteParam(0x89);
0000f2  2089              MOVS     r0,#0x89
0000f4  f7fffffe          BL       ILI9488_WriteParam
;;;217    	ILI9488_WriteParam(0x4B);
0000f8  204b              MOVS     r0,#0x4b
0000fa  f7fffffe          BL       ILI9488_WriteParam
;;;218    	ILI9488_WriteParam(0x0A);
0000fe  200a              MOVS     r0,#0xa
000100  f7fffffe          BL       ILI9488_WriteParam
;;;219    	ILI9488_WriteParam(0x0C);
000104  200c              MOVS     r0,#0xc
000106  f7fffffe          BL       ILI9488_WriteParam
;;;220    	ILI9488_WriteParam(0x0E);
00010a  200e              MOVS     r0,#0xe
00010c  f7fffffe          BL       ILI9488_WriteParam
;;;221    	ILI9488_WriteParam(0x18);
000110  2018              MOVS     r0,#0x18
000112  f7fffffe          BL       ILI9488_WriteParam
;;;222    	ILI9488_WriteParam(0x1B);
000116  201b              MOVS     r0,#0x1b
000118  f7fffffe          BL       ILI9488_WriteParam
;;;223    	ILI9488_WriteParam(0x0F);
00011c  200f              MOVS     r0,#0xf
00011e  f7fffffe          BL       ILI9488_WriteParam
;;;224    
;;;225    	/* NGAMCTRL (Negative Gamma Control) (E1h)  */
;;;226    	ILI9488_WriteCmd(0XE1);
000122  20e1              MOVS     r0,#0xe1
000124  f7fffffe          BL       ILI9488_WriteCmd
;;;227    	ILI9488_WriteParam(0x00);
000128  2000              MOVS     r0,#0
00012a  f7fffffe          BL       ILI9488_WriteParam
;;;228    	ILI9488_WriteParam(0x17);
00012e  2017              MOVS     r0,#0x17
000130  f7fffffe          BL       ILI9488_WriteParam
;;;229    	ILI9488_WriteParam(0x1A);
000134  201a              MOVS     r0,#0x1a
000136  f7fffffe          BL       ILI9488_WriteParam
;;;230    	ILI9488_WriteParam(0x04);
00013a  2004              MOVS     r0,#4
00013c  f7fffffe          BL       ILI9488_WriteParam
;;;231    	ILI9488_WriteParam(0x0E);
000140  200e              MOVS     r0,#0xe
000142  f7fffffe          BL       ILI9488_WriteParam
;;;232    	ILI9488_WriteParam(0x06);
000146  2006              MOVS     r0,#6
000148  f7fffffe          BL       ILI9488_WriteParam
;;;233    	ILI9488_WriteParam(0x2F);
00014c  202f              MOVS     r0,#0x2f
00014e  f7fffffe          BL       ILI9488_WriteParam
;;;234    	ILI9488_WriteParam(0x45);
000152  2045              MOVS     r0,#0x45
000154  f7fffffe          BL       ILI9488_WriteParam
;;;235    	ILI9488_WriteParam(0x43);
000158  2043              MOVS     r0,#0x43
00015a  f7fffffe          BL       ILI9488_WriteParam
;;;236    	ILI9488_WriteParam(0x02);
00015e  2002              MOVS     r0,#2
000160  f7fffffe          BL       ILI9488_WriteParam
;;;237    	ILI9488_WriteParam(0x0A);
000164  200a              MOVS     r0,#0xa
000166  f7fffffe          BL       ILI9488_WriteParam
;;;238    	ILI9488_WriteParam(0x09);
00016a  2009              MOVS     r0,#9
00016c  f7fffffe          BL       ILI9488_WriteParam
;;;239    	ILI9488_WriteParam(0x32);
000170  2032              MOVS     r0,#0x32
000172  f7fffffe          BL       ILI9488_WriteParam
;;;240    	ILI9488_WriteParam(0x36);
000176  2036              MOVS     r0,#0x36
000178  f7fffffe          BL       ILI9488_WriteParam
;;;241    	ILI9488_WriteParam(0x0F);
00017c  200f              MOVS     r0,#0xf
00017e  f7fffffe          BL       ILI9488_WriteParam
;;;242    
;;;243    	/* Sleep Out (11h */
;;;244    	ILI9488_WriteCmd(0x11);
000182  2011              MOVS     r0,#0x11
000184  f7fffffe          BL       ILI9488_WriteCmd
;;;245    	bsp_DelayMS(120);
000188  2078              MOVS     r0,#0x78
00018a  f7fffffe          BL       bsp_DelayMS
;;;246    	ILI9488_WriteCmd(0x29);	/* Display ON (29h) */
00018e  2029              MOVS     r0,#0x29
000190  f7fffffe          BL       ILI9488_WriteCmd
;;;247    
;;;248    #if 1
;;;249    	/* 设置显示窗口 */
;;;250    	ILI9488_SetDispWin(0, 0, g_LcdHeight, g_LcdWidth);
000194  4804              LDR      r0,|L23.424|
000196  8803              LDRH     r3,[r0,#0]  ; g_LcdWidth
000198  4804              LDR      r0,|L23.428|
00019a  8802              LDRH     r2,[r0,#0]  ; g_LcdHeight
00019c  2100              MOVS     r1,#0
00019e  4608              MOV      r0,r1
0001a0  f7fffffe          BL       ILI9488_SetDispWin
;;;251    #endif
;;;252    }
0001a4  bd10              POP      {r4,pc}
;;;253    
                          ENDP

0001a6  0000              DCW      0x0000
                  |L23.424|
                          DCD      g_LcdWidth
                  |L23.428|
                          DCD      g_LcdHeight

                          AREA ||.data||, DATA, ALIGN=0

                  s_RGBChgEn
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\LCD_ILI9488.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_LCD_ILI9488_c_226bfcc4____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_LCD_ILI9488_c_226bfcc4____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_LCD_ILI9488_c_226bfcc4____REVSH|
#line 144
|__asm___13_LCD_ILI9488_c_226bfcc4____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_LCD_ILI9488_c_226bfcc4____RRX|
#line 300
|__asm___13_LCD_ILI9488_c_226bfcc4____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
