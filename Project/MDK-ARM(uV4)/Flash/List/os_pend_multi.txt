; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_pend_multi.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_pend_multi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_pend_multi.crf ..\..\uCOS-III\uCOS-III\Source\os_pend_multi.c]
                          THUMB

                          AREA ||i.OSPendMulti||, CODE, READONLY, ALIGN=2

                  OSPendMulti PROC
;;;120    /*$PAGE*/
;;;121    OS_OBJ_QTY  OSPendMulti (OS_PEND_DATA  *p_pend_data_tbl,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;122                             OS_OBJ_QTY     tbl_size,
;;;123                             OS_TICK        timeout,
;;;124                             OS_OPT         opt,
;;;125                             OS_ERR        *p_err)
;;;126    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4692              MOV      r10,r2
00000a  461d              MOV      r5,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;127        CPU_BOOLEAN   valid;
;;;128        OS_OBJ_QTY    nbr_obj_rdy;
;;;129        CPU_SR_ALLOC();
00000e  f04f0b00          MOV      r11,#0
;;;130    
;;;131    
;;;132    
;;;133    #ifdef OS_SAFETY_CRITICAL
;;;134        if (p_err == (OS_ERR *)0) {
;;;135            OS_SAFETY_CRITICAL_EXCEPTION();
;;;136            return ((OS_OBJ_QTY)0);
;;;137        }
;;;138    #endif
;;;139    
;;;140    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;141        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't pend from an ISR                                 */
000012  4856              LDR      r0,|L1.364|
000014  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000016  2800              CMP      r0,#0
000018  dd05              BLE      |L1.38|
;;;142           *p_err = OS_ERR_PEND_ISR;
00001a  f24610ae          MOV      r0,#0x61ae
00001e  8020              STRH     r0,[r4,#0]
;;;143            return ((OS_OBJ_QTY)0);
000020  2000              MOVS     r0,#0
                  |L1.34|
;;;144        }
;;;145    #endif
;;;146    
;;;147    #if OS_CFG_ARG_CHK_EN > 0u
;;;148        if (p_pend_data_tbl == (OS_PEND_DATA *)0) {             /* Validate 'p_pend_data_tbl'                             */
;;;149           *p_err = OS_ERR_PTR_INVALID;
;;;150            return ((OS_OBJ_QTY)0);
;;;151        }
;;;152        if (tbl_size == (OS_OBJ_QTY)0) {                        /* Array size must be > 0                                 */
;;;153           *p_err = OS_ERR_PTR_INVALID;
;;;154            return ((OS_OBJ_QTY)0);
;;;155        }
;;;156        switch (opt) {
;;;157            case OS_OPT_PEND_BLOCKING:
;;;158            case OS_OPT_PEND_NON_BLOCKING:
;;;159                 break;
;;;160    
;;;161            default:
;;;162                *p_err = OS_ERR_OPT_INVALID;
;;;163                 return ((OS_OBJ_QTY)0);
;;;164        }
;;;165    #endif
;;;166    
;;;167        valid = OS_PendMultiValidate(p_pend_data_tbl,           /* -------- Validate objects to be OS_SEM or OS_Q ------- */
;;;168                                     tbl_size);
;;;169        if (valid == DEF_FALSE) {
;;;170           *p_err = OS_ERR_OBJ_TYPE;                            /* Invalid, not OS_SEM or OS_Q                            */
;;;171            return ((OS_OBJ_QTY)0);
;;;172        }
;;;173    
;;;174    /*$PAGE*/
;;;175        CPU_CRITICAL_ENTER();
;;;176        nbr_obj_rdy = OS_PendMultiGetRdy(p_pend_data_tbl,       /* --------- SEE IF OBJECT(s) HAVE BEEN POSTED ---------- */
;;;177                                         tbl_size);
;;;178        if (nbr_obj_rdy > (OS_OBJ_QTY)0) {
;;;179            CPU_CRITICAL_EXIT();
;;;180           *p_err = OS_ERR_NONE;
;;;181            return ((OS_OBJ_QTY)nbr_obj_rdy);
;;;182        }
;;;183    
;;;184        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;185            CPU_CRITICAL_EXIT();
;;;186           *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
;;;187            return ((OS_OBJ_QTY)0);
;;;188        } else {
;;;189            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;190                CPU_CRITICAL_EXIT();
;;;191               *p_err = OS_ERR_SCHED_LOCKED;
;;;192                return ((OS_OBJ_QTY)0);
;;;193            }
;;;194        }
;;;195                                                                /* Lock the scheduler/re-enable interrupts                */
;;;196        OS_CRITICAL_ENTER_CPU_EXIT();
;;;197                                                                /* ------ NO OBJECT READY, PEND ON MULTIPLE OBJECTS ----- */
;;;198        OS_PendMultiWait(p_pend_data_tbl,                       /* Suspend task until object posted or timeout occurs     */
;;;199                         tbl_size,
;;;200                         timeout);
;;;201    
;;;202        OS_CRITICAL_EXIT_NO_SCHED();
;;;203    
;;;204        OSSched();                                              /* Find next highest priority task ready                  */
;;;205    
;;;206        CPU_CRITICAL_ENTER();
;;;207        switch (OSTCBCurPtr->PendStatus) {
;;;208            case OS_STATUS_PEND_OK:                             /* We got one of the objects posted to                    */
;;;209                *p_err = OS_ERR_NONE;
;;;210                 break;
;;;211    
;;;212            case OS_STATUS_PEND_ABORT:                          /* Indicate that the multi-pend was aborted               */
;;;213                *p_err = OS_ERR_PEND_ABORT;
;;;214                 break;
;;;215    
;;;216            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
;;;217                *p_err = OS_ERR_TIMEOUT;
;;;218                 break;
;;;219    
;;;220            case OS_STATUS_PEND_DEL:                            /* Indicate that an object pended on has been deleted     */
;;;221                *p_err = OS_ERR_OBJ_DEL;
;;;222                break;
;;;223    
;;;224            default:
;;;225                *p_err = OS_ERR_STATUS_INVALID;
;;;226                 break;
;;;227        }
;;;228    
;;;229        OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
;;;230        CPU_CRITICAL_EXIT();
;;;231    
;;;232        return ((OS_OBJ_QTY)1);
;;;233    }
000022  e8bd9ff0          POP      {r4-r12,pc}
                  |L1.38|
000026  f1b80f00          CMP      r8,#0                 ;148
00002a  d104              BNE      |L1.54|
00002c  f24620d5          MOV      r0,#0x62d5            ;149
000030  8020              STRH     r0,[r4,#0]            ;149
000032  2000              MOVS     r0,#0                 ;150
000034  e7f5              B        |L1.34|
                  |L1.54|
000036  f1b90f00          CMP      r9,#0                 ;152
00003a  d104              BNE      |L1.70|
00003c  f24620d5          MOV      r0,#0x62d5            ;153
000040  8020              STRH     r0,[r4,#0]            ;153
000042  2000              MOVS     r0,#0                 ;154
000044  e7ed              B        |L1.34|
                  |L1.70|
000046  b11d              CBZ      r5,|L1.80|
000048  f5b54f00          CMP      r5,#0x8000            ;156
00004c  d102              BNE      |L1.84|
00004e  e000              B        |L1.82|
                  |L1.80|
000050  bf00              NOP                            ;158
                  |L1.82|
000052  e004              B        |L1.94|
                  |L1.84|
000054  f6456025          MOV      r0,#0x5e25            ;162
000058  8020              STRH     r0,[r4,#0]            ;162
00005a  2000              MOVS     r0,#0                 ;163
00005c  e7e1              B        |L1.34|
                  |L1.94|
00005e  bf00              NOP                            ;159
000060  4649              MOV      r1,r9                 ;167
000062  4640              MOV      r0,r8                 ;167
000064  f7fffffe          BL       OS_PendMultiValidate
000068  4606              MOV      r6,r0                 ;167
00006a  b926              CBNZ     r6,|L1.118|
00006c  f64550c4          MOV      r0,#0x5dc4            ;170
000070  8020              STRH     r0,[r4,#0]            ;170
000072  2000              MOVS     r0,#0                 ;171
000074  e7d5              B        |L1.34|
                  |L1.118|
000076  bf00              NOP                            ;175
000078  bf00              NOP                            ;175
00007a  f7fffffe          BL       CPU_SR_Save
00007e  4683              MOV      r11,r0                ;175
000080  bf00              NOP                            ;175
000082  bf00              NOP                            ;175
000084  4649              MOV      r1,r9                 ;176
000086  4640              MOV      r0,r8                 ;176
000088  f7fffffe          BL       OS_PendMultiGetRdy
00008c  4607              MOV      r7,r0                 ;176
00008e  2f00              CMP      r7,#0                 ;178
000090  dd0a              BLE      |L1.168|
000092  bf00              NOP                            ;179
000094  bf00              NOP                            ;179
000096  4658              MOV      r0,r11                ;179
000098  f7fffffe          BL       CPU_SR_Restore
00009c  bf00              NOP                            ;179
00009e  bf00              NOP                            ;179
0000a0  2000              MOVS     r0,#0                 ;180
0000a2  8020              STRH     r0,[r4,#0]            ;180
0000a4  4638              MOV      r0,r7                 ;181
0000a6  e7bc              B        |L1.34|
                  |L1.168|
0000a8  f4054000          AND      r0,r5,#0x8000         ;184
0000ac  b158              CBZ      r0,|L1.198|
0000ae  bf00              NOP                            ;185
0000b0  bf00              NOP                            ;185
0000b2  4658              MOV      r0,r11                ;185
0000b4  f7fffffe          BL       CPU_SR_Restore
0000b8  bf00              NOP                            ;185
0000ba  bf00              NOP                            ;185
0000bc  f24610b0          MOV      r0,#0x61b0            ;186
0000c0  8020              STRH     r0,[r4,#0]            ;186
0000c2  2000              MOVS     r0,#0                 ;187
0000c4  e7ad              B        |L1.34|
                  |L1.198|
0000c6  482a              LDR      r0,|L1.368|
0000c8  7800              LDRB     r0,[r0,#0]            ;189  ; OSSchedLockNestingCtr
0000ca  2800              CMP      r0,#0                 ;189
0000cc  dd0b              BLE      |L1.230|
0000ce  bf00              NOP                            ;190
0000d0  bf00              NOP                            ;190
0000d2  4658              MOV      r0,r11                ;190
0000d4  f7fffffe          BL       CPU_SR_Restore
0000d8  bf00              NOP                            ;190
0000da  bf00              NOP                            ;190
0000dc  f6465063          MOV      r0,#0x6d63            ;191
0000e0  8020              STRH     r0,[r4,#0]            ;191
0000e2  2000              MOVS     r0,#0                 ;192
0000e4  e79d              B        |L1.34|
                  |L1.230|
0000e6  4652              MOV      r2,r10                ;198
0000e8  4649              MOV      r1,r9                 ;198
0000ea  4640              MOV      r0,r8                 ;198
0000ec  f7fffffe          BL       OS_PendMultiWait
0000f0  bf00              NOP                            ;202
0000f2  bf00              NOP                            ;202
0000f4  4658              MOV      r0,r11                ;202
0000f6  f7fffffe          BL       CPU_SR_Restore
0000fa  bf00              NOP                            ;202
0000fc  bf00              NOP                            ;202
0000fe  f7fffffe          BL       OSSched
000102  bf00              NOP                            ;206
000104  bf00              NOP                            ;206
000106  f7fffffe          BL       CPU_SR_Save
00010a  4683              MOV      r11,r0                ;206
00010c  bf00              NOP                            ;206
00010e  bf00              NOP                            ;206
000110  4818              LDR      r0,|L1.372|
000112  6800              LDR      r0,[r0,#0]            ;207  ; OSTCBCurPtr
000114  f8900035          LDRB     r0,[r0,#0x35]         ;207
000118  b130              CBZ      r0,|L1.296|
00011a  2801              CMP      r0,#1                 ;207
00011c  d007              BEQ      |L1.302|
00011e  2802              CMP      r0,#2                 ;207
000120  d00d              BEQ      |L1.318|
000122  2803              CMP      r0,#3                 ;207
000124  d10f              BNE      |L1.326|
000126  e006              B        |L1.310|
                  |L1.296|
000128  2000              MOVS     r0,#0                 ;209
00012a  8020              STRH     r0,[r4,#0]            ;209
00012c  e00f              B        |L1.334|
                  |L1.302|
00012e  f24610a9          MOV      r0,#0x61a9            ;213
000132  8020              STRH     r0,[r4,#0]            ;213
000134  e00b              B        |L1.334|
                  |L1.310|
000136  f24720d9          MOV      r0,#0x72d9            ;217
00013a  8020              STRH     r0,[r4,#0]            ;217
00013c  e007              B        |L1.334|
                  |L1.318|
00013e  f64550c2          MOV      r0,#0x5dc2            ;221
000142  8020              STRH     r0,[r4,#0]            ;221
000144  e003              B        |L1.334|
                  |L1.326|
000146  f646602e          MOV      r0,#0x6e2e            ;225
00014a  8020              STRH     r0,[r4,#0]            ;225
00014c  bf00              NOP                            ;226
                  |L1.334|
00014e  bf00              NOP                            ;210
000150  2000              MOVS     r0,#0                 ;229
000152  4908              LDR      r1,|L1.372|
000154  6809              LDR      r1,[r1,#0]            ;229  ; OSTCBCurPtr
000156  f8810035          STRB     r0,[r1,#0x35]         ;229
00015a  bf00              NOP                            ;230
00015c  bf00              NOP                            ;230
00015e  4658              MOV      r0,r11                ;230
000160  f7fffffe          BL       CPU_SR_Restore
000164  bf00              NOP                            ;230
000166  bf00              NOP                            ;230
000168  2001              MOVS     r0,#1                 ;232
00016a  e75a              B        |L1.34|
;;;234    
                          ENDP

                  |L1.364|
                          DCD      OSIntNestingCtr
                  |L1.368|
                          DCD      OSSchedLockNestingCtr
                  |L1.372|
                          DCD      OSTCBCurPtr

                          AREA ||i.OS_PendMultiGetRdy||, CODE, READONLY, ALIGN=2

                  OS_PendMultiGetRdy PROC
;;;253    
;;;254    OS_OBJ_QTY  OS_PendMultiGetRdy (OS_PEND_DATA  *p_pend_data_tbl,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;255                                    OS_OBJ_QTY     tbl_size)
;;;256    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;257        OS_OBJ_QTY   i;
;;;258        OS_OBJ_QTY   nbr_obj_rdy;
;;;259    #if OS_CFG_Q_EN > 0u
;;;260        OS_ERR       err;
;;;261        OS_MSG_SIZE  msg_size;
;;;262        OS_Q        *p_q;
;;;263        void        *p_void;
;;;264        CPU_TS       ts;
;;;265    #endif
;;;266    #if OS_CFG_SEM_EN  > 0u
;;;267        OS_SEM      *p_sem;
;;;268    #endif
;;;269    
;;;270    
;;;271    
;;;272        nbr_obj_rdy = (OS_OBJ_QTY)0;
000008  2600              MOVS     r6,#0
;;;273        for (i = 0u; i < tbl_size; i++) {
00000a  46b2              MOV      r10,r6
00000c  e038              B        |L2.128|
                  |L2.14|
;;;274            p_pend_data_tbl->RdyObjPtr  = (OS_PEND_OBJ  *)0;         /* Clear all fields                                  */
00000e  2000              MOVS     r0,#0
000010  6120              STR      r0,[r4,#0x10]
;;;275            p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
000012  6160              STR      r0,[r4,#0x14]
;;;276            p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
000014  8320              STRH     r0,[r4,#0x18]
;;;277            p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
000016  61e0              STR      r0,[r4,#0x1c]
;;;278            p_pend_data_tbl->NextPtr    = (OS_PEND_DATA *)0;
000018  6060              STR      r0,[r4,#4]
;;;279            p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
00001a  6020              STR      r0,[r4,#0]
;;;280            p_pend_data_tbl->TCBPtr     = (OS_TCB       *)0;
00001c  60a0              STR      r0,[r4,#8]
;;;281    #if OS_CFG_Q_EN > 0u
;;;282            p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);     /* Assume we are pointing to a message queue object  */
00001e  f8d4800c          LDR      r8,[r4,#0xc]
;;;283            if (p_q->Type == OS_OBJ_TYPE_Q) {                        /* Is it a message queue?                            */
000022  491a              LDR      r1,|L2.140|
000024  f8d80000          LDR      r0,[r8,#0]
000028  4288              CMP      r0,r1
00002a  d114              BNE      |L2.86|
;;;284                p_void = OS_MsgQGet(&p_q->MsgQ,                      /* Yes, Any message waiting in the message queue?    */
00002c  ab02              ADD      r3,sp,#8
00002e  466a              MOV      r2,sp
000030  a901              ADD      r1,sp,#4
000032  f1080020          ADD      r0,r8,#0x20
000036  f7fffffe          BL       OS_MsgQGet
00003a  4607              MOV      r7,r0
;;;285                                    &msg_size,
;;;286                                    &ts,
;;;287                                    &err);
;;;288                if (err == OS_ERR_NONE) {
00003c  f8bd0008          LDRH     r0,[sp,#8]
000040  b948              CBNZ     r0,|L2.86|
;;;289                    p_pend_data_tbl->RdyObjPtr  = p_pend_data_tbl->PendObjPtr;
000042  68e0              LDR      r0,[r4,#0xc]
000044  6120              STR      r0,[r4,#0x10]
;;;290                    p_pend_data_tbl->RdyMsgPtr  = p_void;            /*      Yes, save the message received               */
000046  6167              STR      r7,[r4,#0x14]
;;;291                    p_pend_data_tbl->RdyMsgSize = msg_size;
000048  f8bd0004          LDRH     r0,[sp,#4]
00004c  8320              STRH     r0,[r4,#0x18]
;;;292                    p_pend_data_tbl->RdyTS      = ts;
00004e  9800              LDR      r0,[sp,#0]
000050  61e0              STR      r0,[r4,#0x1c]
;;;293                    nbr_obj_rdy++;
000052  1c70              ADDS     r0,r6,#1
000054  b286              UXTH     r6,r0
                  |L2.86|
;;;294                }
;;;295            }
;;;296    #endif
;;;297    
;;;298    #if OS_CFG_SEM_EN > 0u
;;;299            p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr); /* Assume we are pointing to a semaphore object      */
000056  68e5              LDR      r5,[r4,#0xc]
;;;300            if (p_sem->Type == OS_OBJ_TYPE_SEM) {                    /* Is it a semaphore?                                */
000058  490d              LDR      r1,|L2.144|
00005a  6828              LDR      r0,[r5,#0]
00005c  4288              CMP      r0,r1
00005e  d10a              BNE      |L2.118|
;;;301                if (p_sem->Ctr > 0u) {                               /* Yes, Semaphore has been signaled?                 */
000060  6a28              LDR      r0,[r5,#0x20]
000062  b140              CBZ      r0,|L2.118|
;;;302                    p_sem->Ctr--;                                    /*      Yes, caller may proceed                      */
000064  6a28              LDR      r0,[r5,#0x20]
000066  1e40              SUBS     r0,r0,#1
000068  6228              STR      r0,[r5,#0x20]
;;;303                    p_pend_data_tbl->RdyObjPtr  = p_pend_data_tbl->PendObjPtr;
00006a  68e0              LDR      r0,[r4,#0xc]
00006c  6120              STR      r0,[r4,#0x10]
;;;304                    p_pend_data_tbl->RdyTS      = p_sem->TS;
00006e  6a68              LDR      r0,[r5,#0x24]
000070  61e0              STR      r0,[r4,#0x1c]
;;;305                    nbr_obj_rdy++;
000072  1c70              ADDS     r0,r6,#1
000074  b286              UXTH     r6,r0
                  |L2.118|
;;;306                }
;;;307            }
;;;308    #endif
;;;309    
;;;310            p_pend_data_tbl++;
000076  3420              ADDS     r4,r4,#0x20
000078  f10a0001          ADD      r0,r10,#1             ;273
00007c  fa1ffa80          UXTH     r10,r0                ;273
                  |L2.128|
000080  45ca              CMP      r10,r9                ;273
000082  dbc4              BLT      |L2.14|
;;;311        }
;;;312        return (nbr_obj_rdy);
000084  4630              MOV      r0,r6
;;;313    }
000086  e8bd8ffe          POP      {r1-r11,pc}
;;;314    
                          ENDP

00008a  0000              DCW      0x0000
                  |L2.140|
                          DCD      0x55455551
                  |L2.144|
                          DCD      0x414d4553

                          AREA ||i.OS_PendMultiValidate||, CODE, READONLY, ALIGN=2

                  OS_PendMultiValidate PROC
;;;334    
;;;335    CPU_BOOLEAN  OS_PendMultiValidate (OS_PEND_DATA  *p_pend_data_tbl,
000000  b5f0              PUSH     {r4-r7,lr}
;;;336                                       OS_OBJ_QTY     tbl_size)
;;;337    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;338        OS_OBJ_QTY  i;
;;;339        OS_OBJ_QTY  ctr;
;;;340    #if OS_CFG_SEM_EN  > 0u
;;;341        OS_SEM      *p_sem;
;;;342    #endif
;;;343    #if OS_CFG_Q_EN > 0u
;;;344        OS_Q        *p_q;
;;;345    #endif
;;;346    
;;;347    
;;;348        for (i = 0u; i < tbl_size; i++) {
000006  2400              MOVS     r4,#0
000008  e018              B        |L3.60|
                  |L3.10|
;;;349            if (p_pend_data_tbl->PendObjPtr == (OS_PEND_OBJ *)0) {   /* All .PendObjPtr in the table MUST be non NULL     */
00000a  68d0              LDR      r0,[r2,#0xc]
00000c  b908              CBNZ     r0,|L3.18|
;;;350                return (DEF_FALSE);
00000e  2000              MOVS     r0,#0
                  |L3.16|
;;;351            }
;;;352    
;;;353            ctr = 0u;
;;;354    #if OS_CFG_SEM_EN  > 0u
;;;355            p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr); /* All objects to pend on must be of type OS_SEM ... */
;;;356            if (p_sem->Type == OS_OBJ_TYPE_SEM) {
;;;357                ctr++;
;;;358            }
;;;359    #endif
;;;360    
;;;361    #if OS_CFG_Q_EN > 0u
;;;362            p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);     /* ... or of type OS_Q                               */
;;;363            if (p_q->Type == OS_OBJ_TYPE_Q) {
;;;364                ctr++;
;;;365            }
;;;366    #endif
;;;367    
;;;368            if (ctr == (OS_OBJ_QTY)0) {
;;;369                return (DEF_FALSE);                                  /* Found at least one invalid object type            */
;;;370            }
;;;371            p_pend_data_tbl++;
;;;372        }
;;;373        return (DEF_TRUE);
;;;374    }
000010  bdf0              POP      {r4-r7,pc}
                  |L3.18|
000012  2100              MOVS     r1,#0                 ;353
000014  68d6              LDR      r6,[r2,#0xc]          ;355
000016  4f0b              LDR      r7,|L3.68|
000018  6830              LDR      r0,[r6,#0]            ;356
00001a  42b8              CMP      r0,r7                 ;356
00001c  d101              BNE      |L3.34|
00001e  1c48              ADDS     r0,r1,#1              ;357
000020  b281              UXTH     r1,r0                 ;357
                  |L3.34|
000022  68d5              LDR      r5,[r2,#0xc]          ;362
000024  4f08              LDR      r7,|L3.72|
000026  6828              LDR      r0,[r5,#0]            ;363
000028  42b8              CMP      r0,r7                 ;363
00002a  d101              BNE      |L3.48|
00002c  1c48              ADDS     r0,r1,#1              ;364
00002e  b281              UXTH     r1,r0                 ;364
                  |L3.48|
000030  b909              CBNZ     r1,|L3.54|
000032  2000              MOVS     r0,#0                 ;369
000034  e7ec              B        |L3.16|
                  |L3.54|
000036  3220              ADDS     r2,r2,#0x20           ;371
000038  1c60              ADDS     r0,r4,#1              ;348
00003a  b284              UXTH     r4,r0                 ;348
                  |L3.60|
00003c  429c              CMP      r4,r3                 ;348
00003e  dbe4              BLT      |L3.10|
000040  2001              MOVS     r0,#1                 ;373
000042  e7e5              B        |L3.16|
;;;375    
                          ENDP

                  |L3.68|
                          DCD      0x414d4553
                  |L3.72|
                          DCD      0x55455551

                          AREA ||i.OS_PendMultiWait||, CODE, READONLY, ALIGN=2

                  OS_PendMultiWait PROC
;;;396    
;;;397    void  OS_PendMultiWait (OS_PEND_DATA  *p_pend_data_tbl,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;398                            OS_OBJ_QTY     tbl_size,
;;;399                            OS_TICK        timeout)
;;;400    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;401        OS_OBJ_QTY      i;
;;;402        OS_PEND_LIST   *p_pend_list;
;;;403    
;;;404    #if OS_CFG_Q_EN > 0u
;;;405        OS_Q           *p_q;
;;;406    #endif
;;;407    
;;;408    #if OS_CFG_SEM_EN > 0u
;;;409        OS_SEM         *p_sem;
;;;410    #endif
;;;411    
;;;412    
;;;413    
;;;414        OSTCBCurPtr->PendOn             = OS_TASK_PEND_ON_MULTI;   /* Resource not available, wait until it is            */
00000a  2003              MOVS     r0,#3
00000c  491c              LDR      r1,|L4.128|
00000e  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
000010  f8810034          STRB     r0,[r1,#0x34]
;;;415        OSTCBCurPtr->PendStatus         = OS_STATUS_PEND_OK;
000014  2000              MOVS     r0,#0
000016  491a              LDR      r1,|L4.128|
000018  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
00001a  f8810035          STRB     r0,[r1,#0x35]
;;;416        OSTCBCurPtr->PendDataTblEntries = tbl_size;
00001e  4818              LDR      r0,|L4.128|
000020  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000022  87c5              STRH     r5,[r0,#0x3e]
;;;417        OSTCBCurPtr->PendDataTblPtr     = p_pend_data_tbl;
000024  4816              LDR      r0,|L4.128|
000026  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000028  6304              STR      r4,[r0,#0x30]
;;;418    
;;;419        OS_TaskBlock(OSTCBCurPtr,                                  /* Block the task waiting for object to be posted ...  */
00002a  4641              MOV      r1,r8
00002c  4814              LDR      r0,|L4.128|
00002e  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000030  f7fffffe          BL       OS_TaskBlock
;;;420                     timeout);                                     /* ... but with a timeout if not                       */
;;;421    
;;;422        for (i = 0u; i < tbl_size; i++) {
000034  f04f0900          MOV      r9,#0
000038  e01d              B        |L4.118|
                  |L4.58|
;;;423            p_pend_data_tbl->TCBPtr = OSTCBCurPtr;                 /* Every entry points back to the TCB of the task      */
00003a  4811              LDR      r0,|L4.128|
00003c  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
00003e  60a0              STR      r0,[r4,#8]
;;;424    
;;;425    #if OS_CFG_SEM_EN > 0u
;;;426            p_sem = (OS_SEM *)((void *)p_pend_data_tbl->PendObjPtr);
000040  68e7              LDR      r7,[r4,#0xc]
;;;427            if (p_sem->Type == OS_OBJ_TYPE_SEM) {
000042  4910              LDR      r1,|L4.132|
000044  6838              LDR      r0,[r7,#0]
000046  4288              CMP      r0,r1
000048  d105              BNE      |L4.86|
;;;428                p_pend_list = &p_sem->PendList;
00004a  f1070a08          ADD      r10,r7,#8
;;;429                OS_PendListInsertPrio(p_pend_list,
00004e  4621              MOV      r1,r4
000050  4650              MOV      r0,r10
000052  f7fffffe          BL       OS_PendListInsertPrio
                  |L4.86|
;;;430                                      p_pend_data_tbl);
;;;431            }
;;;432    #endif
;;;433    
;;;434    #if OS_CFG_Q_EN > 0u
;;;435            p_q = (OS_Q *)((void *)p_pend_data_tbl->PendObjPtr);
000056  68e6              LDR      r6,[r4,#0xc]
;;;436            if (p_q->Type == OS_OBJ_TYPE_Q) {
000058  490b              LDR      r1,|L4.136|
00005a  6830              LDR      r0,[r6,#0]
00005c  4288              CMP      r0,r1
00005e  d105              BNE      |L4.108|
;;;437                p_pend_list = &p_q->PendList;
000060  f1060a08          ADD      r10,r6,#8
;;;438                OS_PendListInsertPrio(p_pend_list,
000064  4621              MOV      r1,r4
000066  4650              MOV      r0,r10
000068  f7fffffe          BL       OS_PendListInsertPrio
                  |L4.108|
;;;439                                      p_pend_data_tbl);
;;;440            }
;;;441    #endif
;;;442    
;;;443            p_pend_data_tbl++;
00006c  3420              ADDS     r4,r4,#0x20
00006e  f1090001          ADD      r0,r9,#1              ;422
000072  fa1ff980          UXTH     r9,r0                 ;422
                  |L4.118|
000076  45a9              CMP      r9,r5                 ;422
000078  dbdf              BLT      |L4.58|
;;;444        }
;;;445    }
00007a  e8bd87f0          POP      {r4-r10,pc}
;;;446    
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      OSTCBCurPtr
                  |L4.132|
                          DCD      0x414d4553
                  |L4.136|
                          DCD      0x55455551
