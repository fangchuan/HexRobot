L 1 "..\..\User\fatfs\src\ff.c"
N/*----------------------------------------------------------------------------/
N/  FatFs - FAT file system module  R0.11                 (C)ChaN, 2015
N/-----------------------------------------------------------------------------/
N/ FatFs module is a free software that opened under license policy of
N/ following conditions.
N/
N/ Copyright (C) 2015, ChaN, all right reserved.
N/
N/ 1. Redistributions of source code must retain the above copyright notice,
N/    this condition and the following disclaimer.
N/
N/ This software is provided by the copyright holder and contributors "AS IS"
N/ and any warranties related to this software are DISCLAIMED.
N/ The copyright owner or contributors be NOT LIABLE for any damages caused
N/ by use of this software.
N/----------------------------------------------------------------------------*/
N
N
N#include "ff.h"			/* Declarations of FatFs API */
L 1 "..\..\User\fatfs\src\ff.h" 1
N/*---------------------------------------------------------------------------/
N/  FatFs - FAT file system module include R0.11     (C)ChaN, 2015
N/----------------------------------------------------------------------------/
N/ FatFs module is a free software that opened under license policy of
N/ following conditions.
N/
N/ Copyright (C) 2015, ChaN, all right reserved.
N/
N/ 1. Redistributions of source code must retain the above copyright notice,
N/    this condition and the following disclaimer.
N/
N/ This software is provided by the copyright holder and contributors "AS IS"
N/ and any warranties related to this software are DISCLAIMED.
N/ The copyright owner or contributors be NOT LIABLE for any damages caused
N/ by use of this software.
N/---------------------------------------------------------------------------*/
N
N
N#ifndef _FATFS
N#define _FATFS	32020	/* Revision ID */
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#include "integer.h"	/* Basic integer types */
L 1 "..\..\User\fatfs\src\integer.h" 1
N/*-------------------------------------------*/
N/* Integer type definitions for FatFs module */
N/*-------------------------------------------*/
N
N#ifndef _FF_INTEGER
N#define _FF_INTEGER
N
N#ifdef _WIN32	/* FatFs development platform */
S
S#include <windows.h>
S#include <tchar.h>
S
N#else			/* Embedded platform */
N
N/* This type MUST be 8 bit */
Ntypedef unsigned char	BYTE;
N
N/* These types MUST be 16 bit */
Ntypedef short			SHORT;
Ntypedef unsigned short	WORD;
Ntypedef unsigned short	WCHAR;
N
N/* These types MUST be 16 bit or 32 bit */
Ntypedef int				INT;
Ntypedef unsigned int	UINT;
N
N/* These types MUST be 32 bit */
Ntypedef long			LONG;
Ntypedef unsigned long	DWORD;
N
N#endif
N
N#endif
L 27 "..\..\User\fatfs\src\ff.h" 2
N#include "ffconf.h"		/* FatFs configuration options */
L 1 "..\..\User\fatfs\src\ffconf.h" 1
N/*---------------------------------------------------------------------------/
N/  FatFs - FAT file system module configuration file  R0.11 (C)ChaN, 2015
N/---------------------------------------------------------------------------*/
N
N#define _FFCONF 32020	/* Revision ID */
N
N/*---------------------------------------------------------------------------/
N/ Functions and Buffer Configurations
N/---------------------------------------------------------------------------*/
N
N#define	_FS_TINY		0
N/* This option switches tiny buffer configuration. (0:Normal or 1:Tiny)
N/  At the tiny configuration, size of the file object (FIL) is reduced _MAX_SS
N/  bytes. Instead of private sector buffer eliminated from the file object,
N/  common sector buffer in the file system object (FATFS) is used for the file
N/  data transfer. */
N
N
N#define _FS_READONLY	0
N/* This option switches read-only configuration. (0:Read/Write or 1:Read-only)
N/  Read-only configuration removes writing API functions, f_write(), f_sync(),
N/  f_unlink(), f_mkdir(), f_chmod(), f_rename(), f_truncate(), f_getfree()
N/  and optional writing functions as well. */
N
N
N#define _FS_MINIMIZE	0
N/* This option defines minimization level to remove some basic API functions.
N/
N/   0: All basic functions are enabled.
N/   1: f_stat(), f_getfree(), f_unlink(), f_mkdir(), f_chmod(), f_utime(),
N/      f_truncate() and f_rename() function are removed.
N/   2: f_opendir(), f_readdir() and f_closedir() are removed in addition to 1.
N/   3: f_lseek() function is removed in addition to 2. */
N
N
N#define	_USE_STRFUNC	0
N/* This option switches string functions, f_gets(), f_putc(), f_puts() and
N/  f_printf().
N/
N/  0: Disable string functions.
N/  1: Enable without LF-CRLF conversion.
N/  2: Enable with LF-CRLF conversion. */
N
N
N#define _USE_FIND		0
N/* This option switches filtered directory read feature and related functions,
N/  f_findfirst() and f_findnext(). (0:Disable or 1:Enable) */
N
N
N#define	_USE_MKFS		1
N/* This option switches f_mkfs() function. (0:Disable or 1:Enable) */
N
N
N#define	_USE_FASTSEEK	0
N/* This option switches fast seek feature. (0:Disable or 1:Enable) */
N
N
N#define _USE_LABEL		1
N/* This option switches volume label functions, f_getlabel() and f_setlabel().
N/  (0:Disable or 1:Enable) */
N
N
N#define	_USE_FORWARD	0
N/* This option switches f_forward() function. (0:Disable or 1:Enable)
N/  To enable it, also _FS_TINY need to be set to 1. */
N
N
N/*---------------------------------------------------------------------------/
N/ Locale and Namespace Configurations
N/---------------------------------------------------------------------------*/
N
N#define _CODE_PAGE	936
N/* This option specifies the OEM code page to be used on the target system.
N/  Incorrect setting of the code page can cause a file open failure.
N/
N/   1    - ASCII (No extended character. Non-LFN cfg. only)
N/   437  - U.S.
N/   720  - Arabic
N/   737  - Greek
N/   775  - Baltic
N/   850  - Multilingual Latin 1
N/   852  - Latin 2
N/   855  - Cyrillic
N/   857  - Turkish
N/   858  - Multilingual Latin 1 + Euro
N/   862  - Hebrew
N/   866  - Russian
N/   874  - Thai
N/   932  - Japanese Shift_JIS (DBCS)
N/   936  - Simplified Chinese GBK (DBCS)
N/   949  - Korean (DBCS)
N/   950  - Traditional Chinese Big5 (DBCS)
N*/
N
N
N#define	_USE_LFN	0
N#define	_MAX_LFN	255
N/* The _USE_LFN option switches the LFN feature.
N/
N/   0: Disable LFN feature. _MAX_LFN has no effect.
N/   1: Enable LFN with static working buffer on the BSS. Always NOT thread-safe.
N/   2: Enable LFN with dynamic working buffer on the STACK.
N/   3: Enable LFN with dynamic working buffer on the HEAP.
N/
N/  When enable the LFN feature, Unicode handling functions (option/unicode.c) must
N/  be added to the project. The LFN working buffer occupies (_MAX_LFN + 1) * 2 bytes.
N/  When use stack for the working buffer, take care on stack overflow. When use heap
N/  memory for the working buffer, memory management functions, ff_memalloc() and
N/  ff_memfree(), must be added to the project. */
N
N
N#define	_LFN_UNICODE	0
N/* This option switches character encoding on the API. (0:ANSI/OEM or 1:Unicode)
N/  To use Unicode string for the path name, enable LFN feature and set _LFN_UNICODE
N/  to 1. This option also affects behavior of string I/O functions. */
N
N
N#define _STRF_ENCODE	3
N/* When _LFN_UNICODE is 1, this option selects the character encoding on the file to
N/  be read/written via string I/O functions, f_gets(), f_putc(), f_puts and f_printf().
N/
N/  0: ANSI/OEM
N/  1: UTF-16LE
N/  2: UTF-16BE
N/  3: UTF-8
N/
N/  When _LFN_UNICODE is 0, this option has no effect. */
N
N
N#define _FS_RPATH	0
N/* This option configures relative path feature.
N/
N/   0: Disable relative path feature and remove related functions.
N/   1: Enable relative path feature. f_chdir() and f_chdrive() are available.
N/   2: f_getcwd() function is available in addition to 1.
N/
N/  Note that directory items read via f_readdir() are affected by this option. */
N
N
N/*---------------------------------------------------------------------------/
N/ Drive/Volume Configurations
N/---------------------------------------------------------------------------*/
N
N#define _VOLUMES	3
N/* Number of volumes (logical drives) to be used. */
N
N
N#define _STR_VOLUME_ID	0
N#define _VOLUME_STRS	"RAM","NAND","CF","SD1","SD2","USB1","USB2","USB3"
N/* _STR_VOLUME_ID option switches string volume ID feature.
N/  When _STR_VOLUME_ID is set to 1, also pre-defined strings can be used as drive
N/  number in the path name. _VOLUME_STRS defines the drive ID strings for each
N/  logical drives. Number of items must be equal to _VOLUMES. Valid characters for
N/  the drive ID strings are: A-Z and 0-9. */
N
N
N#define	_MULTI_PARTITION	0
N/* This option switches multi-partition feature. By default (0), each logical drive
N/  number is bound to the same physical drive number and only an FAT volume found on
N/  the physical drive will be mounted. When multi-partition feature is enabled (1),
N/  each logical drive number is bound to arbitrary physical drive and partition
N/  listed in the VolToPart[]. Also f_fdisk() funciton will be available. */
N
N
N#define	_MIN_SS		512
N#define	_MAX_SS		512
N/* These options configure the range of sector size to be supported. (512, 1024,
N/  2048 or 4096) Always set both 512 for most systems, all type of memory cards and
N/  harddisk. But a larger value may be required for on-board flash memory and some
N/  type of optical media. When _MAX_SS is larger than _MIN_SS, FatFs is configured
N/  to variable sector size and GET_SECTOR_SIZE command must be implemented to the
N/  disk_ioctl() function. */
N
N
N#define	_USE_TRIM	0
N/* This option switches ATA-TRIM feature. (0:Disable or 1:Enable)
N/  To enable Trim feature, also CTRL_TRIM command should be implemented to the
N/  disk_ioctl() function. */
N
N
N#define _FS_NOFSINFO	0
N/* If you need to know correct free space on the FAT32 volume, set bit 0 of this
N/  option, and f_getfree() function at first time after volume mount will force
N/  a full FAT scan. Bit 1 controls the use of last allocated cluster number.
N/
N/  bit0=0: Use free cluster count in the FSINFO if available.
N/  bit0=1: Do not trust free cluster count in the FSINFO.
N/  bit1=0: Use last allocated cluster number in the FSINFO if available.
N/  bit1=1: Do not trust last allocated cluster number in the FSINFO.
N*/
N
N
N
N/*---------------------------------------------------------------------------/
N/ System Configurations
N/---------------------------------------------------------------------------*/
N
N#define _FS_NORTC	0
N#define _NORTC_MON	2
N#define _NORTC_MDAY	1
N#define _NORTC_YEAR	2015
N/* The _FS_NORTC option switches timestamp feature. If the system does not have
N/  an RTC function or valid timestamp is not needed, set _FS_NORTC to 1 to disable
N/  the timestamp feature. All objects modified by FatFs will have a fixed timestamp
N/  defined by _NORTC_MON, _NORTC_MDAY and _NORTC_YEAR.
N/  When timestamp feature is enabled (_FS_NORTC	== 0), get_fattime() function need
N/  to be added to the project to read current time form RTC. _NORTC_MON,
N/  _NORTC_MDAY and _NORTC_YEAR have no effect. 
N/  These options have no effect at read-only configuration (_FS_READONLY == 1). */
N
N
N#define	_FS_LOCK	0
N/* The _FS_LOCK option switches file lock feature to control duplicated file open
N/  and illegal operation to open objects. This option must be 0 when _FS_READONLY
N/  is 1.
N/
N/  0:  Disable file lock feature. To avoid volume corruption, application program
N/      should avoid illegal open, remove and rename to the open objects.
N/  >0: Enable file lock feature. The value defines how many files/sub-directories
N/      can be opened simultaneously under file lock control. Note that the file
N/      lock feature is independent of re-entrancy. */
N
N
N#define _FS_REENTRANT	0
N#define _FS_TIMEOUT		1000
N#define	_SYNC_t			HANDLE
N/* The _FS_REENTRANT option switches the re-entrancy (thread safe) of the FatFs
N/  module itself. Note that regardless of this option, file access to different
N/  volume is always re-entrant and volume control functions, f_mount(), f_mkfs()
N/  and f_fdisk() function, are always not re-entrant. Only file/directory access
N/  to the same volume is under control of this feature.
N/
N/   0: Disable re-entrancy. _FS_TIMEOUT and _SYNC_t have no effect.
N/   1: Enable re-entrancy. Also user provided synchronization handlers,
N/      ff_req_grant(), ff_rel_grant(), ff_del_syncobj() and ff_cre_syncobj()
N/      function, must be added to the project. Samples are available in
N/      option/syscall.c.
N/
N/  The _FS_TIMEOUT defines timeout period in unit of time tick.
N/  The _SYNC_t defines O/S dependent sync object type. e.g. HANDLE, ID, OS_EVENT*,
N/  SemaphoreHandle_t and etc.. */
N
N
N#define _WORD_ACCESS	0
N/* The _WORD_ACCESS option is an only platform dependent option. It defines
N/  which access method is used to the word data on the FAT volume.
N/
N/   0: Byte-by-byte access. Always compatible with all platforms.
N/   1: Word access. Do not choose this unless under both the following conditions.
N/
N/  * Address misaligned memory access is always allowed to ALL instructions.
N/  * Byte order on the memory is little-endian.
N/
N/  If it is the case, _WORD_ACCESS can also be set to 1 to reduce code size.
N/  Following table shows allowable settings of some processor types.
N/
N/   ARM7TDMI    0           ColdFire    0           V850E       0
N/   Cortex-M3   0           Z80         0/1         V850ES      0/1
N/   Cortex-M0   0           x86         0/1         TLCS-870    0/1
N/   AVR         0/1         RX600(LE)   0/1         TLCS-900    0/1
N/   AVR32       0           RL78        0           R32C        0
N/   PIC18       0/1         SH-2        0           M16C        0/1
N/   PIC24       0           H8S         0           MSP430      0
N/   PIC32       0           H8/300H     0           8051        0/1
N*/
N
L 28 "..\..\User\fatfs\src\ff.h" 2
N#if _FATFS != _FFCONF
X#if 32020 != 32020
S#error Wrong configuration file (ffconf.h).
N#endif
N
N
N
N/* Definitions of volume management */
N
N#if _MULTI_PARTITION		/* Multiple partition configuration */
X#if 0		 
Stypedef struct {
S	BYTE pd;	/* Physical drive number */
S	BYTE pt;	/* Partition: 0:Auto detect, 1-4:Forced partition) */
S} PARTITION;
Sextern PARTITION VolToPart[];	/* Volume - Partition resolution table */
S#define LD2PD(vol) (VolToPart[vol].pd)	/* Get physical drive number */
S#define LD2PT(vol) (VolToPart[vol].pt)	/* Get partition index */
S
N#else							/* Single partition configuration */
N#define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is bound to the same physical drive number */
N#define LD2PT(vol) 0			/* Find first valid partition or in SFD */
N
N#endif
N
N
N
N/* Type of path name strings on FatFs API */
N
N#if _LFN_UNICODE			/* Unicode string */
X#if 0			 
S#if !_USE_LFN
S#error _LFN_UNICODE must be 0 at non-LFN cfg.
S#endif
S#ifndef _INC_TCHAR
Stypedef WCHAR TCHAR;
S#define _T(x) L ## x
S#define _TEXT(x) L ## x
S#endif
S
N#else						/* ANSI/OEM string */
N#ifndef _INC_TCHAR
Ntypedef char TCHAR;
N#define _T(x) x
N#define _TEXT(x) x
N#endif
N
N#endif
N
N
N
N/* File system object structure (FATFS) */
N
Ntypedef struct {
N	BYTE	fs_type;		/* FAT sub-type (0:Not mounted) */
N	BYTE	drv;			/* Physical drive number */
N	BYTE	csize;			/* Sectors per cluster (1,2,4...128) */
N	BYTE	n_fats;			/* Number of FAT copies (1 or 2) */
N	BYTE	wflag;			/* win[] flag (b0:dirty) */
N	BYTE	fsi_flag;		/* FSINFO flags (b7:disabled, b0:dirty) */
N	WORD	id;				/* File system mount ID */
N	WORD	n_rootdir;		/* Number of root directory entries (FAT12/16) */
N#if _MAX_SS != _MIN_SS
X#if 512 != 512
S	WORD	ssize;			/* Bytes per sector (512, 1024, 2048 or 4096) */
N#endif
N#if _FS_REENTRANT
X#if 0
S	_SYNC_t	sobj;			/* Identifier of sync object */
N#endif
N#if !_FS_READONLY
X#if !0
N	DWORD	last_clust;		/* Last allocated cluster */
N	DWORD	free_clust;		/* Number of free clusters */
N#endif
N#if _FS_RPATH
X#if 0
S	DWORD	cdir;			/* Current directory start cluster (0:root) */
N#endif
N	DWORD	n_fatent;		/* Number of FAT entries, = number of clusters + 2 */
N	DWORD	fsize;			/* Sectors per FAT */
N	DWORD	volbase;		/* Volume start sector */
N	DWORD	fatbase;		/* FAT start sector */
N	DWORD	dirbase;		/* Root directory start sector (FAT32:Cluster#) */
N	DWORD	database;		/* Data start sector */
N	DWORD	winsect;		/* Current sector appearing in the win[] */
N	BYTE	win[_MAX_SS];	/* Disk access window for Directory, FAT (and file data at tiny cfg) */
X	BYTE	win[512];	 
N} FATFS;
N
N
N
N/* File object structure (FIL) */
N
Ntypedef struct {
N	FATFS*	fs;				/* Pointer to the related file system object (**do not change order**) */
N	WORD	id;				/* Owner file system mount ID (**do not change order**) */
N	BYTE	flag;			/* Status flags */
N	BYTE	err;			/* Abort flag (error code) */
N	DWORD	fptr;			/* File read/write pointer (Zeroed on file open) */
N	DWORD	fsize;			/* File size */
N	DWORD	sclust;			/* File start cluster (0:no cluster chain, always 0 when fsize is 0) */
N	DWORD	clust;			/* Current cluster of fpter (not valid when fprt is 0) */
N	DWORD	dsect;			/* Sector number appearing in buf[] (0:invalid) */
N#if !_FS_READONLY
X#if !0
N	DWORD	dir_sect;		/* Sector number containing the directory entry */
N	BYTE*	dir_ptr;		/* Pointer to the directory entry in the win[] */
N#endif
N#if _USE_FASTSEEK
X#if 0
S	DWORD*	cltbl;			/* Pointer to the cluster link map table (Nulled on file open) */
N#endif
N#if _FS_LOCK
X#if 0
S	UINT	lockid;			/* File lock ID origin from 1 (index of file semaphore table Files[]) */
N#endif
N#if !_FS_TINY
X#if !0
N	BYTE	buf[_MAX_SS];	/* File private data read/write window */
X	BYTE	buf[512];	 
N#endif
N} FIL;
N
N
N
N/* Directory object structure (DIR) */
N
Ntypedef struct {
N	FATFS*	fs;				/* Pointer to the owner file system object (**do not change order**) */
N	WORD	id;				/* Owner file system mount ID (**do not change order**) */
N	WORD	index;			/* Current read/write index number */
N	DWORD	sclust;			/* Table start cluster (0:Root dir) */
N	DWORD	clust;			/* Current cluster */
N	DWORD	sect;			/* Current sector */
N	BYTE*	dir;			/* Pointer to the current SFN entry in the win[] */
N	BYTE*	fn;				/* Pointer to the SFN (in/out) {file[8],ext[3],status[1]} */
N#if _FS_LOCK
X#if 0
S	UINT	lockid;			/* File lock ID (index of file semaphore table Files[]) */
N#endif
N#if _USE_LFN
X#if 0
S	WCHAR*	lfn;			/* Pointer to the LFN working buffer */
S	WORD	lfn_idx;		/* Last matched LFN index number (0xFFFF:No LFN) */
N#endif
N#if _USE_FIND
X#if 0
S	const TCHAR*	pat;	/* Pointer to the name matching pattern */
N#endif
N} DIR;
N
N
N
N/* File information structure (FILINFO) */
N
Ntypedef struct {
N	DWORD	fsize;			/* File size */
N	WORD	fdate;			/* Last modified date */
N	WORD	ftime;			/* Last modified time */
N	BYTE	fattrib;		/* Attribute */
N	TCHAR	fname[13];		/* Short file name (8.3 format) */
N#if _USE_LFN
X#if 0
S	TCHAR*	lfname;			/* Pointer to the LFN buffer */
S	UINT 	lfsize;			/* Size of LFN buffer in TCHAR */
N#endif
N} FILINFO;
N
N
N
N/* File function return code (FRESULT) */
N
Ntypedef enum {
N	FR_OK = 0,				/* (0) Succeeded */
N	FR_DISK_ERR,			/* (1) A hard error occurred in the low level disk I/O layer */
N	FR_INT_ERR,				/* (2) Assertion failed */
N	FR_NOT_READY,			/* (3) The physical drive cannot work */
N	FR_NO_FILE,				/* (4) Could not find the file */
N	FR_NO_PATH,				/* (5) Could not find the path */
N	FR_INVALID_NAME,		/* (6) The path name format is invalid */
N	FR_DENIED,				/* (7) Access denied due to prohibited access or directory full */
N	FR_EXIST,				/* (8) Access denied due to prohibited access */
N	FR_INVALID_OBJECT,		/* (9) The file/directory object is invalid */
N	FR_WRITE_PROTECTED,		/* (10) The physical drive is write protected */
N	FR_INVALID_DRIVE,		/* (11) The logical drive number is invalid */
N	FR_NOT_ENABLED,			/* (12) The volume has no work area */
N	FR_NO_FILESYSTEM,		/* (13) There is no valid FAT volume */
N	FR_MKFS_ABORTED,		/* (14) The f_mkfs() aborted due to any parameter error */
N	FR_TIMEOUT,				/* (15) Could not get a grant to access the volume within defined period */
N	FR_LOCKED,				/* (16) The operation is rejected according to the file sharing policy */
N	FR_NOT_ENOUGH_CORE,		/* (17) LFN working buffer could not be allocated */
N	FR_TOO_MANY_OPEN_FILES,	/* (18) Number of open files > _FS_SHARE */
N	FR_INVALID_PARAMETER	/* (19) Given parameter is invalid */
N} FRESULT;
N
N
N
N/*--------------------------------------------------------------*/
N/* FatFs module application interface                           */
N
NFRESULT f_open (FIL* fp, const TCHAR* path, BYTE mode);				/* Open or create a file */
NFRESULT f_close (FIL* fp);											/* Close an open file object */
NFRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br);			/* Read data from a file */
NFRESULT f_write (FIL* fp, const void* buff, UINT btw, UINT* bw);	/* Write data to a file */
NFRESULT f_forward (FIL* fp, UINT(*func)(const BYTE*,UINT), UINT btf, UINT* bf);	/* Forward data to the stream */
NFRESULT f_lseek (FIL* fp, DWORD ofs);								/* Move file pointer of a file object */
NFRESULT f_truncate (FIL* fp);										/* Truncate file */
NFRESULT f_sync (FIL* fp);											/* Flush cached data of a writing file */
NFRESULT f_opendir (DIR* dp, const TCHAR* path);						/* Open a directory */
NFRESULT f_closedir (DIR* dp);										/* Close an open directory */
NFRESULT f_readdir (DIR* dp, FILINFO* fno);							/* Read a directory item */
NFRESULT f_findfirst (DIR* dp, FILINFO* fno, const TCHAR* path, const TCHAR* pattern);	/* Find first file */
NFRESULT f_findnext (DIR* dp, FILINFO* fno);							/* Find next file */
NFRESULT f_mkdir (const TCHAR* path);								/* Create a sub directory */
NFRESULT f_unlink (const TCHAR* path);								/* Delete an existing file or directory */
NFRESULT f_rename (const TCHAR* path_old, const TCHAR* path_new);	/* Rename/Move a file or directory */
NFRESULT f_stat (const TCHAR* path, FILINFO* fno);					/* Get file status */
NFRESULT f_chmod (const TCHAR* path, BYTE attr, BYTE mask);			/* Change attribute of the file/dir */
NFRESULT f_utime (const TCHAR* path, const FILINFO* fno);			/* Change times-tamp of the file/dir */
NFRESULT f_chdir (const TCHAR* path);								/* Change current directory */
NFRESULT f_chdrive (const TCHAR* path);								/* Change current drive */
NFRESULT f_getcwd (TCHAR* buff, UINT len);							/* Get current directory */
NFRESULT f_getfree (const TCHAR* path, DWORD* nclst, FATFS** fatfs);	/* Get number of free clusters on the drive */
NFRESULT f_getlabel (const TCHAR* path, TCHAR* label, DWORD* vsn);	/* Get volume label */
NFRESULT f_setlabel (const TCHAR* label);							/* Set volume label */
NFRESULT f_mount (FATFS* fs, const TCHAR* path, BYTE opt);			/* Mount/Unmount a logical drive */
NFRESULT f_mkfs (const TCHAR* path, BYTE sfd, UINT au);				/* Create a file system on the volume */
NFRESULT f_fdisk (BYTE pdrv, const DWORD szt[], void* work);			/* Divide a physical drive into some partitions */
Nint f_putc (TCHAR c, FIL* fp);										/* Put a character to the file */
Nint f_puts (const TCHAR* str, FIL* cp);								/* Put a string to the file */
Nint f_printf (FIL* fp, const TCHAR* str, ...);						/* Put a formatted string to the file */
NTCHAR* f_gets (TCHAR* buff, int len, FIL* fp);						/* Get a string from the file */
N
N#define f_eof(fp) ((int)((fp)->fptr == (fp)->fsize))
N#define f_error(fp) ((fp)->err)
N#define f_tell(fp) ((fp)->fptr)
N#define f_size(fp) ((fp)->fsize)
N#define f_rewind(fp) f_lseek((fp), 0)
N#define f_rewinddir(dp) f_readdir((dp), 0)
N
N#ifndef EOF
N#define EOF (-1)
N#endif
N
N
N
N
N/*--------------------------------------------------------------*/
N/* Additional user defined functions                            */
N
N/* RTC function */
N#if !_FS_READONLY && !_FS_NORTC
X#if !0 && !0
NDWORD get_fattime (void);
N#endif
N
N/* Unicode support functions */
N#if _USE_LFN							/* Unicode - OEM code conversion */
X#if 0							 
SWCHAR ff_convert (WCHAR chr, UINT dir);	/* OEM-Unicode bidirectional conversion */
SWCHAR ff_wtoupper (WCHAR chr);			/* Unicode upper-case conversion */
S#if _USE_LFN == 3						/* Memory functions */
Svoid* ff_memalloc (UINT msize);			/* Allocate memory block */
Svoid ff_memfree (void* mblock);			/* Free memory block */
S#endif
N#endif
N
N/* Sync functions */
N#if _FS_REENTRANT
X#if 0
Sint ff_cre_syncobj (BYTE vol, _SYNC_t* sobj);	/* Create a sync object */
Sint ff_req_grant (_SYNC_t sobj);				/* Lock sync object */
Svoid ff_rel_grant (_SYNC_t sobj);				/* Unlock sync object */
Sint ff_del_syncobj (_SYNC_t sobj);				/* Delete a sync object */
N#endif
N
N
N
N
N/*--------------------------------------------------------------*/
N/* Flags and offset address                                     */
N
N
N/* File access control and file status flags (FIL.flag) */
N
N#define	FA_READ				0x01
N#define	FA_OPEN_EXISTING	0x00
N
N#if !_FS_READONLY
X#if !0
N#define	FA_WRITE			0x02
N#define	FA_CREATE_NEW		0x04
N#define	FA_CREATE_ALWAYS	0x08
N#define	FA_OPEN_ALWAYS		0x10
N#define FA__WRITTEN			0x20
N#define FA__DIRTY			0x40
N#endif
N
N
N/* FAT sub type (FATFS.fs_type) */
N
N#define FS_FAT12	1
N#define FS_FAT16	2
N#define FS_FAT32	3
N
N
N/* File attribute bits for directory entry */
N
N#define	AM_RDO	0x01	/* Read only */
N#define	AM_HID	0x02	/* Hidden */
N#define	AM_SYS	0x04	/* System */
N#define	AM_VOL	0x08	/* Volume label */
N#define AM_LFN	0x0F	/* LFN entry */
N#define AM_DIR	0x10	/* Directory */
N#define AM_ARC	0x20	/* Archive */
N#define AM_MASK	0x3F	/* Mask of defined bits */
N
N
N/* Fast seek feature */
N#define CREATE_LINKMAP	0xFFFFFFFF
N
N
N
N/*--------------------------------*/
N/* Multi-byte word access macros  */
N
N#if _WORD_ACCESS == 1	/* Enable word access to the FAT structure */
X#if 0 == 1	 
S#define	LD_WORD(ptr)		(WORD)(*(WORD*)(BYTE*)(ptr))
S#define	LD_DWORD(ptr)		(DWORD)(*(DWORD*)(BYTE*)(ptr))
S#define	ST_WORD(ptr,val)	*(WORD*)(BYTE*)(ptr)=(WORD)(val)
S#define	ST_DWORD(ptr,val)	*(DWORD*)(BYTE*)(ptr)=(DWORD)(val)
N#else					/* Use byte-by-byte access to the FAT structure */
N#define	LD_WORD(ptr)		(WORD)(((WORD)*((BYTE*)(ptr)+1)<<8)|(WORD)*(BYTE*)(ptr))
N#define	LD_DWORD(ptr)		(DWORD)(((DWORD)*((BYTE*)(ptr)+3)<<24)|((DWORD)*((BYTE*)(ptr)+2)<<16)|((WORD)*((BYTE*)(ptr)+1)<<8)|*(BYTE*)(ptr))
N#define	ST_WORD(ptr,val)	*(BYTE*)(ptr)=(BYTE)(val); *((BYTE*)(ptr)+1)=(BYTE)((WORD)(val)>>8)
N#define	ST_DWORD(ptr,val)	*(BYTE*)(ptr)=(BYTE)(val); *((BYTE*)(ptr)+1)=(BYTE)((WORD)(val)>>8); *((BYTE*)(ptr)+2)=(BYTE)((DWORD)(val)>>16); *((BYTE*)(ptr)+3)=(BYTE)((DWORD)(val)>>24)
N#endif
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* _FATFS */
L 20 "..\..\User\fatfs\src\ff.c" 2
N#include "diskio.h"		/* Declarations of disk I/O functions */
L 1 "..\..\User\fatfs\src\diskio.h" 1
N/*-----------------------------------------------------------------------/
N/  Low level disk interface modlue include file   (C)ChaN, 2014          /
N/-----------------------------------------------------------------------*/
N
N#ifndef _DISKIO_DEFINED
N#define _DISKIO_DEFINED
N
N#ifdef __cplusplus
Sextern "C" {
N#endif
N
N#define _USE_WRITE	1	/* 1: Enable disk_write function */
N#define _USE_IOCTL	1	/* 1: Enable disk_ioctl fucntion */
N
N#include "integer.h"
N
N
N/* Status of Disk Functions */
Ntypedef BYTE	DSTATUS;
N
N/* Results of Disk Functions */
Ntypedef enum {
N	RES_OK = 0,		/* 0: Successful */
N	RES_ERROR,		/* 1: R/W Error */
N	RES_WRPRT,		/* 2: Write Protected */
N	RES_NOTRDY,		/* 3: Not Ready */
N	RES_PARERR		/* 4: Invalid Parameter */
N} DRESULT;
N
N
N/*---------------------------------------*/
N/* Prototypes for disk control functions */
N
N
NDSTATUS disk_initialize (BYTE pdrv);
NDSTATUS disk_status (BYTE pdrv);
NDRESULT disk_read (BYTE pdrv, BYTE* buff, DWORD sector, UINT count);
NDRESULT disk_write (BYTE pdrv, const BYTE* buff, DWORD sector, UINT count);
NDRESULT disk_ioctl (BYTE pdrv, BYTE cmd, void* buff);
N
N
N/* Disk Status Bits (DSTATUS) */
N
N#define STA_NOINIT		0x01	/* Drive not initialized */
N#define STA_NODISK		0x02	/* No medium in the drive */
N#define STA_PROTECT		0x04	/* Write protected */
N
N
N/* Command code for disk_ioctrl fucntion */
N
N/* Generic command (Used by FatFs) */
N#define CTRL_SYNC			0	/* Complete pending write process (needed at _FS_READONLY == 0) */
N#define GET_SECTOR_COUNT	1	/* Get media size (needed at _USE_MKFS == 1) */
N#define GET_SECTOR_SIZE		2	/* Get sector size (needed at _MAX_SS != _MIN_SS) */
N#define GET_BLOCK_SIZE		3	/* Get erase block size (needed at _USE_MKFS == 1) */
N#define CTRL_TRIM			4	/* Inform device that the data on the block of sectors is no longer used (needed at _USE_TRIM == 1) */
N
N/* Generic command (Not used by FatFs) */
N#define CTRL_POWER			5	/* Get/Set power status */
N#define CTRL_LOCK			6	/* Lock/Unlock media removal */
N#define CTRL_EJECT			7	/* Eject media */
N#define CTRL_FORMAT			8	/* Create physical format on the media */
N
N/* MMC/SDC specific ioctl command */
N#define MMC_GET_TYPE		10	/* Get card type */
N#define MMC_GET_CSD			11	/* Get CSD */
N#define MMC_GET_CID			12	/* Get CID */
N#define MMC_GET_OCR			13	/* Get OCR */
N#define MMC_GET_SDSTAT		14	/* Get SD status */
N
N/* ATA/CF specific ioctl command */
N#define ATA_GET_REV			20	/* Get F/W revision */
N#define ATA_GET_MODEL		21	/* Get model name */
N#define ATA_GET_SN			22	/* Get serial number */
N
N/* Definitions of physical drive number for each media */
N#define FS_SD		0
N#define FS_NAND		1
N#define FS_USB		2
N#define FS_SPI		3
N#define FS_NOR		4
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif
L 21 "..\..\User\fatfs\src\ff.c" 2
N
N
N/*--------------------------------------------------------------------------
N
N   Module Private Definitions
N
N---------------------------------------------------------------------------*/
N
N#if _FATFS != 32020	/* Revision ID */
X#if 32020 != 32020	 
S#error Wrong include file (ff.h).
N#endif
N
N
N/* Reentrancy related */
N#if _FS_REENTRANT
X#if 0
S#if _USE_LFN == 1
S#error Static LFN work area cannot be used at thread-safe configuration
S#endif
S#define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
S#define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
N#else
N#define	ENTER_FF(fs)
N#define LEAVE_FF(fs, res)	return res
N#endif
N
N#define	ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
N
N
N/* Definitions of sector size */
N#if (_MAX_SS < _MIN_SS) || (_MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096) || (_MIN_SS != 512 && _MIN_SS != 1024 && _MIN_SS != 2048 && _MIN_SS != 4096)
X#if (512 < 512) || (512 != 512 && 512 != 1024 && 512 != 2048 && 512 != 4096) || (512 != 512 && 512 != 1024 && 512 != 2048 && 512 != 4096)
S#error Wrong sector size configuration
N#endif
N#if _MAX_SS == _MIN_SS
X#if 512 == 512
N#define	SS(fs)	((UINT)_MAX_SS)	/* Fixed sector size */
N#else
S#define	SS(fs)	((fs)->ssize)	/* Variable sector size */
N#endif
N
N
N/* Timestamp feature */
N#if _FS_NORTC == 1
X#if 0 == 1
S#if _NORTC_YEAR < 1980 || _NORTC_YEAR > 2107 || _NORTC_MON < 1 || _NORTC_MON > 12 || _NORTC_MDAY < 1 || _NORTC_MDAY > 31
S#error Invalid _FS_NORTC settings
S#endif
S#define GET_FATTIME()	((DWORD)(_NORTC_YEAR - 1980) << 25 | (DWORD)_NORTC_MON << 21 | (DWORD)_NORTC_MDAY << 16)
N#else
N#define GET_FATTIME()	get_fattime()
N#endif
N
N
N/* File access control feature */
N#if _FS_LOCK
X#if 0
S#if _FS_READONLY
S#error _FS_LOCK must be 0 at read-only configuration
S#endif
Stypedef struct {
S	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
S	DWORD clu;		/* Object ID 2, directory (0:root) */
S	WORD idx;		/* Object ID 3, directory index */
S	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
S} FILESEM;
N#endif
N
N
N
N/* DBCS code ranges and SBCS extend character conversion table */
N
N#if _CODE_PAGE == 932	/* Japanese Shift-JIS */
X#if 936 == 932	 
S#define _DF1S	0x81	/* DBC 1st byte range 1 start */
S#define _DF1E	0x9F	/* DBC 1st byte range 1 end */
S#define _DF2S	0xE0	/* DBC 1st byte range 2 start */
S#define _DF2E	0xFC	/* DBC 1st byte range 2 end */
S#define _DS1S	0x40	/* DBC 2nd byte range 1 start */
S#define _DS1E	0x7E	/* DBC 2nd byte range 1 end */
S#define _DS2S	0x80	/* DBC 2nd byte range 2 start */
S#define _DS2E	0xFC	/* DBC 2nd byte range 2 end */
S
N#elif _CODE_PAGE == 936	/* Simplified Chinese GBK */
X#elif 936 == 936	 
N#define _DF1S	0x81
N#define _DF1E	0xFE
N#define _DS1S	0x40
N#define _DS1E	0x7E
N#define _DS2S	0x80
N#define _DS2E	0xFE
N
N#elif _CODE_PAGE == 949	/* Korean */
S#define _DF1S	0x81
S#define _DF1E	0xFE
S#define _DS1S	0x41
S#define _DS1E	0x5A
S#define _DS2S	0x61
S#define _DS2E	0x7A
S#define _DS3S	0x81
S#define _DS3E	0xFE
S
S#elif _CODE_PAGE == 950	/* Traditional Chinese Big5 */
S#define _DF1S	0x81
S#define _DF1E	0xFE
S#define _DS1S	0x40
S#define _DS1E	0x7E
S#define _DS2S	0xA1
S#define _DS2E	0xFE
S
S#elif _CODE_PAGE == 437	/* U.S. (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F,0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 720	/* Arabic (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x49,0x49,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x45,0x41,0x84,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x49,0x49,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 737	/* Greek (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
S				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, 				0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xE7,0xE8,0xF1,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 775	/* Baltic (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
S				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, 				0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 850	/* Multilingual Latin 1 (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
S				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 852	/* Latin 2 (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0x9F, \
S				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
X#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F,0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0x9F, 				0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
S
S#elif _CODE_PAGE == 855	/* Cyrillic (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
S				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
S				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F,0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, 				0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, 				0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 857	/* Turkish (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
S				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x98,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0x59,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 858	/* Multilingual Latin 1 + Euro (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
S				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0xDE,0x8E,0x8F,0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x59,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, 				0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD1,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE7,0xE9,0xEA,0xEB,0xED,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 862	/* Hebrew (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0x21,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 866	/* Russian (OEM) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0x90,0x91,0x92,0x93,0x9d,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F,0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 874	/* Thai (OEM, Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 1250 /* Central Europe (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
S				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xA3,0xB4,0xB5,0xB6,0xB7,0xB8,0xA5,0xAA,0xBB,0xBC,0xBD,0xBC,0xAF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xA3,0xB4,0xB5,0xB6,0xB7,0xB8,0xA5,0xAA,0xBB,0xBC,0xBD,0xBC,0xAF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
S
S#elif _CODE_PAGE == 1251 /* Cyrillic (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x80,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, \
S				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB2,0xA5,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xA3,0xBD,0xBD,0xAF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF}
X#define _EXCVT {0x80,0x81,0x82,0x82,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x80,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x8D,0x8E,0x8F, 				0xA0,0xA2,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB2,0xA5,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xA3,0xBD,0xBD,0xAF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF}
S
S#elif _CODE_PAGE == 1252 /* Latin 1 (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xAd,0x9B,0x8C,0x9D,0xAE,0x9F, \
S				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0xAd,0x9B,0x8C,0x9D,0xAE,0x9F, 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
S
S#elif _CODE_PAGE == 1253 /* Greek (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xA2,0xB8,0xB9,0xBA, \
S				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xBC,0xFD,0xBF,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xA2,0xB8,0xB9,0xBA, 				0xE0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xFB,0xBC,0xFD,0xBF,0xFF}
S
S#elif _CODE_PAGE == 1254 /* Turkish (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x9D,0x9E,0x9F, \
S				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x8A,0x9B,0x8C,0x9D,0x9E,0x9F, 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0x9F}
S
S#elif _CODE_PAGE == 1255 /* Hebrew (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF,0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 1256 /* Arabic (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x8C,0x9D,0x9E,0x9F, \
S				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,0xF3,0x4F,0xF5,0xF6,0xF7,0xF8,0x55,0xFA,0x55,0x55,0xFD,0xFE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x8C,0x9D,0x9E,0x9F, 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0x41,0xE1,0x41,0xE3,0xE4,0xE5,0xE6,0x43,0x45,0x45,0x45,0x45,0xEC,0xED,0x49,0x49,0xF0,0xF1,0xF2,0xF3,0x4F,0xF5,0xF6,0xF7,0xF8,0x55,0xFA,0x55,0x55,0xFD,0xFE,0xFF}
S
S#elif _CODE_PAGE == 1257 /* Baltic (Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
S				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xBC,0xBD,0xBE,0xAF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, 				0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xA8,0xB9,0xAA,0xBB,0xBC,0xBD,0xBE,0xAF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xFF}
S
S#elif _CODE_PAGE == 1258 /* Vietnam (OEM, Windows) */
S#define _DF1S	0
S#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0xAC,0x9D,0x9E,0x9F, \
S				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
S				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xFE,0x9F}
X#define _EXCVT {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0xAC,0x9D,0x9E,0x9F, 				0xA0,0x21,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF,0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF,0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, 				0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xEC,0xCD,0xCE,0xCF,0xD0,0xD1,0xF2,0xD3,0xD4,0xD5,0xD6,0xF7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xFE,0x9F}
S
S#elif _CODE_PAGE == 1	/* ASCII (for only non-LFN cfg) */
S#if _USE_LFN
S#error Cannot use LFN feature without valid code page.
S#endif
S#define _DF1S	0
S
S#else
S#error Unknown code page
S
N#endif
N
N
N/* Character code support macros */
N#define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
N#define IsLower(c)	(((c)>='a')&&((c)<='z'))
N#define IsDigit(c)	(((c)>='0')&&((c)<='9'))
N
N#if _DF1S		/* Code page is DBCS */
X#if 0x81		 
N
N#ifdef _DF2S	/* Two 1st byte areas */
S#define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) <= _DF2E))
N#else			/* One 1st byte area */
N#define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
N#endif
N
N#ifdef _DS3S	/* Three 2nd byte areas */
S#define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E) || ((BYTE)(c) >= _DS3S && (BYTE)(c) <= _DS3E))
N#else			/* Two 2nd byte areas */
N#define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) <= _DS2E))
N#endif
N
N#else			/* Code page is SBCS */
S
S#define IsDBCS1(c)	0
S#define IsDBCS2(c)	0
S
N#endif /* _DF1S */
N
N
N/* Name status flags */
N#define NSFLAG		11		/* Index of name status byte in fn[] */
N#define NS_LOSS		0x01	/* Out of 8.3 format */
N#define NS_LFN		0x02	/* Force to create LFN entry */
N#define NS_LAST		0x04	/* Last segment */
N#define NS_BODY		0x08	/* Lower case flag (body) */
N#define NS_EXT		0x10	/* Lower case flag (ext) */
N#define NS_DOT		0x20	/* Dot entry */
N
N
N/* FAT sub-type boundaries (Differ from specs but correct for real DOS/Windows) */
N#define MIN_FAT16	4086U	/* Minimum number of clusters as FAT16 */
N#define	MIN_FAT32	65526U	/* Minimum number of clusters as FAT32 */
N
N
N/* FatFs refers the members in the FAT structures as byte array instead of
N/ structure member because the structure is not binary compatible between
N/ different platforms */
N
N#define BS_jmpBoot			0		/* x86 jump instruction (3) */
N#define BS_OEMName			3		/* OEM name (8) */
N#define BPB_BytsPerSec		11		/* Sector size [byte] (2) */
N#define BPB_SecPerClus		13		/* Cluster size [sector] (1) */
N#define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (2) */
N#define BPB_NumFATs			16		/* Number of FAT copies (1) */
N#define BPB_RootEntCnt		17		/* Number of root directory entries for FAT12/16 (2) */
N#define BPB_TotSec16		19		/* Volume size [sector] (2) */
N#define BPB_Media			21		/* Media descriptor (1) */
N#define BPB_FATSz16			22		/* FAT size [sector] (2) */
N#define BPB_SecPerTrk		24		/* Track size [sector] (2) */
N#define BPB_NumHeads		26		/* Number of heads (2) */
N#define BPB_HiddSec			28		/* Number of special hidden sectors (4) */
N#define BPB_TotSec32		32		/* Volume size [sector] (4) */
N#define BS_DrvNum			36		/* Physical drive number (2) */
N#define BS_BootSig			38		/* Extended boot signature (1) */
N#define BS_VolID			39		/* Volume serial number (4) */
N#define BS_VolLab			43		/* Volume label (8) */
N#define BS_FilSysType		54		/* File system type (1) */
N#define BPB_FATSz32			36		/* FAT size [sector] (4) */
N#define BPB_ExtFlags		40		/* Extended flags (2) */
N#define BPB_FSVer			42		/* File system version (2) */
N#define BPB_RootClus		44		/* Root directory first cluster (4) */
N#define BPB_FSInfo			48		/* Offset of FSINFO sector (2) */
N#define BPB_BkBootSec		50		/* Offset of backup boot sector (2) */
N#define BS_DrvNum32			64		/* Physical drive number (2) */
N#define BS_BootSig32		66		/* Extended boot signature (1) */
N#define BS_VolID32			67		/* Volume serial number (4) */
N#define BS_VolLab32			71		/* Volume label (8) */
N#define BS_FilSysType32		82		/* File system type (1) */
N#define	FSI_LeadSig			0		/* FSI: Leading signature (4) */
N#define	FSI_StrucSig		484		/* FSI: Structure signature (4) */
N#define	FSI_Free_Count		488		/* FSI: Number of free clusters (4) */
N#define	FSI_Nxt_Free		492		/* FSI: Last allocated cluster (4) */
N#define MBR_Table			446		/* MBR: Partition table offset (2) */
N#define	SZ_PTE				16		/* MBR: Size of a partition table entry */
N#define BS_55AA				510		/* Signature word (2) */
N
N#define	DIR_Name			0		/* Short file name (11) */
N#define	DIR_Attr			11		/* Attribute (1) */
N#define	DIR_NTres			12		/* Lower case flag (1) */
N#define DIR_CrtTimeTenth	13		/* Created time sub-second (1) */
N#define	DIR_CrtTime			14		/* Created time (2) */
N#define	DIR_CrtDate			16		/* Created date (2) */
N#define DIR_LstAccDate		18		/* Last accessed date (2) */
N#define	DIR_FstClusHI		20		/* Higher 16-bit of first cluster (2) */
N#define	DIR_WrtTime			22		/* Modified time (2) */
N#define	DIR_WrtDate			24		/* Modified date (2) */
N#define	DIR_FstClusLO		26		/* Lower 16-bit of first cluster (2) */
N#define	DIR_FileSize		28		/* File size (4) */
N#define	LDIR_Ord			0		/* LFN entry order and LLE flag (1) */
N#define	LDIR_Attr			11		/* LFN attribute (1) */
N#define	LDIR_Type			12		/* LFN type (1) */
N#define	LDIR_Chksum			13		/* Sum of corresponding SFN entry */
N#define	LDIR_FstClusLO		26		/* Must be zero (0) */
N#define	SZ_DIRE				32		/* Size of a directory entry */
N#define	LLEF				0x40	/* Last long entry flag in LDIR_Ord */
N#define	DDEM				0xE5	/* Deleted directory entry mark at DIR_Name[0] */
N#define	RDDEM				0x05	/* Replacement of the character collides with DDEM */
N
N
N
N
N/*------------------------------------------------------------*/
N/* Module private work area                                   */
N/*------------------------------------------------------------*/
N/* Remark: Uninitialized variables with static duration are
N/  guaranteed zero/null at start-up. If not, either the linker
N/  or start-up routine being used is out of ANSI-C standard.
N*/
N
N#if _VOLUMES < 1 || _VOLUMES > 9
X#if 3 < 1 || 3 > 9
S#error Wrong _VOLUMES setting
N#endif
Nstatic FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
Xstatic FATFS *FatFs[3];	 
Nstatic WORD Fsid;				/* File system mount ID */
N
N#if _FS_RPATH && _VOLUMES >= 2
X#if 0 && 3 >= 2
Sstatic BYTE CurrVol;			/* Current drive */
N#endif
N
N#if _FS_LOCK
X#if 0
Sstatic FILESEM Files[_FS_LOCK];	/* Open object lock semaphores */
N#endif
N
N#if _USE_LFN == 0			/* Non LFN feature */
X#if 0 == 0			 
N#define	DEFINE_NAMEBUF		BYTE sfn[12]
N#define INIT_BUF(dobj)		(dobj).fn = sfn
N#define	FREE_BUF()
N#else
S#if _MAX_LFN < 12 || _MAX_LFN > 255
S#error Wrong _MAX_LFN setting
S#endif
S#if _USE_LFN == 1			/* LFN feature with static working buffer */
Sstatic WCHAR LfnBuf[_MAX_LFN + 1];
S#define	DEFINE_NAMEBUF		BYTE sfn[12]
S#define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
S#define	FREE_BUF()
S#elif _USE_LFN == 2 		/* LFN feature with dynamic working buffer on the stack */
S#define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR lbuf[_MAX_LFN + 1]
S#define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
S#define	FREE_BUF()
S#elif _USE_LFN == 3 		/* LFN feature with dynamic working buffer on the heap */
S#define	DEFINE_NAMEBUF		BYTE sfn[12]; WCHAR *lfn
S#define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); (dobj).lfn = lfn; (dobj).fn = sfn; }
S#define	FREE_BUF()			ff_memfree(lfn)
S#else
S#error Wrong _USE_LFN setting
S#endif
N#endif
N
N#ifdef _EXCVT
Sstatic const BYTE ExCvt[] = _EXCVT;	/* Upper conversion table for extended characters */
N#endif
N
N
N
N
N
N
N/*--------------------------------------------------------------------------
N
N   Module Private Functions
N
N---------------------------------------------------------------------------*/
N
N
N/*-----------------------------------------------------------------------*/
N/* String functions                                                      */
N/*-----------------------------------------------------------------------*/
N
N/* Copy memory to memory */
Nstatic
Nvoid mem_cpy (void* dst, const void* src, UINT cnt) {
N	BYTE *d = (BYTE*)dst;
N	const BYTE *s = (const BYTE*)src;
N
N#if _WORD_ACCESS == 1
X#if 0 == 1
S	while (cnt >= sizeof (int)) {
S		*(int*)d = *(int*)s;
S		d += sizeof (int); s += sizeof (int);
S		cnt -= sizeof (int);
S	}
N#endif
N	while (cnt--)
N		*d++ = *s++;
N}
N
N/* Fill memory */
Nstatic
Nvoid mem_set (void* dst, int val, UINT cnt) {
N	BYTE *d = (BYTE*)dst;
N
N	while (cnt--)
N		*d++ = (BYTE)val;
N}
N
N/* Compare memory to memory */
Nstatic
Nint mem_cmp (const void* dst, const void* src, UINT cnt) {
N	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
N	int r = 0;
N
N	while (cnt-- && (r = *d++ - *s++) == 0) ;
N	return r;
N}
N
N/* Check if chr is contained in the string */
Nstatic
Nint chk_chr (const char* str, int chr) {
N	while (*str && *str != chr) str++;
N	return *str;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Request/Release grant to access the volume                            */
N/*-----------------------------------------------------------------------*/
N#if _FS_REENTRANT
X#if 0
Sstatic
Sint lock_fs (
S	FATFS* fs		/* File system object */
S)
S{
S	return ff_req_grant(fs->sobj);
S}
S
S
Sstatic
Svoid unlock_fs (
S	FATFS* fs,		/* File system object */
S	FRESULT res		/* Result code to be returned */
S)
S{
S	if (fs &&
S		res != FR_NOT_ENABLED &&
S		res != FR_INVALID_DRIVE &&
S		res != FR_INVALID_OBJECT &&
S		res != FR_TIMEOUT) {
S		ff_rel_grant(fs->sobj);
S	}
S}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* File lock control functions                                           */
N/*-----------------------------------------------------------------------*/
N#if _FS_LOCK
X#if 0
S
Sstatic
SFRESULT chk_lock (	/* Check if the file can be accessed */
S	DIR* dp,		/* Directory object pointing the file to be checked */
S	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
S)
S{
S	UINT i, be;
S
S	/* Search file semaphore table */
S	for (i = be = 0; i < _FS_LOCK; i++) {
S		if (Files[i].fs) {	/* Existing entry */
S			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
S				Files[i].clu == dp->sclust &&
S				Files[i].idx == dp->index) break;
S		} else {			/* Blank entry */
S			be = 1;
S		}
S	}
S	if (i == _FS_LOCK)	/* The object is not opened */
S		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
S
S	/* The object has been opened. Reject any open against writing file and all write mode open */
S	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
S}
S
S
Sstatic
Sint enq_lock (void)	/* Check if an entry is available for a new object */
S{
S	UINT i;
S
S	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
S	return (i == _FS_LOCK) ? 0 : 1;
S}
S
S
Sstatic
SUINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
S	DIR* dp,	/* Directory object pointing the file to register or increment */
S	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
S)
S{
S	UINT i;
S
S
S	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
S		if (Files[i].fs == dp->fs &&
S			Files[i].clu == dp->sclust &&
S			Files[i].idx == dp->index) break;
S	}
S
S	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
S		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
S		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
S		Files[i].fs = dp->fs;
S		Files[i].clu = dp->sclust;
S		Files[i].idx = dp->index;
S		Files[i].ctr = 0;
S	}
S
S	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
S
S	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
S
S	return i + 1;
S}
S
S
Sstatic
SFRESULT dec_lock (	/* Decrement object open counter */
S	UINT i			/* Semaphore index (1..) */
S)
S{
S	WORD n;
S	FRESULT res;
S
S
S	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
S		n = Files[i].ctr;
S		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
S		if (n) n--;					/* Decrement read mode open count */
S		Files[i].ctr = n;
S		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
S		res = FR_OK;
S	} else {
S		res = FR_INT_ERR;			/* Invalid index nunber */
S	}
S	return res;
S}
S
S
Sstatic
Svoid clear_lock (	/* Clear lock entries of the volume */
S	FATFS *fs
S)
S{
S	UINT i;
S
S	for (i = 0; i < _FS_LOCK; i++) {
S		if (Files[i].fs == fs) Files[i].fs = 0;
S	}
S}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Move/Flush disk access window in the file system object               */
N/*-----------------------------------------------------------------------*/
N#if !_FS_READONLY
X#if !0
Nstatic
NFRESULT sync_window (
N	FATFS* fs		/* File system object */
N)
N{
N	DWORD wsect;
N	UINT nf;
N	FRESULT res = FR_OK;
N
N
N	if (fs->wflag) {	/* Write back the sector if it is dirty */
N		wsect = fs->winsect;	/* Current sector number */
N		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
N			res = FR_DISK_ERR;
N		} else {
N			fs->wflag = 0;
N			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
N				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
N					wsect += fs->fsize;
N					disk_write(fs->drv, fs->win, wsect, 1);
N				}
N			}
N		}
N	}
N	return res;
N}
N#endif
N
N
Nstatic
NFRESULT move_window (
N	FATFS* fs,		/* File system object */
N	DWORD sector	/* Sector number to make appearance in the fs->win[] */
N)
N{
N	FRESULT res = FR_OK;
N
N
N	if (sector != fs->winsect) {	/* Window offset changed? */
N#if !_FS_READONLY
X#if !0
N		res = sync_window(fs);		/* Write-back changes */
N#endif
N		if (res == FR_OK) {			/* Fill sector window with new data */
N			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
N				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
N				res = FR_DISK_ERR;
N			}
N			fs->winsect = sector;
N		}
N	}
N	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Synchronize file system and strage device                             */
N/*-----------------------------------------------------------------------*/
N#if !_FS_READONLY
X#if !0
Nstatic
NFRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
N	FATFS* fs		/* File system object */
N)
N{
N	FRESULT res;
N
N
N	res = sync_window(fs);
N	if (res == FR_OK) {
N		/* Update FSINFO sector if needed */
N		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
X		if (fs->fs_type == 3 && fs->fsi_flag == 1) {
N			/* Create FSINFO structure */
N			mem_set(fs->win, 0, SS(fs));
X			mem_set(fs->win, 0, ((UINT)512));
N			ST_WORD(fs->win + BS_55AA, 0xAA55);
X			*(BYTE*)(fs->win + 510)=(BYTE)(0xAA55); *((BYTE*)(fs->win + 510)+1)=(BYTE)((WORD)(0xAA55)>>8);
N			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
X			*(BYTE*)(fs->win + 0)=(BYTE)(0x41615252); *((BYTE*)(fs->win + 0)+1)=(BYTE)((WORD)(0x41615252)>>8); *((BYTE*)(fs->win + 0)+2)=(BYTE)((DWORD)(0x41615252)>>16); *((BYTE*)(fs->win + 0)+3)=(BYTE)((DWORD)(0x41615252)>>24);
N			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
X			*(BYTE*)(fs->win + 484)=(BYTE)(0x61417272); *((BYTE*)(fs->win + 484)+1)=(BYTE)((WORD)(0x61417272)>>8); *((BYTE*)(fs->win + 484)+2)=(BYTE)((DWORD)(0x61417272)>>16); *((BYTE*)(fs->win + 484)+3)=(BYTE)((DWORD)(0x61417272)>>24);
N			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
X			*(BYTE*)(fs->win + 488)=(BYTE)(fs->free_clust); *((BYTE*)(fs->win + 488)+1)=(BYTE)((WORD)(fs->free_clust)>>8); *((BYTE*)(fs->win + 488)+2)=(BYTE)((DWORD)(fs->free_clust)>>16); *((BYTE*)(fs->win + 488)+3)=(BYTE)((DWORD)(fs->free_clust)>>24);
N			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
X			*(BYTE*)(fs->win + 492)=(BYTE)(fs->last_clust); *((BYTE*)(fs->win + 492)+1)=(BYTE)((WORD)(fs->last_clust)>>8); *((BYTE*)(fs->win + 492)+2)=(BYTE)((DWORD)(fs->last_clust)>>16); *((BYTE*)(fs->win + 492)+3)=(BYTE)((DWORD)(fs->last_clust)>>24);
N			/* Write it into the FSINFO sector */
N			fs->winsect = fs->volbase + 1;
N			disk_write(fs->drv, fs->win, fs->winsect, 1);
N			fs->fsi_flag = 0;
N		}
N		/* Make sure that no pending write process in the physical drive */
N		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
X		if (disk_ioctl(fs->drv, 0, 0) != RES_OK)
N			res = FR_DISK_ERR;
N	}
N
N	return res;
N}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Get sector# from cluster#                                             */
N/*-----------------------------------------------------------------------*/
N/* Hidden API for hacks and disk tools */
N
NDWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
N	FATFS* fs,		/* File system object */
N	DWORD clst		/* Cluster# to be converted */
N)
N{
N	clst -= 2;
N	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
N	return clst * fs->csize + fs->database;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* FAT access - Read value of a FAT entry                                */
N/*-----------------------------------------------------------------------*/
N/* Hidden API for hacks and disk tools */
N
NDWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
N	FATFS* fs,	/* File system object */
N	DWORD clst	/* FAT index number (cluster number) to get the value */
N)
N{
N	UINT wc, bc;
N	BYTE *p;
N	DWORD val;
N
N
N	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
N		val = 1;	/* Internal error */
N
N	} else {
N		val = 0xFFFFFFFF;	/* Default value falls on disk error */
N
N		switch (fs->fs_type) {
N		case FS_FAT12 :
X		case 1 :
N			bc = (UINT)clst; bc += bc / 2;
N			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
X			if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
N			wc = fs->win[bc++ % SS(fs)];
X			wc = fs->win[bc++ % ((UINT)512)];
N			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
X			if (move_window(fs, fs->fatbase + (bc / ((UINT)512))) != FR_OK) break;
N			wc |= fs->win[bc % SS(fs)] << 8;
X			wc |= fs->win[bc % ((UINT)512)] << 8;
N			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
N			break;
N
N		case FS_FAT16 :
X		case 2 :
N			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
X			if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2))) != FR_OK) break;
N			p = &fs->win[clst * 2 % SS(fs)];
X			p = &fs->win[clst * 2 % ((UINT)512)];
N			val = LD_WORD(p);
X			val = (WORD)(((WORD)*((BYTE*)(p)+1)<<8)|(WORD)*(BYTE*)(p));
N			break;
N
N		case FS_FAT32 :
X		case 3 :
N			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
X			if (move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4))) != FR_OK) break;
N			p = &fs->win[clst * 4 % SS(fs)];
X			p = &fs->win[clst * 4 % ((UINT)512)];
N			val = LD_DWORD(p) & 0x0FFFFFFF;
X			val = (DWORD)(((DWORD)*((BYTE*)(p)+3)<<24)|((DWORD)*((BYTE*)(p)+2)<<16)|((WORD)*((BYTE*)(p)+1)<<8)| *(BYTE*)(p)) & 0x0FFFFFFF;
N			break;
N
N		default:
N			val = 1;	/* Internal error */
N		}
N	}
N
N	return val;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* FAT access - Change value of a FAT entry                              */
N/*-----------------------------------------------------------------------*/
N/* Hidden API for hacks and disk tools */
N
N#if !_FS_READONLY
X#if !0
NFRESULT put_fat (
N	FATFS* fs,	/* File system object */
N	DWORD clst,	/* FAT index number (cluster number) to be changed */
N	DWORD val	/* New value to be set to the entry */
N)
N{
N	UINT bc;
N	BYTE *p;
N	FRESULT res;
N
N
N	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
N		res = FR_INT_ERR;
N
N	} else {
N		switch (fs->fs_type) {
N		case FS_FAT12 :
X		case 1 :
N			bc = (UINT)clst; bc += bc / 2;
N			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
X			res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
N			if (res != FR_OK) break;
N			p = &fs->win[bc++ % SS(fs)];
X			p = &fs->win[bc++ % ((UINT)512)];
N			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
N			fs->wflag = 1;
N			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
X			res = move_window(fs, fs->fatbase + (bc / ((UINT)512)));
N			if (res != FR_OK) break;
N			p = &fs->win[bc % SS(fs)];
X			p = &fs->win[bc % ((UINT)512)];
N			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
N			fs->wflag = 1;
N			break;
N
N		case FS_FAT16 :
X		case 2 :
N			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
X			res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 2)));
N			if (res != FR_OK) break;
N			p = &fs->win[clst * 2 % SS(fs)];
X			p = &fs->win[clst * 2 % ((UINT)512)];
N			ST_WORD(p, (WORD)val);
X			*(BYTE*)(p)=(BYTE)((WORD)val); *((BYTE*)(p)+1)=(BYTE)((WORD)((WORD)val)>>8);
N			fs->wflag = 1;
N			break;
N
N		case FS_FAT32 :
X		case 3 :
N			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
X			res = move_window(fs, fs->fatbase + (clst / (((UINT)512) / 4)));
N			if (res != FR_OK) break;
N			p = &fs->win[clst * 4 % SS(fs)];
X			p = &fs->win[clst * 4 % ((UINT)512)];
N			val |= LD_DWORD(p) & 0xF0000000;
X			val |= (DWORD)(((DWORD)*((BYTE*)(p)+3)<<24)|((DWORD)*((BYTE*)(p)+2)<<16)|((WORD)*((BYTE*)(p)+1)<<8)| *(BYTE*)(p)) & 0xF0000000;
N			ST_DWORD(p, val);
X			*(BYTE*)(p)=(BYTE)(val); *((BYTE*)(p)+1)=(BYTE)((WORD)(val)>>8); *((BYTE*)(p)+2)=(BYTE)((DWORD)(val)>>16); *((BYTE*)(p)+3)=(BYTE)((DWORD)(val)>>24);
N			fs->wflag = 1;
N			break;
N
N		default :
N			res = FR_INT_ERR;
N		}
N	}
N
N	return res;
N}
N#endif /* !_FS_READONLY */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* FAT handling - Remove a cluster chain                                 */
N/*-----------------------------------------------------------------------*/
N#if !_FS_READONLY
X#if !0
Nstatic
NFRESULT remove_chain (
N	FATFS* fs,			/* File system object */
N	DWORD clst			/* Cluster# to remove a chain from */
N)
N{
N	FRESULT res;
N	DWORD nxt;
N#if _USE_TRIM
X#if 0
S	DWORD scl = clst, ecl = clst, rt[2];
N#endif
N
N	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
N		res = FR_INT_ERR;
N
N	} else {
N		res = FR_OK;
N		while (clst < fs->n_fatent) {			/* Not a last link? */
N			nxt = get_fat(fs, clst);			/* Get cluster status */
N			if (nxt == 0) break;				/* Empty cluster? */
N			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
N			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
N			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
N			if (res != FR_OK) break;
N			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
N				fs->free_clust++;
N				fs->fsi_flag |= 1;
N			}
N#if _USE_TRIM
X#if 0
S			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
S				ecl = nxt;
S			} else {				/* End of contiguous clusters */ 
S				rt[0] = clust2sect(fs, scl);					/* Start sector */
S				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
S				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
S				scl = ecl = nxt;
S			}
N#endif
N			clst = nxt;	/* Next cluster */
N		}
N	}
N
N	return res;
N}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* FAT handling - Stretch or Create a cluster chain                      */
N/*-----------------------------------------------------------------------*/
N#if !_FS_READONLY
X#if !0
Nstatic
NDWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
N	FATFS* fs,			/* File system object */
N	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
N)
N{
N	DWORD cs, ncl, scl;
N	FRESULT res;
N
N
N	if (clst == 0) {		/* Create a new chain */
N		scl = fs->last_clust;			/* Get suggested start point */
N		if (!scl || scl >= fs->n_fatent) scl = 1;
N	}
N	else {					/* Stretch the current chain */
N		cs = get_fat(fs, clst);			/* Check the cluster status */
N		if (cs < 2) return 1;			/* Invalid value */
N		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
N		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
N		scl = clst;
N	}
N
N	ncl = scl;				/* Start cluster */
N	for (;;) {
N		ncl++;							/* Next cluster */
N		if (ncl >= fs->n_fatent) {		/* Check wrap around */
N			ncl = 2;
N			if (ncl > scl) return 0;	/* No free cluster */
N		}
N		cs = get_fat(fs, ncl);			/* Get the cluster status */
N		if (cs == 0) break;				/* Found a free cluster */
N		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
N			return cs;
N		if (ncl == scl) return 0;		/* No free cluster */
N	}
N
N	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
N	if (res == FR_OK && clst != 0) {
N		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
N	}
N	if (res == FR_OK) {
N		fs->last_clust = ncl;			/* Update FSINFO */
N		if (fs->free_clust != 0xFFFFFFFF) {
N			fs->free_clust--;
N			fs->fsi_flag |= 1;
N		}
N	} else {
N		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
N	}
N
N	return ncl;		/* Return new cluster number or error code */
N}
N#endif /* !_FS_READONLY */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* FAT handling - Convert offset into cluster with link map table        */
N/*-----------------------------------------------------------------------*/
N
N#if _USE_FASTSEEK
X#if 0
Sstatic
SDWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
S	FIL* fp,		/* Pointer to the file object */
S	DWORD ofs		/* File offset to be converted to cluster# */
S)
S{
S	DWORD cl, ncl, *tbl;
S
S
S	tbl = fp->cltbl + 1;	/* Top of CLMT */
S	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
S	for (;;) {
S		ncl = *tbl++;			/* Number of cluters in the fragment */
S		if (!ncl) return 0;		/* End of table? (error) */
S		if (cl < ncl) break;	/* In this fragment? */
S		cl -= ncl; tbl++;		/* Next fragment */
S	}
S	return cl + *tbl;	/* Return the cluster number */
S}
N#endif	/* _USE_FASTSEEK */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Directory handling - Set directory index                              */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT dir_sdi (
N	DIR* dp,		/* Pointer to directory object */
N	UINT idx		/* Index of directory table */
N)
N{
N	DWORD clst, sect;
N	UINT ic;
N
N
N	dp->index = (WORD)idx;	/* Current index */
N	clst = dp->sclust;		/* Table start cluster (0:root) */
N	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
N		return FR_INT_ERR;
N	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
X	if (!clst && dp->fs->fs_type == 3)	 
N		clst = dp->fs->dirbase;
N
N	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
N		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
N			return FR_INT_ERR;
N		sect = dp->fs->dirbase;
N	}
N	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
N		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
X		ic = ((UINT)512) / 32 * dp->fs->csize;	 
N		while (idx >= ic) {	/* Follow cluster chain */
N			clst = get_fat(dp->fs, clst);				/* Get next cluster */
N			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
N			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
N				return FR_INT_ERR;
N			idx -= ic;
N		}
N		sect = clust2sect(dp->fs, clst);
N	}
N	dp->clust = clst;	/* Current cluster# */
N	if (!sect) return FR_INT_ERR;
N	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
X	dp->sect = sect + idx / (((UINT)512) / 32);					 
N	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
X	dp->dir = dp->fs->win + (idx % (((UINT)512) / 32)) * 32;	 
N
N	return FR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Directory handling - Move directory table index next                  */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
N	DIR* dp,		/* Pointer to the directory object */
N	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
N)
N{
N	DWORD clst;
N	UINT i;
N#if !_FS_READONLY
X#if !0
N	UINT c;
N#endif
N
N
N	i = dp->index + 1;
N	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
N		return FR_NO_FILE;
N
N	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
X	if (!(i % (((UINT)512) / 32))) {	 
N		dp->sect++;					/* Next sector */
N
N		if (!dp->clust) {		/* Static table */
N			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
N				return FR_NO_FILE;
N		}
N		else {					/* Dynamic table */
N			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
X			if (((i / (((UINT)512) / 32)) & (dp->fs->csize - 1)) == 0) {	 
N				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
N				if (clst <= 1) return FR_INT_ERR;
N				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
N				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
N#if !_FS_READONLY
X#if !0
N					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
N					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
N					if (clst == 0) return FR_DENIED;			/* No free cluster */
N					if (clst == 1) return FR_INT_ERR;
N					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
N					/* Clean-up stretched table */
N					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
N					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
X					mem_set(dp->fs->win, 0, ((UINT)512));		 
N					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
N					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
N						dp->fs->wflag = 1;
N						if (sync_window(dp->fs)) return FR_DISK_ERR;
N						dp->fs->winsect++;
N					}
N					dp->fs->winsect -= c;						/* Rewind window offset */
N#else
S					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
S					return FR_NO_FILE;							/* Report EOT */
N#endif
N				}
N				dp->clust = clst;				/* Initialize data for new cluster */
N				dp->sect = clust2sect(dp->fs, clst);
N			}
N		}
N	}
N
N	dp->index = (WORD)i;	/* Current index */
N	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
X	dp->dir = dp->fs->win + (i % (((UINT)512) / 32)) * 32;	 
N
N	return FR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Directory handling - Reserve directory entry                          */
N/*-----------------------------------------------------------------------*/
N
N#if !_FS_READONLY
X#if !0
Nstatic
NFRESULT dir_alloc (
N	DIR* dp,	/* Pointer to the directory object */
N	UINT nent	/* Number of contiguous entries to allocate (1-21) */
N)
N{
N	FRESULT res;
N	UINT n;
N
N
N	res = dir_sdi(dp, 0);
N	if (res == FR_OK) {
N		n = 0;
N		do {
N			res = move_window(dp->fs, dp->sect);
N			if (res != FR_OK) break;
N			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
X			if (dp->dir[0] == 0xE5 || dp->dir[0] == 0) {	 
N				if (++n == nent) break;	/* A block of contiguous free entries is found */
N			} else {
N				n = 0;					/* Not a blank entry. Restart to search */
N			}
N			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
N		} while (res == FR_OK);
N	}
N	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
N	return res;
N}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Directory handling - Load/Store start cluster number                  */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NDWORD ld_clust (
N	FATFS* fs,	/* Pointer to the fs object */
N	BYTE* dir	/* Pointer to the directory entry */
N)
N{
N	DWORD cl;
N
N	cl = LD_WORD(dir + DIR_FstClusLO);
X	cl = (WORD)(((WORD)*((BYTE*)(dir + 26)+1)<<8)|(WORD)*(BYTE*)(dir + 26));
N	if (fs->fs_type == FS_FAT32)
X	if (fs->fs_type == 3)
N		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
X		cl |= (DWORD)(WORD)(((WORD)*((BYTE*)(dir + 20)+1)<<8)|(WORD)*(BYTE*)(dir + 20)) << 16;
N
N	return cl;
N}
N
N
N#if !_FS_READONLY
X#if !0
Nstatic
Nvoid st_clust (
N	BYTE* dir,	/* Pointer to the directory entry */
N	DWORD cl	/* Value to be set */
N)
N{
N	ST_WORD(dir + DIR_FstClusLO, cl);
X	*(BYTE*)(dir + 26)=(BYTE)(cl); *((BYTE*)(dir + 26)+1)=(BYTE)((WORD)(cl)>>8);
N	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
X	*(BYTE*)(dir + 20)=(BYTE)(cl >> 16); *((BYTE*)(dir + 20)+1)=(BYTE)((WORD)(cl >> 16)>>8);
N}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
N/*-----------------------------------------------------------------------*/
N#if _USE_LFN
X#if 0
Sstatic
Sconst BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN characters in the directory entry */
S
S
Sstatic
Sint cmp_lfn (			/* 1:Matched, 0:Not matched */
S	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
S	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
S)
S{
S	UINT i, s;
S	WCHAR wc, uc;
S
S
S	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
S	s = 0; wc = 1;
S	do {
S		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
S		if (wc) {	/* Last character has not been processed */
S			wc = ff_wtoupper(uc);		/* Convert it to upper case */
S			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
S				return 0;				/* Not matched */
S		} else {
S			if (uc != 0xFFFF) return 0;	/* Check filler */
S		}
S	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
S
S	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
S		return 0;
S
S	return 1;						/* The part of LFN matched */
S}
S
S
S
Sstatic
Sint pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
S	WCHAR* lfnbuf,		/* Pointer to the Unicode-LFN buffer */
S	BYTE* dir			/* Pointer to the directory entry */
S)
S{
S	UINT i, s;
S	WCHAR wc, uc;
S
S
S	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
S
S	s = 0; wc = 1;
S	do {
S		uc = LD_WORD(dir + LfnOfs[s]);		/* Pick an LFN character from the entry */
S		if (wc) {	/* Last character has not been processed */
S			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
S			lfnbuf[i++] = wc = uc;			/* Store it */
S		} else {
S			if (uc != 0xFFFF) return 0;		/* Check filler */
S		}
S	} while (++s < 13);						/* Read all character in the entry */
S
S	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
S		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
S		lfnbuf[i] = 0;
S	}
S
S	return 1;
S}
S
S
S#if !_FS_READONLY
Sstatic
Svoid fit_lfn (
S	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
S	BYTE* dir,				/* Pointer to the directory entry */
S	BYTE ord,				/* LFN order (1-20) */
S	BYTE sum				/* SFN sum */
S)
S{
S	UINT i, s;
S	WCHAR wc;
S
S
S	dir[LDIR_Chksum] = sum;			/* Set check sum */
S	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
S	dir[LDIR_Type] = 0;
S	ST_WORD(dir + LDIR_FstClusLO, 0);
S
S	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
S	s = wc = 0;
S	do {
S		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
S		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
S		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
S	} while (++s < 13);
S	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
S	dir[LDIR_Ord] = ord;			/* Set the LFN order */
S}
S
S#endif
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Create numbered name                                                  */
N/*-----------------------------------------------------------------------*/
N#if _USE_LFN
X#if 0
Sstatic
Svoid gen_numname (
S	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
S	const BYTE* src,	/* Pointer to SFN */
S	const WCHAR* lfn,	/* Pointer to LFN */
S	UINT seq			/* Sequence number */
S)
S{
S	BYTE ns[8], c;
S	UINT i, j;
S	WCHAR wc;
S	DWORD sr;
S
S
S	mem_cpy(dst, src, 11);
S
S	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
S		sr = seq;
S		while (*lfn) {	/* Create a CRC */
S			wc = *lfn++;
S			for (i = 0; i < 16; i++) {
S				sr = (sr << 1) + (wc & 1);
S				wc >>= 1;
S				if (sr & 0x10000) sr ^= 0x11021;
S			}
S		}
S		seq = (UINT)sr;
S	}
S
S	/* itoa (hexdecimal) */
S	i = 7;
S	do {
S		c = (seq % 16) + '0';
S		if (c > '9') c += 7;
S		ns[i--] = c;
S		seq /= 16;
S	} while (seq);
S	ns[i] = '~';
S
S	/* Append the number */
S	for (j = 0; j < i && dst[j] != ' '; j++) {
S		if (IsDBCS1(dst[j])) {
S			if (j == i - 1) break;
S			j++;
S		}
S	}
S	do {
S		dst[j++] = (i < 8) ? ns[i++] : ' ';
S	} while (j < 8);
S}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Calculate sum of an SFN                                               */
N/*-----------------------------------------------------------------------*/
N#if _USE_LFN
X#if 0
Sstatic
SBYTE sum_sfn (
S	const BYTE* dir		/* Pointer to the SFN entry */
S)
S{
S	BYTE sum = 0;
S	UINT n = 11;
S
S	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
S	return sum;
S}
N#endif
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Directory handling - Find an object in the directory                  */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT dir_find (
N	DIR* dp			/* Pointer to the directory object linked to the file name */
N)
N{
N	FRESULT res;
N	BYTE c, *dir;
N#if _USE_LFN
X#if 0
S	BYTE a, ord, sum;
N#endif
N
N	res = dir_sdi(dp, 0);			/* Rewind directory object */
N	if (res != FR_OK) return res;
N
N#if _USE_LFN
X#if 0
S	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
N#endif
N	do {
N		res = move_window(dp->fs, dp->sect);
N		if (res != FR_OK) break;
N		dir = dp->dir;					/* Ptr to the directory entry of current index */
N		c = dir[DIR_Name];
X		c = dir[0];
N		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
N#if _USE_LFN	/* LFN configuration */
X#if 0	 
S		a = dir[DIR_Attr] & AM_MASK;
S		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
S			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
S		} else {
S			if (a == AM_LFN) {			/* An LFN entry is found */
S				if (dp->lfn) {
S					if (c & LLEF) {		/* Is it start of LFN sequence? */
S						sum = dir[LDIR_Chksum];
S						c &= ~LLEF; ord = c;	/* LFN start order */
S						dp->lfn_idx = dp->index;	/* Start index of LFN */
S					}
S					/* Check validity of the LFN entry and compare it with given name */
S					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
S				}
S			} else {					/* An SFN entry is found */
S				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
S				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
S				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
S			}
S		}
N#else		/* Non LFN configuration */
N		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
X		if (!(dir[11] & 0x08) && !mem_cmp(dir, dp->fn, 11))  
N			break;
N#endif
N		res = dir_next(dp, 0);		/* Next entry */
N	} while (res == FR_OK);
N
N	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Read an object from the directory                                     */
N/*-----------------------------------------------------------------------*/
N#if _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2
X#if 0 <= 1 || 1 || 0 >= 2
Nstatic
NFRESULT dir_read (
N	DIR* dp,		/* Pointer to the directory object */
N	int vol			/* Filtered by 0:file/directory or 1:volume label */
N)
N{
N	FRESULT res;
N	BYTE a, c, *dir;
N#if _USE_LFN
X#if 0
S	BYTE ord = 0xFF, sum = 0xFF;
N#endif
N
N	res = FR_NO_FILE;
N	while (dp->sect) {
N		res = move_window(dp->fs, dp->sect);
N		if (res != FR_OK) break;
N		dir = dp->dir;					/* Ptr to the directory entry of current index */
N		c = dir[DIR_Name];
X		c = dir[0];
N		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
N		a = dir[DIR_Attr] & AM_MASK;
X		a = dir[11] & 0x3F;
N#if _USE_LFN	/* LFN configuration */
X#if 0	 
S		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
S			ord = 0xFF;
S		} else {
S			if (a == AM_LFN) {			/* An LFN entry is found */
S				if (c & LLEF) {			/* Is it start of LFN sequence? */
S					sum = dir[LDIR_Chksum];
S					c &= ~LLEF; ord = c;
S					dp->lfn_idx = dp->index;
S				}
S				/* Check LFN validity and capture it */
S				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
S			} else {					/* An SFN entry is found */
S				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
S					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
S				break;
S			}
S		}
N#else		/* Non LFN configuration */
N		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
X		if (c != 0xE5 && (0 || c != '.') && a != 0x0F && (int)((a & ~0x20) == 0x08) == vol)	 
N			break;
N#endif
N		res = dir_next(dp, 0);				/* Next entry */
N		if (res != FR_OK) break;
N	}
N
N	if (res != FR_OK) dp->sect = 0;
N
N	return res;
N}
N#endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Register an object to the directory                                   */
N/*-----------------------------------------------------------------------*/
N#if !_FS_READONLY
X#if !0
Nstatic
NFRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
N	DIR* dp				/* Target directory with object name to be created */
N)
N{
N	FRESULT res;
N#if _USE_LFN	/* LFN configuration */
X#if 0	 
S	UINT n, nent;
S	BYTE sn[12], *fn, sum;
S	WCHAR *lfn;
S
S
S	fn = dp->fn; lfn = dp->lfn;
S	mem_cpy(sn, fn, 12);
S
S	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
S		return FR_INVALID_NAME;
S
S	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
S		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
S		for (n = 1; n < 100; n++) {
S			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
S			res = dir_find(dp);				/* Check if the name collides with existing SFN */
S			if (res != FR_OK) break;
S		}
S		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
S		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
S		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
S	}
S
S	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
S		for (n = 0; lfn[n]; n++) ;
S		nent = (n + 25) / 13;
S	} else {						/* Otherwise allocate an entry for an SFN  */
S		nent = 1;
S	}
S	res = dir_alloc(dp, nent);		/* Allocate entries */
S
S	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
S		res = dir_sdi(dp, dp->index - nent);
S		if (res == FR_OK) {
S			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
S			do {					/* Store LFN entries in bottom first */
S				res = move_window(dp->fs, dp->sect);
S				if (res != FR_OK) break;
S				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
S				dp->fs->wflag = 1;
S				res = dir_next(dp, 0);	/* Next entry */
S			} while (res == FR_OK && --nent);
S		}
S	}
N#else	/* Non LFN configuration */
N	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
N#endif
N
N	if (res == FR_OK) {				/* Set SFN entry */
N		res = move_window(dp->fs, dp->sect);
N		if (res == FR_OK) {
N			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
X			mem_set(dp->dir, 0, 32);	 
N			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
N#if _USE_LFN
X#if 0
S			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
N#endif
N			dp->fs->wflag = 1;
N		}
N	}
N
N	return res;
N}
N#endif /* !_FS_READONLY */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Remove an object from the directory                                   */
N/*-----------------------------------------------------------------------*/
N#if !_FS_READONLY && !_FS_MINIMIZE
X#if !0 && !0
Nstatic
NFRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
N	DIR* dp				/* Directory object pointing the entry to be removed */
N)
N{
N	FRESULT res;
N#if _USE_LFN	/* LFN configuration */
X#if 0	 
S	UINT i;
S
S	i = dp->index;	/* SFN index */
S	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
S	if (res == FR_OK) {
S		do {
S			res = move_window(dp->fs, dp->sect);
S			if (res != FR_OK) break;
S			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
S			*dp->dir = DDEM;
S			dp->fs->wflag = 1;
S			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
S			res = dir_next(dp, 0);		/* Next entry */
S		} while (res == FR_OK);
S		if (res == FR_NO_FILE) res = FR_INT_ERR;
S	}
S
N#else			/* Non LFN configuration */
N	res = dir_sdi(dp, dp->index);
N	if (res == FR_OK) {
N		res = move_window(dp->fs, dp->sect);
N		if (res == FR_OK) {
N			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
X			mem_set(dp->dir, 0, 32);	 
N			*dp->dir = DDEM;
X			*dp->dir = 0xE5;
N			dp->fs->wflag = 1;
N		}
N	}
N#endif
N
N	return res;
N}
N#endif /* !_FS_READONLY */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Get file information from directory entry                             */
N/*-----------------------------------------------------------------------*/
N#if _FS_MINIMIZE <= 1 || _FS_RPATH >= 2
X#if 0 <= 1 || 0 >= 2
Nstatic
Nvoid get_fileinfo (		/* No return code */
N	DIR* dp,			/* Pointer to the directory object */
N	FILINFO* fno	 	/* Pointer to the file information to be filled */
N)
N{
N	UINT i;
N	TCHAR *p, c;
N	BYTE *dir;
N#if _USE_LFN
X#if 0
S	WCHAR w, *lfn;
N#endif
N
N	p = fno->fname;
N	if (dp->sect) {		/* Get SFN */
N		dir = dp->dir;
N		i = 0;
N		while (i < 11) {		/* Copy name body and extension */
N			c = (TCHAR)dir[i++];
N			if (c == ' ') continue;				/* Skip padding spaces */
N			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
X			if (c == 0x05) c = (TCHAR)0xE5;	 
N			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
N#if _USE_LFN
X#if 0
S			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
S				c += 0x20;			/* To lower */
S#if _LFN_UNICODE
S			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
S				c = c << 8 | dir[i++];
S			c = ff_convert(c, 1);	/* OEM -> Unicode */
S			if (!c) c = '?';
S#endif
N#endif
N			*p++ = c;
N		}
N		fno->fattrib = dir[DIR_Attr];				/* Attribute */
X		fno->fattrib = dir[11];				 
N		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
X		fno->fsize = (DWORD)(((DWORD)*((BYTE*)(dir + 28)+3)<<24)|((DWORD)*((BYTE*)(dir + 28)+2)<<16)|((WORD)*((BYTE*)(dir + 28)+1)<<8)| *(BYTE*)(dir + 28));	 
N		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
X		fno->fdate = (WORD)(((WORD)*((BYTE*)(dir + 24)+1)<<8)|(WORD)*(BYTE*)(dir + 24));	 
N		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
X		fno->ftime = (WORD)(((WORD)*((BYTE*)(dir + 22)+1)<<8)|(WORD)*(BYTE*)(dir + 22));	 
N	}
N	*p = 0;		/* Terminate SFN string by a \0 */
N
N#if _USE_LFN
X#if 0
S	if (fno->lfname) {
S		i = 0; p = fno->lfname;
S		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
S			lfn = dp->lfn;
S			while ((w = *lfn++) != 0) {		/* Get an LFN character */
S#if !_LFN_UNICODE
S				w = ff_convert(w, 0);		/* Unicode -> OEM */
S				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
S				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
S					p[i++] = (TCHAR)(w >> 8);
S#endif
S				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
S				p[i++] = (TCHAR)w;
S			}
S		}
S		p[i] = 0;	/* Terminate LFN string by a \0 */
S	}
N#endif
N}
N#endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Pattern matching                                                      */
N/*-----------------------------------------------------------------------*/
N#if _USE_FIND && _FS_MINIMIZE <= 1
X#if 0 && 0 <= 1
Sstatic
SWCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
S	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
S)
S{
S	WCHAR chr;
S
S#if !_LFN_UNICODE
S	chr = (BYTE)*(*ptr)++;					/* Get a byte */
S	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
S	if (IsDBCS1(chr) && IsDBCS2(**ptr))		/* Get DBC 2nd byte if needed */
S		chr = chr << 8 | (BYTE)*(*ptr)++;
S#ifdef _EXCVT
S	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
S#endif
S#else
S	chr = ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
S#endif
S	return chr;
S}
S
S
Sstatic
Sint pattern_matching (	/* Return value: 0:mismatched, 1:matched */
S	const TCHAR* pat,	/* Matching pattern */
S	const TCHAR* nam,	/* String to be tested */
S	int skip,			/* Number of pre-skip chars (number of ?s) */
S	int inf				/* Infinite search (* specified) */
S)
S{
S	const TCHAR *pp, *np;
S	WCHAR pc, nc;
S	int nm, nx;
S
S
S	while (skip--) {				/* Pre-skip name chars */
S		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
S	}
S	if (!*pat && inf) return 1;		/* (short circuit) */
S
S	do {
S		pp = pat; np = nam;			/* Top of pattern and name to match */
S		for (;;) {
S			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
S				nm = nx = 0;
S				do {				/* Analyze the wildcard chars */
S					if (*pp++ == '?') nm++; else nx = 1;
S				} while (*pp == '?' || *pp == '*');
S				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
S				nc = *np; break;	/* Branch mismatched */
S			}
S			pc = get_achar(&pp);	/* Get a pattern char */
S			nc = get_achar(&np);	/* Get a name char */
S			if (pc != nc) break;	/* Branch mismatched? */
S			if (!pc) return 1;		/* Branch matched? (matched at end of both strings) */
S		}
S		get_achar(&nam);			/* nam++ */
S	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
S
S	return 0;
S}
N#endif /* _USE_FIND && _FS_MINIMIZE <= 1 */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Pick a segment and create the object name in directory form           */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT create_name (
N	DIR* dp,			/* Pointer to the directory object */
N	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
N)
N{
N#if _USE_LFN	/* LFN configuration */
X#if 0	 
S	BYTE b, cf;
S	WCHAR w, *lfn;
S	UINT i, ni, si, di;
S	const TCHAR *p;
S
S	/* Create LFN in Unicode */
S	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
S	lfn = dp->lfn;
S	si = di = 0;
S	for (;;) {
S		w = p[si++];					/* Get a character */
S		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
S		if (di >= _MAX_LFN)				/* Reject too long name */
S			return FR_INVALID_NAME;
S#if !_LFN_UNICODE
S		w &= 0xFF;
S		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
S			b = (BYTE)p[si++];			/* Get 2nd byte */
S			w = (w << 8) + b;			/* Create a DBC */
S			if (!IsDBCS2(b))
S				return FR_INVALID_NAME;	/* Reject invalid sequence */
S		}
S		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
S		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
S#endif
S		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
S			return FR_INVALID_NAME;
S		lfn[di++] = w;					/* Store the Unicode character */
S	}
S	*path = &p[si];						/* Return pointer to the next segment */
S	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
S#if _FS_RPATH
S	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
S		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
S		lfn[di] = 0;
S		for (i = 0; i < 11; i++)
S			dp->fn[i] = (i < di) ? '.' : ' ';
S		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
S		return FR_OK;
S	}
S#endif
S	while (di) {						/* Strip trailing spaces and dots */
S		w = lfn[di - 1];
S		if (w != ' ' && w != '.') break;
S		di--;
S	}
S	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
S
S	lfn[di] = 0;						/* LFN is created */
S
S	/* Create SFN in directory form */
S	mem_set(dp->fn, ' ', 11);
S	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
S	if (si) cf |= NS_LOSS | NS_LFN;
S	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
S
S	b = i = 0; ni = 8;
S	for (;;) {
S		w = lfn[si++];					/* Get an LFN character */
S		if (!w) break;					/* Break on end of the LFN */
S		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
S			cf |= NS_LOSS | NS_LFN; continue;
S		}
S
S		if (i >= ni || si == di) {		/* Extension or end of SFN */
S			if (ni == 11) {				/* Long extension */
S				cf |= NS_LOSS | NS_LFN; break;
S			}
S			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
S			if (si > di) break;			/* No extension */
S			si = di; i = 8; ni = 11;	/* Enter extension section */
S			b <<= 2; continue;
S		}
S
S		if (w >= 0x80) {				/* Non ASCII character */
S#ifdef _EXCVT
S			w = ff_convert(w, 0);		/* Unicode -> OEM code */
S			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
S#else
S			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
S#endif
S			cf |= NS_LFN;				/* Force create LFN entry */
S		}
S
S		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
S			if (i >= ni - 1) {
S				cf |= NS_LOSS | NS_LFN; i = ni; continue;
S			}
S			dp->fn[i++] = (BYTE)(w >> 8);
S		} else {						/* SBC */
S			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
S				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
S			} else {
S				if (IsUpper(w)) {		/* ASCII large capital */
S					b |= 2;
S				} else {
S					if (IsLower(w)) {	/* ASCII small capital */
S						b |= 1; w -= 0x20;
S					}
S				}
S			}
S		}
S		dp->fn[i++] = (BYTE)w;
S	}
S
S	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
S
S	if (ni == 8) b <<= 2;
S	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
S		cf |= NS_LFN;
S	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
S		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
S		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
S	}
S
S	dp->fn[NSFLAG] = cf;	/* SFN is created */
S
S	return FR_OK;
S
S
N#else	/* Non-LFN configuration */
N	BYTE b, c, d, *sfn;
N	UINT ni, si, i;
N	const char *p;
N
N	/* Create file name in directory form */
N	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
N	sfn = dp->fn;
N	mem_set(sfn, ' ', 11);
N	si = i = b = 0; ni = 8;
N#if _FS_RPATH
X#if 0
S	if (p[si] == '.') { /* Is this a dot entry? */
S		for (;;) {
S			c = (BYTE)p[si++];
S			if (c != '.' || si >= 3) break;
S			sfn[i++] = c;
S		}
S		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
S		*path = &p[si];									/* Return pointer to the next segment */
S		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
S		return FR_OK;
S	}
N#endif
N	for (;;) {
N		c = (BYTE)p[si++];
N		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
N		if (c == '.' || i >= ni) {
N			if (ni != 8 || c != '.') return FR_INVALID_NAME;
N			i = 8; ni = 11;
N			b <<= 2; continue;
N		}
N		if (c >= 0x80) {				/* Extended character? */
N			b |= 3;						/* Eliminate NT flag */
N#ifdef _EXCVT
S			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
N#else
N#if !_DF1S
X#if !0x81
S			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
N#endif
N#endif
N		}
N		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
X		if (((BYTE)(c) >= 0x81 && (BYTE)(c) <= 0xFE)) {				 
N			d = (BYTE)p[si++];			/* Get 2nd byte */
N			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
X			if (!(((BYTE)(d) >= 0x40 && (BYTE)(d) <= 0x7E) || ((BYTE)(d) >= 0x80 && (BYTE)(d) <= 0xFE)) || i >= ni - 1)	 
N				return FR_INVALID_NAME;
N			sfn[i++] = c;
N			sfn[i++] = d;
N		} else {						/* SBC */
N			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
N				return FR_INVALID_NAME;
N			if (IsUpper(c)) {			/* ASCII large capital? */
X			if ((((c)>= 'A')&&((c)<= 'Z'))) {			 
N				b |= 2;
N			} else {
N				if (IsLower(c)) {		/* ASCII small capital? */
X				if ((((c)>= 'a')&&((c)<= 'z'))) {		 
N					b |= 1; c -= 0x20;
N				}
N			}
N			sfn[i++] = c;
N		}
N	}
N	*path = &p[si];						/* Return pointer to the next segment */
N	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
X	c = (c <= ' ') ? 0x04 : 0;		 
N
N	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
N	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
X	if (sfn[0] == 0xE5) sfn[0] = 0x05;	 
N
N	if (ni == 8) b <<= 2;
N	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
X	if ((b & 0x03) == 0x01) c |= 0x10;	 
N	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
X	if ((b & 0x0C) == 0x04) c |= 0x08;	 
N
N	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
X	sfn[11] = c;		 
N
N	return FR_OK;
N#endif
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Follow a file path                                                    */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
N	DIR* dp,			/* Directory object to return last directory and found object */
N	const TCHAR* path	/* Full-path string to find a file or directory */
N)
N{
N	FRESULT res;
N	BYTE *dir, ns;
N
N
N#if _FS_RPATH
X#if 0
S	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
S		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
S	} else {								/* No heading separator */
S		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
S	}
N#else
N	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
N		path++;
N	dp->sclust = 0;							/* Always start from the root directory */
N#endif
N
N	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
N		res = dir_sdi(dp, 0);
N		dp->dir = 0;
N	} else {								/* Follow path */
N		for (;;) {
N			res = create_name(dp, &path);	/* Get a segment name of the path */
N			if (res != FR_OK) break;
N			res = dir_find(dp);				/* Find an object with the sagment name */
N			ns = dp->fn[NSFLAG];
X			ns = dp->fn[11];
N			if (res != FR_OK) {				/* Failed to find the object */
N				if (res == FR_NO_FILE) {	/* Object is not found */
N					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
X					if (0 && (ns & 0x20)) {	 
N						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
N						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
X						if (!(ns & 0x04)) continue;	 
N						res = FR_OK;					/* Ended at the root directroy. Function completed. */
N					} else {							/* Could not find the object */
N						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
X						if (!(ns & 0x04)) res = FR_NO_PATH;	 
N					}
N				}
N				break;
N			}
N			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
X			if (ns & 0x04) break;			 
N			dir = dp->dir;						/* Follow the sub-directory */
N			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
X			if (!(dir[11] & 0x10)) {	 
N				res = FR_NO_PATH; break;
N			}
N			dp->sclust = ld_clust(dp->fs, dir);
N		}
N	}
N
N	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Get logical drive number from path name                               */
N/*-----------------------------------------------------------------------*/
N
Nstatic
Nint get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
N	const TCHAR** path	/* Pointer to pointer to the path name */
N)
N{
N	const TCHAR *tp, *tt;
N	UINT i;
N	int vol = -1;
N#if _STR_VOLUME_ID		/* Find string drive id */
X#if 0		 
S	static const char* const str[] = {_VOLUME_STRS};
S	const char *sp;
S	char c;
S	TCHAR tc;
N#endif
N
N
N	if (*path) {	/* If the pointer is not a null */
N		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
X		for (tt = *path; (UINT)*tt >= (0 ? ' ' : '!') && *tt != ':'; tt++) ;	 
N		if (*tt == ':') {	/* If a ':' is exist in the path name */
N			tp = *path;
N			i = *tp++ - '0'; 
N			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
N				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
X				if (i < 3) {	 
N					vol = (int)i;
N					*path = ++tt;
N				}
N			}
N#if _STR_VOLUME_ID
X#if 0
S			 else {	/* No numeric drive number, find string drive id */
S				i = 0; tt++;
S				do {
S					sp = str[i]; tp = *path;
S					do {	/* Compare a string drive id with path name */
S						c = *sp++; tc = *tp++;
S						if (IsLower(tc)) tc -= 0x20;
S					} while (c && (TCHAR)c == tc);
S				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
S				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
S					vol = (int)i;
S					*path = tt;
S				}
S			}
N#endif
N			return vol;
N		}
N#if _FS_RPATH && _VOLUMES >= 2
X#if 0 && 3 >= 2
S		vol = CurrVol;	/* Current drive */
N#else
N		vol = 0;		/* Drive 0 */
N#endif
N	}
N	return vol;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Load a sector and check if it is an FAT boot sector                   */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NBYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
N	FATFS* fs,	/* File system object */
N	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
N)
N{
N	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
N	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
N		return 3;
N
N	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
X	if ((WORD)(((WORD)*((BYTE*)(&fs->win[510])+1)<<8)|(WORD)*(BYTE*)(&fs->win[510])) != 0xAA55)	 
N		return 2;
N
N	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
X	if (((DWORD)(((DWORD)*((BYTE*)(&fs->win[54])+3)<<24)|((DWORD)*((BYTE*)(&fs->win[54])+2)<<16)|((WORD)*((BYTE*)(&fs->win[54])+1)<<8)| *(BYTE*)(&fs->win[54])) & 0xFFFFFF) == 0x544146)		 
N		return 0;
N	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
X	if (((DWORD)(((DWORD)*((BYTE*)(&fs->win[82])+3)<<24)|((DWORD)*((BYTE*)(&fs->win[82])+2)<<16)|((WORD)*((BYTE*)(&fs->win[82])+1)<<8)| *(BYTE*)(&fs->win[82])) & 0xFFFFFF) == 0x544146)	 
N		return 0;
N
N	return 1;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Find logical drive and check if the volume is mounted                 */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
N	FATFS** rfs,		/* Pointer to pointer to the found file system object */
N	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
N	BYTE wmode			/* !=0: Check write protection for write access */
N)
N{
N	BYTE fmt, *pt;
N	int vol;
N	DSTATUS stat;
N	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
N	WORD nrsv;
N	FATFS *fs;
N	UINT i;
N
N
N	/* Get logical drive number from the path name */
N	*rfs = 0;
N	vol = get_ldnumber(path);
N	if (vol < 0) return FR_INVALID_DRIVE;
N
N	/* Check if the file system object is valid or not */
N	fs = FatFs[vol];					/* Get pointer to the file system object */
N	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
N
N	ENTER_FF(fs);						/* Lock the volume */
X	;						 
N	*rfs = fs;							/* Return pointer to the file system object */
N
N	if (fs->fs_type) {					/* If the volume has been mounted */
N		stat = disk_status(fs->drv);
N		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
X		if (!(stat & 0x01)) {		 
N			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
X			if (!0 && wmode && (stat & 0x04))	 
N				return FR_WRITE_PROTECTED;
N			return FR_OK;				/* The file system object is valid */
N		}
N	}
N
N	/* The file system object is not valid. */
N	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
N
N	fs->fs_type = 0;					/* Clear the file system object */
N	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
X	fs->drv = (BYTE)(vol);				 
N	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
N	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
X	if (stat & 0x01)				 
N		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
N	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
X	if (!0 && wmode && (stat & 0x04))	 
N		return FR_WRITE_PROTECTED;
N#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
X#if 512 != 512						 
S	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
S		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
N#endif
N	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
N	bsect = 0;
N	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
N	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
X	if (fmt == 1 || (!fmt && (0))) {	 
N		for (i = 0; i < 4; i++) {			/* Get partition offset */
N			pt = fs->win + MBR_Table + i * SZ_PTE;
X			pt = fs->win + 446 + i * 16;
N			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
X			br[i] = pt[4] ? (DWORD)(((DWORD)*((BYTE*)(&pt[8])+3)<<24)|((DWORD)*((BYTE*)(&pt[8])+2)<<16)|((WORD)*((BYTE*)(&pt[8])+1)<<8)| *(BYTE*)(&pt[8])) : 0;
N		}
N		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
X		i = 0;						 
N		if (i) i--;
N		do {								/* Find an FAT volume */
N			bsect = br[i];
N			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
N		} while (!LD2PT(vol) && fmt && ++i < 4);
X		} while (!0 && fmt && ++i < 4);
N	}
N	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
N	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
N
N	/* An FAT volume is found. Following code initializes the file system object */
N
N	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
X	if ((WORD)(((WORD)*((BYTE*)(fs->win + 11)+1)<<8)|(WORD)*(BYTE*)(fs->win + 11)) != ((UINT)512))	 
N		return FR_NO_FILESYSTEM;
N
N	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
X	fasize = (WORD)(((WORD)*((BYTE*)(fs->win + 22)+1)<<8)|(WORD)*(BYTE*)(fs->win + 22));			 
N	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
X	if (!fasize) fasize = (DWORD)(((DWORD)*((BYTE*)(fs->win + 36)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 36)+2)<<16)|((WORD)*((BYTE*)(fs->win + 36)+1)<<8)| *(BYTE*)(fs->win + 36));
N	fs->fsize = fasize;
N
N	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
X	fs->n_fats = fs->win[16];					 
N	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
N		return FR_NO_FILESYSTEM;
N	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
N
N	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
X	fs->csize = fs->win[13];				 
N	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
N		return FR_NO_FILESYSTEM;
N
N	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
X	fs->n_rootdir = (WORD)(((WORD)*((BYTE*)(fs->win + 17)+1)<<8)|(WORD)*(BYTE*)(fs->win + 17));	 
N	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
X	if (fs->n_rootdir % (((UINT)512) / 32))				 
N		return FR_NO_FILESYSTEM;
N
N	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
X	tsect = (WORD)(((WORD)*((BYTE*)(fs->win + 19)+1)<<8)|(WORD)*(BYTE*)(fs->win + 19));			 
N	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
X	if (!tsect) tsect = (DWORD)(((DWORD)*((BYTE*)(fs->win + 32)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 32)+2)<<16)|((WORD)*((BYTE*)(fs->win + 32)+1)<<8)| *(BYTE*)(fs->win + 32));
N
N	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
X	nrsv = (WORD)(((WORD)*((BYTE*)(fs->win + 14)+1)<<8)|(WORD)*(BYTE*)(fs->win + 14));			 
N	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
N
N	/* Determine the FAT sub type */
N	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
X	sysect = nrsv + fasize + fs->n_rootdir / (((UINT)512) / 32);	 
N	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
N	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
N	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
N	fmt = FS_FAT12;
X	fmt = 1;
N	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
X	if (nclst >= 4086U) fmt = 2;
N	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
X	if (nclst >= 65526U) fmt = 3;
N
N	/* Boundaries and Limits */
N	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
N	fs->volbase = bsect;								/* Volume start sector */
N	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
N	fs->database = bsect + sysect;						/* Data start sector */
N	if (fmt == FS_FAT32) {
X	if (fmt == 3) {
N		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
N		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
X		fs->dirbase = (DWORD)(((DWORD)*((BYTE*)(fs->win + 44)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 44)+2)<<16)|((WORD)*((BYTE*)(fs->win + 44)+1)<<8)| *(BYTE*)(fs->win + 44));	 
N		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
N	} else {
N		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
N		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
N		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
X		szbfat = (fmt == 2) ?					 
N			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
N	}
N	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
X	if (fs->fsize < (szbfat + (((UINT)512) - 1)) / ((UINT)512))	 
N		return FR_NO_FILESYSTEM;
N
N#if !_FS_READONLY
X#if !0
N	/* Initialize cluster allocation information */
N	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
N
N	/* Get fsinfo if available */
N	fs->fsi_flag = 0x80;
N#if (_FS_NOFSINFO & 3) != 3
X#if (0 & 3) != 3
N	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
X	if (fmt == 3				 
N		&& LD_WORD(fs->win + BPB_FSInfo) == 1
X		&& (WORD)(((WORD)*((BYTE*)(fs->win + 48)+1)<<8)|(WORD)*(BYTE*)(fs->win + 48)) == 1
N		&& move_window(fs, bsect + 1) == FR_OK)
N	{
N		fs->fsi_flag = 0;
N		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
X		if ((WORD)(((WORD)*((BYTE*)(fs->win + 510)+1)<<8)|(WORD)*(BYTE*)(fs->win + 510)) == 0xAA55	 
N			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
X			&& (DWORD)(((DWORD)*((BYTE*)(fs->win + 0)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 0)+2)<<16)|((WORD)*((BYTE*)(fs->win + 0)+1)<<8)| *(BYTE*)(fs->win + 0)) == 0x41615252
N			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
X			&& (DWORD)(((DWORD)*((BYTE*)(fs->win + 484)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 484)+2)<<16)|((WORD)*((BYTE*)(fs->win + 484)+1)<<8)| *(BYTE*)(fs->win + 484)) == 0x61417272)
N		{
N#if (_FS_NOFSINFO & 1) == 0
X#if (0 & 1) == 0
N			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
X			fs->free_clust = (DWORD)(((DWORD)*((BYTE*)(fs->win + 488)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 488)+2)<<16)|((WORD)*((BYTE*)(fs->win + 488)+1)<<8)| *(BYTE*)(fs->win + 488));
N#endif
N#if (_FS_NOFSINFO & 2) == 0
X#if (0 & 2) == 0
N			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
X			fs->last_clust = (DWORD)(((DWORD)*((BYTE*)(fs->win + 492)+3)<<24)|((DWORD)*((BYTE*)(fs->win + 492)+2)<<16)|((WORD)*((BYTE*)(fs->win + 492)+1)<<8)| *(BYTE*)(fs->win + 492));
N#endif
N		}
N	}
N#endif
N#endif
N	fs->fs_type = fmt;	/* FAT sub-type */
N	fs->id = ++Fsid;	/* File system mount ID */
N#if _FS_RPATH
X#if 0
S	fs->cdir = 0;		/* Set current directory to root */
N#endif
N#if _FS_LOCK			/* Clear file lock semaphores */
X#if 0			 
S	clear_lock(fs);
N#endif
N
N	return FR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Check if the file/directory object is valid or not                    */
N/*-----------------------------------------------------------------------*/
N
Nstatic
NFRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
N	void* obj		/* Pointer to the object FIL/DIR to check validity */
N)
N{
N	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
N
N
N	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
N		return FR_INVALID_OBJECT;
N
N	ENTER_FF(fil->fs);		/* Lock file system */
X	;		 
N
N	if (disk_status(fil->fs->drv) & STA_NOINIT)
X	if (disk_status(fil->fs->drv) & 0x01)
N		return FR_NOT_READY;
N
N	return FR_OK;
N}
N
N
N
N
N/*--------------------------------------------------------------------------
N
N   Public Functions
N
N--------------------------------------------------------------------------*/
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Mount/Unmount a Logical Drive                                         */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_mount (
N	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
N	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
N	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
N)
N{
N	FATFS *cfs;
N	int vol;
N	FRESULT res;
N	const TCHAR *rp = path;
N
N
N	vol = get_ldnumber(&rp);
N	if (vol < 0) return FR_INVALID_DRIVE;
N	cfs = FatFs[vol];					/* Pointer to fs object */
N
N	if (cfs) {
N#if _FS_LOCK
X#if 0
S		clear_lock(cfs);
N#endif
N#if _FS_REENTRANT						/* Discard sync object of the current volume */
X#if 0						 
S		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
N#endif
N		cfs->fs_type = 0;				/* Clear old fs object */
N	}
N
N	if (fs) {
N		fs->fs_type = 0;				/* Clear new fs object */
N#if _FS_REENTRANT						/* Create sync object for the new volume */
X#if 0						 
S		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
N#endif
N	}
N	FatFs[vol] = fs;					/* Register new fs object */
N
N	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
N
N	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
N	LEAVE_FF(fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Open or Create a File                                                 */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_open (
N	FIL* fp,			/* Pointer to the blank file object */
N	const TCHAR* path,	/* Pointer to the file name */
N	BYTE mode			/* Access mode and file open mode flags */
N)
N{
N	FRESULT res;
N	DIR dj;
N	BYTE *dir;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N#if !_FS_READONLY
X#if !0
N	DWORD dw, cl;
N#endif
N
N
N	if (!fp) return FR_INVALID_OBJECT;
N	fp->fs = 0;			/* Clear file object */
N
N	/* Get logical drive number */
N#if !_FS_READONLY
X#if !0
N	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
X	mode &= 0x01 | 0x02 | 0x08 | 0x10 | 0x04;
N	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
X	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~0x01));
N#else
S	mode &= FA_READ;
S	res = find_volume(&dj.fs, &path, 0);
N#endif
N	if (res == FR_OK) {
N		INIT_BUF(dj);
X		(dj). fn = sfn;
N		res = follow_path(&dj, path);	/* Follow the file path */
N		dir = dj.dir;
N#if !_FS_READONLY	/* R/W configuration */
X#if !0	 
N		if (res == FR_OK) {
N			if (!dir)	/* Default directory itself */
N				res = FR_INVALID_NAME;
N#if _FS_LOCK
X#if 0
S			else
S				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
N#endif
N		}
N		/* Create or Open a file */
N		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
X		if (mode & (0x08 | 0x10 | 0x04)) {
N			if (res != FR_OK) {					/* No file, create new */
N				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
N#if _FS_LOCK
X#if 0
S					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
N#else
N					res = dir_register(&dj);
N#endif
N				mode |= FA_CREATE_ALWAYS;		/* File is created */
X				mode |= 0x08;		 
N				dir = dj.dir;					/* New entry */
N			}
N			else {								/* Any object is already existing */
N				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
X				if (dir[11] & (0x01 | 0x10)) {	 
N					res = FR_DENIED;
N				} else {
N					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
X					if (mode & 0x04)	 
N						res = FR_EXIST;
N				}
N			}
N			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
X			if (res == FR_OK && (mode & 0x08)) {	 
N				dw = GET_FATTIME();				/* Created time */
X				dw = get_fattime();				 
N				ST_DWORD(dir + DIR_CrtTime, dw);
X				*(BYTE*)(dir + 14)=(BYTE)(dw); *((BYTE*)(dir + 14)+1)=(BYTE)((WORD)(dw)>>8); *((BYTE*)(dir + 14)+2)=(BYTE)((DWORD)(dw)>>16); *((BYTE*)(dir + 14)+3)=(BYTE)((DWORD)(dw)>>24);
N				dir[DIR_Attr] = 0;				/* Reset attribute */
X				dir[11] = 0;				 
N				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
X				*(BYTE*)(dir + 28)=(BYTE)(0); *((BYTE*)(dir + 28)+1)=(BYTE)((WORD)(0)>>8); *((BYTE*)(dir + 28)+2)=(BYTE)((DWORD)(0)>>16); *((BYTE*)(dir + 28)+3)=(BYTE)((DWORD)(0)>>24); 
N				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
N				st_clust(dir, 0);				/* cluster = 0 */
N				dj.fs->wflag = 1;
N				if (cl) {						/* Remove the cluster chain if exist */
N					dw = dj.fs->winsect;
N					res = remove_chain(dj.fs, cl);
N					if (res == FR_OK) {
N						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
N						res = move_window(dj.fs, dw);
N					}
N				}
N			}
N		}
N		else {	/* Open an existing file */
N			if (res == FR_OK) {					/* Follow succeeded */
N				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
X				if (dir[11] & 0x10) {	 
N					res = FR_NO_FILE;
N				} else {
N					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
X					if ((mode & 0x02) && (dir[11] & 0x01))  
N						res = FR_DENIED;
N				}
N			}
N		}
N		if (res == FR_OK) {
N			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
X			if (mode & 0x08)		 
N				mode |= FA__WRITTEN;
X				mode |= 0x20;
N			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
N			fp->dir_ptr = dir;
N#if _FS_LOCK
X#if 0
S			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
S			if (!fp->lockid) res = FR_INT_ERR;
N#endif
N		}
N
N#else				/* R/O configuration */
S		if (res == FR_OK) {					/* Follow succeeded */
S			dir = dj.dir;
S			if (!dir) {						/* Current directory itself */
S				res = FR_INVALID_NAME;
S			} else {
S				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
S					res = FR_NO_FILE;
S			}
S		}
N#endif
N		FREE_BUF();
X		;
N
N		if (res == FR_OK) {
N			fp->flag = mode;					/* File access mode */
N			fp->err = 0;						/* Clear error flag */
N			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
N			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
X			fp->fsize = (DWORD)(((DWORD)*((BYTE*)(dir + 28)+3)<<24)|((DWORD)*((BYTE*)(dir + 28)+2)<<16)|((WORD)*((BYTE*)(dir + 28)+1)<<8)| *(BYTE*)(dir + 28));	 
N			fp->fptr = 0;						/* File pointer */
N			fp->dsect = 0;
N#if _USE_FASTSEEK
X#if 0
S			fp->cltbl = 0;						/* Normal seek mode */
N#endif
N			fp->fs = dj.fs;	 					/* Validate file object */
N			fp->id = fp->fs->id;
N		}
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Read File                                                             */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_read (
N	FIL* fp, 		/* Pointer to the file object */
N	void* buff,		/* Pointer to data buffer */
N	UINT btr,		/* Number of bytes to read */
N	UINT* br		/* Pointer to number of bytes read */
N)
N{
N	FRESULT res;
N	DWORD clst, sect, remain;
N	UINT rcnt, cc;
N	BYTE csect, *rbuff = (BYTE*)buff;
N
N
N	*br = 0;	/* Clear read byte counter */
N
N	res = validate(fp);							/* Check validity */
N	if (res != FR_OK) LEAVE_FF(fp->fs, res);
X	if (res != FR_OK) return res;
N	if (fp->err)								/* Check error */
N		LEAVE_FF(fp->fs, (FRESULT)fp->err);
X		return (FRESULT)fp->err;
N	if (!(fp->flag & FA_READ)) 					/* Check access mode */
X	if (!(fp->flag & 0x01)) 					 
N		LEAVE_FF(fp->fs, FR_DENIED);
X		return FR_DENIED;
N	remain = fp->fsize - fp->fptr;
N	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
N
N	for ( ;  btr;								/* Repeat until all data read */
N		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
N		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
X		if ((fp->fptr % ((UINT)512)) == 0) {		 
N			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
X			csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));	 
N			if (!csect) {						/* On the cluster boundary? */
N				if (fp->fptr == 0) {			/* On the top of the file? */
N					clst = fp->sclust;			/* Follow from the origin */
N				} else {						/* Middle or end of the file */
N#if _USE_FASTSEEK
X#if 0
S					if (fp->cltbl)
S						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
S					else
N#endif
N						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
N				}
N				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
X				if (clst < 2) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
X				if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N				fp->clust = clst;				/* Update current cluster */
N			}
N			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
N			if (!sect) ABORT(fp->fs, FR_INT_ERR);
X			if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N			sect += csect;
N			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
X			cc = btr / ((UINT)512);				 
N			if (cc) {							/* Read maximum contiguous sectors directly */
N				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
N					cc = fp->fs->csize - csect;
N				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
N					ABORT(fp->fs, FR_DISK_ERR);
X					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
X#if !0 && 0 <= 2			 
N#if _FS_TINY
X#if 0
S				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
S					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
N#else
N				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
X				if ((fp->flag & 0x40) && fp->dsect - sect < cc)
N					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
X					mem_cpy(rbuff + ((fp->dsect - sect) * ((UINT)512)), fp->buf, ((UINT)512));
N#endif
N#endif
N				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
X				rcnt = ((UINT)512) * cc;			 
N				continue;
N			}
N#if !_FS_TINY
X#if !0
N			if (fp->dsect != sect) {			/* Load data sector if not in cache */
N#if !_FS_READONLY
X#if !0
N				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
X				if (fp->flag & 0x40) {		 
N					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
N						ABORT(fp->fs, FR_DISK_ERR);
X						{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N					fp->flag &= ~FA__DIRTY;
X					fp->flag &= ~0x40;
N				}
N#endif
N				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
N					ABORT(fp->fs, FR_DISK_ERR);
X					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N			}
N#endif
N			fp->dsect = sect;
N		}
N		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
X		rcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512));	 
N		if (rcnt > btr) rcnt = btr;
N#if _FS_TINY
X#if 0
S		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
S			ABORT(fp->fs, FR_DISK_ERR);
S		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
N#else
N		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
X		mem_cpy(rbuff, &fp->buf[fp->fptr % ((UINT)512)], rcnt);	 
N#endif
N	}
N
N	LEAVE_FF(fp->fs, FR_OK);
X	return FR_OK;
N}
N
N
N
N
N#if !_FS_READONLY
X#if !0
N/*-----------------------------------------------------------------------*/
N/* Write File                                                            */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_write (
N	FIL* fp,			/* Pointer to the file object */
N	const void *buff,	/* Pointer to the data to be written */
N	UINT btw,			/* Number of bytes to write */
N	UINT* bw			/* Pointer to number of bytes written */
N)
N{
N	FRESULT res;
N	DWORD clst, sect;
N	UINT wcnt, cc;
N	const BYTE *wbuff = (const BYTE*)buff;
N	BYTE csect;
N
N
N	*bw = 0;	/* Clear write byte counter */
N
N	res = validate(fp);						/* Check validity */
N	if (res != FR_OK) LEAVE_FF(fp->fs, res);
X	if (res != FR_OK) return res;
N	if (fp->err)							/* Check error */
N		LEAVE_FF(fp->fs, (FRESULT)fp->err);
X		return (FRESULT)fp->err;
N	if (!(fp->flag & FA_WRITE))				/* Check access mode */
X	if (!(fp->flag & 0x02))				 
N		LEAVE_FF(fp->fs, FR_DENIED);
X		return FR_DENIED;
N	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
N
N	for ( ;  btw;							/* Repeat until all data written */
N		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
N		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
X		if ((fp->fptr % ((UINT)512)) == 0) {	 
N			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
X			csect = (BYTE)(fp->fptr / ((UINT)512) & (fp->fs->csize - 1));	 
N			if (!csect) {					/* On the cluster boundary? */
N				if (fp->fptr == 0) {		/* On the top of the file? */
N					clst = fp->sclust;		/* Follow from the origin */
N					if (clst == 0)			/* When no cluster is allocated, */
N						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
N				} else {					/* Middle or end of the file */
N#if _USE_FASTSEEK
X#if 0
S					if (fp->cltbl)
S						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
S					else
N#endif
N						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
N				}
N				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
N				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
X				if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
X				if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N				fp->clust = clst;			/* Update current cluster */
N				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
N			}
N#if _FS_TINY
X#if 0
S			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
S				ABORT(fp->fs, FR_DISK_ERR);
N#else
N			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
X			if (fp->flag & 0x40) {		 
N				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
N					ABORT(fp->fs, FR_DISK_ERR);
X					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N				fp->flag &= ~FA__DIRTY;
X				fp->flag &= ~0x40;
N			}
N#endif
N			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
N			if (!sect) ABORT(fp->fs, FR_INT_ERR);
X			if (!sect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N			sect += csect;
N			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
X			cc = btw / ((UINT)512);			 
N			if (cc) {						/* Write maximum contiguous sectors directly */
N				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
N					cc = fp->fs->csize - csect;
N				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
N					ABORT(fp->fs, FR_DISK_ERR);
X					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N#if _FS_MINIMIZE <= 2
X#if 0 <= 2
N#if _FS_TINY
X#if 0
S				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
S					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
S					fp->fs->wflag = 0;
S				}
N#else
N				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
N					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
X					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * ((UINT)512)), ((UINT)512));
N					fp->flag &= ~FA__DIRTY;
X					fp->flag &= ~0x40;
N				}
N#endif
N#endif
N				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
X				wcnt = ((UINT)512) * cc;		 
N				continue;
N			}
N#if _FS_TINY
X#if 0
S			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
S				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
S				fp->fs->winsect = sect;
S			}
N#else
N			if (fp->dsect != sect) {		/* Fill sector cache with file data */
N				if (fp->fptr < fp->fsize &&
N					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
N						ABORT(fp->fs, FR_DISK_ERR);
X						{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N			}
N#endif
N			fp->dsect = sect;
N		}
N		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
X		wcnt = ((UINT)512) - ((UINT)fp->fptr % ((UINT)512)); 
N		if (wcnt > btw) wcnt = btw;
N#if _FS_TINY
X#if 0
S		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
S			ABORT(fp->fs, FR_DISK_ERR);
S		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
S		fp->fs->wflag = 1;
N#else
N		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
X		mem_cpy(&fp->buf[fp->fptr % ((UINT)512)], wbuff, wcnt);	 
N		fp->flag |= FA__DIRTY;
X		fp->flag |= 0x40;
N#endif
N	}
N
N	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
N	fp->flag |= FA__WRITTEN;						/* Set file change flag */
X	fp->flag |= 0x20;						 
N
N	LEAVE_FF(fp->fs, FR_OK);
X	return FR_OK;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Synchronize the File                                                  */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_sync (
N	FIL* fp		/* Pointer to the file object */
N)
N{
N	FRESULT res;
N	DWORD tm;
N	BYTE *dir;
N
N
N	res = validate(fp);					/* Check validity of the object */
N	if (res == FR_OK) {
N		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
X		if (fp->flag & 0x20) {	 
N			/* Write-back dirty buffer */
N#if !_FS_TINY
X#if !0
N			if (fp->flag & FA__DIRTY) {
X			if (fp->flag & 0x40) {
N				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
N					LEAVE_FF(fp->fs, FR_DISK_ERR);
X					return FR_DISK_ERR;
N				fp->flag &= ~FA__DIRTY;
X				fp->flag &= ~0x40;
N			}
N#endif
N			/* Update the directory entry */
N			res = move_window(fp->fs, fp->dir_sect);
N			if (res == FR_OK) {
N				dir = fp->dir_ptr;
N				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
X				dir[11] |= 0x20;					 
N				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
X				*(BYTE*)(dir + 28)=(BYTE)(fp->fsize); *((BYTE*)(dir + 28)+1)=(BYTE)((WORD)(fp->fsize)>>8); *((BYTE*)(dir + 28)+2)=(BYTE)((DWORD)(fp->fsize)>>16); *((BYTE*)(dir + 28)+3)=(BYTE)((DWORD)(fp->fsize)>>24);	 
N				st_clust(dir, fp->sclust);					/* Update start cluster */
N				tm = GET_FATTIME();							/* Update updated time */
X				tm = get_fattime();							 
N				ST_DWORD(dir + DIR_WrtTime, tm);
X				*(BYTE*)(dir + 22)=(BYTE)(tm); *((BYTE*)(dir + 22)+1)=(BYTE)((WORD)(tm)>>8); *((BYTE*)(dir + 22)+2)=(BYTE)((DWORD)(tm)>>16); *((BYTE*)(dir + 22)+3)=(BYTE)((DWORD)(tm)>>24);
N				ST_WORD(dir + DIR_LstAccDate, 0);
X				*(BYTE*)(dir + 18)=(BYTE)(0); *((BYTE*)(dir + 18)+1)=(BYTE)((WORD)(0)>>8);
N				fp->flag &= ~FA__WRITTEN;
X				fp->flag &= ~0x20;
N				fp->fs->wflag = 1;
N				res = sync_fs(fp->fs);
N			}
N		}
N	}
N
N	LEAVE_FF(fp->fs, res);
X	return res;
N}
N
N#endif /* !_FS_READONLY */
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Close File                                                            */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_close (
N	FIL *fp		/* Pointer to the file object to be closed */
N)
N{
N	FRESULT res;
N
N
N#if !_FS_READONLY
X#if !0
N	res = f_sync(fp);					/* Flush cached data */
N	if (res == FR_OK)
N#endif
N	{
N		res = validate(fp);				/* Lock volume */
N		if (res == FR_OK) {
N#if _FS_REENTRANT
X#if 0
S			FATFS *fs = fp->fs;
N#endif
N#if _FS_LOCK
X#if 0
S			res = dec_lock(fp->lockid);	/* Decrement file open counter */
S			if (res == FR_OK)
N#endif
N				fp->fs = 0;				/* Invalidate file object */
N#if _FS_REENTRANT
X#if 0
S			unlock_fs(fs, FR_OK);		/* Unlock volume */
N#endif
N		}
N	}
N	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Change Current Directory or Current Drive, Get Current Directory      */
N/*-----------------------------------------------------------------------*/
N
N#if _FS_RPATH >= 1
X#if 0 >= 1
S#if _VOLUMES >= 2
SFRESULT f_chdrive (
S	const TCHAR* path		/* Drive number */
S)
S{
S	int vol;
S
S
S	vol = get_ldnumber(&path);
S	if (vol < 0) return FR_INVALID_DRIVE;
S
S	CurrVol = (BYTE)vol;
S
S	return FR_OK;
S}
S#endif
S
S
SFRESULT f_chdir (
S	const TCHAR* path	/* Pointer to the directory path */
S)
S{
S	FRESULT res;
S	DIR dj;
S	DEFINE_NAMEBUF;
S
S
S	/* Get logical drive number */
S	res = find_volume(&dj.fs, &path, 0);
S	if (res == FR_OK) {
S		INIT_BUF(dj);
S		res = follow_path(&dj, path);		/* Follow the path */
S		FREE_BUF();
S		if (res == FR_OK) {					/* Follow completed */
S			if (!dj.dir) {
S				dj.fs->cdir = dj.sclust;	/* Start directory itself */
S			} else {
S				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
S					dj.fs->cdir = ld_clust(dj.fs, dj.dir);
S				else
S					res = FR_NO_PATH;		/* Reached but a file */
S			}
S		}
S		if (res == FR_NO_FILE) res = FR_NO_PATH;
S	}
S
S	LEAVE_FF(dj.fs, res);
S}
S
S
S#if _FS_RPATH >= 2
SFRESULT f_getcwd (
S	TCHAR* buff,	/* Pointer to the directory path */
S	UINT len		/* Size of path */
S)
S{
S	FRESULT res;
S	DIR dj;
S	UINT i, n;
S	DWORD ccl;
S	TCHAR *tp;
S	FILINFO fno;
S	DEFINE_NAMEBUF;
S
S
S	*buff = 0;
S	/* Get logical drive number */
S	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
S	if (res == FR_OK) {
S		INIT_BUF(dj);
S		i = len;			/* Bottom of buffer (directory stack base) */
S		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
S		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
S			res = dir_sdi(&dj, 1);			/* Get parent directory */
S			if (res != FR_OK) break;
S			res = dir_read(&dj, 0);
S			if (res != FR_OK) break;
S			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
S			res = dir_sdi(&dj, 0);
S			if (res != FR_OK) break;
S			do {							/* Find the entry links to the child directory */
S				res = dir_read(&dj, 0);
S				if (res != FR_OK) break;
S				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
S				res = dir_next(&dj, 0);	
S			} while (res == FR_OK);
S			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
S			if (res != FR_OK) break;
S#if _USE_LFN
S			fno.lfname = buff;
S			fno.lfsize = i;
S#endif
S			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
S			tp = fno.fname;
S#if _USE_LFN
S			if (*buff) tp = buff;
S#endif
S			for (n = 0; tp[n]; n++) ;
S			if (i < n + 3) {
S				res = FR_NOT_ENOUGH_CORE; break;
S			}
S			while (n) buff[--i] = tp[--n];
S			buff[--i] = '/';
S		}
S		tp = buff;
S		if (res == FR_OK) {
S#if _VOLUMES >= 2
S			*tp++ = '0' + CurrVol;			/* Put drive number */
S			*tp++ = ':';
S#endif
S			if (i == len) {					/* Root-directory */
S				*tp++ = '/';
S			} else {						/* Sub-directroy */
S				do		/* Add stacked path str */
S					*tp++ = buff[i++];
S				while (i < len);
S			}
S		}
S		*tp = 0;
S		FREE_BUF();
S	}
S
S	LEAVE_FF(dj.fs, res);
S}
S#endif /* _FS_RPATH >= 2 */
N#endif /* _FS_RPATH >= 1 */
N
N
N
N#if _FS_MINIMIZE <= 2
X#if 0 <= 2
N/*-----------------------------------------------------------------------*/
N/* Seek File R/W Pointer                                                 */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_lseek (
N	FIL* fp,		/* Pointer to the file object */
N	DWORD ofs		/* File pointer from top of file */
N)
N{
N	FRESULT res;
N	DWORD clst, bcs, nsect, ifptr;
N#if _USE_FASTSEEK
X#if 0
S	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
N#endif
N
N
N	res = validate(fp);					/* Check validity of the object */
N	if (res != FR_OK) LEAVE_FF(fp->fs, res);
X	if (res != FR_OK) return res;
N	if (fp->err)						/* Check error */
N		LEAVE_FF(fp->fs, (FRESULT)fp->err);
X		return (FRESULT)fp->err;
N
N#if _USE_FASTSEEK
X#if 0
S	if (fp->cltbl) {	/* Fast seek */
S		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
S			tbl = fp->cltbl;
S			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
S			cl = fp->sclust;			/* Top of the chain */
S			if (cl) {
S				do {
S					/* Get a fragment */
S					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
S					do {
S						pcl = cl; ncl++;
S						cl = get_fat(fp->fs, cl);
S						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
S						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
S					} while (cl == pcl + 1);
S					if (ulen <= tlen) {		/* Store the length and top of the fragment */
S						*tbl++ = ncl; *tbl++ = tcl;
S					}
S				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
S			}
S			*fp->cltbl = ulen;	/* Number of items used */
S			if (ulen <= tlen)
S				*tbl = 0;		/* Terminate table */
S			else
S				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
S
S		} else {						/* Fast seek */
S			if (ofs > fp->fsize)		/* Clip offset at the file size */
S				ofs = fp->fsize;
S			fp->fptr = ofs;				/* Set file pointer */
S			if (ofs) {
S				fp->clust = clmt_clust(fp, ofs - 1);
S				dsc = clust2sect(fp->fs, fp->clust);
S				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
S				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
S				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
S#if !_FS_TINY
S#if !_FS_READONLY
S					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
S						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
S							ABORT(fp->fs, FR_DISK_ERR);
S						fp->flag &= ~FA__DIRTY;
S					}
S#endif
S					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
S						ABORT(fp->fs, FR_DISK_ERR);
S#endif
S					fp->dsect = dsc;
S				}
S			}
S		}
S	} else
N#endif
N
N	/* Normal Seek */
N	{
N		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
N#if !_FS_READONLY
X#if !0
N			 && !(fp->flag & FA_WRITE)
X			 && !(fp->flag & 0x02)
N#endif
N			) ofs = fp->fsize;
N
N		ifptr = fp->fptr;
N		fp->fptr = nsect = 0;
N		if (ofs) {
N			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
X			bcs = (DWORD)fp->fs->csize * ((UINT)512);	 
N			if (ifptr > 0 &&
N				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
N				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
N				ofs -= fp->fptr;
N				clst = fp->clust;
N			} else {									/* When seek to back cluster, */
N				clst = fp->sclust;						/* start from the first cluster */
N#if !_FS_READONLY
X#if !0
N				if (clst == 0) {						/* If no cluster chain, create a new chain */
N					clst = create_chain(fp->fs, 0);
N					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
X					if (clst == 1) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
X					if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N					fp->sclust = clst;
N				}
N#endif
N				fp->clust = clst;
N			}
N			if (clst != 0) {
N				while (ofs > bcs) {						/* Cluster following loop */
N#if !_FS_READONLY
X#if !0
N					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
X					if (fp->flag & 0x02) {			 
N						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
N						if (clst == 0) {				/* When disk gets full, clip file size */
N							ofs = bcs; break;
N						}
N					} else
N#endif
N						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
N					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
X					if (clst == 0xFFFFFFFF) { fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
X					if (clst <= 1 || clst >= fp->fs->n_fatent) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N					fp->clust = clst;
N					fp->fptr += bcs;
N					ofs -= bcs;
N				}
N				fp->fptr += ofs;
N				if (ofs % SS(fp->fs)) {
X				if (ofs % ((UINT)512)) {
N					nsect = clust2sect(fp->fs, clst);	/* Current sector */
N					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
X					if (!nsect) { fp->err = (BYTE)(FR_INT_ERR); return FR_INT_ERR; };
N					nsect += ofs / SS(fp->fs);
X					nsect += ofs / ((UINT)512);
N				}
N			}
N		}
N		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
X		if (fp->fptr % ((UINT)512) && nsect != fp->dsect) {	 
N#if !_FS_TINY
X#if !0
N#if !_FS_READONLY
X#if !0
N			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
X			if (fp->flag & 0x40) {			 
N				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
N					ABORT(fp->fs, FR_DISK_ERR);
X					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N				fp->flag &= ~FA__DIRTY;
X				fp->flag &= ~0x40;
N			}
N#endif
N			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
N				ABORT(fp->fs, FR_DISK_ERR);
X				{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR; };
N#endif
N			fp->dsect = nsect;
N		}
N#if !_FS_READONLY
X#if !0
N		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
N			fp->fsize = fp->fptr;
N			fp->flag |= FA__WRITTEN;
X			fp->flag |= 0x20;
N		}
N#endif
N	}
N
N	LEAVE_FF(fp->fs, res);
X	return res;
N}
N
N
N
N#if _FS_MINIMIZE <= 1
X#if 0 <= 1
N/*-----------------------------------------------------------------------*/
N/* Create a Directory Object                                             */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_opendir (
N	DIR* dp,			/* Pointer to directory object to create */
N	const TCHAR* path	/* Pointer to the directory path */
N)
N{
N	FRESULT res;
N	FATFS* fs;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	if (!dp) return FR_INVALID_OBJECT;
N
N	/* Get logical drive number */
N	res = find_volume(&fs, &path, 0);
N	if (res == FR_OK) {
N		dp->fs = fs;
N		INIT_BUF(*dp);
X		(*dp). fn = sfn;
N		res = follow_path(dp, path);			/* Follow the path to the directory */
N		FREE_BUF();
X		;
N		if (res == FR_OK) {						/* Follow completed */
N			if (dp->dir) {						/* It is not the origin directory itself */
N				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
X				if (dp->dir[11] & 0x10)	 
N					dp->sclust = ld_clust(fs, dp->dir);
N				else							/* The object is a file */
N					res = FR_NO_PATH;
N			}
N			if (res == FR_OK) {
N				dp->id = fs->id;
N				res = dir_sdi(dp, 0);			/* Rewind directory */
N#if _FS_LOCK
X#if 0
S				if (res == FR_OK) {
S					if (dp->sclust) {
S						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
S						if (!dp->lockid)
S							res = FR_TOO_MANY_OPEN_FILES;
S					} else {
S						dp->lockid = 0;	/* Root directory need not to be locked */
S					}
S				}
N#endif
N			}
N		}
N		if (res == FR_NO_FILE) res = FR_NO_PATH;
N	}
N	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
N
N	LEAVE_FF(fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Close Directory                                                       */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_closedir (
N	DIR *dp		/* Pointer to the directory object to be closed */
N)
N{
N	FRESULT res;
N
N
N	res = validate(dp);
N	if (res == FR_OK) {
N#if _FS_REENTRANT
X#if 0
S		FATFS *fs = dp->fs;
N#endif
N#if _FS_LOCK
X#if 0
S		if (dp->lockid)				/* Decrement sub-directory open counter */
S			res = dec_lock(dp->lockid);
S		if (res == FR_OK)
N#endif
N			dp->fs = 0;				/* Invalidate directory object */
N#if _FS_REENTRANT
X#if 0
S		unlock_fs(fs, FR_OK);		/* Unlock volume */
N#endif
N	}
N	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Read Directory Entries in Sequence                                    */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_readdir (
N	DIR* dp,			/* Pointer to the open directory object */
N	FILINFO* fno		/* Pointer to file information to return */
N)
N{
N	FRESULT res;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	res = validate(dp);						/* Check validity of the object */
N	if (res == FR_OK) {
N		if (!fno) {
N			res = dir_sdi(dp, 0);			/* Rewind the directory object */
N		} else {
N			INIT_BUF(*dp);
X			(*dp). fn = sfn;
N			res = dir_read(dp, 0);			/* Read an item */
N			if (res == FR_NO_FILE) {		/* Reached end of directory */
N				dp->sect = 0;
N				res = FR_OK;
N			}
N			if (res == FR_OK) {				/* A valid entry is found */
N				get_fileinfo(dp, fno);		/* Get the object information */
N				res = dir_next(dp, 0);		/* Increment index for next */
N				if (res == FR_NO_FILE) {
N					dp->sect = 0;
N					res = FR_OK;
N				}
N			}
N			FREE_BUF();
X			;
N		}
N	}
N
N	LEAVE_FF(dp->fs, res);
X	return res;
N}
N
N
N
N#if _USE_FIND
X#if 0
S/*-----------------------------------------------------------------------*/
S/* Find next file                                                        */
S/*-----------------------------------------------------------------------*/
S
SFRESULT f_findnext (
S	DIR* dp,		/* Pointer to the open directory object */
S	FILINFO* fno	/* Pointer to the file information structure */
S)
S{
S	FRESULT res;
S
S
S	for (;;) {
S		res = f_readdir(dp, fno);		/* Get a directory item */
S		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
S#if _USE_LFN
S		if (fno->lfname && pattern_matching(dp->pat, fno->lfname, 0, 0)) break;	/* Test for LFN if exist */
S#endif
S		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;	/* Test for SFN */
S	}
S	return res;
S
S}
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Find first file                                                       */
S/*-----------------------------------------------------------------------*/
S
SFRESULT f_findfirst (
S	DIR* dp,				/* Pointer to the blank directory object */
S	FILINFO* fno,			/* Pointer to the file information structure */
S	const TCHAR* path,		/* Pointer to the directory to open */
S	const TCHAR* pattern	/* Pointer to the matching pattern */
S)
S{
S	FRESULT res;
S
S
S	dp->pat = pattern;		/* Save pointer to pattern string */
S	res = f_opendir(dp, path);		/* Open the target directory */
S	if (res == FR_OK)
S		res = f_findnext(dp, fno);	/* Find the first item */
S	return res;
S}
S
N#endif	/* _USE_FIND */
N
N
N
N#if _FS_MINIMIZE == 0
X#if 0 == 0
N/*-----------------------------------------------------------------------*/
N/* Get File Status                                                       */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_stat (
N	const TCHAR* path,	/* Pointer to the file path */
N	FILINFO* fno		/* Pointer to file information to return */
N)
N{
N	FRESULT res;
N	DIR dj;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &path, 0);
N	if (res == FR_OK) {
N		INIT_BUF(dj);
X		(dj). fn = sfn;
N		res = follow_path(&dj, path);	/* Follow the file path */
N		if (res == FR_OK) {				/* Follow completed */
N			if (dj.dir) {		/* Found an object */
N				if (fno) get_fileinfo(&dj, fno);
N			} else {			/* It is root directory */
N				res = FR_INVALID_NAME;
N			}
N		}
N		FREE_BUF();
X		;
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N
N
N#if !_FS_READONLY
X#if !0
N/*-----------------------------------------------------------------------*/
N/* Get Number of Free Clusters                                           */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_getfree (
N	const TCHAR* path,	/* Path name of the logical drive number */
N	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
N	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
N)
N{
N	FRESULT res;
N	FATFS *fs;
N	DWORD n, clst, sect, stat;
N	UINT i;
N	BYTE fat, *p;
N
N
N	/* Get logical drive number */
N	res = find_volume(fatfs, &path, 0);
N	fs = *fatfs;
N	if (res == FR_OK) {
N		/* If free_clust is valid, return it without full cluster scan */
N		if (fs->free_clust <= fs->n_fatent - 2) {
N			*nclst = fs->free_clust;
N		} else {
N			/* Get number of free clusters */
N			fat = fs->fs_type;
N			n = 0;
N			if (fat == FS_FAT12) {
X			if (fat == 1) {
N				clst = 2;
N				do {
N					stat = get_fat(fs, clst);
N					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
N					if (stat == 1) { res = FR_INT_ERR; break; }
N					if (stat == 0) n++;
N				} while (++clst < fs->n_fatent);
N			} else {
N				clst = fs->n_fatent;
N				sect = fs->fatbase;
N				i = 0; p = 0;
N				do {
N					if (!i) {
N						res = move_window(fs, sect++);
N						if (res != FR_OK) break;
N						p = fs->win;
N						i = SS(fs);
X						i = ((UINT)512);
N					}
N					if (fat == FS_FAT16) {
X					if (fat == 2) {
N						if (LD_WORD(p) == 0) n++;
X						if ((WORD)(((WORD)*((BYTE*)(p)+1)<<8)|(WORD)*(BYTE*)(p)) == 0) n++;
N						p += 2; i -= 2;
N					} else {
N						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
X						if (((DWORD)(((DWORD)*((BYTE*)(p)+3)<<24)|((DWORD)*((BYTE*)(p)+2)<<16)|((WORD)*((BYTE*)(p)+1)<<8)| *(BYTE*)(p)) & 0x0FFFFFFF) == 0) n++;
N						p += 4; i -= 4;
N					}
N				} while (--clst);
N			}
N			fs->free_clust = n;
N			fs->fsi_flag |= 1;
N			*nclst = n;
N		}
N	}
N	LEAVE_FF(fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Truncate File                                                         */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_truncate (
N	FIL* fp		/* Pointer to the file object */
N)
N{
N	FRESULT res;
N	DWORD ncl;
N
N
N	res = validate(fp);						/* Check validity of the object */
N	if (res == FR_OK) {
N		if (fp->err) {						/* Check error */
N			res = (FRESULT)fp->err;
N		} else {
N			if (!(fp->flag & FA_WRITE))		/* Check access mode */
X			if (!(fp->flag & 0x02))		 
N				res = FR_DENIED;
N		}
N	}
N	if (res == FR_OK) {
N		if (fp->fsize > fp->fptr) {
N			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
N			fp->flag |= FA__WRITTEN;
X			fp->flag |= 0x20;
N			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
N				res = remove_chain(fp->fs, fp->sclust);
N				fp->sclust = 0;
N			} else {				/* When truncate a part of the file, remove remaining clusters */
N				ncl = get_fat(fp->fs, fp->clust);
N				res = FR_OK;
N				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
N				if (ncl == 1) res = FR_INT_ERR;
N				if (res == FR_OK && ncl < fp->fs->n_fatent) {
N					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
N					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
N				}
N			}
N#if !_FS_TINY
X#if !0
N			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
X			if (res == FR_OK && (fp->flag & 0x40)) {
N				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
N					res = FR_DISK_ERR;
N				else
N					fp->flag &= ~FA__DIRTY;
X					fp->flag &= ~0x40;
N			}
N#endif
N		}
N		if (res != FR_OK) fp->err = (FRESULT)res;
N	}
N
N	LEAVE_FF(fp->fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Delete a File or Directory                                            */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_unlink (
N	const TCHAR* path		/* Pointer to the file or directory path */
N)
N{
N	FRESULT res;
N	DIR dj, sdj;
N	BYTE *dir;
N	DWORD dclst = 0;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &path, 1);
N	if (res == FR_OK) {
N		INIT_BUF(dj);
X		(dj). fn = sfn;
N		res = follow_path(&dj, path);		/* Follow the file path */
N		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
X		if (0 && res == FR_OK && (dj.fn[11] & 0x20))
N			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
N#if _FS_LOCK
X#if 0
S		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
N#endif
N		if (res == FR_OK) {					/* The object is accessible */
N			dir = dj.dir;
N			if (!dir) {
N				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
N			} else {
N				if (dir[DIR_Attr] & AM_RDO)
X				if (dir[11] & 0x01)
N					res = FR_DENIED;		/* Cannot remove R/O object */
N			}
N			if (res == FR_OK) {
N				dclst = ld_clust(dj.fs, dir);
N				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
X				if (dclst && (dir[11] & 0x10)) {	 
N#if _FS_RPATH
X#if 0
S					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
S						res = FR_DENIED;
S					} else
N#endif
N					{
N						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
N						sdj.sclust = dclst;
N						res = dir_sdi(&sdj, 2);
N						if (res == FR_OK) {
N							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
N							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
N							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
N						}
N					}
N				}
N			}
N			if (res == FR_OK) {
N				res = dir_remove(&dj);		/* Remove the directory entry */
N				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
N					res = remove_chain(dj.fs, dclst);
N				if (res == FR_OK) res = sync_fs(dj.fs);
N			}
N		}
N		FREE_BUF();
X		;
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Create a Directory                                                    */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_mkdir (
N	const TCHAR* path		/* Pointer to the directory path */
N)
N{
N	FRESULT res;
N	DIR dj;
N	BYTE *dir, n;
N	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
X	DWORD dsc, dcl, pcl, tm = get_fattime();
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &path, 1);
N	if (res == FR_OK) {
N		INIT_BUF(dj);
X		(dj). fn = sfn;
N		res = follow_path(&dj, path);			/* Follow the file path */
N		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
N		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
X		if (0 && res == FR_NO_FILE && (dj.fn[11] & 0x20))
N			res = FR_INVALID_NAME;
N		if (res == FR_NO_FILE) {				/* Can create a new directory */
N			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
N			res = FR_OK;
N			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
N			if (dcl == 1) res = FR_INT_ERR;
N			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
N			if (res == FR_OK)					/* Flush FAT */
N				res = sync_window(dj.fs);
N			if (res == FR_OK) {					/* Initialize the new directory table */
N				dsc = clust2sect(dj.fs, dcl);
N				dir = dj.fs->win;
N				mem_set(dir, 0, SS(dj.fs));
X				mem_set(dir, 0, ((UINT)512));
N				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
X				mem_set(dir + 0, ' ', 11);	 
N				dir[DIR_Name] = '.';
X				dir[0] = '.';
N				dir[DIR_Attr] = AM_DIR;
X				dir[11] = 0x10;
N				ST_DWORD(dir + DIR_WrtTime, tm);
X				*(BYTE*)(dir + 22)=(BYTE)(tm); *((BYTE*)(dir + 22)+1)=(BYTE)((WORD)(tm)>>8); *((BYTE*)(dir + 22)+2)=(BYTE)((DWORD)(tm)>>16); *((BYTE*)(dir + 22)+3)=(BYTE)((DWORD)(tm)>>24);
N				st_clust(dir, dcl);
N				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
X				mem_cpy(dir + 32, dir, 32); 	 
N				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
X				dir[32 + 1] = '.'; pcl = dj.sclust;
N				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
X				if (dj.fs->fs_type == 3 && pcl == dj.fs->dirbase)
N					pcl = 0;
N				st_clust(dir + SZ_DIRE, pcl);
X				st_clust(dir + 32, pcl);
N				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
N					dj.fs->winsect = dsc++;
N					dj.fs->wflag = 1;
N					res = sync_window(dj.fs);
N					if (res != FR_OK) break;
N					mem_set(dir, 0, SS(dj.fs));
X					mem_set(dir, 0, ((UINT)512));
N				}
N			}
N			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
N			if (res != FR_OK) {
N				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
N			} else {
N				dir = dj.dir;
N				dir[DIR_Attr] = AM_DIR;				/* Attribute */
X				dir[11] = 0x10;				 
N				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
X				*(BYTE*)(dir + 22)=(BYTE)(tm); *((BYTE*)(dir + 22)+1)=(BYTE)((WORD)(tm)>>8); *((BYTE*)(dir + 22)+2)=(BYTE)((DWORD)(tm)>>16); *((BYTE*)(dir + 22)+3)=(BYTE)((DWORD)(tm)>>24);	 
N				st_clust(dir, dcl);					/* Table start cluster */
N				dj.fs->wflag = 1;
N				res = sync_fs(dj.fs);
N			}
N		}
N		FREE_BUF();
X		;
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Change Attribute                                                      */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_chmod (
N	const TCHAR* path,	/* Pointer to the file path */
N	BYTE attr,			/* Attribute bits */
N	BYTE mask			/* Attribute mask to change */
N)
N{
N	FRESULT res;
N	DIR dj;
N	BYTE *dir;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &path, 1);
N	if (res == FR_OK) {
N		INIT_BUF(dj);
X		(dj). fn = sfn;
N		res = follow_path(&dj, path);		/* Follow the file path */
N		FREE_BUF();
X		;
N		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
X		if (0 && res == FR_OK && (dj.fn[11] & 0x20))
N			res = FR_INVALID_NAME;
N		if (res == FR_OK) {
N			dir = dj.dir;
N			if (!dir) {						/* Is it a root directory? */
N				res = FR_INVALID_NAME;
N			} else {						/* File or sub directory */
N				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
X				mask &= 0x01|0x02|0x04|0x20;	 
N				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
X				dir[11] = (attr & mask) | (dir[11] & (BYTE)~mask);	 
N				dj.fs->wflag = 1;
N				res = sync_fs(dj.fs);
N			}
N		}
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Rename File/Directory                                                 */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_rename (
N	const TCHAR* path_old,	/* Pointer to the object to be renamed */
N	const TCHAR* path_new	/* Pointer to the new name */
N)
N{
N	FRESULT res;
N	DIR djo, djn;
N	BYTE buf[21], *dir;
N	DWORD dw;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	/* Get logical drive number of the source object */
N	res = find_volume(&djo.fs, &path_old, 1);
N	if (res == FR_OK) {
N		djn.fs = djo.fs;
N		INIT_BUF(djo);
X		(djo). fn = sfn;
N		res = follow_path(&djo, path_old);		/* Check old object */
N		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
X		if (0 && res == FR_OK && (djo.fn[11] & 0x20))
N			res = FR_INVALID_NAME;
N#if _FS_LOCK
X#if 0
S		if (res == FR_OK) res = chk_lock(&djo, 2);
N#endif
N		if (res == FR_OK) {						/* Old object is found */
N			if (!djo.dir) {						/* Is root dir? */
N				res = FR_NO_FILE;
N			} else {
N				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
X				mem_cpy(buf, djo.dir + 11, 21);	 
N				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
N				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
N					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
N				else
N					res = FR_INVALID_DRIVE;
N				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
N				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
N					res = dir_register(&djn);			/* Register the new entry */
N					if (res == FR_OK) {
N/* Start of critical section where any interruption can cause a cross-link */
N						dir = djn.dir;					/* Copy information about object except name */
N						mem_cpy(dir + 13, buf + 2, 19);
N						dir[DIR_Attr] = buf[0] | AM_ARC;
X						dir[11] = buf[0] | 0x20;
N						djo.fs->wflag = 1;
N						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-directory if needed */
X						if ((dir[11] & 0x10) && djo.sclust != djn.sclust) {	 
N							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
N							if (!dw) {
N								res = FR_INT_ERR;
N							} else {
N								res = move_window(djo.fs, dw);
N								dir = djo.fs->win + SZ_DIRE * 1;	/* Ptr to .. entry */
X								dir = djo.fs->win + 32 * 1;	 
N								if (res == FR_OK && dir[1] == '.') {
N									st_clust(dir, djn.sclust);
N									djo.fs->wflag = 1;
N								}
N							}
N						}
N						if (res == FR_OK) {
N							res = dir_remove(&djo);		/* Remove old entry */
N							if (res == FR_OK)
N								res = sync_fs(djo.fs);
N						}
N/* End of critical section */
N					}
N				}
N			}
N		}
N		FREE_BUF();
X		;
N	}
N
N	LEAVE_FF(djo.fs, res);
X	return res;
N}
N
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Change Timestamp                                                      */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_utime (
N	const TCHAR* path,	/* Pointer to the file/directory name */
N	const FILINFO* fno	/* Pointer to the time stamp to be set */
N)
N{
N	FRESULT res;
N	DIR dj;
N	BYTE *dir;
N	DEFINE_NAMEBUF;
X	BYTE sfn[12];
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &path, 1);
N	if (res == FR_OK) {
N		INIT_BUF(dj);
X		(dj). fn = sfn;
N		res = follow_path(&dj, path);	/* Follow the file path */
N		FREE_BUF();
X		;
N		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
X		if (0 && res == FR_OK && (dj.fn[11] & 0x20))
N			res = FR_INVALID_NAME;
N		if (res == FR_OK) {
N			dir = dj.dir;
N			if (!dir) {					/* Root directory */
N				res = FR_INVALID_NAME;
N			} else {					/* File or sub-directory */
N				ST_WORD(dir + DIR_WrtTime, fno->ftime);
X				*(BYTE*)(dir + 22)=(BYTE)(fno->ftime); *((BYTE*)(dir + 22)+1)=(BYTE)((WORD)(fno->ftime)>>8);
N				ST_WORD(dir + DIR_WrtDate, fno->fdate);
X				*(BYTE*)(dir + 24)=(BYTE)(fno->fdate); *((BYTE*)(dir + 24)+1)=(BYTE)((WORD)(fno->fdate)>>8);
N				dj.fs->wflag = 1;
N				res = sync_fs(dj.fs);
N			}
N		}
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N#endif /* !_FS_READONLY */
N#endif /* _FS_MINIMIZE == 0 */
N#endif /* _FS_MINIMIZE <= 1 */
N#endif /* _FS_MINIMIZE <= 2 */
N
N
N
N
N#if _USE_LABEL
X#if 1
N/*-----------------------------------------------------------------------*/
N/* Get volume label                                                      */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_getlabel (
N	const TCHAR* path,	/* Path name of the logical drive number */
N	TCHAR* label,		/* Pointer to a buffer to return the volume label */
N	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
N)
N{
N	FRESULT res;
N	DIR dj;
N	UINT i, j;
N#if _USE_LFN && _LFN_UNICODE
X#if 0 && 0
S	WCHAR w;
N#endif
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &path, 0);
N
N	/* Get volume label */
N	if (res == FR_OK && label) {
N		dj.sclust = 0;					/* Open root directory */
N		res = dir_sdi(&dj, 0);
N		if (res == FR_OK) {
N			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
N			if (res == FR_OK) {			/* A volume label is exist */
N#if _USE_LFN && _LFN_UNICODE
X#if 0 && 0
S				i = j = 0;
S				do {
S					w = (i < 11) ? dj.dir[i++] : ' ';
S					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
S						w = w << 8 | dj.dir[i++];
S					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
S				} while (j < 11);
N#else
N				mem_cpy(label, dj.dir, 11);
N#endif
N				j = 11;
N				do {
N					label[j] = 0;
N					if (!j) break;
N				} while (label[--j] == ' ');
N			}
N			if (res == FR_NO_FILE) {	/* No label, return nul string */
N				label[0] = 0;
N				res = FR_OK;
N			}
N		}
N	}
N
N	/* Get volume serial number */
N	if (res == FR_OK && vsn) {
N		res = move_window(dj.fs, dj.fs->volbase);
N		if (res == FR_OK) {
N			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
X			i = dj.fs->fs_type == 3 ? 67 : 39;
N			*vsn = LD_DWORD(&dj.fs->win[i]);
X			*vsn = (DWORD)(((DWORD)*((BYTE*)(&dj . fs->win[i])+3)<<24)|((DWORD)*((BYTE*)(&dj . fs->win[i])+2)<<16)|((WORD)*((BYTE*)(&dj . fs->win[i])+1)<<8)| *(BYTE*)(&dj . fs->win[i]));
N		}
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N
N
N#if !_FS_READONLY
X#if !0
N/*-----------------------------------------------------------------------*/
N/* Set volume label                                                      */
N/*-----------------------------------------------------------------------*/
N
NFRESULT f_setlabel (
N	const TCHAR* label	/* Pointer to the volume label to set */
N)
N{
N	FRESULT res;
N	DIR dj;
N	BYTE vn[11];
N	UINT i, j, sl;
N	WCHAR w;
N	DWORD tm;
N
N
N	/* Get logical drive number */
N	res = find_volume(&dj.fs, &label, 1);
N	if (res) LEAVE_FF(dj.fs, res);
X	if (res) return res;
N
N	/* Create a volume label in directory form */
N	vn[0] = 0;
N	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
N	for ( ; sl && label[sl - 1] == ' '; sl--) ;	/* Remove trailing spaces */
N	if (sl) {	/* Create volume label in directory form */
N		i = j = 0;
N		do {
N#if _USE_LFN && _LFN_UNICODE
X#if 0 && 0
S			w = ff_convert(ff_wtoupper(label[i++]), 0);
N#else
N			w = (BYTE)label[i++];
N			if (IsDBCS1(w))
X			if (((BYTE)(w) >= 0x81 && (BYTE)(w) <= 0xFE))
N				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
X				w = (j < 10 && i < sl && (((BYTE)(label[i]) >= 0x40 && (BYTE)(label[i]) <= 0x7E) || ((BYTE)(label[i]) >= 0x80 && (BYTE)(label[i]) <= 0xFE))) ? w << 8 | (BYTE)label[i++] : 0;
N#if _USE_LFN
X#if 0
S			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
N#else
N			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
X			if ((((w)>= 'a')&&((w)<= 'z'))) w -= 0x20;			 
N#ifdef _EXCVT
S			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
N#else
N			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
X			if (!0x81 && w >= 0x80) w = 0;		 
N#endif
N#endif
N#endif
N			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
N				LEAVE_FF(dj.fs, FR_INVALID_NAME);
X				return FR_INVALID_NAME;
N			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
N			vn[j++] = (BYTE)w;
N		} while (i < sl);
N		while (j < 11) vn[j++] = ' ';	/* Fill remaining name field */
N		if (vn[0] == DDEM) LEAVE_FF(dj.fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
X		if (vn[0] == 0xE5) return FR_INVALID_NAME;	 
N	}
N
N	/* Set volume label */
N	dj.sclust = 0;					/* Open root directory */
N	res = dir_sdi(&dj, 0);
N	if (res == FR_OK) {
N		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
N		if (res == FR_OK) {			/* A volume label is found */
N			if (vn[0]) {
N				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
N				tm = GET_FATTIME();
X				tm = get_fattime();
N				ST_DWORD(dj.dir + DIR_WrtTime, tm);
X				*(BYTE*)(dj . dir + 22)=(BYTE)(tm); *((BYTE*)(dj . dir + 22)+1)=(BYTE)((WORD)(tm)>>8); *((BYTE*)(dj . dir + 22)+2)=(BYTE)((DWORD)(tm)>>16); *((BYTE*)(dj . dir + 22)+3)=(BYTE)((DWORD)(tm)>>24);
N			} else {
N				dj.dir[0] = DDEM;			/* Remove the volume label */
X				dj.dir[0] = 0xE5;			 
N			}
N			dj.fs->wflag = 1;
N			res = sync_fs(dj.fs);
N		} else {					/* No volume label is found or error */
N			if (res == FR_NO_FILE) {
N				res = FR_OK;
N				if (vn[0]) {				/* Create volume label as new */
N					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
N					if (res == FR_OK) {
N						mem_set(dj.dir, 0, SZ_DIRE);	/* Set volume label */
X						mem_set(dj.dir, 0, 32);	 
N						mem_cpy(dj.dir, vn, 11);
N						dj.dir[DIR_Attr] = AM_VOL;
X						dj.dir[11] = 0x08;
N						tm = GET_FATTIME();
X						tm = get_fattime();
N						ST_DWORD(dj.dir + DIR_WrtTime, tm);
X						*(BYTE*)(dj . dir + 22)=(BYTE)(tm); *((BYTE*)(dj . dir + 22)+1)=(BYTE)((WORD)(tm)>>8); *((BYTE*)(dj . dir + 22)+2)=(BYTE)((DWORD)(tm)>>16); *((BYTE*)(dj . dir + 22)+3)=(BYTE)((DWORD)(tm)>>24);
N						dj.fs->wflag = 1;
N						res = sync_fs(dj.fs);
N					}
N				}
N			}
N		}
N	}
N
N	LEAVE_FF(dj.fs, res);
X	return res;
N}
N
N#endif /* !_FS_READONLY */
N#endif /* _USE_LABEL */
N
N
N
N/*-----------------------------------------------------------------------*/
N/* Forward data to the stream directly (available on only tiny cfg)      */
N/*-----------------------------------------------------------------------*/
N#if _USE_FORWARD && _FS_TINY
X#if 0 && 0
S
SFRESULT f_forward (
S	FIL* fp, 						/* Pointer to the file object */
S	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
S	UINT btf,						/* Number of bytes to forward */
S	UINT* bf						/* Pointer to number of bytes forwarded */
S)
S{
S	FRESULT res;
S	DWORD remain, clst, sect;
S	UINT rcnt;
S	BYTE csect;
S
S
S	*bf = 0;	/* Clear transfer byte counter */
S
S	res = validate(fp);								/* Check validity of the object */
S	if (res != FR_OK) LEAVE_FF(fp->fs, res);
S	if (fp->err)									/* Check error */
S		LEAVE_FF(fp->fs, (FRESULT)fp->err);
S	if (!(fp->flag & FA_READ))						/* Check access mode */
S		LEAVE_FF(fp->fs, FR_DENIED);
S
S	remain = fp->fsize - fp->fptr;
S	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
S
S	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream becomes busy */
S		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
S		csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
S		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
S			if (!csect) {							/* On the cluster boundary? */
S				clst = (fp->fptr == 0) ?			/* On the top of the file? */
S					fp->sclust : get_fat(fp->fs, fp->clust);
S				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
S				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
S				fp->clust = clst;					/* Update current cluster */
S			}
S		}
S		sect = clust2sect(fp->fs, fp->clust);		/* Get current data sector */
S		if (!sect) ABORT(fp->fs, FR_INT_ERR);
S		sect += csect;
S		if (move_window(fp->fs, sect) != FR_OK)		/* Move sector window */
S			ABORT(fp->fs, FR_DISK_ERR);
S		fp->dsect = sect;
S		rcnt = SS(fp->fs) - (WORD)(fp->fptr % SS(fp->fs));	/* Forward data from sector window */
S		if (rcnt > btf) rcnt = btf;
S		rcnt = (*func)(&fp->fs->win[(WORD)fp->fptr % SS(fp->fs)], rcnt);
S		if (!rcnt) ABORT(fp->fs, FR_INT_ERR);
S	}
S
S	LEAVE_FF(fp->fs, FR_OK);
S}
N#endif /* _USE_FORWARD */
N
N
N
N#if _USE_MKFS && !_FS_READONLY
X#if 1 && !0
N/*-----------------------------------------------------------------------*/
N/* Create file system on the logical drive                               */
N/*-----------------------------------------------------------------------*/
N#define N_ROOTDIR	512		/* Number of root directory entries for FAT12/16 */
N#define N_FATS		1		/* Number of FATs (1 or 2) */
N
N
NFRESULT f_mkfs (
N	const TCHAR* path,	/* Logical drive number */
N	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
N	UINT au				/* Size of allocation unit in unit of byte or sector */
N)
N{
N	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
N	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
N	int vol;
N	BYTE fmt, md, sys, *tbl, pdrv, part;
N	DWORD n_clst, vs, n, wsect;
N	UINT i;
N	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
N	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
N	FATFS *fs;
N	DSTATUS stat;
N#if _USE_TRIM
X#if 0
S	DWORD eb[2];
N#endif
N
N
N	/* Check mounted drive and clear work area */
N	if (sfd > 1) return FR_INVALID_PARAMETER;
N	vol = get_ldnumber(&path);
N	if (vol < 0) return FR_INVALID_DRIVE;
N	fs = FatFs[vol];
N	if (!fs) return FR_NOT_ENABLED;
N	fs->fs_type = 0;
N	pdrv = LD2PD(vol);	/* Physical drive */
X	pdrv = (BYTE)(vol);	 
N	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
X	part = 0;	 
N
N	/* Get disk statics */
N	stat = disk_initialize(pdrv);
N	if (stat & STA_NOINIT) return FR_NOT_READY;
X	if (stat & 0x01) return FR_NOT_READY;
N	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
X	if (stat & 0x04) return FR_WRITE_PROTECTED;
N#if _MAX_SS != _MIN_SS		/* Get disk sector size */
X#if 512 != 512		 
S	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
S		return FR_DISK_ERR;
N#endif
N	if (_MULTI_PARTITION && part) {
X	if (0 && part) {
N		/* Get partition information from partition table in the MBR */
N		if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
N		if (LD_WORD(fs->win + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
X		if ((WORD)(((WORD)*((BYTE*)(fs->win + 510)+1)<<8)|(WORD)*(BYTE*)(fs->win + 510)) != 0xAA55) return FR_MKFS_ABORTED;
N		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
X		tbl = &fs->win[446 + (part - 1) * 16];
N		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
N		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
X		b_vol = (DWORD)(((DWORD)*((BYTE*)(tbl + 8)+3)<<24)|((DWORD)*((BYTE*)(tbl + 8)+2)<<16)|((WORD)*((BYTE*)(tbl + 8)+1)<<8)| *(BYTE*)(tbl + 8));	 
N		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
X		n_vol = (DWORD)(((DWORD)*((BYTE*)(tbl + 12)+3)<<24)|((DWORD)*((BYTE*)(tbl + 12)+2)<<16)|((WORD)*((BYTE*)(tbl + 12)+1)<<8)| *(BYTE*)(tbl + 12));	 
N	} else {
N		/* Create a partition in this function */
N		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
X		if (disk_ioctl(pdrv, 1, &n_vol) != RES_OK || n_vol < 128)
N			return FR_DISK_ERR;
N		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
N		n_vol -= b_vol;				/* Volume size */
N	}
N
N	if (au & (au - 1)) au = 0;
N	if (!au) {						/* AU auto selection */
N		vs = n_vol / (2000 / (SS(fs) / 512));
X		vs = n_vol / (2000 / (((UINT)512) / 512));
N		for (i = 0; vs < vst[i]; i++) ;
N		au = cst[i];
N	}
N	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
X	if (au >= 512) au /= ((UINT)512);	 
N	if (!au) au = 1;
N	if (au > 128) au = 128;
N
N	/* Pre-compute number of clusters and FAT sub-type */
N	n_clst = n_vol / au;
N	fmt = FS_FAT12;
X	fmt = 1;
N	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
X	if (n_clst >= 4086U) fmt = 2;
N	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
X	if (n_clst >= 65526U) fmt = 3;
N
N	/* Determine offset and size of FAT structure */
N	if (fmt == FS_FAT32) {
X	if (fmt == 3) {
N		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
X		n_fat = ((n_clst * 4) + 8 + ((UINT)512) - 1) / ((UINT)512);
N		n_rsv = 32;
N		n_dir = 0;
N	} else {
N		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
X		n_fat = (fmt == 1) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
N		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
X		n_fat = (n_fat + ((UINT)512) - 1) / ((UINT)512);
N		n_rsv = 1;
N		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
X		n_dir = (DWORD)512 * 32 / ((UINT)512);
N	}
N	b_fat = b_vol + n_rsv;				/* FAT area start sector */
N	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
X	b_dir = b_fat + n_fat * 1;		 
N	b_data = b_dir + n_dir;				/* Data area start sector */
N	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
N
N	/* Align data start sector to erase block boundary (for flash memory media) */
N	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
X	if (disk_ioctl(pdrv, 3, &n) != RES_OK || !n || n > 32768) n = 1;
N	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
N	n = (n - b_data) / N_FATS;
X	n = (n - b_data) / 1;
N	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
X	if (fmt == 3) {		 
N		n_rsv += n;
N		b_fat += n;
N	} else {					/* FAT12/16: Expand FAT size */
N		n_fat += n;
N	}
N
N	/* Determine number of clusters and final check of validity of the FAT sub-type */
N	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
X	n_clst = (n_vol - n_rsv - n_fat * 1 - n_dir) / au;
N	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
X	if (   (fmt == 2 && n_clst < 4086U)
N		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
X		|| (fmt == 3 && n_clst < 65526U))
N		return FR_MKFS_ABORTED;
N
N	/* Determine system ID in the partition table */
N	if (fmt == FS_FAT32) {
X	if (fmt == 3) {
N		sys = 0x0C;		/* FAT32X */
N	} else {
N		if (fmt == FS_FAT12 && n_vol < 0x10000) {
X		if (fmt == 1 && n_vol < 0x10000) {
N			sys = 0x01;	/* FAT12(<65536) */
N		} else {
N			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
N		}
N	}
N
N	if (_MULTI_PARTITION && part) {
X	if (0 && part) {
N		/* Update system ID in the partition table */
N		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
X		tbl = &fs->win[446 + (part - 1) * 16];
N		tbl[4] = sys;
N		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
N			return FR_DISK_ERR;
N		md = 0xF8;
N	} else {
N		if (sfd) {	/* No partition table (SFD) */
N			md = 0xF0;
N		} else {	/* Create partition table (FDISK) */
N			mem_set(fs->win, 0, SS(fs));
X			mem_set(fs->win, 0, ((UINT)512));
N			tbl = fs->win + MBR_Table;	/* Create partition table for single partition in the drive */
X			tbl = fs->win + 446;	 
N			tbl[1] = 1;						/* Partition start head */
N			tbl[2] = 1;						/* Partition start sector */
N			tbl[3] = 0;						/* Partition start cylinder */
N			tbl[4] = sys;					/* System type */
N			tbl[5] = 254;					/* Partition end head */
N			n = (b_vol + n_vol) / 63 / 255;
N			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
N			tbl[7] = (BYTE)n;				/* End cylinder */
N			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
X			*(BYTE*)(tbl + 8)=(BYTE)(63); *((BYTE*)(tbl + 8)+1)=(BYTE)((WORD)(63)>>8); *((BYTE*)(tbl + 8)+2)=(BYTE)((DWORD)(63)>>16); *((BYTE*)(tbl + 8)+3)=(BYTE)((DWORD)(63)>>24);			 
N			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
X			*(BYTE*)(tbl + 12)=(BYTE)(n_vol); *((BYTE*)(tbl + 12)+1)=(BYTE)((WORD)(n_vol)>>8); *((BYTE*)(tbl + 12)+2)=(BYTE)((DWORD)(n_vol)>>16); *((BYTE*)(tbl + 12)+3)=(BYTE)((DWORD)(n_vol)>>24);		 
N			ST_WORD(fs->win + BS_55AA, 0xAA55);	/* MBR signature */
X			*(BYTE*)(fs->win + 510)=(BYTE)(0xAA55); *((BYTE*)(fs->win + 510)+1)=(BYTE)((WORD)(0xAA55)>>8);	 
N			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
N				return FR_DISK_ERR;
N			md = 0xF8;
N		}
N	}
N
N	/* Create BPB in the VBR */
N	tbl = fs->win;							/* Clear sector */
N	mem_set(tbl, 0, SS(fs));
X	mem_set(tbl, 0, ((UINT)512));
N	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
N	i = SS(fs);								/* Sector size */
X	i = ((UINT)512);								 
N	ST_WORD(tbl + BPB_BytsPerSec, i);
X	*(BYTE*)(tbl + 11)=(BYTE)(i); *((BYTE*)(tbl + 11)+1)=(BYTE)((WORD)(i)>>8);
N	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
X	tbl[13] = (BYTE)au;			 
N	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
X	*(BYTE*)(tbl + 14)=(BYTE)(n_rsv); *((BYTE*)(tbl + 14)+1)=(BYTE)((WORD)(n_rsv)>>8);	 
N	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
X	tbl[16] = 1;				 
N	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
X	i = (fmt == 3) ? 0 : 512;	 
N	ST_WORD(tbl + BPB_RootEntCnt, i);
X	*(BYTE*)(tbl + 17)=(BYTE)(i); *((BYTE*)(tbl + 17)+1)=(BYTE)((WORD)(i)>>8);
N	if (n_vol < 0x10000) {					/* Number of total sectors */
N		ST_WORD(tbl + BPB_TotSec16, n_vol);
X		*(BYTE*)(tbl + 19)=(BYTE)(n_vol); *((BYTE*)(tbl + 19)+1)=(BYTE)((WORD)(n_vol)>>8);
N	} else {
N		ST_DWORD(tbl + BPB_TotSec32, n_vol);
X		*(BYTE*)(tbl + 32)=(BYTE)(n_vol); *((BYTE*)(tbl + 32)+1)=(BYTE)((WORD)(n_vol)>>8); *((BYTE*)(tbl + 32)+2)=(BYTE)((DWORD)(n_vol)>>16); *((BYTE*)(tbl + 32)+3)=(BYTE)((DWORD)(n_vol)>>24);
N	}
N	tbl[BPB_Media] = md;					/* Media descriptor */
X	tbl[21] = md;					 
N	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
X	*(BYTE*)(tbl + 24)=(BYTE)(63); *((BYTE*)(tbl + 24)+1)=(BYTE)((WORD)(63)>>8);		 
N	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
X	*(BYTE*)(tbl + 26)=(BYTE)(255); *((BYTE*)(tbl + 26)+1)=(BYTE)((WORD)(255)>>8);		 
N	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
X	*(BYTE*)(tbl + 28)=(BYTE)(b_vol); *((BYTE*)(tbl + 28)+1)=(BYTE)((WORD)(b_vol)>>8); *((BYTE*)(tbl + 28)+2)=(BYTE)((DWORD)(b_vol)>>16); *((BYTE*)(tbl + 28)+3)=(BYTE)((DWORD)(b_vol)>>24);		 
N	n = GET_FATTIME();						/* Use current time as VSN */
X	n = get_fattime();						 
N	if (fmt == FS_FAT32) {
X	if (fmt == 3) {
N		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
X		*(BYTE*)(tbl + 67)=(BYTE)(n); *((BYTE*)(tbl + 67)+1)=(BYTE)((WORD)(n)>>8); *((BYTE*)(tbl + 67)+2)=(BYTE)((DWORD)(n)>>16); *((BYTE*)(tbl + 67)+3)=(BYTE)((DWORD)(n)>>24);		 
N		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
X		*(BYTE*)(tbl + 36)=(BYTE)(n_fat); *((BYTE*)(tbl + 36)+1)=(BYTE)((WORD)(n_fat)>>8); *((BYTE*)(tbl + 36)+2)=(BYTE)((DWORD)(n_fat)>>16); *((BYTE*)(tbl + 36)+3)=(BYTE)((DWORD)(n_fat)>>24);	 
N		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
X		*(BYTE*)(tbl + 44)=(BYTE)(2); *((BYTE*)(tbl + 44)+1)=(BYTE)((WORD)(2)>>8); *((BYTE*)(tbl + 44)+2)=(BYTE)((DWORD)(2)>>16); *((BYTE*)(tbl + 44)+3)=(BYTE)((DWORD)(2)>>24);	 
N		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
X		*(BYTE*)(tbl + 48)=(BYTE)(1); *((BYTE*)(tbl + 48)+1)=(BYTE)((WORD)(1)>>8);		 
N		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
X		*(BYTE*)(tbl + 50)=(BYTE)(6); *((BYTE*)(tbl + 50)+1)=(BYTE)((WORD)(6)>>8);	 
N		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
X		tbl[64] = 0x80;			 
N		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
X		tbl[66] = 0x29;			 
N		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
X		mem_cpy(tbl + 71, "NO NAME    " "FAT32   ", 19);	 
N	} else {
N		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
X		*(BYTE*)(tbl + 39)=(BYTE)(n); *((BYTE*)(tbl + 39)+1)=(BYTE)((WORD)(n)>>8); *((BYTE*)(tbl + 39)+2)=(BYTE)((DWORD)(n)>>16); *((BYTE*)(tbl + 39)+3)=(BYTE)((DWORD)(n)>>24);		 
N		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
X		*(BYTE*)(tbl + 22)=(BYTE)(n_fat); *((BYTE*)(tbl + 22)+1)=(BYTE)((WORD)(n_fat)>>8);	 
N		tbl[BS_DrvNum] = 0x80;				/* Drive number */
X		tbl[36] = 0x80;				 
N		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
X		tbl[38] = 0x29;				 
N		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
X		mem_cpy(tbl + 43, "NO NAME    " "FAT     ", 19);	 
N	}
N	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
X	*(BYTE*)(tbl + 510)=(BYTE)(0xAA55); *((BYTE*)(tbl + 510)+1)=(BYTE)((WORD)(0xAA55)>>8);			 
N	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
N		return FR_DISK_ERR;
N	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
X	if (fmt == 3)					 
N		disk_write(pdrv, tbl, b_vol + 6, 1);
N
N	/* Initialize FAT area */
N	wsect = b_fat;
N	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
X	for (i = 0; i < 1; i++) {		 
N		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
X		mem_set(tbl, 0, ((UINT)512));			 
N		n = md;								/* Media descriptor byte */
N		if (fmt != FS_FAT32) {
X		if (fmt != 3) {
N			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
X			n |= (fmt == 1) ? 0x00FFFF00 : 0xFFFFFF00;
N			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
X			*(BYTE*)(tbl + 0)=(BYTE)(n); *((BYTE*)(tbl + 0)+1)=(BYTE)((WORD)(n)>>8); *((BYTE*)(tbl + 0)+2)=(BYTE)((DWORD)(n)>>16); *((BYTE*)(tbl + 0)+3)=(BYTE)((DWORD)(n)>>24);			 
N		} else {
N			n |= 0xFFFFFF00;
N			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
X			*(BYTE*)(tbl + 0)=(BYTE)(n); *((BYTE*)(tbl + 0)+1)=(BYTE)((WORD)(n)>>8); *((BYTE*)(tbl + 0)+2)=(BYTE)((DWORD)(n)>>16); *((BYTE*)(tbl + 0)+3)=(BYTE)((DWORD)(n)>>24);			 
N			ST_DWORD(tbl + 4, 0xFFFFFFFF);
X			*(BYTE*)(tbl + 4)=(BYTE)(0xFFFFFFFF); *((BYTE*)(tbl + 4)+1)=(BYTE)((WORD)(0xFFFFFFFF)>>8); *((BYTE*)(tbl + 4)+2)=(BYTE)((DWORD)(0xFFFFFFFF)>>16); *((BYTE*)(tbl + 4)+3)=(BYTE)((DWORD)(0xFFFFFFFF)>>24);
N			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
X			*(BYTE*)(tbl + 8)=(BYTE)(0x0FFFFFFF); *((BYTE*)(tbl + 8)+1)=(BYTE)((WORD)(0x0FFFFFFF)>>8); *((BYTE*)(tbl + 8)+2)=(BYTE)((DWORD)(0x0FFFFFFF)>>16); *((BYTE*)(tbl + 8)+3)=(BYTE)((DWORD)(0x0FFFFFFF)>>24);	 
N		}
N		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
N			return FR_DISK_ERR;
N		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
X		mem_set(tbl, 0, ((UINT)512));			 
N		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
N			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
N				return FR_DISK_ERR;
N		}
N	}
N
N	/* Initialize root directory */
N	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
X	i = (fmt == 3) ? au : (UINT)n_dir;
N	do {
N		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
N			return FR_DISK_ERR;
N	} while (--i);
N
N#if _USE_TRIM	/* Erase data area if needed */
X#if 0	 
S	{
S		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
S		disk_ioctl(pdrv, CTRL_TRIM, eb);
S	}
N#endif
N
N	/* Create FSINFO if needed */
N	if (fmt == FS_FAT32) {
X	if (fmt == 3) {
N		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
X		*(BYTE*)(tbl + 0)=(BYTE)(0x41615252); *((BYTE*)(tbl + 0)+1)=(BYTE)((WORD)(0x41615252)>>8); *((BYTE*)(tbl + 0)+2)=(BYTE)((DWORD)(0x41615252)>>16); *((BYTE*)(tbl + 0)+3)=(BYTE)((DWORD)(0x41615252)>>24);
N		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
X		*(BYTE*)(tbl + 484)=(BYTE)(0x61417272); *((BYTE*)(tbl + 484)+1)=(BYTE)((WORD)(0x61417272)>>8); *((BYTE*)(tbl + 484)+2)=(BYTE)((DWORD)(0x61417272)>>16); *((BYTE*)(tbl + 484)+3)=(BYTE)((DWORD)(0x61417272)>>24);
N		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
X		*(BYTE*)(tbl + 488)=(BYTE)(n_clst - 1); *((BYTE*)(tbl + 488)+1)=(BYTE)((WORD)(n_clst - 1)>>8); *((BYTE*)(tbl + 488)+2)=(BYTE)((DWORD)(n_clst - 1)>>16); *((BYTE*)(tbl + 488)+3)=(BYTE)((DWORD)(n_clst - 1)>>24);	 
N		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
X		*(BYTE*)(tbl + 492)=(BYTE)(2); *((BYTE*)(tbl + 492)+1)=(BYTE)((WORD)(2)>>8); *((BYTE*)(tbl + 492)+2)=(BYTE)((DWORD)(2)>>16); *((BYTE*)(tbl + 492)+3)=(BYTE)((DWORD)(2)>>24);			 
N		ST_WORD(tbl + BS_55AA, 0xAA55);
X		*(BYTE*)(tbl + 510)=(BYTE)(0xAA55); *((BYTE*)(tbl + 510)+1)=(BYTE)((WORD)(0xAA55)>>8);
N		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
N		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
N	}
N
N	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
X	return (disk_ioctl(pdrv, 0, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
N}
N
N
N
N#if _MULTI_PARTITION
X#if 0
S/*-----------------------------------------------------------------------*/
S/* Create partition table on the physical drive                          */
S/*-----------------------------------------------------------------------*/
S
SFRESULT f_fdisk (
S	BYTE pdrv,			/* Physical drive number */
S	const DWORD szt[],	/* Pointer to the size table for each partitions */
S	void* work			/* Pointer to the working buffer */
S)
S{
S	UINT i, n, sz_cyl, tot_cyl, b_cyl, e_cyl, p_cyl;
S	BYTE s_hd, e_hd, *p, *buf = (BYTE*)work;
S	DSTATUS stat;
S	DWORD sz_disk, sz_part, s_part;
S
S
S	stat = disk_initialize(pdrv);
S	if (stat & STA_NOINIT) return FR_NOT_READY;
S	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
S	if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_disk)) return FR_DISK_ERR;
S
S	/* Determine CHS in the table regardless of the drive geometry */
S	for (n = 16; n < 256 && sz_disk / n / 63 > 1024; n *= 2) ;
S	if (n == 256) n--;
S	e_hd = n - 1;
S	sz_cyl = 63 * n;
S	tot_cyl = sz_disk / sz_cyl;
S
S	/* Create partition table */
S	mem_set(buf, 0, _MAX_SS);
S	p = buf + MBR_Table; b_cyl = 0;
S	for (i = 0; i < 4; i++, p += SZ_PTE) {
S		p_cyl = (szt[i] <= 100U) ? (DWORD)tot_cyl * szt[i] / 100 : szt[i] / sz_cyl;
S		if (!p_cyl) continue;
S		s_part = (DWORD)sz_cyl * b_cyl;
S		sz_part = (DWORD)sz_cyl * p_cyl;
S		if (i == 0) {	/* Exclude first track of cylinder 0 */
S			s_hd = 1;
S			s_part += 63; sz_part -= 63;
S		} else {
S			s_hd = 0;
S		}
S		e_cyl = b_cyl + p_cyl - 1;
S		if (e_cyl >= tot_cyl) return FR_INVALID_PARAMETER;
S
S		/* Set partition table */
S		p[1] = s_hd;						/* Start head */
S		p[2] = (BYTE)((b_cyl >> 2) + 1);	/* Start sector */
S		p[3] = (BYTE)b_cyl;					/* Start cylinder */
S		p[4] = 0x06;						/* System type (temporary setting) */
S		p[5] = e_hd;						/* End head */
S		p[6] = (BYTE)((e_cyl >> 2) + 63);	/* End sector */
S		p[7] = (BYTE)e_cyl;					/* End cylinder */
S		ST_DWORD(p + 8, s_part);			/* Start sector in LBA */
S		ST_DWORD(p + 12, sz_part);			/* Partition size */
S
S		/* Next partition */
S		b_cyl += p_cyl;
S	}
S	ST_WORD(p, 0xAA55);
S
S	/* Write it to the MBR */
S	return (disk_write(pdrv, buf, 0, 1) != RES_OK || disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) ? FR_DISK_ERR : FR_OK;
S}
S
S
N#endif /* _MULTI_PARTITION */
N#endif /* _USE_MKFS && !_FS_READONLY */
N
N
N
N
N#if _USE_STRFUNC
X#if 0
S/*-----------------------------------------------------------------------*/
S/* Get a string from the file                                            */
S/*-----------------------------------------------------------------------*/
S
STCHAR* f_gets (
S	TCHAR* buff,	/* Pointer to the string buffer to read */
S	int len,		/* Size of string buffer (characters) */
S	FIL* fp			/* Pointer to the file object */
S)
S{
S	int n = 0;
S	TCHAR c, *p = buff;
S	BYTE s[2];
S	UINT rc;
S
S
S	while (n < len - 1) {	/* Read characters until buffer gets filled */
S#if _USE_LFN && _LFN_UNICODE
S#if _STRF_ENCODE == 3		/* Read a character in UTF-8 */
S		f_read(fp, s, 1, &rc);
S		if (rc != 1) break;
S		c = s[0];
S		if (c >= 0x80) {
S			if (c < 0xC0) continue;	/* Skip stray trailer */
S			if (c < 0xE0) {			/* Two-byte sequence */
S				f_read(fp, s, 1, &rc);
S				if (rc != 1) break;
S				c = (c & 0x1F) << 6 | (s[0] & 0x3F);
S				if (c < 0x80) c = '?';
S			} else {
S				if (c < 0xF0) {		/* Three-byte sequence */
S					f_read(fp, s, 2, &rc);
S					if (rc != 2) break;
S					c = c << 12 | (s[0] & 0x3F) << 6 | (s[1] & 0x3F);
S					if (c < 0x800) c = '?';
S				} else {			/* Reject four-byte sequence */
S					c = '?';
S				}
S			}
S		}
S#elif _STRF_ENCODE == 2		/* Read a character in UTF-16BE */
S		f_read(fp, s, 2, &rc);
S		if (rc != 2) break;
S		c = s[1] + (s[0] << 8);
S#elif _STRF_ENCODE == 1		/* Read a character in UTF-16LE */
S		f_read(fp, s, 2, &rc);
S		if (rc != 2) break;
S		c = s[0] + (s[1] << 8);
S#else						/* Read a character in ANSI/OEM */
S		f_read(fp, s, 1, &rc);
S		if (rc != 1) break;
S		c = s[0];
S		if (IsDBCS1(c)) {
S			f_read(fp, s, 1, &rc);
S			if (rc != 1) break;
S			c = (c << 8) + s[0];
S		}
S		c = ff_convert(c, 1);	/* OEM -> Unicode */
S		if (!c) c = '?';
S#endif
S#else						/* Read a character without conversion */
S		f_read(fp, s, 1, &rc);
S		if (rc != 1) break;
S		c = s[0];
S#endif
S		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
S		*p++ = c;
S		n++;
S		if (c == '\n') break;		/* Break on EOL */
S	}
S	*p = 0;
S	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
S}
S
S
S
S
S#if !_FS_READONLY
S#include <stdarg.h>
S/*-----------------------------------------------------------------------*/
S/* Put a character to the file                                           */
S/*-----------------------------------------------------------------------*/
S
Stypedef struct {
S	FIL* fp;
S	int idx, nchr;
S	BYTE buf[64];
S} putbuff;
S
S
Sstatic
Svoid putc_bfd (
S	putbuff* pb,
S	TCHAR c
S)
S{
S	UINT bw;
S	int i;
S
S
S	if (_USE_STRFUNC == 2 && c == '\n')	 /* LF -> CRLF conversion */
S		putc_bfd(pb, '\r');
S
S	i = pb->idx;	/* Buffer write index (-1:error) */
S	if (i < 0) return;
S
S#if _USE_LFN && _LFN_UNICODE
S#if _STRF_ENCODE == 3			/* Write a character in UTF-8 */
S	if (c < 0x80) {				/* 7-bit */
S		pb->buf[i++] = (BYTE)c;
S	} else {
S		if (c < 0x800) {		/* 11-bit */
S			pb->buf[i++] = (BYTE)(0xC0 | c >> 6);
S		} else {				/* 16-bit */
S			pb->buf[i++] = (BYTE)(0xE0 | c >> 12);
S			pb->buf[i++] = (BYTE)(0x80 | (c >> 6 & 0x3F));
S		}
S		pb->buf[i++] = (BYTE)(0x80 | (c & 0x3F));
S	}
S#elif _STRF_ENCODE == 2			/* Write a character in UTF-16BE */
S	pb->buf[i++] = (BYTE)(c >> 8);
S	pb->buf[i++] = (BYTE)c;
S#elif _STRF_ENCODE == 1			/* Write a character in UTF-16LE */
S	pb->buf[i++] = (BYTE)c;
S	pb->buf[i++] = (BYTE)(c >> 8);
S#else							/* Write a character in ANSI/OEM */
S	c = ff_convert(c, 0);	/* Unicode -> OEM */
S	if (!c) c = '?';
S	if (c >= 0x100)
S		pb->buf[i++] = (BYTE)(c >> 8);
S	pb->buf[i++] = (BYTE)c;
S#endif
S#else							/* Write a character without conversion */
S	pb->buf[i++] = (BYTE)c;
S#endif
S
S	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
S		f_write(pb->fp, pb->buf, (UINT)i, &bw);
S		i = (bw == (UINT)i) ? 0 : -1;
S	}
S	pb->idx = i;
S	pb->nchr++;
S}
S
S
S
Sint f_putc (
S	TCHAR c,	/* A character to be output */
S	FIL* fp		/* Pointer to the file object */
S)
S{
S	putbuff pb;
S	UINT nw;
S
S
S	pb.fp = fp;			/* Initialize output buffer */
S	pb.nchr = pb.idx = 0;
S
S	putc_bfd(&pb, c);	/* Put a character */
S
S	if (   pb.idx >= 0	/* Flush buffered characters to the file */
S		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
S		&& (UINT)pb.idx == nw) return pb.nchr;
S	return EOF;
S}
S
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Put a string to the file                                              */
S/*-----------------------------------------------------------------------*/
S
Sint f_puts (
S	const TCHAR* str,	/* Pointer to the string to be output */
S	FIL* fp				/* Pointer to the file object */
S)
S{
S	putbuff pb;
S	UINT nw;
S
S
S	pb.fp = fp;				/* Initialize output buffer */
S	pb.nchr = pb.idx = 0;
S
S	while (*str)			/* Put the string */
S		putc_bfd(&pb, *str++);
S
S	if (   pb.idx >= 0		/* Flush buffered characters to the file */
S		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
S		&& (UINT)pb.idx == nw) return pb.nchr;
S	return EOF;
S}
S
S
S
S
S/*-----------------------------------------------------------------------*/
S/* Put a formatted string to the file                                    */
S/*-----------------------------------------------------------------------*/
S
Sint f_printf (
S	FIL* fp,			/* Pointer to the file object */
S	const TCHAR* fmt,	/* Pointer to the format string */
S	...					/* Optional arguments... */
S)
S{
S	va_list arp;
S	BYTE f, r;
S	UINT nw, i, j, w;
S	DWORD v;
S	TCHAR c, d, s[16], *p;
S	putbuff pb;
S
S
S	pb.fp = fp;				/* Initialize output buffer */
S	pb.nchr = pb.idx = 0;
S
S	va_start(arp, fmt);
S
S	for (;;) {
S		c = *fmt++;
S		if (c == 0) break;			/* End of string */
S		if (c != '%') {				/* Non escape character */
S			putc_bfd(&pb, c);
S			continue;
S		}
S		w = f = 0;
S		c = *fmt++;
S		if (c == '0') {				/* Flag: '0' padding */
S			f = 1; c = *fmt++;
S		} else {
S			if (c == '-') {			/* Flag: left justified */
S				f = 2; c = *fmt++;
S			}
S		}
S		while (IsDigit(c)) {		/* Precision */
S			w = w * 10 + c - '0';
S			c = *fmt++;
S		}
S		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
S			f |= 4; c = *fmt++;
S		}
S		if (!c) break;
S		d = c;
S		if (IsLower(d)) d -= 0x20;
S		switch (d) {				/* Type is... */
S		case 'S' :					/* String */
S			p = va_arg(arp, TCHAR*);
S			for (j = 0; p[j]; j++) ;
S			if (!(f & 2)) {
S				while (j++ < w) putc_bfd(&pb, ' ');
S			}
S			while (*p) putc_bfd(&pb, *p++);
S			while (j++ < w) putc_bfd(&pb, ' ');
S			continue;
S		case 'C' :					/* Character */
S			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
S		case 'B' :					/* Binary */
S			r = 2; break;
S		case 'O' :					/* Octal */
S			r = 8; break;
S		case 'D' :					/* Signed decimal */
S		case 'U' :					/* Unsigned decimal */
S			r = 10; break;
S		case 'X' :					/* Hexdecimal */
S			r = 16; break;
S		default:					/* Unknown type (pass-through) */
S			putc_bfd(&pb, c); continue;
S		}
S
S		/* Get an argument and put it in numeral */
S		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
S		if (d == 'D' && (v & 0x80000000)) {
S			v = 0 - v;
S			f |= 8;
S		}
S		i = 0;
S		do {
S			d = (TCHAR)(v % r); v /= r;
S			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
S			s[i++] = d + '0';
S		} while (v && i < sizeof s / sizeof s[0]);
S		if (f & 8) s[i++] = '-';
S		j = i; d = (f & 1) ? '0' : ' ';
S		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
S		do putc_bfd(&pb, s[--i]); while (i);
S		while (j++ < w) putc_bfd(&pb, d);
S	}
S
S	va_end(arp);
S
S	if (   pb.idx >= 0		/* Flush buffered characters to the file */
S		&& f_write(pb.fp, pb.buf, (UINT)pb.idx, &nw) == FR_OK
S		&& (UINT)pb.idx == nw) return pb.nchr;
S	return EOF;
S}
S
S#endif /* !_FS_READONLY */
N#endif /* _USE_STRFUNC */
