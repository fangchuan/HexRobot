; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_flag.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_flag.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_flag.crf ..\..\uCOS-III\uCOS-III\Source\os_flag.c]
                          THUMB

                          AREA ||i.OSFlagCreate||, CODE, READONLY, ALIGN=2

                  OSFlagCreate PROC
;;;69     
;;;70     void  OSFlagCreate (OS_FLAG_GRP  *p_grp,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;71                         CPU_CHAR     *p_name,
;;;72                         OS_FLAGS      flags,
;;;73                         OS_ERR       *p_err)
;;;74     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;75         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;76     
;;;77     
;;;78     
;;;79     #ifdef OS_SAFETY_CRITICAL
;;;80         if (p_err == (OS_ERR *)0) {
;;;81             OS_SAFETY_CRITICAL_EXCEPTION();
;;;82             return;
;;;83         }
;;;84     #endif
;;;85     
;;;86     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;87         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;88            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;89             return;
;;;90         }
;;;91     #endif
;;;92     
;;;93     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;94         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
000010  4818              LDR      r0,|L1.116|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  2800              CMP      r0,#0
000016  dd04              BLE      |L1.34|
;;;95            *p_err = OS_ERR_CREATE_ISR;                          /* ... can't CREATE from an ISR                           */
000018  f64260e1          MOV      r0,#0x2ee1
00001c  8028              STRH     r0,[r5,#0]
                  |L1.30|
;;;96             return;
;;;97         }
;;;98     #endif
;;;99     
;;;100    #if OS_CFG_ARG_CHK_EN > 0u
;;;101        if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
;;;102           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;103            return;
;;;104        }
;;;105    #endif
;;;106    
;;;107        OS_CRITICAL_ENTER();
;;;108        p_grp->Type    = OS_OBJ_TYPE_FLAG;                      /* Set to event flag group type                           */
;;;109        p_grp->NamePtr = p_name;
;;;110        p_grp->Flags   = flags;                                 /* Set to desired initial value                           */
;;;111        p_grp->TS      = (CPU_TS)0;
;;;112        OS_PendListInit(&p_grp->PendList);
;;;113    
;;;114    #if OS_CFG_DBG_EN > 0u
;;;115        OS_FlagDbgListAdd(p_grp);
;;;116    #endif
;;;117        OSFlagQty++;
;;;118    
;;;119        OS_CRITICAL_EXIT_NO_SCHED();
;;;120       *p_err = OS_ERR_NONE;
;;;121    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.34|
000022  b91c              CBNZ     r4,|L1.44|
000024  f64550c3          MOV      r0,#0x5dc3            ;102
000028  8028              STRH     r0,[r5,#0]            ;102
00002a  e7f8              B        |L1.30|
                  |L1.44|
00002c  bf00              NOP                            ;107
00002e  bf00              NOP                            ;107
000030  f7fffffe          BL       CPU_SR_Save
000034  4680              MOV      r8,r0                 ;107
000036  bf00              NOP                            ;107
000038  bf00              NOP                            ;107
00003a  480f              LDR      r0,|L1.120|
00003c  6020              STR      r0,[r4,#0]            ;108
00003e  6067              STR      r7,[r4,#4]            ;109
000040  6226              STR      r6,[r4,#0x20]         ;110
000042  2000              MOVS     r0,#0                 ;111
000044  6260              STR      r0,[r4,#0x24]         ;111
000046  f1040008          ADD      r0,r4,#8              ;112
00004a  f7fffffe          BL       OS_PendListInit
00004e  4620              MOV      r0,r4                 ;115
000050  f7fffffe          BL       OS_FlagDbgListAdd
000054  4809              LDR      r0,|L1.124|
000056  8800              LDRH     r0,[r0,#0]            ;117  ; OSFlagQty
000058  1c40              ADDS     r0,r0,#1              ;117
00005a  4908              LDR      r1,|L1.124|
00005c  8008              STRH     r0,[r1,#0]            ;117
00005e  bf00              NOP                            ;119
000060  bf00              NOP                            ;119
000062  4640              MOV      r0,r8                 ;119
000064  f7fffffe          BL       CPU_SR_Restore
000068  bf00              NOP                            ;119
00006a  bf00              NOP                            ;119
00006c  2000              MOVS     r0,#0                 ;120
00006e  8028              STRH     r0,[r5,#0]            ;120
000070  bf00              NOP      
000072  e7d4              B        |L1.30|
;;;122    
                          ENDP

                  |L1.116|
                          DCD      OSIntNestingCtr
                  |L1.120|
                          DCD      0x47414c46
                  |L1.124|
                          DCD      OSFlagQty

                          AREA ||i.OSFlagDel||, CODE, READONLY, ALIGN=2

                  OSFlagDel PROC
;;;155    #if OS_CFG_FLAG_DEL_EN > 0u
;;;156    OS_OBJ_QTY  OSFlagDel (OS_FLAG_GRP  *p_grp,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;157                           OS_OPT        opt,
;;;158                           OS_ERR       *p_err)
;;;159    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;160        OS_OBJ_QTY        cnt;
;;;161        OS_OBJ_QTY        nbr_tasks;
;;;162        OS_PEND_DATA     *p_pend_data;
;;;163        OS_PEND_LIST     *p_pend_list;
;;;164        OS_TCB           *p_tcb;
;;;165        CPU_TS            ts;
;;;166        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;167    
;;;168    
;;;169    
;;;170    #ifdef OS_SAFETY_CRITICAL
;;;171        if (p_err == (OS_ERR *)0) {
;;;172            OS_SAFETY_CRITICAL_EXCEPTION();
;;;173            return ((OS_OBJ_QTY)0);
;;;174        }
;;;175    #endif
;;;176    
;;;177    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;178        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
00000e  4849              LDR      r0,|L2.308|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L2.34|
;;;179           *p_err = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR                           */
000016  f24320c9          MOV      r0,#0x32c9
00001a  8020              STRH     r0,[r4,#0]
;;;180            return ((OS_OBJ_QTY)0);
00001c  2000              MOVS     r0,#0
                  |L2.30|
;;;181        }
;;;182    #endif
;;;183    
;;;184    #if OS_CFG_ARG_CHK_EN > 0u
;;;185        if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
;;;186           *p_err  = OS_ERR_OBJ_PTR_NULL;
;;;187            return ((OS_OBJ_QTY)0);
;;;188        }
;;;189        switch (opt) {                                          /* Validate 'opt'                                         */
;;;190            case OS_OPT_DEL_NO_PEND:
;;;191            case OS_OPT_DEL_ALWAYS:
;;;192                 break;
;;;193    
;;;194            default:
;;;195                *p_err = OS_ERR_OPT_INVALID;
;;;196                 return ((OS_OBJ_QTY)0);
;;;197        }
;;;198    #endif
;;;199    
;;;200    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;201        if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Validate event group object                            */
;;;202           *p_err = OS_ERR_OBJ_TYPE;
;;;203            return ((OS_OBJ_QTY)0);
;;;204        }
;;;205    #endif
;;;206        OS_CRITICAL_ENTER();
;;;207        p_pend_list = &p_grp->PendList;
;;;208        cnt         = p_pend_list->NbrEntries;
;;;209        nbr_tasks   = cnt;
;;;210        switch (opt) {
;;;211            case OS_OPT_DEL_NO_PEND:                            /* Delete group if no task waiting                        */
;;;212                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;213    #if OS_CFG_DBG_EN > 0u
;;;214                     OS_FlagDbgListRemove(p_grp);
;;;215    #endif
;;;216                     OSFlagQty--;
;;;217                     OS_FlagClr(p_grp);
;;;218    
;;;219                     OS_CRITICAL_EXIT();
;;;220                    *p_err = OS_ERR_NONE;
;;;221                 } else {
;;;222                     OS_CRITICAL_EXIT();
;;;223                    *p_err = OS_ERR_TASK_WAITING;
;;;224                 }
;;;225                 break;
;;;226    
;;;227            case OS_OPT_DEL_ALWAYS:                             /* Always delete the event flag group                     */
;;;228                 ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
;;;229                 while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
;;;230                     p_pend_data = p_pend_list->HeadPtr;
;;;231                     p_tcb       = p_pend_data->TCBPtr;
;;;232                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_grp),
;;;233                                   p_tcb,
;;;234                                   ts);
;;;235                     cnt--;
;;;236                 }
;;;237    #if OS_CFG_DBG_EN > 0u
;;;238                 OS_FlagDbgListRemove(p_grp);
;;;239    #endif
;;;240                 OSFlagQty--;
;;;241                 OS_FlagClr(p_grp);
;;;242                 OS_CRITICAL_EXIT_NO_SCHED();
;;;243                 OSSched();                                     /* Find highest priority task ready to run                */
;;;244                *p_err = OS_ERR_NONE;
;;;245                 break;
;;;246    
;;;247            default:
;;;248                 OS_CRITICAL_EXIT();
;;;249                *p_err = OS_ERR_OPT_INVALID;
;;;250                 break;
;;;251        }
;;;252        return (nbr_tasks);
;;;253    }
00001e  e8bd9ffc          POP      {r2-r12,pc}
                  |L2.34|
000022  b925              CBNZ     r5,|L2.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;186
000028  8020              STRH     r0,[r4,#0]            ;186
00002a  2000              MOVS     r0,#0                 ;187
00002c  e7f7              B        |L2.30|
                  |L2.46|
00002e  f1b80f00          CMP      r8,#0                 ;189
000032  d003              BEQ      |L2.60|
000034  f1b80f01          CMP      r8,#1                 ;189
000038  d102              BNE      |L2.64|
00003a  e000              B        |L2.62|
                  |L2.60|
00003c  bf00              NOP                            ;191
                  |L2.62|
00003e  e004              B        |L2.74|
                  |L2.64|
000040  f6456025          MOV      r0,#0x5e25            ;195
000044  8020              STRH     r0,[r4,#0]            ;195
000046  2000              MOVS     r0,#0                 ;196
000048  e7e9              B        |L2.30|
                  |L2.74|
00004a  bf00              NOP                            ;192
00004c  493a              LDR      r1,|L2.312|
00004e  6828              LDR      r0,[r5,#0]            ;201
000050  4288              CMP      r0,r1                 ;201
000052  d004              BEQ      |L2.94|
000054  f64550c4          MOV      r0,#0x5dc4            ;202
000058  8020              STRH     r0,[r4,#0]            ;202
00005a  2000              MOVS     r0,#0                 ;203
00005c  e7df              B        |L2.30|
                  |L2.94|
00005e  bf00              NOP                            ;206
000060  bf00              NOP                            ;206
000062  f7fffffe          BL       CPU_SR_Save
000066  9000              STR      r0,[sp,#0]            ;206
000068  bf00              NOP                            ;206
00006a  bf00              NOP                            ;206
00006c  f1050908          ADD      r9,r5,#8              ;207
000070  f8b96008          LDRH     r6,[r9,#8]            ;208
000074  4637              MOV      r7,r6                 ;209
000076  f1b80f00          CMP      r8,#0                 ;210
00007a  d003              BEQ      |L2.132|
00007c  f1b80f01          CMP      r8,#1                 ;210
000080  d149              BNE      |L2.278|
000082  e020              B        |L2.198|
                  |L2.132|
000084  b9a7              CBNZ     r7,|L2.176|
000086  4628              MOV      r0,r5                 ;214
000088  f7fffffe          BL       OS_FlagDbgListRemove
00008c  482b              LDR      r0,|L2.316|
00008e  8800              LDRH     r0,[r0,#0]            ;216  ; OSFlagQty
000090  1e40              SUBS     r0,r0,#1              ;216
000092  492a              LDR      r1,|L2.316|
000094  8008              STRH     r0,[r1,#0]            ;216
000096  4628              MOV      r0,r5                 ;217
000098  f7fffffe          BL       OS_FlagClr
00009c  bf00              NOP                            ;219
00009e  bf00              NOP                            ;219
0000a0  9800              LDR      r0,[sp,#0]            ;219
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;219
0000a8  bf00              NOP                            ;219
0000aa  2000              MOVS     r0,#0                 ;220
0000ac  8020              STRH     r0,[r4,#0]            ;220
0000ae  e009              B        |L2.196|
                  |L2.176|
0000b0  bf00              NOP                            ;222
0000b2  bf00              NOP                            ;222
0000b4  9800              LDR      r0,[sp,#0]            ;222
0000b6  f7fffffe          BL       CPU_SR_Restore
0000ba  bf00              NOP                            ;222
0000bc  bf00              NOP                            ;222
0000be  f247105f          MOV      r0,#0x715f            ;223
0000c2  8020              STRH     r0,[r4,#0]            ;223
                  |L2.196|
0000c4  e032              B        |L2.300|
                  |L2.198|
0000c6  f7fffffe          BL       CPU_TS_TmrRd
0000ca  9001              STR      r0,[sp,#4]            ;228
0000cc  e00a              B        |L2.228|
                  |L2.206|
0000ce  f8d9a000          LDR      r10,[r9,#0]           ;230
0000d2  f8dab008          LDR      r11,[r10,#8]          ;231
0000d6  4659              MOV      r1,r11                ;232
0000d8  4628              MOV      r0,r5                 ;232
0000da  9a01              LDR      r2,[sp,#4]            ;232
0000dc  f7fffffe          BL       OS_PendObjDel
0000e0  1e70              SUBS     r0,r6,#1              ;235
0000e2  b286              UXTH     r6,r0                 ;235
                  |L2.228|
0000e4  2e00              CMP      r6,#0                 ;229
0000e6  d1f2              BNE      |L2.206|
0000e8  4628              MOV      r0,r5                 ;238
0000ea  f7fffffe          BL       OS_FlagDbgListRemove
0000ee  4813              LDR      r0,|L2.316|
0000f0  8800              LDRH     r0,[r0,#0]            ;240  ; OSFlagQty
0000f2  1e40              SUBS     r0,r0,#1              ;240
0000f4  4911              LDR      r1,|L2.316|
0000f6  8008              STRH     r0,[r1,#0]            ;240
0000f8  4628              MOV      r0,r5                 ;241
0000fa  f7fffffe          BL       OS_FlagClr
0000fe  bf00              NOP                            ;242
000100  bf00              NOP                            ;242
000102  9800              LDR      r0,[sp,#0]            ;242
000104  f7fffffe          BL       CPU_SR_Restore
000108  bf00              NOP                            ;242
00010a  bf00              NOP                            ;242
00010c  f7fffffe          BL       OSSched
000110  2000              MOVS     r0,#0                 ;244
000112  8020              STRH     r0,[r4,#0]            ;244
000114  e00a              B        |L2.300|
                  |L2.278|
000116  bf00              NOP                            ;248
000118  bf00              NOP                            ;248
00011a  9800              LDR      r0,[sp,#0]            ;248
00011c  f7fffffe          BL       CPU_SR_Restore
000120  bf00              NOP                            ;248
000122  bf00              NOP                            ;248
000124  f6456025          MOV      r0,#0x5e25            ;249
000128  8020              STRH     r0,[r4,#0]            ;249
00012a  bf00              NOP                            ;250
                  |L2.300|
00012c  bf00              NOP                            ;225
00012e  4638              MOV      r0,r7                 ;252
000130  e775              B        |L2.30|
;;;254    #endif
                          ENDP

000132  0000              DCW      0x0000
                  |L2.308|
                          DCD      OSIntNestingCtr
                  |L2.312|
                          DCD      0x47414c46
                  |L2.316|
                          DCD      OSFlagQty

                          AREA ||i.OSFlagPend||, CODE, READONLY, ALIGN=2

                  OSFlagPend PROC
;;;314    
;;;315    OS_FLAGS  OSFlagPend (OS_FLAG_GRP  *p_grp,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;316                          OS_FLAGS      flags,
;;;317                          OS_TICK       timeout,
;;;318                          OS_OPT        opt,
;;;319                          CPU_TS       *p_ts,
;;;320                          OS_ERR       *p_err)
;;;321    {
000004  b08b              SUB      sp,sp,#0x2c
000006  4605              MOV      r5,r0
000008  4688              MOV      r8,r1
00000a  4693              MOV      r11,r2
00000c  4699              MOV      r9,r3
00000e  e9dd7414          LDRD     r7,r4,[sp,#0x50]
;;;322        CPU_BOOLEAN   consume;
;;;323        OS_FLAGS      flags_rdy;
;;;324        OS_OPT        mode;
;;;325        OS_PEND_DATA  pend_data;
;;;326        CPU_SR_ALLOC();
000012  2000              MOVS     r0,#0
000014  9001              STR      r0,[sp,#4]
;;;327    
;;;328    
;;;329    
;;;330    #ifdef OS_SAFETY_CRITICAL
;;;331        if (p_err == (OS_ERR *)0) {
;;;332            OS_SAFETY_CRITICAL_EXCEPTION();
;;;333            return ((OS_FLAGS)0);
;;;334        }
;;;335    #endif
;;;336    
;;;337    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;338        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
000016  48f7              LDR      r0,|L3.1012|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00001a  2800              CMP      r0,#0
00001c  dd06              BLE      |L3.44|
;;;339           *p_err = OS_ERR_PEND_ISR;                            /* ... can't PEND from an ISR                             */
00001e  f24610ae          MOV      r0,#0x61ae
000022  8020              STRH     r0,[r4,#0]
;;;340            return ((OS_FLAGS)0);
000024  2000              MOVS     r0,#0
                  |L3.38|
;;;341        }
;;;342    #endif
;;;343    
;;;344    #if OS_CFG_ARG_CHK_EN > 0u
;;;345        if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
;;;346           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;347            return ((OS_FLAGS)0);
;;;348        }
;;;349        switch (opt) {                                          /* Validate 'opt'                                         */
;;;350            case OS_OPT_PEND_FLAG_CLR_ALL:
;;;351            case OS_OPT_PEND_FLAG_CLR_ANY:
;;;352            case OS_OPT_PEND_FLAG_SET_ALL:
;;;353            case OS_OPT_PEND_FLAG_SET_ANY:
;;;354            case OS_OPT_PEND_FLAG_CLR_ALL | OS_OPT_PEND_FLAG_CONSUME:
;;;355            case OS_OPT_PEND_FLAG_CLR_ANY | OS_OPT_PEND_FLAG_CONSUME:
;;;356            case OS_OPT_PEND_FLAG_SET_ALL | OS_OPT_PEND_FLAG_CONSUME:
;;;357            case OS_OPT_PEND_FLAG_SET_ANY | OS_OPT_PEND_FLAG_CONSUME:
;;;358            case OS_OPT_PEND_FLAG_CLR_ALL | OS_OPT_PEND_NON_BLOCKING:
;;;359            case OS_OPT_PEND_FLAG_CLR_ANY | OS_OPT_PEND_NON_BLOCKING:
;;;360            case OS_OPT_PEND_FLAG_SET_ALL | OS_OPT_PEND_NON_BLOCKING:
;;;361            case OS_OPT_PEND_FLAG_SET_ANY | OS_OPT_PEND_NON_BLOCKING:
;;;362            case OS_OPT_PEND_FLAG_CLR_ALL | OS_OPT_PEND_FLAG_CONSUME | OS_OPT_PEND_NON_BLOCKING:
;;;363            case OS_OPT_PEND_FLAG_CLR_ANY | OS_OPT_PEND_FLAG_CONSUME | OS_OPT_PEND_NON_BLOCKING:
;;;364            case OS_OPT_PEND_FLAG_SET_ALL | OS_OPT_PEND_FLAG_CONSUME | OS_OPT_PEND_NON_BLOCKING:
;;;365            case OS_OPT_PEND_FLAG_SET_ANY | OS_OPT_PEND_FLAG_CONSUME | OS_OPT_PEND_NON_BLOCKING:
;;;366                 break;
;;;367    
;;;368            default:
;;;369                *p_err = OS_ERR_OPT_INVALID;
;;;370                 return ((OS_OBJ_QTY)0);
;;;371        }
;;;372    #endif
;;;373    
;;;374    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;375        if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Validate that we are pointing at an event flag         */
;;;376           *p_err = OS_ERR_OBJ_TYPE;
;;;377            return ((OS_FLAGS)0);
;;;378        }
;;;379    #endif
;;;380    
;;;381        if ((opt & OS_OPT_PEND_FLAG_CONSUME) != (OS_OPT)0) {    /* See if we need to consume the flags                    */
;;;382            consume = DEF_TRUE;
;;;383        } else {
;;;384            consume = DEF_FALSE;
;;;385        }
;;;386    
;;;387        if (p_ts != (CPU_TS *)0) {
;;;388           *p_ts = (CPU_TS)0;                                   /* Initialize the returned timestamp                      */
;;;389        }
;;;390    
;;;391        mode = opt & OS_OPT_PEND_FLAG_MASK;
;;;392        CPU_CRITICAL_ENTER();
;;;393        switch (mode) {
;;;394            case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all required flags are set                      */
;;;395                 flags_rdy = (OS_FLAGS)(p_grp->Flags & flags);  /* Extract only the bits we want                          */
;;;396                 if (flags_rdy == flags) {                      /* Must match ALL the bits that we want                   */
;;;397                     if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
;;;398                         p_grp->Flags &= ~flags_rdy;            /* Clear ONLY the flags that we wanted                    */
;;;399                     }
;;;400                     OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
;;;401                     if (p_ts != (CPU_TS *)0) {
;;;402                        *p_ts  = p_grp->TS;
;;;403                     }
;;;404                     CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
;;;405                    *p_err = OS_ERR_NONE;
;;;406                     return (flags_rdy);
;;;407                 } else {                                       /* Block task until events occur or timeout               */
;;;408                     if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
;;;409                         CPU_CRITICAL_EXIT();
;;;410                        *p_err = OS_ERR_PEND_WOULD_BLOCK;       /* Specified non-blocking so task would block             */
;;;411                         return ((OS_FLAGS)0);
;;;412                     } else {                                   /* Specified blocking so check is scheduler is locked     */
;;;413                         if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
;;;414                             CPU_CRITICAL_EXIT();
;;;415                            *p_err = OS_ERR_SCHED_LOCKED;                 /* ... can't PEND when locked                   */
;;;416                             return ((OS_FLAGS)0);
;;;417                         }
;;;418                     }
;;;419                                                                /* Lock the scheduler/re-enable interrupts                */
;;;420                     OS_CRITICAL_ENTER_CPU_EXIT();              
;;;421                     OS_FlagBlock(&pend_data,
;;;422                                  p_grp,
;;;423                                  flags,
;;;424                                  opt,
;;;425                                  timeout);
;;;426                     OS_CRITICAL_EXIT_NO_SCHED();
;;;427                 }
;;;428                 break;
;;;429    
;;;430            case OS_OPT_PEND_FLAG_SET_ANY:
;;;431                 flags_rdy = (OS_FLAGS)(p_grp->Flags & flags);  /* Extract only the bits we want                          */
;;;432                 if (flags_rdy != (OS_FLAGS)0) {                /* See if any flag set                                    */
;;;433                     if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
;;;434                         p_grp->Flags &= ~flags_rdy;            /* Clear ONLY the flags that we got                       */
;;;435                     }
;;;436                     OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
;;;437                     if (p_ts != (CPU_TS *)0) {
;;;438                        *p_ts  = p_grp->TS;
;;;439                     }
;;;440                     CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
;;;441                    *p_err = OS_ERR_NONE;
;;;442                     return (flags_rdy);
;;;443                 } else {                                       /* Block task until events occur or timeout               */
;;;444                     if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
;;;445                         CPU_CRITICAL_EXIT();
;;;446                        *p_err = OS_ERR_PEND_WOULD_BLOCK;       /* Specified non-blocking so task would block             */
;;;447                         return ((OS_FLAGS)0);
;;;448                     } else {                                   /* Specified blocking so check is scheduler is locked     */
;;;449                         if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
;;;450                             CPU_CRITICAL_EXIT();
;;;451                            *p_err = OS_ERR_SCHED_LOCKED;                 /* ... can't PEND when locked                   */
;;;452                             return ((OS_FLAGS)0);
;;;453                         }
;;;454                     }
;;;455                                                                /* Lock the scheduler/re-enable interrupts                */
;;;456                     OS_CRITICAL_ENTER_CPU_EXIT();              
;;;457                     OS_FlagBlock(&pend_data,
;;;458                                  p_grp,
;;;459                                  flags,
;;;460                                  opt,
;;;461                                  timeout);
;;;462                     OS_CRITICAL_EXIT_NO_SCHED();
;;;463                 }
;;;464                 break;
;;;465    
;;;466    #if OS_CFG_FLAG_MODE_CLR_EN > 0u
;;;467            case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all required flags are cleared                  */
;;;468                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags); /* Extract only the bits we want                          */
;;;469                 if (flags_rdy == flags) {                      /* Must match ALL the bits that we want                   */
;;;470                     if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
;;;471                         p_grp->Flags |= flags_rdy;             /* Set ONLY the flags that we wanted                      */
;;;472                     }
;;;473                     OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
;;;474                     if (p_ts != (CPU_TS *)0) {
;;;475                        *p_ts  = p_grp->TS;
;;;476                     }
;;;477                     CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
;;;478                    *p_err = OS_ERR_NONE;
;;;479                     return (flags_rdy);
;;;480                 } else {                                       /* Block task until events occur or timeout               */
;;;481                     if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
;;;482                         CPU_CRITICAL_EXIT();
;;;483                        *p_err = OS_ERR_PEND_WOULD_BLOCK;       /* Specified non-blocking so task would block             */
;;;484                         return ((OS_FLAGS)0);
;;;485                     } else {                                   /* Specified blocking so check is scheduler is locked     */
;;;486                         if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
;;;487                             CPU_CRITICAL_EXIT();
;;;488                            *p_err = OS_ERR_SCHED_LOCKED;                 /* ... can't PEND when locked                   */
;;;489                             return ((OS_FLAGS)0);
;;;490                         }
;;;491                     }
;;;492                                                                
;;;493                     OS_CRITICAL_ENTER_CPU_EXIT();              /* Lock the scheduler/re-enable interrupts                */
;;;494                     OS_FlagBlock(&pend_data,
;;;495                                  p_grp,
;;;496                                  flags,
;;;497                                  opt,
;;;498                                  timeout);
;;;499                     OS_CRITICAL_EXIT_NO_SCHED();
;;;500                 }
;;;501                 break;
;;;502    
;;;503            case OS_OPT_PEND_FLAG_CLR_ANY:
;;;504                 flags_rdy = (OS_FLAGS)(~p_grp->Flags & flags); /* Extract only the bits we want                          */
;;;505                 if (flags_rdy != (OS_FLAGS)0) {                /* See if any flag cleared                                */
;;;506                     if (consume == DEF_TRUE) {                 /* See if we need to consume the flags                    */
;;;507                         p_grp->Flags |= flags_rdy;             /* Set ONLY the flags that we got                         */
;;;508                     }
;;;509                     OSTCBCurPtr->FlagsRdy = flags_rdy;         /* Save flags that were ready                             */
;;;510                     if (p_ts != (CPU_TS *)0) {
;;;511                        *p_ts  = p_grp->TS;
;;;512                     }
;;;513                     CPU_CRITICAL_EXIT();                       /* Yes, condition met, return to caller                   */
;;;514                    *p_err = OS_ERR_NONE;
;;;515                     return (flags_rdy);
;;;516                 } else {                                       /* Block task until events occur or timeout               */
;;;517                     if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {
;;;518                         CPU_CRITICAL_EXIT();
;;;519                        *p_err = OS_ERR_PEND_WOULD_BLOCK;       /* Specified non-blocking so task would block             */
;;;520                         return ((OS_FLAGS)0);
;;;521                     } else {                                   /* Specified blocking so check is scheduler is locked     */
;;;522                         if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) { /* See if called with scheduler locked ...      */
;;;523                             CPU_CRITICAL_EXIT();
;;;524                            *p_err = OS_ERR_SCHED_LOCKED;                 /* ... can't PEND when locked                   */
;;;525                             return ((OS_FLAGS)0);
;;;526                         }
;;;527                     }
;;;528                                                                
;;;529                     OS_CRITICAL_ENTER_CPU_EXIT();              /* Lock the scheduler/re-enable interrupts                */
;;;530                     OS_FlagBlock(&pend_data,              
;;;531                                  p_grp,
;;;532                                  flags,
;;;533                                  opt,
;;;534                                  timeout);
;;;535                     OS_CRITICAL_EXIT_NO_SCHED();
;;;536                 }
;;;537                 break;
;;;538    #endif
;;;539    
;;;540            default:
;;;541                 CPU_CRITICAL_EXIT();
;;;542                *p_err = OS_ERR_OPT_INVALID;
;;;543                 return ((OS_FLAGS)0);
;;;544        }
;;;545    
;;;546        OSSched();                                              /* Find next HPT ready to run                             */
;;;547    
;;;548        CPU_CRITICAL_ENTER();
;;;549        switch (OSTCBCurPtr->PendStatus) {
;;;550            case OS_STATUS_PEND_OK:                             /* We got the vent flags                                  */
;;;551                 if (p_ts != (CPU_TS *)0) {
;;;552                    *p_ts  = OSTCBCurPtr->TS;
;;;553                 }
;;;554                *p_err = OS_ERR_NONE;
;;;555                 break;
;;;556    
;;;557            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;558                 if (p_ts != (CPU_TS *)0) {
;;;559                    *p_ts  = OSTCBCurPtr->TS;
;;;560                 }
;;;561                 CPU_CRITICAL_EXIT();
;;;562                *p_err = OS_ERR_PEND_ABORT;
;;;563                 break;
;;;564    
;;;565            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get semaphore within timeout   */
;;;566                 if (p_ts != (CPU_TS *)0) {
;;;567                    *p_ts  = (CPU_TS  )0;
;;;568                 }
;;;569                 CPU_CRITICAL_EXIT();
;;;570                *p_err = OS_ERR_TIMEOUT;
;;;571                 break;
;;;572    
;;;573            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;574                 if (p_ts != (CPU_TS *)0) {
;;;575                    *p_ts  = OSTCBCurPtr->TS;
;;;576                 }
;;;577                 CPU_CRITICAL_EXIT();
;;;578                *p_err = OS_ERR_OBJ_DEL;
;;;579                 break;
;;;580    
;;;581            default:
;;;582                 CPU_CRITICAL_EXIT();
;;;583                *p_err = OS_ERR_STATUS_INVALID;
;;;584                 break;
;;;585        }
;;;586        if (*p_err != OS_ERR_NONE) {
;;;587            return ((OS_FLAGS)0);
;;;588        }
;;;589    
;;;590        flags_rdy = OSTCBCurPtr->FlagsRdy;
;;;591        if (consume == DEF_TRUE) {                              /* See if we need to consume the flags                    */
;;;592            switch (mode) {
;;;593                case OS_OPT_PEND_FLAG_SET_ALL:
;;;594                case OS_OPT_PEND_FLAG_SET_ANY:                  /* Clear ONLY the flags we got                            */
;;;595                     p_grp->Flags &= ~flags_rdy;
;;;596                     break;
;;;597    
;;;598    #if OS_CFG_FLAG_MODE_CLR_EN > 0u
;;;599                case OS_OPT_PEND_FLAG_CLR_ALL:
;;;600                case OS_OPT_PEND_FLAG_CLR_ANY:                  /* Set   ONLY the flags we got                            */
;;;601                     p_grp->Flags |=  flags_rdy;
;;;602                     break;
;;;603    #endif
;;;604                default:
;;;605                     CPU_CRITICAL_EXIT();
;;;606                    *p_err = OS_ERR_OPT_INVALID;
;;;607                     return ((OS_FLAGS)0);
;;;608            }
;;;609        }
;;;610        CPU_CRITICAL_EXIT();
;;;611       *p_err = OS_ERR_NONE;                                    /* Event(s) must have occurred                            */
;;;612        return (flags_rdy);
;;;613    }
000026  b00b              ADD      sp,sp,#0x2c
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L3.44|
00002c  b925              CBNZ     r5,|L3.56|
00002e  f64550c3          MOV      r0,#0x5dc3            ;346
000032  8020              STRH     r0,[r4,#0]            ;346
000034  2000              MOVS     r0,#0                 ;347
000036  e7f6              B        |L3.38|
                  |L3.56|
000038  f2480101          MOV      r1,#0x8001            ;349
00003c  eba90001          SUB      r0,r9,r1              ;349
000040  4589              CMP      r9,r1                 ;349
000042  d036              BEQ      |L3.178|
000044  dc1a              BGT      |L3.124|
000046  f2401101          MOV      r1,#0x101             ;349
00004a  eba90001          SUB      r0,r9,r1              ;349
00004e  4589              CMP      r9,r1                 ;349
000050  d02b              BEQ      |L3.170|
000052  dc0c              BGT      |L3.110|
000054  f1b90f01          CMP      r9,#1                 ;349
000058  d023              BEQ      |L3.162|
00005a  f1b90f02          CMP      r9,#2                 ;349
00005e  d021              BEQ      |L3.164|
000060  f1b90f04          CMP      r9,#4                 ;349
000064  d01f              BEQ      |L3.166|
000066  f1b90f08          CMP      r9,#8                 ;349
00006a  d12a              BNE      |L3.194|
00006c  e01c              B        |L3.168|
                  |L3.110|
00006e  2801              CMP      r0,#1                 ;349
000070  d01c              BEQ      |L3.172|
000072  2803              CMP      r0,#3                 ;349
000074  d01b              BEQ      |L3.174|
000076  2807              CMP      r0,#7                 ;349
000078  d123              BNE      |L3.194|
00007a  e019              B        |L3.176|
                  |L3.124|
00007c  f5b07f80          CMP      r0,#0x100             ;349
000080  d01b              BEQ      |L3.186|
000082  dc06              BGT      |L3.146|
000084  2801              CMP      r0,#1                 ;349
000086  d015              BEQ      |L3.180|
000088  2803              CMP      r0,#3                 ;349
00008a  d014              BEQ      |L3.182|
00008c  2807              CMP      r0,#7                 ;349
00008e  d118              BNE      |L3.194|
000090  e012              B        |L3.184|
                  |L3.146|
000092  f2a01001          SUB      r0,r0,#0x101          ;349
000096  b188              CBZ      r0,|L3.188|
000098  2802              CMP      r0,#2                 ;349
00009a  d010              BEQ      |L3.190|
00009c  2806              CMP      r0,#6                 ;349
00009e  d110              BNE      |L3.194|
0000a0  e00e              B        |L3.192|
                  |L3.162|
0000a2  bf00              NOP                            ;351
                  |L3.164|
0000a4  bf00              NOP                            ;352
                  |L3.166|
0000a6  bf00              NOP                            ;353
                  |L3.168|
0000a8  bf00              NOP                            ;354
                  |L3.170|
0000aa  bf00              NOP                            ;355
                  |L3.172|
0000ac  bf00              NOP                            ;356
                  |L3.174|
0000ae  bf00              NOP                            ;357
                  |L3.176|
0000b0  bf00              NOP                            ;358
                  |L3.178|
0000b2  bf00              NOP                            ;359
                  |L3.180|
0000b4  bf00              NOP                            ;360
                  |L3.182|
0000b6  bf00              NOP                            ;361
                  |L3.184|
0000b8  bf00              NOP                            ;362
                  |L3.186|
0000ba  bf00              NOP                            ;363
                  |L3.188|
0000bc  bf00              NOP                            ;364
                  |L3.190|
0000be  bf00              NOP                            ;365
                  |L3.192|
0000c0  e004              B        |L3.204|
                  |L3.194|
0000c2  f6456025          MOV      r0,#0x5e25            ;369
0000c6  8020              STRH     r0,[r4,#0]            ;369
0000c8  2000              MOVS     r0,#0                 ;370
0000ca  e7ac              B        |L3.38|
                  |L3.204|
0000cc  bf00              NOP                            ;366
0000ce  49ca              LDR      r1,|L3.1016|
0000d0  6828              LDR      r0,[r5,#0]            ;375
0000d2  4288              CMP      r0,r1                 ;375
0000d4  d004              BEQ      |L3.224|
0000d6  f64550c4          MOV      r0,#0x5dc4            ;376
0000da  8020              STRH     r0,[r4,#0]            ;376
0000dc  2000              MOVS     r0,#0                 ;377
0000de  e7a2              B        |L3.38|
                  |L3.224|
0000e0  f4097080          AND      r0,r9,#0x100          ;381
0000e4  b110              CBZ      r0,|L3.236|
0000e6  f04f0a01          MOV      r10,#1                ;382
0000ea  e001              B        |L3.240|
                  |L3.236|
0000ec  f04f0a00          MOV      r10,#0                ;384
                  |L3.240|
0000f0  b10f              CBZ      r7,|L3.246|
0000f2  2000              MOVS     r0,#0                 ;388
0000f4  6038              STR      r0,[r7,#0]            ;388
                  |L3.246|
0000f6  f009000f          AND      r0,r9,#0xf            ;391
0000fa  900a              STR      r0,[sp,#0x28]         ;391
0000fc  bf00              NOP                            ;392
0000fe  bf00              NOP                            ;392
000100  f7fffffe          BL       CPU_SR_Save
000104  9001              STR      r0,[sp,#4]            ;392
000106  bf00              NOP                            ;392
000108  bf00              NOP                            ;392
00010a  980a              LDR      r0,[sp,#0x28]         ;393
00010c  2801              CMP      r0,#1                 ;393
00010e  d06e              BEQ      |L3.494|
000110  2802              CMP      r0,#2                 ;393
000112  d06d              BEQ      |L3.496|
000114  2804              CMP      r0,#4                 ;393
000116  d002              BEQ      |L3.286|
000118  2808              CMP      r0,#8                 ;393
00011a  d16a              BNE      |L3.498|
00011c  e04b              B        |L3.438|
                  |L3.286|
00011e  6a28              LDR      r0,[r5,#0x20]         ;395
000120  ea000608          AND      r6,r0,r8              ;395
000124  4546              CMP      r6,r8                 ;396
000126  d117              BNE      |L3.344|
000128  f1ba0f01          CMP      r10,#1                ;397
00012c  d102              BNE      |L3.308|
00012e  6a28              LDR      r0,[r5,#0x20]         ;398
000130  43b0              BICS     r0,r0,r6              ;398
000132  6228              STR      r0,[r5,#0x20]         ;398
                  |L3.308|
000134  48b1              LDR      r0,|L3.1020|
000136  6800              LDR      r0,[r0,#0]            ;400  ; OSTCBCurPtr
000138  f8c06084          STR      r6,[r0,#0x84]         ;400
00013c  b10f              CBZ      r7,|L3.322|
00013e  6a68              LDR      r0,[r5,#0x24]         ;402
000140  6038              STR      r0,[r7,#0]            ;402
                  |L3.322|
000142  bf00              NOP                            ;404
000144  bf00              NOP                            ;404
000146  9801              LDR      r0,[sp,#4]            ;404
000148  f7fffffe          BL       CPU_SR_Restore
00014c  bf00              NOP                            ;404
00014e  bf00              NOP                            ;404
000150  2000              MOVS     r0,#0                 ;405
000152  8020              STRH     r0,[r4,#0]            ;405
000154  4630              MOV      r0,r6                 ;406
000156  e766              B        |L3.38|
                  |L3.344|
000158  f4094000          AND      r0,r9,#0x8000         ;408
00015c  b158              CBZ      r0,|L3.374|
00015e  bf00              NOP                            ;409
000160  bf00              NOP                            ;409
000162  9801              LDR      r0,[sp,#4]            ;409
000164  f7fffffe          BL       CPU_SR_Restore
000168  bf00              NOP                            ;409
00016a  bf00              NOP                            ;409
00016c  f24610b0          MOV      r0,#0x61b0            ;410
000170  8020              STRH     r0,[r4,#0]            ;410
000172  2000              MOVS     r0,#0                 ;411
000174  e757              B        |L3.38|
                  |L3.374|
000176  48a2              LDR      r0,|L3.1024|
000178  7800              LDRB     r0,[r0,#0]            ;413  ; OSSchedLockNestingCtr
00017a  2800              CMP      r0,#0                 ;413
00017c  dd0b              BLE      |L3.406|
00017e  bf00              NOP                            ;414
000180  bf00              NOP                            ;414
000182  9801              LDR      r0,[sp,#4]            ;414
000184  f7fffffe          BL       CPU_SR_Restore
000188  bf00              NOP                            ;414
00018a  bf00              NOP                            ;414
00018c  f6465063          MOV      r0,#0x6d63            ;415
000190  8020              STRH     r0,[r4,#0]            ;415
000192  2000              MOVS     r0,#0                 ;416
000194  e747              B        |L3.38|
                  |L3.406|
000196  464b              MOV      r3,r9                 ;421
000198  4642              MOV      r2,r8                 ;421
00019a  4629              MOV      r1,r5                 ;421
00019c  a802              ADD      r0,sp,#8              ;421
00019e  f8cdb000          STR      r11,[sp,#0]           ;421
0001a2  f7fffffe          BL       OS_FlagBlock
0001a6  bf00              NOP                            ;426
0001a8  bf00              NOP                            ;426
0001aa  9801              LDR      r0,[sp,#4]            ;426
0001ac  f7fffffe          BL       CPU_SR_Restore
0001b0  bf00              NOP                            ;426
0001b2  bf00              NOP                            ;426
0001b4  e0f0              B        |L3.920|
                  |L3.438|
0001b6  6a28              LDR      r0,[r5,#0x20]         ;431
0001b8  ea000608          AND      r6,r0,r8              ;431
0001bc  b1d6              CBZ      r6,|L3.500|
0001be  f1ba0f01          CMP      r10,#1                ;433
0001c2  d102              BNE      |L3.458|
0001c4  6a28              LDR      r0,[r5,#0x20]         ;434
0001c6  43b0              BICS     r0,r0,r6              ;434
0001c8  6228              STR      r0,[r5,#0x20]         ;434
                  |L3.458|
0001ca  488c              LDR      r0,|L3.1020|
0001cc  6800              LDR      r0,[r0,#0]            ;436  ; OSTCBCurPtr
0001ce  f8c06084          STR      r6,[r0,#0x84]         ;436
0001d2  b10f              CBZ      r7,|L3.472|
0001d4  6a68              LDR      r0,[r5,#0x24]         ;438
0001d6  6038              STR      r0,[r7,#0]            ;438
                  |L3.472|
0001d8  bf00              NOP                            ;440
0001da  bf00              NOP                            ;440
0001dc  9801              LDR      r0,[sp,#4]            ;440
0001de  f7fffffe          BL       CPU_SR_Restore
0001e2  bf00              NOP                            ;440
0001e4  bf00              NOP                            ;440
0001e6  2000              MOVS     r0,#0                 ;441
0001e8  8020              STRH     r0,[r4,#0]            ;441
0001ea  4630              MOV      r0,r6                 ;442
0001ec  e71b              B        |L3.38|
                  |L3.494|
0001ee  e030              B        |L3.594|
                  |L3.496|
0001f0  e07b              B        |L3.746|
                  |L3.498|
0001f2  e0c5              B        |L3.896|
                  |L3.500|
0001f4  f4094000          AND      r0,r9,#0x8000         ;444
0001f8  b158              CBZ      r0,|L3.530|
0001fa  bf00              NOP                            ;445
0001fc  bf00              NOP                            ;445
0001fe  9801              LDR      r0,[sp,#4]            ;445
000200  f7fffffe          BL       CPU_SR_Restore
000204  bf00              NOP                            ;445
000206  bf00              NOP                            ;445
000208  f24610b0          MOV      r0,#0x61b0            ;446
00020c  8020              STRH     r0,[r4,#0]            ;446
00020e  2000              MOVS     r0,#0                 ;447
000210  e709              B        |L3.38|
                  |L3.530|
000212  487b              LDR      r0,|L3.1024|
000214  7800              LDRB     r0,[r0,#0]            ;449  ; OSSchedLockNestingCtr
000216  2800              CMP      r0,#0                 ;449
000218  dd0b              BLE      |L3.562|
00021a  bf00              NOP                            ;450
00021c  bf00              NOP                            ;450
00021e  9801              LDR      r0,[sp,#4]            ;450
000220  f7fffffe          BL       CPU_SR_Restore
000224  bf00              NOP                            ;450
000226  bf00              NOP                            ;450
000228  f6465063          MOV      r0,#0x6d63            ;451
00022c  8020              STRH     r0,[r4,#0]            ;451
00022e  2000              MOVS     r0,#0                 ;452
000230  e6f9              B        |L3.38|
                  |L3.562|
000232  464b              MOV      r3,r9                 ;457
000234  4642              MOV      r2,r8                 ;457
000236  4629              MOV      r1,r5                 ;457
000238  a802              ADD      r0,sp,#8              ;457
00023a  f8cdb000          STR      r11,[sp,#0]           ;457
00023e  f7fffffe          BL       OS_FlagBlock
000242  bf00              NOP                            ;462
000244  bf00              NOP                            ;462
000246  9801              LDR      r0,[sp,#4]            ;462
000248  f7fffffe          BL       CPU_SR_Restore
00024c  bf00              NOP                            ;462
00024e  bf00              NOP                            ;462
000250  e0a2              B        |L3.920|
                  |L3.594|
000252  6a28              LDR      r0,[r5,#0x20]         ;468
000254  ea280600          BIC      r6,r8,r0              ;468
000258  4546              CMP      r6,r8                 ;469
00025a  d117              BNE      |L3.652|
00025c  f1ba0f01          CMP      r10,#1                ;470
000260  d102              BNE      |L3.616|
000262  6a28              LDR      r0,[r5,#0x20]         ;471
000264  4330              ORRS     r0,r0,r6              ;471
000266  6228              STR      r0,[r5,#0x20]         ;471
                  |L3.616|
000268  4864              LDR      r0,|L3.1020|
00026a  6800              LDR      r0,[r0,#0]            ;473  ; OSTCBCurPtr
00026c  f8c06084          STR      r6,[r0,#0x84]         ;473
000270  b10f              CBZ      r7,|L3.630|
000272  6a68              LDR      r0,[r5,#0x24]         ;475
000274  6038              STR      r0,[r7,#0]            ;475
                  |L3.630|
000276  bf00              NOP                            ;477
000278  bf00              NOP                            ;477
00027a  9801              LDR      r0,[sp,#4]            ;477
00027c  f7fffffe          BL       CPU_SR_Restore
000280  bf00              NOP                            ;477
000282  bf00              NOP                            ;477
000284  2000              MOVS     r0,#0                 ;478
000286  8020              STRH     r0,[r4,#0]            ;478
000288  4630              MOV      r0,r6                 ;479
00028a  e6cc              B        |L3.38|
                  |L3.652|
00028c  f4094000          AND      r0,r9,#0x8000         ;481
000290  b158              CBZ      r0,|L3.682|
000292  bf00              NOP                            ;482
000294  bf00              NOP                            ;482
000296  9801              LDR      r0,[sp,#4]            ;482
000298  f7fffffe          BL       CPU_SR_Restore
00029c  bf00              NOP                            ;482
00029e  bf00              NOP                            ;482
0002a0  f24610b0          MOV      r0,#0x61b0            ;483
0002a4  8020              STRH     r0,[r4,#0]            ;483
0002a6  2000              MOVS     r0,#0                 ;484
0002a8  e6bd              B        |L3.38|
                  |L3.682|
0002aa  4855              LDR      r0,|L3.1024|
0002ac  7800              LDRB     r0,[r0,#0]            ;486  ; OSSchedLockNestingCtr
0002ae  2800              CMP      r0,#0                 ;486
0002b0  dd0b              BLE      |L3.714|
0002b2  bf00              NOP                            ;487
0002b4  bf00              NOP                            ;487
0002b6  9801              LDR      r0,[sp,#4]            ;487
0002b8  f7fffffe          BL       CPU_SR_Restore
0002bc  bf00              NOP                            ;487
0002be  bf00              NOP                            ;487
0002c0  f6465063          MOV      r0,#0x6d63            ;488
0002c4  8020              STRH     r0,[r4,#0]            ;488
0002c6  2000              MOVS     r0,#0                 ;489
0002c8  e6ad              B        |L3.38|
                  |L3.714|
0002ca  464b              MOV      r3,r9                 ;494
0002cc  4642              MOV      r2,r8                 ;494
0002ce  4629              MOV      r1,r5                 ;494
0002d0  a802              ADD      r0,sp,#8              ;494
0002d2  f8cdb000          STR      r11,[sp,#0]           ;494
0002d6  f7fffffe          BL       OS_FlagBlock
0002da  bf00              NOP                            ;499
0002dc  bf00              NOP                            ;499
0002de  9801              LDR      r0,[sp,#4]            ;499
0002e0  f7fffffe          BL       CPU_SR_Restore
0002e4  bf00              NOP                            ;499
0002e6  bf00              NOP                            ;499
0002e8  e056              B        |L3.920|
                  |L3.746|
0002ea  6a28              LDR      r0,[r5,#0x20]         ;504
0002ec  ea280600          BIC      r6,r8,r0              ;504
0002f0  b1be              CBZ      r6,|L3.802|
0002f2  f1ba0f01          CMP      r10,#1                ;506
0002f6  d102              BNE      |L3.766|
0002f8  6a28              LDR      r0,[r5,#0x20]         ;507
0002fa  4330              ORRS     r0,r0,r6              ;507
0002fc  6228              STR      r0,[r5,#0x20]         ;507
                  |L3.766|
0002fe  483f              LDR      r0,|L3.1020|
000300  6800              LDR      r0,[r0,#0]            ;509  ; OSTCBCurPtr
000302  f8c06084          STR      r6,[r0,#0x84]         ;509
000306  b10f              CBZ      r7,|L3.780|
000308  6a68              LDR      r0,[r5,#0x24]         ;511
00030a  6038              STR      r0,[r7,#0]            ;511
                  |L3.780|
00030c  bf00              NOP                            ;513
00030e  bf00              NOP                            ;513
000310  9801              LDR      r0,[sp,#4]            ;513
000312  f7fffffe          BL       CPU_SR_Restore
000316  bf00              NOP                            ;513
000318  bf00              NOP                            ;513
00031a  2000              MOVS     r0,#0                 ;514
00031c  8020              STRH     r0,[r4,#0]            ;514
00031e  4630              MOV      r0,r6                 ;515
000320  e681              B        |L3.38|
                  |L3.802|
000322  f4094000          AND      r0,r9,#0x8000         ;517
000326  b158              CBZ      r0,|L3.832|
000328  bf00              NOP                            ;518
00032a  bf00              NOP                            ;518
00032c  9801              LDR      r0,[sp,#4]            ;518
00032e  f7fffffe          BL       CPU_SR_Restore
000332  bf00              NOP                            ;518
000334  bf00              NOP                            ;518
000336  f24610b0          MOV      r0,#0x61b0            ;519
00033a  8020              STRH     r0,[r4,#0]            ;519
00033c  2000              MOVS     r0,#0                 ;520
00033e  e672              B        |L3.38|
                  |L3.832|
000340  482f              LDR      r0,|L3.1024|
000342  7800              LDRB     r0,[r0,#0]            ;522  ; OSSchedLockNestingCtr
000344  2800              CMP      r0,#0                 ;522
000346  dd0b              BLE      |L3.864|
000348  bf00              NOP                            ;523
00034a  bf00              NOP                            ;523
00034c  9801              LDR      r0,[sp,#4]            ;523
00034e  f7fffffe          BL       CPU_SR_Restore
000352  bf00              NOP                            ;523
000354  bf00              NOP                            ;523
000356  f6465063          MOV      r0,#0x6d63            ;524
00035a  8020              STRH     r0,[r4,#0]            ;524
00035c  2000              MOVS     r0,#0                 ;525
00035e  e662              B        |L3.38|
                  |L3.864|
000360  464b              MOV      r3,r9                 ;530
000362  4642              MOV      r2,r8                 ;530
000364  4629              MOV      r1,r5                 ;530
000366  a802              ADD      r0,sp,#8              ;530
000368  f8cdb000          STR      r11,[sp,#0]           ;530
00036c  f7fffffe          BL       OS_FlagBlock
000370  bf00              NOP                            ;535
000372  bf00              NOP                            ;535
000374  9801              LDR      r0,[sp,#4]            ;535
000376  f7fffffe          BL       CPU_SR_Restore
00037a  bf00              NOP                            ;535
00037c  bf00              NOP                            ;535
00037e  e00b              B        |L3.920|
                  |L3.896|
000380  bf00              NOP                            ;541
000382  bf00              NOP                            ;541
000384  9801              LDR      r0,[sp,#4]            ;541
000386  f7fffffe          BL       CPU_SR_Restore
00038a  bf00              NOP                            ;541
00038c  bf00              NOP                            ;541
00038e  f6456025          MOV      r0,#0x5e25            ;542
000392  8020              STRH     r0,[r4,#0]            ;542
000394  2000              MOVS     r0,#0                 ;543
000396  e646              B        |L3.38|
                  |L3.920|
000398  bf00              NOP                            ;428
00039a  f7fffffe          BL       OSSched
00039e  bf00              NOP                            ;548
0003a0  bf00              NOP                            ;548
0003a2  f7fffffe          BL       CPU_SR_Save
0003a6  9001              STR      r0,[sp,#4]            ;548
0003a8  bf00              NOP                            ;548
0003aa  bf00              NOP                            ;548
0003ac  4813              LDR      r0,|L3.1020|
0003ae  6800              LDR      r0,[r0,#0]            ;549  ; OSTCBCurPtr
0003b0  f8900035          LDRB     r0,[r0,#0x35]         ;549
0003b4  b130              CBZ      r0,|L3.964|
0003b6  2801              CMP      r0,#1                 ;549
0003b8  d00c              BEQ      |L3.980|
0003ba  2802              CMP      r0,#2                 ;549
0003bc  d030              BEQ      |L3.1056|
0003be  2803              CMP      r0,#3                 ;549
0003c0  d13e              BNE      |L3.1088|
0003c2  e01f              B        |L3.1028|
                  |L3.964|
0003c4  b11f              CBZ      r7,|L3.974|
0003c6  480d              LDR      r0,|L3.1020|
0003c8  6800              LDR      r0,[r0,#0]            ;552  ; OSTCBCurPtr
0003ca  6c00              LDR      r0,[r0,#0x40]         ;552
0003cc  6038              STR      r0,[r7,#0]            ;552
                  |L3.974|
0003ce  2000              MOVS     r0,#0                 ;554
0003d0  8020              STRH     r0,[r4,#0]            ;554
0003d2  e040              B        |L3.1110|
                  |L3.980|
0003d4  b11f              CBZ      r7,|L3.990|
0003d6  4809              LDR      r0,|L3.1020|
0003d8  6800              LDR      r0,[r0,#0]            ;559  ; OSTCBCurPtr
0003da  6c00              LDR      r0,[r0,#0x40]         ;559
0003dc  6038              STR      r0,[r7,#0]            ;559
                  |L3.990|
0003de  bf00              NOP                            ;561
0003e0  bf00              NOP                            ;561
0003e2  9801              LDR      r0,[sp,#4]            ;561
0003e4  f7fffffe          BL       CPU_SR_Restore
0003e8  bf00              NOP                            ;561
0003ea  bf00              NOP                            ;561
0003ec  f24610a9          MOV      r0,#0x61a9            ;562
0003f0  8020              STRH     r0,[r4,#0]            ;562
0003f2  e030              B        |L3.1110|
                  |L3.1012|
                          DCD      OSIntNestingCtr
                  |L3.1016|
                          DCD      0x47414c46
                  |L3.1020|
                          DCD      OSTCBCurPtr
                  |L3.1024|
                          DCD      OSSchedLockNestingCtr
                  |L3.1028|
000404  b10f              CBZ      r7,|L3.1034|
000406  2000              MOVS     r0,#0                 ;567
000408  6038              STR      r0,[r7,#0]            ;567
                  |L3.1034|
00040a  bf00              NOP                            ;569
00040c  bf00              NOP                            ;569
00040e  9801              LDR      r0,[sp,#4]            ;569
000410  f7fffffe          BL       CPU_SR_Restore
000414  bf00              NOP                            ;569
000416  bf00              NOP                            ;569
000418  f24720d9          MOV      r0,#0x72d9            ;570
00041c  8020              STRH     r0,[r4,#0]            ;570
00041e  e01a              B        |L3.1110|
                  |L3.1056|
000420  b11f              CBZ      r7,|L3.1066|
000422  4829              LDR      r0,|L3.1224|
000424  6800              LDR      r0,[r0,#0]            ;575  ; OSTCBCurPtr
000426  6c00              LDR      r0,[r0,#0x40]         ;575
000428  6038              STR      r0,[r7,#0]            ;575
                  |L3.1066|
00042a  bf00              NOP                            ;577
00042c  bf00              NOP                            ;577
00042e  9801              LDR      r0,[sp,#4]            ;577
000430  f7fffffe          BL       CPU_SR_Restore
000434  bf00              NOP                            ;577
000436  bf00              NOP                            ;577
000438  f64550c2          MOV      r0,#0x5dc2            ;578
00043c  8020              STRH     r0,[r4,#0]            ;578
00043e  e00a              B        |L3.1110|
                  |L3.1088|
000440  bf00              NOP                            ;582
000442  bf00              NOP                            ;582
000444  9801              LDR      r0,[sp,#4]            ;582
000446  f7fffffe          BL       CPU_SR_Restore
00044a  bf00              NOP                            ;582
00044c  bf00              NOP                            ;582
00044e  f646602e          MOV      r0,#0x6e2e            ;583
000452  8020              STRH     r0,[r4,#0]            ;583
000454  bf00              NOP                            ;584
                  |L3.1110|
000456  bf00              NOP                            ;555
000458  8820              LDRH     r0,[r4,#0]            ;586
00045a  b108              CBZ      r0,|L3.1120|
00045c  2000              MOVS     r0,#0                 ;587
00045e  e5e2              B        |L3.38|
                  |L3.1120|
000460  4819              LDR      r0,|L3.1224|
000462  6800              LDR      r0,[r0,#0]            ;590  ; OSTCBCurPtr
000464  f8d06084          LDR      r6,[r0,#0x84]         ;590
000468  f1ba0f01          CMP      r10,#1                ;591
00046c  d120              BNE      |L3.1200|
00046e  980a              LDR      r0,[sp,#0x28]         ;592
000470  2801              CMP      r0,#1                 ;592
000472  d00b              BEQ      |L3.1164|
000474  2802              CMP      r0,#2                 ;592
000476  d00a              BEQ      |L3.1166|
000478  2804              CMP      r0,#4                 ;592
00047a  d002              BEQ      |L3.1154|
00047c  2808              CMP      r0,#8                 ;592
00047e  d10a              BNE      |L3.1174|
000480  e000              B        |L3.1156|
                  |L3.1154|
000482  bf00              NOP                            ;594
                  |L3.1156|
000484  6a28              LDR      r0,[r5,#0x20]         ;595
000486  43b0              BICS     r0,r0,r6              ;595
000488  6228              STR      r0,[r5,#0x20]         ;595
00048a  e010              B        |L3.1198|
                  |L3.1164|
00048c  bf00              NOP                            ;600
                  |L3.1166|
00048e  6a28              LDR      r0,[r5,#0x20]         ;601
000490  4330              ORRS     r0,r0,r6              ;601
000492  6228              STR      r0,[r5,#0x20]         ;601
000494  e00b              B        |L3.1198|
                  |L3.1174|
000496  bf00              NOP                            ;605
000498  bf00              NOP                            ;605
00049a  9801              LDR      r0,[sp,#4]            ;605
00049c  f7fffffe          BL       CPU_SR_Restore
0004a0  bf00              NOP                            ;605
0004a2  bf00              NOP                            ;605
0004a4  f6456025          MOV      r0,#0x5e25            ;606
0004a8  8020              STRH     r0,[r4,#0]            ;606
0004aa  2000              MOVS     r0,#0                 ;607
0004ac  e5bb              B        |L3.38|
                  |L3.1198|
0004ae  bf00              NOP                            ;596
                  |L3.1200|
0004b0  bf00              NOP                            ;610
0004b2  bf00              NOP                            ;610
0004b4  9801              LDR      r0,[sp,#4]            ;610
0004b6  f7fffffe          BL       CPU_SR_Restore
0004ba  bf00              NOP                            ;610
0004bc  bf00              NOP                            ;610
0004be  2000              MOVS     r0,#0                 ;611
0004c0  8020              STRH     r0,[r4,#0]            ;611
0004c2  4630              MOV      r0,r6                 ;612
0004c4  e5af              B        |L3.38|
;;;614    
                          ENDP

0004c6  0000              DCW      0x0000
                  |L3.1224|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSFlagPendAbort||, CODE, READONLY, ALIGN=2

                  OSFlagPendAbort PROC
;;;649    #if OS_CFG_FLAG_PEND_ABORT_EN > 0u
;;;650    OS_OBJ_QTY  OSFlagPendAbort (OS_FLAG_GRP  *p_grp,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;651                                 OS_OPT        opt,
;;;652                                 OS_ERR       *p_err)
;;;653    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;654        OS_PEND_LIST  *p_pend_list;
;;;655        OS_TCB        *p_tcb;
;;;656        CPU_TS         ts;
;;;657        OS_OBJ_QTY     nbr_tasks;
;;;658        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;659    
;;;660    
;;;661    
;;;662    #ifdef OS_SAFETY_CRITICAL
;;;663        if (p_err == (OS_ERR *)0) {
;;;664            OS_SAFETY_CRITICAL_EXCEPTION();
;;;665            return ((OS_OBJ_QTY)0u);
;;;666        }
;;;667    #endif
;;;668    
;;;669    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;670        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
00000e  4837              LDR      r0,|L4.236|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L4.34|
;;;671           *p_err = OS_ERR_PEND_ABORT_ISR;
000016  f24610aa          MOV      r0,#0x61aa
00001a  8020              STRH     r0,[r4,#0]
;;;672            return ((OS_OBJ_QTY)0u);
00001c  2000              MOVS     r0,#0
                  |L4.30|
;;;673        }
;;;674    #endif
;;;675    
;;;676    #if OS_CFG_ARG_CHK_EN > 0u
;;;677        if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
;;;678           *p_err  =  OS_ERR_OBJ_PTR_NULL;
;;;679            return ((OS_OBJ_QTY)0u);
;;;680        }
;;;681        switch (opt) {                                          /* Validate 'opt'                                         */
;;;682            case OS_OPT_PEND_ABORT_1:
;;;683            case OS_OPT_PEND_ABORT_ALL:
;;;684            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;685            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;686                 break;
;;;687    
;;;688            default:
;;;689                *p_err = OS_ERR_OPT_INVALID;
;;;690                 return ((OS_OBJ_QTY)0u);
;;;691        }
;;;692    #endif
;;;693    
;;;694    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;695        if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Make sure event flag group was created                 */
;;;696           *p_err = OS_ERR_OBJ_TYPE;
;;;697            return ((OS_OBJ_QTY)0u);
;;;698        }
;;;699    #endif
;;;700    
;;;701        CPU_CRITICAL_ENTER();
;;;702        p_pend_list = &p_grp->PendList;
;;;703        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on flag group?                        */
;;;704            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;705           *p_err = OS_ERR_PEND_ABORT_NONE;
;;;706            return ((OS_OBJ_QTY)0u);
;;;707        }
;;;708    
;;;709        OS_CRITICAL_ENTER_CPU_EXIT();
;;;710        nbr_tasks = 0u;
;;;711        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
;;;712        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
;;;713            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;714            OS_PendAbort((OS_PEND_OBJ *)((void *)p_grp),
;;;715                         p_tcb,
;;;716                         ts);
;;;717            nbr_tasks++;
;;;718            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;719                break;                                          /* No                                                     */
;;;720            }
;;;721        }
;;;722        OS_CRITICAL_EXIT_NO_SCHED();
;;;723    
;;;724        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;725            OSSched();                                          /* Run the scheduler                                      */
;;;726        }
;;;727    
;;;728       *p_err = OS_ERR_NONE;
;;;729        return (nbr_tasks);
;;;730    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.34|
000022  b925              CBNZ     r5,|L4.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;678
000028  8020              STRH     r0,[r4,#0]            ;678
00002a  2000              MOVS     r0,#0                 ;679
00002c  e7f7              B        |L4.30|
                  |L4.46|
00002e  b14e              CBZ      r6,|L4.68|
000030  f5b67f80          CMP      r6,#0x100             ;681
000034  d007              BEQ      |L4.70|
000036  f5b64f00          CMP      r6,#0x8000            ;681
00003a  d005              BEQ      |L4.72|
00003c  f5b64f01          CMP      r6,#0x8100            ;681
000040  d104              BNE      |L4.76|
000042  e002              B        |L4.74|
                  |L4.68|
000044  bf00              NOP                            ;683
                  |L4.70|
000046  bf00              NOP                            ;684
                  |L4.72|
000048  bf00              NOP                            ;685
                  |L4.74|
00004a  e004              B        |L4.86|
                  |L4.76|
00004c  f6456025          MOV      r0,#0x5e25            ;689
000050  8020              STRH     r0,[r4,#0]            ;689
000052  2000              MOVS     r0,#0                 ;690
000054  e7e3              B        |L4.30|
                  |L4.86|
000056  bf00              NOP                            ;686
000058  4925              LDR      r1,|L4.240|
00005a  6828              LDR      r0,[r5,#0]            ;695
00005c  4288              CMP      r0,r1                 ;695
00005e  d004              BEQ      |L4.106|
000060  f64550c4          MOV      r0,#0x5dc4            ;696
000064  8020              STRH     r0,[r4,#0]            ;696
000066  2000              MOVS     r0,#0                 ;697
000068  e7d9              B        |L4.30|
                  |L4.106|
00006a  bf00              NOP                            ;701
00006c  bf00              NOP                            ;701
00006e  f7fffffe          BL       CPU_SR_Save
000072  4682              MOV      r10,r0                ;701
000074  bf00              NOP                            ;701
000076  bf00              NOP                            ;701
000078  f1050708          ADD      r7,r5,#8              ;702
00007c  8938              LDRH     r0,[r7,#8]            ;703
00007e  b958              CBNZ     r0,|L4.152|
000080  bf00              NOP                            ;704
000082  bf00              NOP                            ;704
000084  4650              MOV      r0,r10                ;704
000086  f7fffffe          BL       CPU_SR_Restore
00008a  bf00              NOP                            ;704
00008c  bf00              NOP                            ;704
00008e  f24610ab          MOV      r0,#0x61ab            ;705
000092  8020              STRH     r0,[r4,#0]            ;705
000094  2000              MOVS     r0,#0                 ;706
000096  e7c2              B        |L4.30|
                  |L4.152|
000098  f04f0800          MOV      r8,#0                 ;710
00009c  f7fffffe          BL       CPU_TS_TmrRd
0000a0  4683              MOV      r11,r0                ;711
0000a2  e00f              B        |L4.196|
                  |L4.164|
0000a4  6838              LDR      r0,[r7,#0]            ;713
0000a6  f8d09008          LDR      r9,[r0,#8]            ;713
0000aa  465a              MOV      r2,r11                ;714
0000ac  4649              MOV      r1,r9                 ;714
0000ae  4628              MOV      r0,r5                 ;714
0000b0  f7fffffe          BL       OS_PendAbort
0000b4  f1080001          ADD      r0,r8,#1              ;717
0000b8  fa1ff880          UXTH     r8,r0                 ;717
0000bc  f5b67f80          CMP      r6,#0x100             ;718
0000c0  d000              BEQ      |L4.196|
0000c2  e002              B        |L4.202|
                  |L4.196|
0000c4  8938              LDRH     r0,[r7,#8]            ;712
0000c6  2800              CMP      r0,#0                 ;712
0000c8  dcec              BGT      |L4.164|
                  |L4.202|
0000ca  bf00              NOP                            ;719
0000cc  bf00              NOP                            ;722
0000ce  bf00              NOP                            ;722
0000d0  4650              MOV      r0,r10                ;722
0000d2  f7fffffe          BL       CPU_SR_Restore
0000d6  bf00              NOP                            ;722
0000d8  bf00              NOP                            ;722
0000da  f4064000          AND      r0,r6,#0x8000         ;724
0000de  b908              CBNZ     r0,|L4.228|
0000e0  f7fffffe          BL       OSSched
                  |L4.228|
0000e4  2000              MOVS     r0,#0                 ;728
0000e6  8020              STRH     r0,[r4,#0]            ;728
0000e8  4640              MOV      r0,r8                 ;729
0000ea  e798              B        |L4.30|
;;;731    #endif
                          ENDP

                  |L4.236|
                          DCD      OSIntNestingCtr
                  |L4.240|
                          DCD      0x47414c46

                          AREA ||i.OSFlagPendGetFlagsRdy||, CODE, READONLY, ALIGN=2

                  OSFlagPendGetFlagsRdy PROC
;;;749    
;;;750    OS_FLAGS  OSFlagPendGetFlagsRdy (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;751    {
000002  4604              MOV      r4,r0
;;;752        OS_FLAGS   flags;
;;;753        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;754    
;;;755    
;;;756    
;;;757    #ifdef OS_SAFETY_CRITICAL
;;;758        if (p_err == (OS_ERR *)0) {
;;;759            OS_SAFETY_CRITICAL_EXCEPTION();
;;;760            return ((OS_FLAGS)0);
;;;761        }
;;;762    #endif
;;;763    
;;;764    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;765        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from ISR ...                             */
000006  480f              LDR      r0,|L5.68|
000008  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000a  2800              CMP      r0,#0
00000c  dd04              BLE      |L5.24|
;;;766           *p_err = OS_ERR_PEND_ISR;                            /* ... can't get from an ISR                              */
00000e  f24610ae          MOV      r0,#0x61ae
000012  8020              STRH     r0,[r4,#0]
;;;767            return ((OS_FLAGS)0);
000014  2000              MOVS     r0,#0
                  |L5.22|
;;;768        }
;;;769    #endif
;;;770    
;;;771        CPU_CRITICAL_ENTER();
;;;772        flags = OSTCBCurPtr->FlagsRdy;
;;;773        CPU_CRITICAL_EXIT();
;;;774       *p_err = OS_ERR_NONE;
;;;775        return (flags);
;;;776    }
000016  bd70              POP      {r4-r6,pc}
                  |L5.24|
000018  bf00              NOP                            ;771
00001a  bf00              NOP                            ;771
00001c  f7fffffe          BL       CPU_SR_Save
000020  4606              MOV      r6,r0                 ;771
000022  bf00              NOP                            ;771
000024  bf00              NOP                            ;771
000026  4808              LDR      r0,|L5.72|
000028  6800              LDR      r0,[r0,#0]            ;772  ; OSTCBCurPtr
00002a  f8d05084          LDR      r5,[r0,#0x84]         ;772
00002e  bf00              NOP                            ;773
000030  bf00              NOP                            ;773
000032  4630              MOV      r0,r6                 ;773
000034  f7fffffe          BL       CPU_SR_Restore
000038  bf00              NOP                            ;773
00003a  bf00              NOP                            ;773
00003c  2000              MOVS     r0,#0                 ;774
00003e  8020              STRH     r0,[r4,#0]            ;774
000040  4628              MOV      r0,r5                 ;775
000042  e7e8              B        |L5.22|
;;;777    
                          ENDP

                  |L5.68|
                          DCD      OSIntNestingCtr
                  |L5.72|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSFlagPost||, CODE, READONLY, ALIGN=2

                  OSFlagPost PROC
;;;819    
;;;820    OS_FLAGS  OSFlagPost (OS_FLAG_GRP  *p_grp,
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;821                          OS_FLAGS      flags,
;;;822                          OS_OPT        opt,
;;;823                          OS_ERR       *p_err)
;;;824    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4616              MOV      r6,r2
00000a  461c              MOV      r4,r3
;;;825        OS_FLAGS  flags_cur;
;;;826        CPU_TS    ts;
;;;827    
;;;828    
;;;829    
;;;830    #ifdef OS_SAFETY_CRITICAL
;;;831        if (p_err == (OS_ERR *)0) {
;;;832            OS_SAFETY_CRITICAL_EXCEPTION();
;;;833            return ((OS_FLAGS)0);
;;;834        }
;;;835    #endif
;;;836    
;;;837    #if OS_CFG_ARG_CHK_EN > 0u
;;;838        if (p_grp == (OS_FLAG_GRP *)0) {                        /* Validate 'p_grp'                                       */
00000c  b92d              CBNZ     r5,|L6.26|
;;;839           *p_err  = OS_ERR_OBJ_PTR_NULL;
00000e  f64550c3          MOV      r0,#0x5dc3
000012  8020              STRH     r0,[r4,#0]
;;;840            return ((OS_FLAGS)0);
000014  2000              MOVS     r0,#0
                  |L6.22|
;;;841        }
;;;842        switch (opt) {                                          /* Validate 'opt'                                         */
;;;843            case OS_OPT_POST_FLAG_SET:
;;;844            case OS_OPT_POST_FLAG_CLR:
;;;845            case OS_OPT_POST_FLAG_SET | OS_OPT_POST_NO_SCHED:
;;;846            case OS_OPT_POST_FLAG_CLR | OS_OPT_POST_NO_SCHED:
;;;847                 break;
;;;848    
;;;849            default:
;;;850                *p_err = OS_ERR_OPT_INVALID;
;;;851                 return ((OS_FLAGS)0);
;;;852        }
;;;853    #endif
;;;854    
;;;855    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;856        if (p_grp->Type != OS_OBJ_TYPE_FLAG) {                  /* Make sure we are pointing to an event flag grp         */
;;;857           *p_err = OS_ERR_OBJ_TYPE;
;;;858            return ((OS_FLAGS)0);
;;;859        }
;;;860    #endif
;;;861    
;;;862        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;863    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;864        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* See if called from an ISR                              */
;;;865            OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_FLAG,          /* Post to ISR queue                                      */
;;;866                        (void      *)p_grp,
;;;867                        (void      *)0,
;;;868                        (OS_MSG_SIZE)0,
;;;869                        (OS_FLAGS   )flags,
;;;870                        (OS_OPT     )opt,
;;;871                        (CPU_TS     )ts,
;;;872                        (OS_ERR    *)p_err);
;;;873            return ((OS_FLAGS)0);
;;;874        }
;;;875    #endif
;;;876    
;;;877        flags_cur = OS_FlagPost(p_grp,
;;;878                                flags,
;;;879                                opt,
;;;880                                ts,
;;;881                                p_err);
;;;882    
;;;883        return (flags_cur);
;;;884    }
000016  e8bd83f8          POP      {r3-r9,pc}
                  |L6.26|
00001a  b14e              CBZ      r6,|L6.48|
00001c  2e01              CMP      r6,#1                 ;842
00001e  d008              BEQ      |L6.50|
000020  f5b64f00          CMP      r6,#0x8000            ;842
000024  d006              BEQ      |L6.52|
000026  f46f4000          MVN      r0,#0x8000            ;842
00002a  4430              ADD      r0,r0,r6              ;842
00002c  b920              CBNZ     r0,|L6.56|
00002e  e002              B        |L6.54|
                  |L6.48|
000030  bf00              NOP                            ;844
                  |L6.50|
000032  bf00              NOP                            ;845
                  |L6.52|
000034  bf00              NOP                            ;846
                  |L6.54|
000036  e004              B        |L6.66|
                  |L6.56|
000038  f6456025          MOV      r0,#0x5e25            ;850
00003c  8020              STRH     r0,[r4,#0]            ;850
00003e  2000              MOVS     r0,#0                 ;851
000040  e7e9              B        |L6.22|
                  |L6.66|
000042  bf00              NOP                            ;847
000044  490a              LDR      r1,|L6.112|
000046  6828              LDR      r0,[r5,#0]            ;856
000048  4288              CMP      r0,r1                 ;856
00004a  d004              BEQ      |L6.86|
00004c  f64550c4          MOV      r0,#0x5dc4            ;857
000050  8020              STRH     r0,[r4,#0]            ;857
000052  2000              MOVS     r0,#0                 ;858
000054  e7df              B        |L6.22|
                  |L6.86|
000056  f7fffffe          BL       CPU_TS_TmrRd
00005a  4681              MOV      r9,r0                 ;862
00005c  464b              MOV      r3,r9                 ;877
00005e  4632              MOV      r2,r6                 ;877
000060  4641              MOV      r1,r8                 ;877
000062  4628              MOV      r0,r5                 ;877
000064  9400              STR      r4,[sp,#0]            ;877
000066  f7fffffe          BL       OS_FlagPost
00006a  4607              MOV      r7,r0                 ;877
00006c  4638              MOV      r0,r7                 ;883
00006e  e7d2              B        |L6.22|
;;;885    
                          ENDP

                  |L6.112|
                          DCD      0x47414c46

                          AREA ||i.OS_FlagBlock||, CODE, READONLY, ALIGN=2

                  OS_FlagBlock PROC
;;;922    
;;;923    void  OS_FlagBlock (OS_PEND_DATA  *p_pend_data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;924                        OS_FLAG_GRP   *p_grp,
;;;925                        OS_FLAGS       flags,
;;;926                        OS_OPT         opt,
;;;927                        OS_TICK        timeout)
;;;928    {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  f8dd8018          LDR      r8,[sp,#0x18]
;;;929        OSTCBCurPtr->FlagsPend = flags;                         /* Save the flags that we need to wait for                */
000010  480a              LDR      r0,|L7.60|
000012  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
000014  f8c04080          STR      r4,[r0,#0x80]
;;;930        OSTCBCurPtr->FlagsOpt  = opt;                           /* Save the type of wait we are doing                     */
000018  4808              LDR      r0,|L7.60|
00001a  6800              LDR      r0,[r0,#0]  ; OSTCBCurPtr
00001c  f8a05088          STRH     r5,[r0,#0x88]
;;;931        OSTCBCurPtr->FlagsRdy  = (OS_FLAGS)0;
000020  2000              MOVS     r0,#0
000022  4906              LDR      r1,|L7.60|
000024  6809              LDR      r1,[r1,#0]  ; OSTCBCurPtr
000026  f8c10084          STR      r0,[r1,#0x84]
;;;932    
;;;933        OS_Pend(p_pend_data,
00002a  4643              MOV      r3,r8
00002c  2201              MOVS     r2,#1
00002e  4639              MOV      r1,r7
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       OS_Pend
;;;934                (OS_PEND_OBJ *)((void *)p_grp),
;;;935                 OS_TASK_PEND_ON_FLAG,
;;;936                 timeout);
;;;937    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;938    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      OSTCBCurPtr

                          AREA ||i.OS_FlagClr||, CODE, READONLY, ALIGN=2

                  OS_FlagClr PROC
;;;955    
;;;956    void  OS_FlagClr (OS_FLAG_GRP  *p_grp)
000000  b570              PUSH     {r4-r6,lr}
;;;957    {
000002  4604              MOV      r4,r0
;;;958        OS_PEND_LIST  *p_pend_list;
;;;959    
;;;960    
;;;961    
;;;962        p_grp->Type             = OS_OBJ_TYPE_NONE;
000004  4805              LDR      r0,|L8.28|
000006  6020              STR      r0,[r4,#0]
;;;963        p_grp->NamePtr          = (CPU_CHAR *)((void *)"?FLAG");    /* Unknown name                                       */
000008  a005              ADR      r0,|L8.32|
00000a  6060              STR      r0,[r4,#4]
;;;964        p_grp->Flags            = (OS_FLAGS )0;
00000c  2000              MOVS     r0,#0
00000e  6220              STR      r0,[r4,#0x20]
;;;965        p_pend_list             = &p_grp->PendList;
000010  f1040508          ADD      r5,r4,#8
;;;966        OS_PendListInit(p_pend_list);
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       OS_PendListInit
;;;967    }
00001a  bd70              POP      {r4-r6,pc}
;;;968    
                          ENDP

                  |L8.28|
                          DCD      0x454e4f4e
                  |L8.32|
000020  3f464c41          DCB      "?FLAG",0
000024  4700    
000026  00                DCB      0
000027  00                DCB      0

                          AREA ||i.OS_FlagDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_FlagDbgListAdd PROC
;;;1020   #if OS_CFG_DBG_EN > 0u
;;;1021   void  OS_FlagDbgListAdd (OS_FLAG_GRP  *p_grp)
000000  a109              ADR      r1,|L9.40|
;;;1022   {
;;;1023       p_grp->DbgNamePtr                = (CPU_CHAR    *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;1024       p_grp->DbgPrevPtr                = (OS_FLAG_GRP *)0;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;1025       if (OSFlagDbgListPtr == (OS_FLAG_GRP *)0) {
000008  4908              LDR      r1,|L9.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSFlagDbgListPtr
00000c  b911              CBNZ     r1,|L9.20|
;;;1026           p_grp->DbgNextPtr            = (OS_FLAG_GRP *)0;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L9.32|
                  |L9.20|
;;;1027       } else {
;;;1028           p_grp->DbgNextPtr            =  OSFlagDbgListPtr;
000014  4905              LDR      r1,|L9.44|
000016  6809              LDR      r1,[r1,#0]  ; OSFlagDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;1029           OSFlagDbgListPtr->DbgPrevPtr =  p_grp;
00001a  4904              LDR      r1,|L9.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSFlagDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L9.32|
;;;1030       }
;;;1031       OSFlagDbgListPtr                 =  p_grp;
000020  4902              LDR      r1,|L9.44|
000022  6008              STR      r0,[r1,#0]  ; OSFlagDbgListPtr
;;;1032   }
000024  4770              BX       lr
;;;1033   
                          ENDP

000026  0000              DCW      0x0000
                  |L9.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L9.44|
                          DCD      OSFlagDbgListPtr

                          AREA ||i.OS_FlagDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_FlagDbgListRemove PROC
;;;1035   
;;;1036   void  OS_FlagDbgListRemove (OS_FLAG_GRP  *p_grp)
000000  6942              LDR      r2,[r0,#0x14]
;;;1037   {
;;;1038       OS_FLAG_GRP  *p_grp_next;
;;;1039       OS_FLAG_GRP  *p_grp_prev;
;;;1040   
;;;1041   
;;;1042       p_grp_prev = p_grp->DbgPrevPtr;
;;;1043       p_grp_next = p_grp->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;1044   
;;;1045       if (p_grp_prev == (OS_FLAG_GRP *)0) {
000004  b93a              CBNZ     r2,|L10.22|
;;;1046           OSFlagDbgListPtr = p_grp_next;
000006  4b09              LDR      r3,|L10.44|
000008  6019              STR      r1,[r3,#0]  ; OSFlagDbgListPtr
;;;1047           if (p_grp_next != (OS_FLAG_GRP *)0) {
00000a  b109              CBZ      r1,|L10.16|
;;;1048               p_grp_next->DbgPrevPtr = (OS_FLAG_GRP *)0;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L10.16|
;;;1049           }
;;;1050           p_grp->DbgNextPtr = (OS_FLAG_GRP *)0;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L10.42|
                  |L10.22|
;;;1051   
;;;1052       } else if (p_grp_next == (OS_FLAG_GRP *)0) {
000016  b919              CBNZ     r1,|L10.32|
;;;1053           p_grp_prev->DbgNextPtr = (OS_FLAG_GRP *)0;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;1054           p_grp->DbgPrevPtr      = (OS_FLAG_GRP *)0;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L10.42|
                  |L10.32|
;;;1055   
;;;1056       } else {
;;;1057           p_grp_prev->DbgNextPtr =  p_grp_next;
000020  6191              STR      r1,[r2,#0x18]
;;;1058           p_grp_next->DbgPrevPtr =  p_grp_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;1059           p_grp->DbgNextPtr      = (OS_FLAG_GRP *)0;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;1060           p_grp->DbgPrevPtr      = (OS_FLAG_GRP *)0;
000028  6143              STR      r3,[r0,#0x14]
                  |L10.42|
;;;1061       }
;;;1062   }
00002a  4770              BX       lr
;;;1063   #endif
                          ENDP

                  |L10.44|
                          DCD      OSFlagDbgListPtr

                          AREA ||i.OS_FlagInit||, CODE, READONLY, ALIGN=2

                  OS_FlagInit PROC
;;;986    
;;;987    void  OS_FlagInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;988    {
;;;989    #ifdef OS_SAFETY_CRITICAL
;;;990        if (p_err == (OS_ERR *)0) {
;;;991            OS_SAFETY_CRITICAL_EXCEPTION();
;;;992            return;
;;;993        }
;;;994    #endif
;;;995    
;;;996    #if OS_CFG_DBG_EN > 0u
;;;997        OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
000002  4a03              LDR      r2,|L11.16|
000004  6011              STR      r1,[r2,#0]  ; OSFlagDbgListPtr
;;;998    #endif
;;;999    
;;;1000       OSFlagQty        = (OS_OBJ_QTY   )0;
000006  4a03              LDR      r2,|L11.20|
000008  8011              STRH     r1,[r2,#0]
;;;1001      *p_err            = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;1002   }
00000c  4770              BX       lr
;;;1003   
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      OSFlagDbgListPtr
                  |L11.20|
                          DCD      OSFlagQty

                          AREA ||i.OS_FlagPost||, CODE, READONLY, ALIGN=1

                  OS_FlagPost PROC
;;;1108   
;;;1109   OS_FLAGS  OS_FlagPost (OS_FLAG_GRP  *p_grp,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;1110                          OS_FLAGS      flags,
;;;1111                          OS_OPT        opt,
;;;1112                          CPU_TS        ts,
;;;1113                          OS_ERR       *p_err)
;;;1114   {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
00000e  f8dd8038          LDR      r8,[sp,#0x38]
;;;1115       OS_FLAGS        flags_cur;
;;;1116       OS_FLAGS        flags_rdy;
;;;1117       OS_OPT          mode;
;;;1118       OS_PEND_DATA   *p_pend_data;
;;;1119       OS_PEND_DATA   *p_pend_data_next;
;;;1120       OS_PEND_LIST   *p_pend_list;
;;;1121       OS_TCB         *p_tcb;
;;;1122       CPU_SR_ALLOC();
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;1123   
;;;1124   
;;;1125   
;;;1126       CPU_CRITICAL_ENTER();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  f7fffffe          BL       CPU_SR_Save
00001e  9000              STR      r0,[sp,#0]
000020  bf00              NOP      
000022  bf00              NOP      
;;;1127       switch (opt) {
000024  f1ba0f00          CMP      r10,#0
000028  d00a              BEQ      |L12.64|
00002a  f1ba0f01          CMP      r10,#1
00002e  d00d              BEQ      |L12.76|
000030  f5ba4f00          CMP      r10,#0x8000
000034  d005              BEQ      |L12.66|
000036  f46f4000          MVN      r0,#0x8000
00003a  4450              ADD      r0,r0,r10
00003c  b960              CBNZ     r0,|L12.88|
00003e  e006              B        |L12.78|
                  |L12.64|
;;;1128           case OS_OPT_POST_FLAG_SET:
;;;1129           case OS_OPT_POST_FLAG_SET | OS_OPT_POST_NO_SCHED:
000040  bf00              NOP      
                  |L12.66|
;;;1130                p_grp->Flags |=  flags;                            /* Set   the flags specified in the group             */
000042  6a20              LDR      r0,[r4,#0x20]
000044  ea400009          ORR      r0,r0,r9
000048  6220              STR      r0,[r4,#0x20]
;;;1131                break;
00004a  e014              B        |L12.118|
                  |L12.76|
;;;1132   
;;;1133           case OS_OPT_POST_FLAG_CLR:
;;;1134           case OS_OPT_POST_FLAG_CLR | OS_OPT_POST_NO_SCHED:
00004c  bf00              NOP      
                  |L12.78|
;;;1135                p_grp->Flags &= ~flags;                            /* Clear the flags specified in the group             */
00004e  6a20              LDR      r0,[r4,#0x20]
000050  ea200009          BIC      r0,r0,r9
000054  6220              STR      r0,[r4,#0x20]
;;;1136                break;
000056  e00e              B        |L12.118|
                  |L12.88|
;;;1137   
;;;1138           default:
;;;1139                CPU_CRITICAL_EXIT();                               /* INVALID option                                     */
000058  bf00              NOP      
00005a  bf00              NOP      
00005c  9800              LDR      r0,[sp,#0]
00005e  f7fffffe          BL       CPU_SR_Restore
000062  bf00              NOP      
000064  bf00              NOP      
;;;1140               *p_err = OS_ERR_OPT_INVALID;
000066  f6456025          MOV      r0,#0x5e25
00006a  f8a80000          STRH     r0,[r8,#0]
;;;1141                return ((OS_FLAGS)0);
00006e  2000              MOVS     r0,#0
                  |L12.112|
;;;1142       }
;;;1143       p_grp->TS   = ts;
;;;1144       p_pend_list = &p_grp->PendList;
;;;1145       if (p_pend_list->NbrEntries == 0u) {                        /* Any task waiting on event flag group?              */
;;;1146           CPU_CRITICAL_EXIT();                                    /* No                                                 */
;;;1147          *p_err = OS_ERR_NONE;
;;;1148           return (p_grp->Flags);
;;;1149       }
;;;1150   
;;;1151       OS_CRITICAL_ENTER_CPU_EXIT();
;;;1152       p_pend_data = p_pend_list->HeadPtr;
;;;1153       p_tcb       = p_pend_data->TCBPtr;
;;;1154       while (p_tcb != (OS_TCB *)0) {                              /* Go through all tasks waiting on event flag(s)      */
;;;1155           p_pend_data_next = p_pend_data->NextPtr;
;;;1156           mode             = p_tcb->FlagsOpt & OS_OPT_PEND_FLAG_MASK;
;;;1157           switch (mode) {
;;;1158               case OS_OPT_PEND_FLAG_SET_ALL:                      /* See if all req. flags are set for current node     */
;;;1159                    flags_rdy = (OS_FLAGS)(p_grp->Flags & p_tcb->FlagsPend);
;;;1160                    if (flags_rdy == p_tcb->FlagsPend) {
;;;1161                        OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
;;;1162                                       flags_rdy,
;;;1163                                       ts);
;;;1164                    }
;;;1165                    break;
;;;1166   
;;;1167               case OS_OPT_PEND_FLAG_SET_ANY:                      /* See if any flag set                                */
;;;1168                    flags_rdy = (OS_FLAGS)(p_grp->Flags & p_tcb->FlagsPend);
;;;1169                    if (flags_rdy != (OS_FLAGS)0) {
;;;1170                        OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
;;;1171                                       flags_rdy,
;;;1172                                       ts);
;;;1173                    }
;;;1174                    break;
;;;1175   
;;;1176   #if OS_CFG_FLAG_MODE_CLR_EN > 0u
;;;1177               case OS_OPT_PEND_FLAG_CLR_ALL:                      /* See if all req. flags are set for current node     */
;;;1178                    flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
;;;1179                    if (flags_rdy == p_tcb->FlagsPend) {
;;;1180                        OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
;;;1181                                       flags_rdy,
;;;1182                                       ts);
;;;1183                    }
;;;1184                    break;
;;;1185   
;;;1186               case OS_OPT_PEND_FLAG_CLR_ANY:                      /* See if any flag set                                */
;;;1187                    flags_rdy = (OS_FLAGS)(~p_grp->Flags & p_tcb->FlagsPend);
;;;1188                    if (flags_rdy != (OS_FLAGS)0) {
;;;1189                        OS_FlagTaskRdy(p_tcb,                      /* Make task RTR, event(s) Rx'd                       */
;;;1190                                       flags_rdy,
;;;1191                                       ts);
;;;1192                    }
;;;1193                    break;
;;;1194   #endif
;;;1195               default:
;;;1196                    OS_CRITICAL_EXIT();
;;;1197                   *p_err = OS_ERR_FLAG_PEND_OPT;
;;;1198                    return ((OS_FLAGS)0);
;;;1199           }
;;;1200           p_pend_data = p_pend_data_next;                         /* Point to next task waiting for event flag(s)       */
;;;1201           if (p_pend_data != (OS_PEND_DATA *)0) {
;;;1202               p_tcb = p_pend_data->TCBPtr;
;;;1203           } else {
;;;1204               p_tcb = (OS_TCB *)0;
;;;1205           }
;;;1206       }
;;;1207       OS_CRITICAL_EXIT_NO_SCHED();
;;;1208   
;;;1209       if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
;;;1210           OSSched();
;;;1211       }
;;;1212   
;;;1213       CPU_CRITICAL_ENTER();
;;;1214       flags_cur = p_grp->Flags;
;;;1215       CPU_CRITICAL_EXIT();
;;;1216      *p_err     = OS_ERR_NONE;
;;;1217       return (flags_cur);
;;;1218   }
000070  b005              ADD      sp,sp,#0x14
000072  e8bd8ff0          POP      {r4-r11,pc}
                  |L12.118|
000076  bf00              NOP                            ;1131
000078  f8c4b024          STR      r11,[r4,#0x24]        ;1143
00007c  f1040008          ADD      r0,r4,#8              ;1144
000080  9001              STR      r0,[sp,#4]            ;1144
000082  9801              LDR      r0,[sp,#4]            ;1145
000084  8900              LDRH     r0,[r0,#8]            ;1145
000086  b958              CBNZ     r0,|L12.160|
000088  bf00              NOP                            ;1146
00008a  bf00              NOP                            ;1146
00008c  9800              LDR      r0,[sp,#0]            ;1146
00008e  f7fffffe          BL       CPU_SR_Restore
000092  bf00              NOP                            ;1146
000094  bf00              NOP                            ;1146
000096  2000              MOVS     r0,#0                 ;1147
000098  f8a80000          STRH     r0,[r8,#0]            ;1147
00009c  6a20              LDR      r0,[r4,#0x20]         ;1148
00009e  e7e7              B        |L12.112|
                  |L12.160|
0000a0  9801              LDR      r0,[sp,#4]            ;1152
0000a2  6807              LDR      r7,[r0,#0]            ;1152
0000a4  68bd              LDR      r5,[r7,#8]            ;1153
0000a6  e059              B        |L12.348|
                  |L12.168|
0000a8  6878              LDR      r0,[r7,#4]            ;1155
0000aa  9002              STR      r0,[sp,#8]            ;1155
0000ac  f8950088          LDRB     r0,[r5,#0x88]         ;1156
0000b0  f000000f          AND      r0,r0,#0xf            ;1156
0000b4  9003              STR      r0,[sp,#0xc]          ;1156
0000b6  9803              LDR      r0,[sp,#0xc]          ;1157
0000b8  2801              CMP      r0,#1                 ;1157
0000ba  d021              BEQ      |L12.256|
0000bc  2802              CMP      r0,#2                 ;1157
0000be  d02e              BEQ      |L12.286|
0000c0  2804              CMP      r0,#4                 ;1157
0000c2  d002              BEQ      |L12.202|
0000c4  2808              CMP      r0,#8                 ;1157
0000c6  d136              BNE      |L12.310|
0000c8  e00e              B        |L12.232|
                  |L12.202|
0000ca  6a20              LDR      r0,[r4,#0x20]         ;1159
0000cc  f8d51080          LDR      r1,[r5,#0x80]         ;1159
0000d0  ea000601          AND      r6,r0,r1              ;1159
0000d4  f8d50080          LDR      r0,[r5,#0x80]         ;1160
0000d8  42b0              CMP      r0,r6                 ;1160
0000da  d104              BNE      |L12.230|
0000dc  465a              MOV      r2,r11                ;1161
0000de  4631              MOV      r1,r6                 ;1161
0000e0  4628              MOV      r0,r5                 ;1161
0000e2  f7fffffe          BL       OS_FlagTaskRdy
                  |L12.230|
0000e6  e033              B        |L12.336|
                  |L12.232|
0000e8  6a20              LDR      r0,[r4,#0x20]         ;1168
0000ea  f8d51080          LDR      r1,[r5,#0x80]         ;1168
0000ee  ea000601          AND      r6,r0,r1              ;1168
0000f2  b126              CBZ      r6,|L12.254|
0000f4  465a              MOV      r2,r11                ;1170
0000f6  4631              MOV      r1,r6                 ;1170
0000f8  4628              MOV      r0,r5                 ;1170
0000fa  f7fffffe          BL       OS_FlagTaskRdy
                  |L12.254|
0000fe  e027              B        |L12.336|
                  |L12.256|
000100  f8d50080          LDR      r0,[r5,#0x80]         ;1178
000104  6a21              LDR      r1,[r4,#0x20]         ;1178
000106  ea200601          BIC      r6,r0,r1              ;1178
00010a  f8d50080          LDR      r0,[r5,#0x80]         ;1179
00010e  42b0              CMP      r0,r6                 ;1179
000110  d104              BNE      |L12.284|
000112  465a              MOV      r2,r11                ;1180
000114  4631              MOV      r1,r6                 ;1180
000116  4628              MOV      r0,r5                 ;1180
000118  f7fffffe          BL       OS_FlagTaskRdy
                  |L12.284|
00011c  e018              B        |L12.336|
                  |L12.286|
00011e  f8d50080          LDR      r0,[r5,#0x80]         ;1187
000122  6a21              LDR      r1,[r4,#0x20]         ;1187
000124  ea200601          BIC      r6,r0,r1              ;1187
000128  b126              CBZ      r6,|L12.308|
00012a  465a              MOV      r2,r11                ;1189
00012c  4631              MOV      r1,r6                 ;1189
00012e  4628              MOV      r0,r5                 ;1189
000130  f7fffffe          BL       OS_FlagTaskRdy
                  |L12.308|
000134  e00c              B        |L12.336|
                  |L12.310|
000136  bf00              NOP                            ;1196
000138  bf00              NOP                            ;1196
00013a  9800              LDR      r0,[sp,#0]            ;1196
00013c  f7fffffe          BL       CPU_SR_Restore
000140  bf00              NOP                            ;1196
000142  bf00              NOP                            ;1196
000144  f64320ff          MOV      r0,#0x3aff            ;1197
000148  f8a80000          STRH     r0,[r8,#0]            ;1197
00014c  2000              MOVS     r0,#0                 ;1198
00014e  e78f              B        |L12.112|
                  |L12.336|
000150  bf00              NOP                            ;1165
000152  9f02              LDR      r7,[sp,#8]            ;1200
000154  b10f              CBZ      r7,|L12.346|
000156  68bd              LDR      r5,[r7,#8]            ;1202
000158  e000              B        |L12.348|
                  |L12.346|
00015a  2500              MOVS     r5,#0                 ;1204
                  |L12.348|
00015c  2d00              CMP      r5,#0                 ;1154
00015e  d1a3              BNE      |L12.168|
000160  bf00              NOP                            ;1207
000162  bf00              NOP                            ;1207
000164  9800              LDR      r0,[sp,#0]            ;1207
000166  f7fffffe          BL       CPU_SR_Restore
00016a  bf00              NOP                            ;1207
00016c  bf00              NOP                            ;1207
00016e  f40a4000          AND      r0,r10,#0x8000        ;1209
000172  b908              CBNZ     r0,|L12.376|
000174  f7fffffe          BL       OSSched
                  |L12.376|
000178  bf00              NOP                            ;1213
00017a  bf00              NOP                            ;1213
00017c  f7fffffe          BL       CPU_SR_Save
000180  9000              STR      r0,[sp,#0]            ;1213
000182  bf00              NOP                            ;1213
000184  bf00              NOP                            ;1213
000186  6a20              LDR      r0,[r4,#0x20]         ;1214
000188  9004              STR      r0,[sp,#0x10]         ;1214
00018a  bf00              NOP                            ;1215
00018c  bf00              NOP                            ;1215
00018e  9800              LDR      r0,[sp,#0]            ;1215
000190  f7fffffe          BL       CPU_SR_Restore
000194  bf00              NOP                            ;1215
000196  bf00              NOP                            ;1215
000198  2000              MOVS     r0,#0                 ;1216
00019a  f8a80000          STRH     r0,[r8,#0]            ;1216
00019e  9804              LDR      r0,[sp,#0x10]         ;1217
0001a0  e766              B        |L12.112|
;;;1219   
                          ENDP


                          AREA ||i.OS_FlagTaskRdy||, CODE, READONLY, ALIGN=1

                  OS_FlagTaskRdy PROC
;;;1240   
;;;1241   void   OS_FlagTaskRdy (OS_TCB    *p_tcb,
000000  b570              PUSH     {r4-r6,lr}
;;;1242                          OS_FLAGS   flags_rdy,
;;;1243                          CPU_TS     ts)
;;;1244   {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4615              MOV      r5,r2
;;;1245       p_tcb->FlagsRdy   = flags_rdy;
000008  3434              ADDS     r4,r4,#0x34
00000a  6526              STR      r6,[r4,#0x50]
;;;1246       p_tcb->PendStatus = OS_STATUS_PEND_OK;                  /* Clear pend status                                      */
00000c  2000              MOVS     r0,#0
00000e  7060              STRB     r0,[r4,#1]
;;;1247       p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;            /* Indicate no longer pending                             */
000010  7020              STRB     r0,[r4,#0]
;;;1248       p_tcb->TS         = ts;
000012  60e5              STR      r5,[r4,#0xc]
;;;1249       switch (p_tcb->TaskState) {
000014  78a0              LDRB     r0,[r4,#2]
000016  3c34              SUBS     r4,r4,#0x34
000018  2808              CMP      r0,#8
00001a  d216              BCS      |L13.74|
00001c  e8dff000          TBB      [pc,r0]
000020  04050809          DCB      0x04,0x05,0x08,0x09
000024  07061011          DCB      0x07,0x06,0x10,0x11
;;;1250           case OS_TASK_STATE_RDY:
;;;1251           case OS_TASK_STATE_DLY:
000028  bf00              NOP      
;;;1252           case OS_TASK_STATE_DLY_SUSPENDED:
00002a  bf00              NOP      
;;;1253           case OS_TASK_STATE_SUSPENDED:
00002c  bf00              NOP      
;;;1254                break;
00002e  e00d              B        |L13.76|
;;;1255   
;;;1256           case OS_TASK_STATE_PEND:
;;;1257           case OS_TASK_STATE_PEND_TIMEOUT:
000030  bf00              NOP      
;;;1258                OS_TaskRdy(p_tcb);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       OS_TaskRdy
;;;1259                p_tcb->TaskState = OS_TASK_STATE_RDY;
000038  2000              MOVS     r0,#0
00003a  f8840036          STRB     r0,[r4,#0x36]
;;;1260                break;
00003e  e005              B        |L13.76|
;;;1261   
;;;1262           case OS_TASK_STATE_PEND_SUSPENDED:
;;;1263           case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
000040  bf00              NOP      
;;;1264                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
000042  2004              MOVS     r0,#4
000044  f8840036          STRB     r0,[r4,#0x36]
;;;1265                break;
000048  e000              B        |L13.76|
                  |L13.74|
;;;1266   
;;;1267           default:
;;;1268                break;
00004a  bf00              NOP      
                  |L13.76|
00004c  bf00              NOP                            ;1254
;;;1269       }
;;;1270       OS_PendListRemove(p_tcb);
00004e  4620              MOV      r0,r4
000050  f7fffffe          BL       OS_PendListRemove
;;;1271   }
000054  bd70              POP      {r4-r6,pc}
;;;1272   #endif
                          ENDP

