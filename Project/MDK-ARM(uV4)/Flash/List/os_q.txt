; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_q.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_q.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_q.crf ..\..\uCOS-III\uCOS-III\Source\os_q.c]
                          THUMB

                          AREA ||i.OSQCreate||, CODE, READONLY, ALIGN=2

                  OSQCreate PROC
;;;70     
;;;71     void  OSQCreate (OS_Q        *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;72                      CPU_CHAR    *p_name,
;;;73                      OS_MSG_QTY   max_qty,
;;;74                      OS_ERR      *p_err)
;;;75     
;;;76     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;77         CPU_SR_ALLOC();
00000c  f04f0800          MOV      r8,#0
;;;78     
;;;79     
;;;80     
;;;81     #ifdef OS_SAFETY_CRITICAL
;;;82         if (p_err == (OS_ERR *)0) {
;;;83             OS_SAFETY_CRITICAL_EXCEPTION();
;;;84             return;
;;;85         }
;;;86     #endif
;;;87     
;;;88     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;89         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;90            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;91             return;
;;;92         }
;;;93     #endif
;;;94     
;;;95     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;96         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
000010  481c              LDR      r0,|L1.132|
000012  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000014  2800              CMP      r0,#0
000016  dd04              BLE      |L1.34|
;;;97            *p_err = OS_ERR_CREATE_ISR;
000018  f64260e1          MOV      r0,#0x2ee1
00001c  8028              STRH     r0,[r5,#0]
                  |L1.30|
;;;98             return;
;;;99         }
;;;100    #endif
;;;101    
;;;102    #if OS_CFG_ARG_CHK_EN > 0u
;;;103        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
;;;104           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;105            return;
;;;106        }
;;;107        if (max_qty == (OS_MSG_QTY)0) {                         /* Cannot specify a zero size queue                       */
;;;108           *p_err = OS_ERR_Q_SIZE;
;;;109            return;
;;;110        }
;;;111    #endif
;;;112    
;;;113        OS_CRITICAL_ENTER();
;;;114        p_q->Type    = OS_OBJ_TYPE_Q;                           /* Mark the data structure as a message queue             */
;;;115        p_q->NamePtr = p_name;
;;;116        OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the queue                                   */
;;;117                    max_qty);
;;;118        OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
;;;119    
;;;120    #if OS_CFG_DBG_EN > 0u
;;;121        OS_QDbgListAdd(p_q);
;;;122    #endif
;;;123        OSQQty++;                                               /* One more queue created                                 */
;;;124    
;;;125        OS_CRITICAL_EXIT_NO_SCHED();
;;;126       *p_err = OS_ERR_NONE;
;;;127    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L1.34|
000022  b91c              CBNZ     r4,|L1.44|
000024  f64550c3          MOV      r0,#0x5dc3            ;104
000028  8028              STRH     r0,[r5,#0]            ;104
00002a  e7f8              B        |L1.30|
                  |L1.44|
00002c  b91e              CBNZ     r6,|L1.54|
00002e  f2465094          MOV      r0,#0x6594            ;108
000032  8028              STRH     r0,[r5,#0]            ;108
000034  e7f3              B        |L1.30|
                  |L1.54|
000036  bf00              NOP                            ;113
000038  bf00              NOP                            ;113
00003a  f7fffffe          BL       CPU_SR_Save
00003e  4680              MOV      r8,r0                 ;113
000040  bf00              NOP                            ;113
000042  bf00              NOP                            ;113
000044  4810              LDR      r0,|L1.136|
000046  6020              STR      r0,[r4,#0]            ;114
000048  6067              STR      r7,[r4,#4]            ;115
00004a  4631              MOV      r1,r6                 ;116
00004c  f1040020          ADD      r0,r4,#0x20           ;116
000050  f7fffffe          BL       OS_MsgQInit
000054  f1040008          ADD      r0,r4,#8              ;118
000058  f7fffffe          BL       OS_PendListInit
00005c  4620              MOV      r0,r4                 ;121
00005e  f7fffffe          BL       OS_QDbgListAdd
000062  480a              LDR      r0,|L1.140|
000064  8800              LDRH     r0,[r0,#0]            ;123  ; OSQQty
000066  1c40              ADDS     r0,r0,#1              ;123
000068  4908              LDR      r1,|L1.140|
00006a  8008              STRH     r0,[r1,#0]            ;123
00006c  bf00              NOP                            ;125
00006e  bf00              NOP                            ;125
000070  4640              MOV      r0,r8                 ;125
000072  f7fffffe          BL       CPU_SR_Restore
000076  bf00              NOP                            ;125
000078  bf00              NOP                            ;125
00007a  2000              MOVS     r0,#0                 ;126
00007c  8028              STRH     r0,[r5,#0]            ;126
00007e  bf00              NOP      
000080  e7cd              B        |L1.30|
;;;128    
                          ENDP

000082  0000              DCW      0x0000
                  |L1.132|
                          DCD      OSIntNestingCtr
                  |L1.136|
                          DCD      0x55455551
                  |L1.140|
                          DCD      OSQQty

                          AREA ||i.OSQDel||, CODE, READONLY, ALIGN=2

                  OSQDel PROC
;;;166    #if OS_CFG_Q_DEL_EN > 0u
;;;167    OS_OBJ_QTY  OSQDel (OS_Q    *p_q,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;168                        OS_OPT   opt,
;;;169                        OS_ERR  *p_err)
;;;170    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
;;;171        OS_OBJ_QTY     cnt;
;;;172        OS_OBJ_QTY     nbr_tasks;
;;;173        OS_PEND_DATA  *p_pend_data;
;;;174        OS_PEND_LIST  *p_pend_list;
;;;175        OS_TCB        *p_tcb;
;;;176        CPU_TS         ts;
;;;177        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;178    
;;;179    
;;;180    
;;;181    #ifdef OS_SAFETY_CRITICAL
;;;182        if (p_err == (OS_ERR *)0) {
;;;183            OS_SAFETY_CRITICAL_EXCEPTION();
;;;184            return ((OS_OBJ_QTY)0);
;;;185        }
;;;186    #endif
;;;187    
;;;188    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;189        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't delete a message queue from an ISR               */
00000e  4849              LDR      r0,|L2.308|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L2.34|
;;;190           *p_err = OS_ERR_DEL_ISR;
000016  f24320c9          MOV      r0,#0x32c9
00001a  8020              STRH     r0,[r4,#0]
;;;191            return ((OS_OBJ_QTY)0);
00001c  2000              MOVS     r0,#0
                  |L2.30|
;;;192        }
;;;193    #endif
;;;194    
;;;195    #if OS_CFG_ARG_CHK_EN > 0u
;;;196        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
;;;197           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;198            return ((OS_OBJ_QTY)0u);
;;;199        }
;;;200        switch (opt) {                                          /* Validate 'opt'                                         */
;;;201            case OS_OPT_DEL_NO_PEND:
;;;202            case OS_OPT_DEL_ALWAYS:
;;;203                 break;
;;;204    
;;;205            default:
;;;206                *p_err =  OS_ERR_OPT_INVALID;
;;;207                 return ((OS_OBJ_QTY)0u);
;;;208        }
;;;209    #endif
;;;210    
;;;211    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;212        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;213           *p_err = OS_ERR_OBJ_TYPE;
;;;214            return ((OS_OBJ_QTY)0);
;;;215        }
;;;216    #endif
;;;217    
;;;218        CPU_CRITICAL_ENTER();
;;;219        p_pend_list = &p_q->PendList;
;;;220        cnt         = p_pend_list->NbrEntries;
;;;221        nbr_tasks   = cnt;
;;;222        switch (opt) {
;;;223            case OS_OPT_DEL_NO_PEND:                            /* Delete message queue only if no task waiting           */
;;;224                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;225    #if OS_CFG_DBG_EN > 0u
;;;226                     OS_QDbgListRemove(p_q);
;;;227    #endif
;;;228                     OSQQty--;
;;;229                     OS_QClr(p_q);
;;;230                     CPU_CRITICAL_EXIT();
;;;231                    *p_err = OS_ERR_NONE;
;;;232                 } else {
;;;233                     CPU_CRITICAL_EXIT();
;;;234                    *p_err = OS_ERR_TASK_WAITING;
;;;235                 }
;;;236                 break;
;;;237    
;;;238            case OS_OPT_DEL_ALWAYS:                             /* Always delete the message queue                        */
;;;239                 OS_CRITICAL_ENTER_CPU_EXIT();
;;;240                 ts = OS_TS_GET();                              /* Get local time stamp so all tasks get the same time    */
;;;241                 while (cnt > 0u) {                             /* Remove all tasks from the pend list                    */
;;;242                     p_pend_data = p_pend_list->HeadPtr;
;;;243                     p_tcb       = p_pend_data->TCBPtr;
;;;244                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_q),
;;;245                                   p_tcb,
;;;246                                   ts);
;;;247                     cnt--;
;;;248                 }
;;;249    #if OS_CFG_DBG_EN > 0u
;;;250                 OS_QDbgListRemove(p_q);
;;;251    #endif
;;;252                 OSQQty--;
;;;253                 OS_QClr(p_q);
;;;254                 OS_CRITICAL_EXIT_NO_SCHED();
;;;255                 OSSched();                                     /* Find highest priority task ready to run                */
;;;256                *p_err = OS_ERR_NONE;
;;;257                 break;
;;;258    
;;;259            default:
;;;260                 CPU_CRITICAL_EXIT();
;;;261                *p_err = OS_ERR_OPT_INVALID;
;;;262                 break;
;;;263        }
;;;264        return (nbr_tasks);
;;;265    }
00001e  e8bd9ffc          POP      {r2-r12,pc}
                  |L2.34|
000022  b925              CBNZ     r5,|L2.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;197
000028  8020              STRH     r0,[r4,#0]            ;197
00002a  2000              MOVS     r0,#0                 ;198
00002c  e7f7              B        |L2.30|
                  |L2.46|
00002e  f1b80f00          CMP      r8,#0                 ;200
000032  d003              BEQ      |L2.60|
000034  f1b80f01          CMP      r8,#1                 ;200
000038  d102              BNE      |L2.64|
00003a  e000              B        |L2.62|
                  |L2.60|
00003c  bf00              NOP                            ;202
                  |L2.62|
00003e  e004              B        |L2.74|
                  |L2.64|
000040  f6456025          MOV      r0,#0x5e25            ;206
000044  8020              STRH     r0,[r4,#0]            ;206
000046  2000              MOVS     r0,#0                 ;207
000048  e7e9              B        |L2.30|
                  |L2.74|
00004a  bf00              NOP                            ;203
00004c  493a              LDR      r1,|L2.312|
00004e  6828              LDR      r0,[r5,#0]            ;212
000050  4288              CMP      r0,r1                 ;212
000052  d004              BEQ      |L2.94|
000054  f64550c4          MOV      r0,#0x5dc4            ;213
000058  8020              STRH     r0,[r4,#0]            ;213
00005a  2000              MOVS     r0,#0                 ;214
00005c  e7df              B        |L2.30|
                  |L2.94|
00005e  bf00              NOP                            ;218
000060  bf00              NOP                            ;218
000062  f7fffffe          BL       CPU_SR_Save
000066  9000              STR      r0,[sp,#0]            ;218
000068  bf00              NOP                            ;218
00006a  bf00              NOP                            ;218
00006c  f1050908          ADD      r9,r5,#8              ;219
000070  f8b96008          LDRH     r6,[r9,#8]            ;220
000074  4637              MOV      r7,r6                 ;221
000076  f1b80f00          CMP      r8,#0                 ;222
00007a  d003              BEQ      |L2.132|
00007c  f1b80f01          CMP      r8,#1                 ;222
000080  d149              BNE      |L2.278|
000082  e020              B        |L2.198|
                  |L2.132|
000084  b9a7              CBNZ     r7,|L2.176|
000086  4628              MOV      r0,r5                 ;226
000088  f7fffffe          BL       OS_QDbgListRemove
00008c  482b              LDR      r0,|L2.316|
00008e  8800              LDRH     r0,[r0,#0]            ;228  ; OSQQty
000090  1e40              SUBS     r0,r0,#1              ;228
000092  492a              LDR      r1,|L2.316|
000094  8008              STRH     r0,[r1,#0]            ;228
000096  4628              MOV      r0,r5                 ;229
000098  f7fffffe          BL       OS_QClr
00009c  bf00              NOP                            ;230
00009e  bf00              NOP                            ;230
0000a0  9800              LDR      r0,[sp,#0]            ;230
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;230
0000a8  bf00              NOP                            ;230
0000aa  2000              MOVS     r0,#0                 ;231
0000ac  8020              STRH     r0,[r4,#0]            ;231
0000ae  e009              B        |L2.196|
                  |L2.176|
0000b0  bf00              NOP                            ;233
0000b2  bf00              NOP                            ;233
0000b4  9800              LDR      r0,[sp,#0]            ;233
0000b6  f7fffffe          BL       CPU_SR_Restore
0000ba  bf00              NOP                            ;233
0000bc  bf00              NOP                            ;233
0000be  f247105f          MOV      r0,#0x715f            ;234
0000c2  8020              STRH     r0,[r4,#0]            ;234
                  |L2.196|
0000c4  e032              B        |L2.300|
                  |L2.198|
0000c6  f7fffffe          BL       CPU_TS_TmrRd
0000ca  9001              STR      r0,[sp,#4]            ;240
0000cc  e00a              B        |L2.228|
                  |L2.206|
0000ce  f8d9a000          LDR      r10,[r9,#0]           ;242
0000d2  f8dab008          LDR      r11,[r10,#8]          ;243
0000d6  4659              MOV      r1,r11                ;244
0000d8  4628              MOV      r0,r5                 ;244
0000da  9a01              LDR      r2,[sp,#4]            ;244
0000dc  f7fffffe          BL       OS_PendObjDel
0000e0  1e70              SUBS     r0,r6,#1              ;247
0000e2  b286              UXTH     r6,r0                 ;247
                  |L2.228|
0000e4  2e00              CMP      r6,#0                 ;241
0000e6  d1f2              BNE      |L2.206|
0000e8  4628              MOV      r0,r5                 ;250
0000ea  f7fffffe          BL       OS_QDbgListRemove
0000ee  4813              LDR      r0,|L2.316|
0000f0  8800              LDRH     r0,[r0,#0]            ;252  ; OSQQty
0000f2  1e40              SUBS     r0,r0,#1              ;252
0000f4  4911              LDR      r1,|L2.316|
0000f6  8008              STRH     r0,[r1,#0]            ;252
0000f8  4628              MOV      r0,r5                 ;253
0000fa  f7fffffe          BL       OS_QClr
0000fe  bf00              NOP                            ;254
000100  bf00              NOP                            ;254
000102  9800              LDR      r0,[sp,#0]            ;254
000104  f7fffffe          BL       CPU_SR_Restore
000108  bf00              NOP                            ;254
00010a  bf00              NOP                            ;254
00010c  f7fffffe          BL       OSSched
000110  2000              MOVS     r0,#0                 ;256
000112  8020              STRH     r0,[r4,#0]            ;256
000114  e00a              B        |L2.300|
                  |L2.278|
000116  bf00              NOP                            ;260
000118  bf00              NOP                            ;260
00011a  9800              LDR      r0,[sp,#0]            ;260
00011c  f7fffffe          BL       CPU_SR_Restore
000120  bf00              NOP                            ;260
000122  bf00              NOP                            ;260
000124  f6456025          MOV      r0,#0x5e25            ;261
000128  8020              STRH     r0,[r4,#0]            ;261
00012a  bf00              NOP                            ;262
                  |L2.300|
00012c  bf00              NOP                            ;236
00012e  4638              MOV      r0,r7                 ;264
000130  e775              B        |L2.30|
;;;266    #endif
                          ENDP

000132  0000              DCW      0x0000
                  |L2.308|
                          DCD      OSIntNestingCtr
                  |L2.312|
                          DCD      0x55455551
                  |L2.316|
                          DCD      OSQQty

                          AREA ||i.OSQFlush||, CODE, READONLY, ALIGN=2

                  OSQFlush PROC
;;;293    #if OS_CFG_Q_FLUSH_EN > 0u
;;;294    OS_MSG_QTY  OSQFlush (OS_Q    *p_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;295                          OS_ERR  *p_err)
;;;296    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;297        OS_MSG_QTY  entries;
;;;298        CPU_SR_ALLOC();
000008  2600              MOVS     r6,#0
;;;299    
;;;300    
;;;301    
;;;302    #ifdef OS_SAFETY_CRITICAL
;;;303        if (p_err == (OS_ERR *)0) {
;;;304            OS_SAFETY_CRITICAL_EXCEPTION();
;;;305            return ((OS_MSG_QTY)0);
;;;306        }
;;;307    #endif
;;;308    
;;;309    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;310        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Can't flush a message queue from an ISR                */
00000a  4818              LDR      r0,|L3.108|
00000c  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00000e  2800              CMP      r0,#0
000010  dd05              BLE      |L3.30|
;;;311           *p_err = OS_ERR_FLUSH_ISR;
000012  f44f506c          MOV      r0,#0x3b00
000016  8020              STRH     r0,[r4,#0]
;;;312            return ((OS_MSG_QTY)0);
000018  2000              MOVS     r0,#0
                  |L3.26|
;;;313        }
;;;314    #endif
;;;315    
;;;316    #if OS_CFG_ARG_CHK_EN > 0u
;;;317        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
;;;318           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;319            return ((OS_MSG_QTY)0);
;;;320        }
;;;321    #endif
;;;322    
;;;323    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;324        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;325           *p_err = OS_ERR_OBJ_TYPE;
;;;326            return ((OS_MSG_QTY)0);
;;;327        }
;;;328    #endif
;;;329    
;;;330        OS_CRITICAL_ENTER();
;;;331        entries = OS_MsgQFreeAll(&p_q->MsgQ);                   /* Return all OS_MSGs to the OS_MSG pool                  */
;;;332        OS_CRITICAL_EXIT();
;;;333       *p_err   = OS_ERR_NONE;
;;;334        return ((OS_MSG_QTY)entries);
;;;335    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L3.30|
00001e  b925              CBNZ     r5,|L3.42|
000020  f64550c3          MOV      r0,#0x5dc3            ;318
000024  8020              STRH     r0,[r4,#0]            ;318
000026  2000              MOVS     r0,#0                 ;319
000028  e7f7              B        |L3.26|
                  |L3.42|
00002a  4911              LDR      r1,|L3.112|
00002c  6828              LDR      r0,[r5,#0]            ;324
00002e  4288              CMP      r0,r1                 ;324
000030  d004              BEQ      |L3.60|
000032  f64550c4          MOV      r0,#0x5dc4            ;325
000036  8020              STRH     r0,[r4,#0]            ;325
000038  2000              MOVS     r0,#0                 ;326
00003a  e7ee              B        |L3.26|
                  |L3.60|
00003c  bf00              NOP                            ;330
00003e  bf00              NOP                            ;330
000040  f7fffffe          BL       CPU_SR_Save
000044  4606              MOV      r6,r0                 ;330
000046  bf00              NOP                            ;330
000048  bf00              NOP                            ;330
00004a  f1050020          ADD      r0,r5,#0x20           ;331
00004e  f7fffffe          BL       OS_MsgQFreeAll
000052  4607              MOV      r7,r0                 ;331
000054  bf00              NOP                            ;332
000056  bf00              NOP                            ;332
000058  4630              MOV      r0,r6                 ;332
00005a  f7fffffe          BL       CPU_SR_Restore
00005e  bf00              NOP                            ;332
000060  bf00              NOP                            ;332
000062  2000              MOVS     r0,#0                 ;333
000064  8020              STRH     r0,[r4,#0]            ;333
000066  4638              MOV      r0,r7                 ;334
000068  e7d7              B        |L3.26|
;;;336    #endif
                          ENDP

00006a  0000              DCW      0x0000
                  |L3.108|
                          DCD      OSIntNestingCtr
                  |L3.112|
                          DCD      0x55455551

                          AREA ||i.OSQPend||, CODE, READONLY, ALIGN=2

                  OSQPend PROC
;;;383    
;;;384    void  *OSQPend (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;385                    OS_TICK       timeout,
;;;386                    OS_OPT        opt,
;;;387                    OS_MSG_SIZE  *p_msg_size,
;;;388                    CPU_TS       *p_ts,
;;;389                    OS_ERR       *p_err)
;;;390    {
000004  b089              SUB      sp,sp,#0x24
000006  4607              MOV      r7,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461e              MOV      r6,r3
00000e  e9dd5412          LDRD     r5,r4,[sp,#0x48]
;;;391        OS_PEND_DATA  pend_data;
;;;392        void         *p_void;
;;;393        CPU_SR_ALLOC();
000012  f04f0b00          MOV      r11,#0
;;;394    
;;;395    
;;;396    
;;;397    #ifdef OS_SAFETY_CRITICAL
;;;398        if (p_err == (OS_ERR *)0) {
;;;399            OS_SAFETY_CRITICAL_EXCEPTION();
;;;400            return ((void *)0);
;;;401        }
;;;402    #endif
;;;403    
;;;404    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;405        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
000016  486a              LDR      r0,|L4.448|
000018  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
00001a  2800              CMP      r0,#0
00001c  dd06              BLE      |L4.44|
;;;406           *p_err = OS_ERR_PEND_ISR;
00001e  f24610ae          MOV      r0,#0x61ae
000022  8020              STRH     r0,[r4,#0]
;;;407            return ((void *)0);
000024  2000              MOVS     r0,#0
                  |L4.38|
;;;408        }
;;;409    #endif
;;;410    
;;;411    #if OS_CFG_ARG_CHK_EN > 0u
;;;412        if (p_q == (OS_Q *)0) {                                 /* Validate arguments                                     */
;;;413           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;414            return ((void *)0);
;;;415        }
;;;416        if (p_msg_size == (OS_MSG_SIZE *)0) {
;;;417           *p_err = OS_ERR_PTR_INVALID;
;;;418            return ((void *)0);
;;;419        }
;;;420        switch (opt) {
;;;421            case OS_OPT_PEND_BLOCKING:
;;;422            case OS_OPT_PEND_NON_BLOCKING:
;;;423                 break;
;;;424    
;;;425            default:
;;;426                *p_err = OS_ERR_OPT_INVALID;
;;;427                 return ((void *)0);
;;;428        }
;;;429    #endif
;;;430    
;;;431    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;432        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;433           *p_err = OS_ERR_OBJ_TYPE;
;;;434            return ((void *)0);
;;;435        }
;;;436    #endif
;;;437    
;;;438        if (p_ts != (CPU_TS *)0) {
;;;439           *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
;;;440        }
;;;441    
;;;442        CPU_CRITICAL_ENTER();
;;;443        p_void = OS_MsgQGet(&p_q->MsgQ,                         /* Any message waiting in the message queue?              */
;;;444                            p_msg_size,
;;;445                            p_ts,
;;;446                            p_err);
;;;447        if (*p_err == OS_ERR_NONE) {
;;;448            CPU_CRITICAL_EXIT();
;;;449            return (p_void);                                    /* Yes, Return message received                           */
;;;450        }
;;;451    
;;;452        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;453            CPU_CRITICAL_EXIT();
;;;454           *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
;;;455            return ((void *)0);
;;;456        } else {
;;;457            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;458                CPU_CRITICAL_EXIT();
;;;459               *p_err = OS_ERR_SCHED_LOCKED;
;;;460                return ((void *)0);
;;;461            }
;;;462        }
;;;463                                                                /* Lock the scheduler/re-enable interrupts                */
;;;464        OS_CRITICAL_ENTER_CPU_EXIT();
;;;465        OS_Pend(&pend_data,                                     /* Block task pending on Message Queue                    */
;;;466                (OS_PEND_OBJ *)((void *)p_q),
;;;467                OS_TASK_PEND_ON_Q,
;;;468                timeout);
;;;469        OS_CRITICAL_EXIT_NO_SCHED();
;;;470    
;;;471        OSSched();                                              /* Find the next highest priority task ready to run       */
;;;472    
;;;473        CPU_CRITICAL_ENTER();
;;;474        switch (OSTCBCurPtr->PendStatus) {
;;;475            case OS_STATUS_PEND_OK:                             /* Extract message from TCB (Put there by Post)           */
;;;476                 p_void     = OSTCBCurPtr->MsgPtr;
;;;477                *p_msg_size = OSTCBCurPtr->MsgSize;
;;;478                 if (p_ts  != (CPU_TS *)0) {
;;;479                    *p_ts   =  OSTCBCurPtr->TS;
;;;480                 }
;;;481                *p_err      = OS_ERR_NONE;
;;;482                 break;
;;;483    
;;;484            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;485                 p_void     = (void      *)0;
;;;486                *p_msg_size = (OS_MSG_SIZE)0;
;;;487                 if (p_ts  != (CPU_TS *)0) {
;;;488                    *p_ts   =  OSTCBCurPtr->TS;
;;;489                 }
;;;490                *p_err      = OS_ERR_PEND_ABORT;
;;;491                 break;
;;;492    
;;;493            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get event within TO            */
;;;494                 p_void     = (void      *)0;
;;;495                *p_msg_size = (OS_MSG_SIZE)0;
;;;496                 if (p_ts  != (CPU_TS *)0) {
;;;497                    *p_ts   = (CPU_TS  )0;
;;;498                 }
;;;499                *p_err      = OS_ERR_TIMEOUT;
;;;500                 break;
;;;501    
;;;502            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;503                 p_void     = (void      *)0;
;;;504                *p_msg_size = (OS_MSG_SIZE)0;
;;;505                 if (p_ts  != (CPU_TS *)0) {
;;;506                    *p_ts   =  OSTCBCurPtr->TS;
;;;507                 }
;;;508                *p_err      = OS_ERR_OBJ_DEL;
;;;509                 break;
;;;510    
;;;511            default:
;;;512                 p_void     = (void      *)0;
;;;513                *p_msg_size = (OS_MSG_SIZE)0;
;;;514                *p_err      = OS_ERR_STATUS_INVALID;
;;;515                 break;
;;;516        }
;;;517        CPU_CRITICAL_EXIT();
;;;518        return (p_void);
;;;519    }
000026  b009              ADD      sp,sp,#0x24
000028  e8bd8ff0          POP      {r4-r11,pc}
                  |L4.44|
00002c  b927              CBNZ     r7,|L4.56|
00002e  f64550c3          MOV      r0,#0x5dc3            ;413
000032  8020              STRH     r0,[r4,#0]            ;413
000034  2000              MOVS     r0,#0                 ;414
000036  e7f6              B        |L4.38|
                  |L4.56|
000038  b926              CBNZ     r6,|L4.68|
00003a  f24620d5          MOV      r0,#0x62d5            ;417
00003e  8020              STRH     r0,[r4,#0]            ;417
000040  2000              MOVS     r0,#0                 ;418
000042  e7f0              B        |L4.38|
                  |L4.68|
000044  f1b80f00          CMP      r8,#0                 ;420
000048  d003              BEQ      |L4.82|
00004a  f5b84f00          CMP      r8,#0x8000            ;420
00004e  d102              BNE      |L4.86|
000050  e000              B        |L4.84|
                  |L4.82|
000052  bf00              NOP                            ;422
                  |L4.84|
000054  e004              B        |L4.96|
                  |L4.86|
000056  f6456025          MOV      r0,#0x5e25            ;426
00005a  8020              STRH     r0,[r4,#0]            ;426
00005c  2000              MOVS     r0,#0                 ;427
00005e  e7e2              B        |L4.38|
                  |L4.96|
000060  bf00              NOP                            ;423
000062  4958              LDR      r1,|L4.452|
000064  6838              LDR      r0,[r7,#0]            ;432
000066  4288              CMP      r0,r1                 ;432
000068  d004              BEQ      |L4.116|
00006a  f64550c4          MOV      r0,#0x5dc4            ;433
00006e  8020              STRH     r0,[r4,#0]            ;433
000070  2000              MOVS     r0,#0                 ;434
000072  e7d8              B        |L4.38|
                  |L4.116|
000074  b10d              CBZ      r5,|L4.122|
000076  2000              MOVS     r0,#0                 ;439
000078  6028              STR      r0,[r5,#0]            ;439
                  |L4.122|
00007a  bf00              NOP                            ;442
00007c  bf00              NOP                            ;442
00007e  f7fffffe          BL       CPU_SR_Save
000082  4683              MOV      r11,r0                ;442
000084  bf00              NOP                            ;442
000086  bf00              NOP                            ;442
000088  4623              MOV      r3,r4                 ;443
00008a  462a              MOV      r2,r5                 ;443
00008c  4631              MOV      r1,r6                 ;443
00008e  f1070020          ADD      r0,r7,#0x20           ;443
000092  f7fffffe          BL       OS_MsgQGet
000096  4682              MOV      r10,r0                ;443
000098  8820              LDRH     r0,[r4,#0]            ;447
00009a  b940              CBNZ     r0,|L4.174|
00009c  bf00              NOP                            ;448
00009e  bf00              NOP                            ;448
0000a0  4658              MOV      r0,r11                ;448
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;448
0000a8  bf00              NOP                            ;448
0000aa  4650              MOV      r0,r10                ;449
0000ac  e7bb              B        |L4.38|
                  |L4.174|
0000ae  f4084000          AND      r0,r8,#0x8000         ;452
0000b2  b158              CBZ      r0,|L4.204|
0000b4  bf00              NOP                            ;453
0000b6  bf00              NOP                            ;453
0000b8  4658              MOV      r0,r11                ;453
0000ba  f7fffffe          BL       CPU_SR_Restore
0000be  bf00              NOP                            ;453
0000c0  bf00              NOP                            ;453
0000c2  f24610b0          MOV      r0,#0x61b0            ;454
0000c6  8020              STRH     r0,[r4,#0]            ;454
0000c8  2000              MOVS     r0,#0                 ;455
0000ca  e7ac              B        |L4.38|
                  |L4.204|
0000cc  483e              LDR      r0,|L4.456|
0000ce  7800              LDRB     r0,[r0,#0]            ;457  ; OSSchedLockNestingCtr
0000d0  2800              CMP      r0,#0                 ;457
0000d2  dd0b              BLE      |L4.236|
0000d4  bf00              NOP                            ;458
0000d6  bf00              NOP                            ;458
0000d8  4658              MOV      r0,r11                ;458
0000da  f7fffffe          BL       CPU_SR_Restore
0000de  bf00              NOP                            ;458
0000e0  bf00              NOP                            ;458
0000e2  f6465063          MOV      r0,#0x6d63            ;459
0000e6  8020              STRH     r0,[r4,#0]            ;459
0000e8  2000              MOVS     r0,#0                 ;460
0000ea  e79c              B        |L4.38|
                  |L4.236|
0000ec  464b              MOV      r3,r9                 ;465
0000ee  2205              MOVS     r2,#5                 ;465
0000f0  4639              MOV      r1,r7                 ;465
0000f2  a801              ADD      r0,sp,#4              ;465
0000f4  f7fffffe          BL       OS_Pend
0000f8  bf00              NOP                            ;469
0000fa  bf00              NOP                            ;469
0000fc  4658              MOV      r0,r11                ;469
0000fe  f7fffffe          BL       CPU_SR_Restore
000102  bf00              NOP                            ;469
000104  bf00              NOP                            ;469
000106  f7fffffe          BL       OSSched
00010a  bf00              NOP                            ;473
00010c  bf00              NOP                            ;473
00010e  f7fffffe          BL       CPU_SR_Save
000112  4683              MOV      r11,r0                ;473
000114  bf00              NOP                            ;473
000116  bf00              NOP                            ;473
000118  482c              LDR      r0,|L4.460|
00011a  6800              LDR      r0,[r0,#0]            ;474  ; OSTCBCurPtr
00011c  f8900035          LDRB     r0,[r0,#0x35]         ;474
000120  b130              CBZ      r0,|L4.304|
000122  2801              CMP      r0,#1                 ;474
000124  d015              BEQ      |L4.338|
000126  2802              CMP      r0,#2                 ;474
000128  d02a              BEQ      |L4.384|
00012a  2803              CMP      r0,#3                 ;474
00012c  d135              BNE      |L4.410|
00012e  e01d              B        |L4.364|
                  |L4.304|
000130  4826              LDR      r0,|L4.460|
000132  6800              LDR      r0,[r0,#0]            ;476  ; OSTCBCurPtr
000134  f8d0a05c          LDR      r10,[r0,#0x5c]        ;476
000138  4824              LDR      r0,|L4.460|
00013a  6800              LDR      r0,[r0,#0]            ;477  ; OSTCBCurPtr
00013c  f8b00060          LDRH     r0,[r0,#0x60]         ;477
000140  8030              STRH     r0,[r6,#0]            ;477
000142  b11d              CBZ      r5,|L4.332|
000144  4821              LDR      r0,|L4.460|
000146  6800              LDR      r0,[r0,#0]            ;479  ; OSTCBCurPtr
000148  6c00              LDR      r0,[r0,#0x40]         ;479
00014a  6028              STR      r0,[r5,#0]            ;479
                  |L4.332|
00014c  2000              MOVS     r0,#0                 ;481
00014e  8020              STRH     r0,[r4,#0]            ;481
000150  e02b              B        |L4.426|
                  |L4.338|
000152  f04f0a00          MOV      r10,#0                ;485
000156  2000              MOVS     r0,#0                 ;486
000158  8030              STRH     r0,[r6,#0]            ;486
00015a  b11d              CBZ      r5,|L4.356|
00015c  481b              LDR      r0,|L4.460|
00015e  6800              LDR      r0,[r0,#0]            ;488  ; OSTCBCurPtr
000160  6c00              LDR      r0,[r0,#0x40]         ;488
000162  6028              STR      r0,[r5,#0]            ;488
                  |L4.356|
000164  f24610a9          MOV      r0,#0x61a9            ;490
000168  8020              STRH     r0,[r4,#0]            ;490
00016a  e01e              B        |L4.426|
                  |L4.364|
00016c  f04f0a00          MOV      r10,#0                ;494
000170  2000              MOVS     r0,#0                 ;495
000172  8030              STRH     r0,[r6,#0]            ;495
000174  b105              CBZ      r5,|L4.376|
000176  6028              STR      r0,[r5,#0]            ;497
                  |L4.376|
000178  f24720d9          MOV      r0,#0x72d9            ;499
00017c  8020              STRH     r0,[r4,#0]            ;499
00017e  e014              B        |L4.426|
                  |L4.384|
000180  f04f0a00          MOV      r10,#0                ;503
000184  2000              MOVS     r0,#0                 ;504
000186  8030              STRH     r0,[r6,#0]            ;504
000188  b11d              CBZ      r5,|L4.402|
00018a  4810              LDR      r0,|L4.460|
00018c  6800              LDR      r0,[r0,#0]            ;506  ; OSTCBCurPtr
00018e  6c00              LDR      r0,[r0,#0x40]         ;506
000190  6028              STR      r0,[r5,#0]            ;506
                  |L4.402|
000192  f64550c2          MOV      r0,#0x5dc2            ;508
000196  8020              STRH     r0,[r4,#0]            ;508
000198  e007              B        |L4.426|
                  |L4.410|
00019a  f04f0a00          MOV      r10,#0                ;512
00019e  2000              MOVS     r0,#0                 ;513
0001a0  8030              STRH     r0,[r6,#0]            ;513
0001a2  f646602e          MOV      r0,#0x6e2e            ;514
0001a6  8020              STRH     r0,[r4,#0]            ;514
0001a8  bf00              NOP                            ;515
                  |L4.426|
0001aa  bf00              NOP                            ;482
0001ac  bf00              NOP                            ;517
0001ae  bf00              NOP                            ;517
0001b0  4658              MOV      r0,r11                ;517
0001b2  f7fffffe          BL       CPU_SR_Restore
0001b6  bf00              NOP                            ;517
0001b8  bf00              NOP                            ;517
0001ba  4650              MOV      r0,r10                ;518
0001bc  e733              B        |L4.38|
;;;520    
                          ENDP

0001be  0000              DCW      0x0000
                  |L4.448|
                          DCD      OSIntNestingCtr
                  |L4.452|
                          DCD      0x55455551
                  |L4.456|
                          DCD      OSSchedLockNestingCtr
                  |L4.460|
                          DCD      OSTCBCurPtr

                          AREA ||i.OSQPendAbort||, CODE, READONLY, ALIGN=2

                  OSQPendAbort PROC
;;;554    #if OS_CFG_Q_PEND_ABORT_EN > 0u
;;;555    OS_OBJ_QTY  OSQPendAbort (OS_Q    *p_q,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;556                              OS_OPT   opt,
;;;557                              OS_ERR  *p_err)
;;;558    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;559        OS_PEND_LIST  *p_pend_list;
;;;560        OS_TCB        *p_tcb;
;;;561        CPU_TS         ts;
;;;562        OS_OBJ_QTY     nbr_tasks;
;;;563        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;564    
;;;565    
;;;566    
;;;567    #ifdef OS_SAFETY_CRITICAL
;;;568        if (p_err == (OS_ERR *)0) {
;;;569            OS_SAFETY_CRITICAL_EXCEPTION();
;;;570            return ((OS_OBJ_QTY)0u);
;;;571        }
;;;572    #endif
;;;573    
;;;574    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;575        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
00000e  4837              LDR      r0,|L5.236|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L5.34|
;;;576           *p_err =  OS_ERR_PEND_ABORT_ISR;
000016  f24610aa          MOV      r0,#0x61aa
00001a  8020              STRH     r0,[r4,#0]
;;;577            return ((OS_OBJ_QTY)0u);
00001c  2000              MOVS     r0,#0
                  |L5.30|
;;;578        }
;;;579    #endif
;;;580    
;;;581    #if OS_CFG_ARG_CHK_EN > 0u
;;;582        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
;;;583           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;584            return ((OS_OBJ_QTY)0u);
;;;585        }
;;;586        switch (opt) {                                          /* Validate 'opt'                                         */
;;;587            case OS_OPT_PEND_ABORT_1:
;;;588            case OS_OPT_PEND_ABORT_ALL:
;;;589            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;590            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;591                 break;
;;;592    
;;;593            default:
;;;594                *p_err =  OS_ERR_OPT_INVALID;
;;;595                 return ((OS_OBJ_QTY)0u);
;;;596        }
;;;597    #endif
;;;598    
;;;599    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;600        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure queue was created                            */
;;;601           *p_err =  OS_ERR_OBJ_TYPE;
;;;602            return ((OS_OBJ_QTY)0u);
;;;603        }
;;;604    #endif
;;;605    
;;;606        CPU_CRITICAL_ENTER();
;;;607        p_pend_list = &p_q->PendList;
;;;608        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on queue?                             */
;;;609            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;610           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;611            return ((OS_OBJ_QTY)0u);
;;;612        }
;;;613    
;;;614        OS_CRITICAL_ENTER_CPU_EXIT();
;;;615        nbr_tasks = 0u;
;;;616        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
;;;617        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
;;;618            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;619            OS_PendAbort((OS_PEND_OBJ *)((void *)p_q),
;;;620                         p_tcb,
;;;621                         ts);
;;;622            nbr_tasks++;
;;;623            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;624                break;                                          /* No                                                     */
;;;625            }
;;;626        }
;;;627        OS_CRITICAL_EXIT_NO_SCHED();
;;;628    
;;;629        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;630            OSSched();                                          /* Run the scheduler                                      */
;;;631        }
;;;632    
;;;633       *p_err = OS_ERR_NONE;
;;;634        return (nbr_tasks);
;;;635    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L5.34|
000022  b925              CBNZ     r5,|L5.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;583
000028  8020              STRH     r0,[r4,#0]            ;583
00002a  2000              MOVS     r0,#0                 ;584
00002c  e7f7              B        |L5.30|
                  |L5.46|
00002e  b14e              CBZ      r6,|L5.68|
000030  f5b67f80          CMP      r6,#0x100             ;586
000034  d007              BEQ      |L5.70|
000036  f5b64f00          CMP      r6,#0x8000            ;586
00003a  d005              BEQ      |L5.72|
00003c  f5b64f01          CMP      r6,#0x8100            ;586
000040  d104              BNE      |L5.76|
000042  e002              B        |L5.74|
                  |L5.68|
000044  bf00              NOP                            ;588
                  |L5.70|
000046  bf00              NOP                            ;589
                  |L5.72|
000048  bf00              NOP                            ;590
                  |L5.74|
00004a  e004              B        |L5.86|
                  |L5.76|
00004c  f6456025          MOV      r0,#0x5e25            ;594
000050  8020              STRH     r0,[r4,#0]            ;594
000052  2000              MOVS     r0,#0                 ;595
000054  e7e3              B        |L5.30|
                  |L5.86|
000056  bf00              NOP                            ;591
000058  4925              LDR      r1,|L5.240|
00005a  6828              LDR      r0,[r5,#0]            ;600
00005c  4288              CMP      r0,r1                 ;600
00005e  d004              BEQ      |L5.106|
000060  f64550c4          MOV      r0,#0x5dc4            ;601
000064  8020              STRH     r0,[r4,#0]            ;601
000066  2000              MOVS     r0,#0                 ;602
000068  e7d9              B        |L5.30|
                  |L5.106|
00006a  bf00              NOP                            ;606
00006c  bf00              NOP                            ;606
00006e  f7fffffe          BL       CPU_SR_Save
000072  4682              MOV      r10,r0                ;606
000074  bf00              NOP                            ;606
000076  bf00              NOP                            ;606
000078  f1050708          ADD      r7,r5,#8              ;607
00007c  8938              LDRH     r0,[r7,#8]            ;608
00007e  b958              CBNZ     r0,|L5.152|
000080  bf00              NOP                            ;609
000082  bf00              NOP                            ;609
000084  4650              MOV      r0,r10                ;609
000086  f7fffffe          BL       CPU_SR_Restore
00008a  bf00              NOP                            ;609
00008c  bf00              NOP                            ;609
00008e  f24610ab          MOV      r0,#0x61ab            ;610
000092  8020              STRH     r0,[r4,#0]            ;610
000094  2000              MOVS     r0,#0                 ;611
000096  e7c2              B        |L5.30|
                  |L5.152|
000098  f04f0800          MOV      r8,#0                 ;615
00009c  f7fffffe          BL       CPU_TS_TmrRd
0000a0  4683              MOV      r11,r0                ;616
0000a2  e00f              B        |L5.196|
                  |L5.164|
0000a4  6838              LDR      r0,[r7,#0]            ;618
0000a6  f8d09008          LDR      r9,[r0,#8]            ;618
0000aa  465a              MOV      r2,r11                ;619
0000ac  4649              MOV      r1,r9                 ;619
0000ae  4628              MOV      r0,r5                 ;619
0000b0  f7fffffe          BL       OS_PendAbort
0000b4  f1080001          ADD      r0,r8,#1              ;622
0000b8  fa1ff880          UXTH     r8,r0                 ;622
0000bc  f5b67f80          CMP      r6,#0x100             ;623
0000c0  d000              BEQ      |L5.196|
0000c2  e002              B        |L5.202|
                  |L5.196|
0000c4  8938              LDRH     r0,[r7,#8]            ;617
0000c6  2800              CMP      r0,#0                 ;617
0000c8  dcec              BGT      |L5.164|
                  |L5.202|
0000ca  bf00              NOP                            ;624
0000cc  bf00              NOP                            ;627
0000ce  bf00              NOP                            ;627
0000d0  4650              MOV      r0,r10                ;627
0000d2  f7fffffe          BL       CPU_SR_Restore
0000d6  bf00              NOP                            ;627
0000d8  bf00              NOP                            ;627
0000da  f4064000          AND      r0,r6,#0x8000         ;629
0000de  b908              CBNZ     r0,|L5.228|
0000e0  f7fffffe          BL       OSSched
                  |L5.228|
0000e4  2000              MOVS     r0,#0                 ;633
0000e6  8020              STRH     r0,[r4,#0]            ;633
0000e8  4640              MOV      r0,r8                 ;634
0000ea  e798              B        |L5.30|
;;;636    #endif
                          ENDP

                  |L5.236|
                          DCD      OSIntNestingCtr
                  |L5.240|
                          DCD      0x55455551

                          AREA ||i.OSQPost||, CODE, READONLY, ALIGN=2

                  OSQPost PROC
;;;687    
;;;688    void  OSQPost (OS_Q         *p_q,
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;689                   void         *p_void,
;;;690                   OS_MSG_SIZE   msg_size,
;;;691                   OS_OPT        opt,
;;;692                   OS_ERR       *p_err)
;;;693    {
000004  4605              MOV      r5,r0
000006  4688              MOV      r8,r1
000008  4691              MOV      r9,r2
00000a  461e              MOV      r6,r3
00000c  9c0a              LDR      r4,[sp,#0x28]
;;;694        CPU_TS  ts;
;;;695    
;;;696    
;;;697    
;;;698    #ifdef OS_SAFETY_CRITICAL
;;;699        if (p_err == (OS_ERR *)0) {
;;;700            OS_SAFETY_CRITICAL_EXCEPTION();
;;;701            return;
;;;702        }
;;;703    #endif
;;;704    
;;;705    #if OS_CFG_ARG_CHK_EN > 0u
;;;706        if (p_q == (OS_Q *)0) {                                 /* Validate 'p_q'                                         */
00000e  b925              CBNZ     r5,|L6.26|
;;;707           *p_err = OS_ERR_OBJ_PTR_NULL;
000010  f64550c3          MOV      r0,#0x5dc3
000014  8020              STRH     r0,[r4,#0]
                  |L6.22|
;;;708            return;
;;;709        }
;;;710        switch (opt) {                                          /* Validate 'opt'                                         */
;;;711            case OS_OPT_POST_FIFO:
;;;712            case OS_OPT_POST_LIFO:
;;;713            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL:
;;;714            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL:
;;;715            case OS_OPT_POST_FIFO | OS_OPT_POST_NO_SCHED:
;;;716            case OS_OPT_POST_LIFO | OS_OPT_POST_NO_SCHED:
;;;717            case OS_OPT_POST_FIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;718            case OS_OPT_POST_LIFO | OS_OPT_POST_ALL | OS_OPT_POST_NO_SCHED:
;;;719                 break;
;;;720    
;;;721            default:
;;;722                *p_err =  OS_ERR_OPT_INVALID;
;;;723                 return;
;;;724        }
;;;725    #endif
;;;726    
;;;727    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;728        if (p_q->Type != OS_OBJ_TYPE_Q) {                       /* Make sure message queue was created                    */
;;;729           *p_err = OS_ERR_OBJ_TYPE;
;;;730            return;
;;;731        }
;;;732    #endif
;;;733    
;;;734        ts = OS_TS_GET();                                       /* Get timestamp                                          */
;;;735    
;;;736    #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;737        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {
;;;738            OS_IntQPost((OS_OBJ_TYPE)OS_OBJ_TYPE_Q,             /* Post to ISR queue                                      */
;;;739                        (void      *)p_q,
;;;740                        (void      *)p_void,
;;;741                        (OS_MSG_SIZE)msg_size,
;;;742                        (OS_FLAGS   )0,
;;;743                        (OS_OPT     )opt,
;;;744                        (CPU_TS     )ts,
;;;745                        (OS_ERR    *)p_err);
;;;746            return;
;;;747        }
;;;748    #endif
;;;749    
;;;750        OS_QPost(p_q,
;;;751                 p_void,
;;;752                 msg_size,
;;;753                 opt,
;;;754                 ts,
;;;755                 p_err);
;;;756    }
000016  e8bd87fc          POP      {r2-r10,pc}
                  |L6.26|
00001a  f5b64f00          CMP      r6,#0x8000            ;710
00001e  d019              BEQ      |L6.84|
000020  dc09              BGT      |L6.54|
000022  b19e              CBZ      r6,|L6.76|
000024  2e10              CMP      r6,#0x10              ;710
000026  d012              BEQ      |L6.78|
000028  f5b67f00          CMP      r6,#0x200             ;710
00002c  d010              BEQ      |L6.80|
00002e  f5b67f04          CMP      r6,#0x210             ;710
000032  d113              BNE      |L6.92|
000034  e00d              B        |L6.82|
                  |L6.54|
000036  f5a64000          SUB      r0,r6,#0x8000         ;710
00003a  3810              SUBS     r0,r0,#0x10           ;710
00003c  b158              CBZ      r0,|L6.86|
00003e  f5b07ff8          CMP      r0,#0x1f0             ;710
000042  d009              BEQ      |L6.88|
000044  f5b07f00          CMP      r0,#0x200             ;710
000048  d108              BNE      |L6.92|
00004a  e006              B        |L6.90|
                  |L6.76|
00004c  bf00              NOP                            ;712
                  |L6.78|
00004e  bf00              NOP                            ;713
                  |L6.80|
000050  bf00              NOP                            ;714
                  |L6.82|
000052  bf00              NOP                            ;715
                  |L6.84|
000054  bf00              NOP                            ;716
                  |L6.86|
000056  bf00              NOP                            ;717
                  |L6.88|
000058  bf00              NOP                            ;718
                  |L6.90|
00005a  e003              B        |L6.100|
                  |L6.92|
00005c  f6456025          MOV      r0,#0x5e25            ;722
000060  8020              STRH     r0,[r4,#0]            ;722
000062  e7d8              B        |L6.22|
                  |L6.100|
000064  bf00              NOP                            ;719
000066  490a              LDR      r1,|L6.144|
000068  6828              LDR      r0,[r5,#0]            ;728
00006a  4288              CMP      r0,r1                 ;728
00006c  d003              BEQ      |L6.118|
00006e  f64550c4          MOV      r0,#0x5dc4            ;729
000072  8020              STRH     r0,[r4,#0]            ;729
000074  e7cf              B        |L6.22|
                  |L6.118|
000076  f7fffffe          BL       CPU_TS_TmrRd
00007a  4607              MOV      r7,r0                 ;734
00007c  4633              MOV      r3,r6                 ;750
00007e  464a              MOV      r2,r9                 ;750
000080  4641              MOV      r1,r8                 ;750
000082  4628              MOV      r0,r5                 ;750
000084  e9cd7400          STRD     r7,r4,[sp,#0]         ;750
000088  f7fffffe          BL       OS_QPost
00008c  bf00              NOP      
00008e  e7c2              B        |L6.22|
;;;757    
                          ENDP

                  |L6.144|
                          DCD      0x55455551

                          AREA ||i.OS_QClr||, CODE, READONLY, ALIGN=2

                  OS_QClr PROC
;;;774    
;;;775    void  OS_QClr (OS_Q  *p_q)
000000  b510              PUSH     {r4,lr}
;;;776    {
000002  4604              MOV      r4,r0
;;;777        (void)OS_MsgQFreeAll(&p_q->MsgQ);                       /* Return all OS_MSGs to the free list                    */
000004  f1040020          ADD      r0,r4,#0x20
000008  f7fffffe          BL       OS_MsgQFreeAll
;;;778        p_q->Type    =  OS_OBJ_TYPE_NONE;                       /* Mark the data structure as a NONE                      */
00000c  4806              LDR      r0,|L7.40|
00000e  6020              STR      r0,[r4,#0]
;;;779        p_q->NamePtr = (CPU_CHAR *)((void *)"?Q");
000010  a006              ADR      r0,|L7.44|
000012  6060              STR      r0,[r4,#4]
;;;780        OS_MsgQInit(&p_q->MsgQ,                                 /* Initialize the list of OS_MSGs                         */
000014  2100              MOVS     r1,#0
000016  f1040020          ADD      r0,r4,#0x20
00001a  f7fffffe          BL       OS_MsgQInit
;;;781                    0u);
;;;782        OS_PendListInit(&p_q->PendList);                        /* Initialize the waiting list                            */
00001e  f1040008          ADD      r0,r4,#8
000022  f7fffffe          BL       OS_PendListInit
;;;783    }
000026  bd10              POP      {r4,pc}
;;;784    
                          ENDP

                  |L7.40|
                          DCD      0x454e4f4e
                  |L7.44|
00002c  3f5100            DCB      "?Q",0
00002f  00                DCB      0

                          AREA ||i.OS_QDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_QDbgListAdd PROC
;;;802    #if OS_CFG_DBG_EN > 0u
;;;803    void  OS_QDbgListAdd (OS_Q  *p_q)
000000  a109              ADR      r1,|L8.40|
;;;804    {
;;;805        p_q->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;806        p_q->DbgPrevPtr               = (OS_Q     *)0;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;807        if (OSQDbgListPtr == (OS_Q *)0) {
000008  4908              LDR      r1,|L8.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00000c  b911              CBNZ     r1,|L8.20|
;;;808            p_q->DbgNextPtr           = (OS_Q     *)0;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L8.32|
                  |L8.20|
;;;809        } else {
;;;810            p_q->DbgNextPtr           =  OSQDbgListPtr;
000014  4905              LDR      r1,|L8.44|
000016  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;811            OSQDbgListPtr->DbgPrevPtr =  p_q;
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSQDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L8.32|
;;;812        }
;;;813        OSQDbgListPtr                 =  p_q;
000020  4902              LDR      r1,|L8.44|
000022  6008              STR      r0,[r1,#0]  ; OSQDbgListPtr
;;;814    }
000024  4770              BX       lr
;;;815    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L8.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_QDbgListRemove PROC
;;;817    
;;;818    void  OS_QDbgListRemove (OS_Q  *p_q)
000000  6942              LDR      r2,[r0,#0x14]
;;;819    {
;;;820        OS_Q  *p_q_next;
;;;821        OS_Q  *p_q_prev;
;;;822    
;;;823    
;;;824        p_q_prev = p_q->DbgPrevPtr;
;;;825        p_q_next = p_q->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;826    
;;;827        if (p_q_prev == (OS_Q *)0) {
000004  b93a              CBNZ     r2,|L9.22|
;;;828            OSQDbgListPtr = p_q_next;
000006  4b09              LDR      r3,|L9.44|
000008  6019              STR      r1,[r3,#0]  ; OSQDbgListPtr
;;;829            if (p_q_next != (OS_Q *)0) {
00000a  b109              CBZ      r1,|L9.16|
;;;830                p_q_next->DbgPrevPtr = (OS_Q *)0;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L9.16|
;;;831            }
;;;832            p_q->DbgNextPtr = (OS_Q *)0;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L9.42|
                  |L9.22|
;;;833    
;;;834        } else if (p_q_next == (OS_Q *)0) {
000016  b919              CBNZ     r1,|L9.32|
;;;835            p_q_prev->DbgNextPtr = (OS_Q *)0;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;836            p_q->DbgPrevPtr      = (OS_Q *)0;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L9.42|
                  |L9.32|
;;;837    
;;;838        } else {
;;;839            p_q_prev->DbgNextPtr =  p_q_next;
000020  6191              STR      r1,[r2,#0x18]
;;;840            p_q_next->DbgPrevPtr =  p_q_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;841            p_q->DbgNextPtr      = (OS_Q *)0;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;842            p_q->DbgPrevPtr      = (OS_Q *)0;
000028  6143              STR      r3,[r0,#0x14]
                  |L9.42|
;;;843        }
;;;844    }
00002a  4770              BX       lr
;;;845    #endif
                          ENDP

                  |L9.44|
                          DCD      OSQDbgListPtr

                          AREA ||i.OS_QInit||, CODE, READONLY, ALIGN=2

                  OS_QInit PROC
;;;864    
;;;865    void  OS_QInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;866    {
;;;867    #ifdef OS_SAFETY_CRITICAL
;;;868        if (p_err == (OS_ERR *)0) {
;;;869            OS_SAFETY_CRITICAL_EXCEPTION();
;;;870            return;
;;;871        }
;;;872    #endif
;;;873    
;;;874    #if OS_CFG_DBG_EN > 0u
;;;875        OSQDbgListPtr = (OS_Q *)0;
000002  4a03              LDR      r2,|L10.16|
000004  6011              STR      r1,[r2,#0]  ; OSQDbgListPtr
;;;876    #endif
;;;877    
;;;878        OSQQty        = (OS_OBJ_QTY)0;
000006  4a03              LDR      r2,|L10.20|
000008  8011              STRH     r1,[r2,#0]
;;;879       *p_err         = OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;880    }
00000c  4770              BX       lr
;;;881    
                          ENDP

00000e  0000              DCW      0x0000
                  |L10.16|
                          DCD      OSQDbgListPtr
                  |L10.20|
                          DCD      OSQQty

                          AREA ||i.OS_QPost||, CODE, READONLY, ALIGN=1

                  OS_QPost PROC
;;;921    
;;;922    void  OS_QPost (OS_Q         *p_q,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;923                    void         *p_void,
;;;924                    OS_MSG_SIZE   msg_size,
;;;925                    OS_OPT        opt,
;;;926                    CPU_TS        ts,
;;;927                    OS_ERR       *p_err)
;;;928    {
000004  b085              SUB      sp,sp,#0x14
000006  4607              MOV      r7,r0
000008  468a              MOV      r10,r1
00000a  4693              MOV      r11,r2
00000c  461c              MOV      r4,r3
;;;929        OS_OBJ_QTY     cnt;
;;;930        OS_OPT         post_type;
;;;931        OS_PEND_LIST  *p_pend_list;
;;;932        OS_PEND_DATA  *p_pend_data;
;;;933        OS_PEND_DATA  *p_pend_data_next;
;;;934        OS_TCB        *p_tcb;
;;;935        CPU_SR_ALLOC();
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;936    
;;;937    
;;;938    
;;;939        OS_CRITICAL_ENTER();
000012  bf00              NOP      
000014  bf00              NOP      
000016  f7fffffe          BL       CPU_SR_Save
00001a  9002              STR      r0,[sp,#8]
00001c  bf00              NOP      
00001e  bf00              NOP      
;;;940        p_pend_list = &p_q->PendList;
000020  f1070608          ADD      r6,r7,#8
;;;941        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on message queue?                     */
000024  8930              LDRH     r0,[r6,#8]
000026  b9e0              CBNZ     r0,|L11.98|
;;;942            if ((opt & OS_OPT_POST_LIFO) == (OS_OPT)0) {        /* Determine whether we post FIFO or LIFO                 */
000028  f0040010          AND      r0,r4,#0x10
00002c  b910              CBNZ     r0,|L11.52|
;;;943                post_type = OS_OPT_POST_FIFO;
00002e  f04f0800          MOV      r8,#0
000032  e001              B        |L11.56|
                  |L11.52|
;;;944            } else {
;;;945                post_type = OS_OPT_POST_LIFO;
000034  f04f0810          MOV      r8,#0x10
                  |L11.56|
;;;946            }
;;;947            OS_MsgQPut(&p_q->MsgQ,                              /* Place message in the message queue                     */
000038  e9dd010e          LDRD     r0,r1,[sp,#0x38]
00003c  4643              MOV      r3,r8
00003e  465a              MOV      r2,r11
000040  e9cd0100          STRD     r0,r1,[sp,#0]
000044  4651              MOV      r1,r10
000046  f1070020          ADD      r0,r7,#0x20
00004a  f7fffffe          BL       OS_MsgQPut
;;;948                       p_void,
;;;949                       msg_size,
;;;950                       post_type,
;;;951                       ts,
;;;952                       p_err);
;;;953            OS_CRITICAL_EXIT();
00004e  bf00              NOP      
000050  bf00              NOP      
000052  9802              LDR      r0,[sp,#8]
000054  f7fffffe          BL       CPU_SR_Restore
000058  bf00              NOP      
00005a  bf00              NOP      
                  |L11.92|
;;;954            return;
;;;955        }
;;;956    
;;;957        if ((opt & OS_OPT_POST_ALL) != (OS_OPT)0) {             /* Post message to all tasks waiting?                     */
;;;958            cnt = p_pend_list->NbrEntries;                      /* Yes                                                    */
;;;959        } else {
;;;960            cnt = (OS_OBJ_QTY)1;                                /* No                                                     */
;;;961        }
;;;962        p_pend_data = p_pend_list->HeadPtr;
;;;963        while (cnt > 0u) {
;;;964            p_tcb            = p_pend_data->TCBPtr;
;;;965            p_pend_data_next = p_pend_data->NextPtr;
;;;966            OS_Post((OS_PEND_OBJ *)((void *)p_q),
;;;967                    p_tcb,
;;;968                    p_void,
;;;969                    msg_size,
;;;970                    ts);
;;;971            p_pend_data = p_pend_data_next;
;;;972            cnt--;
;;;973        }
;;;974        OS_CRITICAL_EXIT_NO_SCHED();
;;;975        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
;;;976            OSSched();                                          /* Run the scheduler                                      */
;;;977        }
;;;978       *p_err = OS_ERR_NONE;
;;;979    }
00005c  b005              ADD      sp,sp,#0x14
00005e  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.98|
000062  f4047000          AND      r0,r4,#0x200          ;957
000066  b108              CBZ      r0,|L11.108|
000068  8935              LDRH     r5,[r6,#8]            ;958
00006a  e000              B        |L11.110|
                  |L11.108|
00006c  2501              MOVS     r5,#1                 ;960
                  |L11.110|
00006e  f8d69000          LDR      r9,[r6,#0]            ;962
000072  e011              B        |L11.152|
                  |L11.116|
000074  f8d90008          LDR      r0,[r9,#8]            ;964
000078  9003              STR      r0,[sp,#0xc]          ;964
00007a  f8d90004          LDR      r0,[r9,#4]            ;965
00007e  9004              STR      r0,[sp,#0x10]         ;965
000080  980e              LDR      r0,[sp,#0x38]         ;966
000082  465b              MOV      r3,r11                ;966
000084  4652              MOV      r2,r10                ;966
000086  9000              STR      r0,[sp,#0]            ;966
000088  4638              MOV      r0,r7                 ;966
00008a  9903              LDR      r1,[sp,#0xc]          ;966
00008c  f7fffffe          BL       OS_Post
000090  f8dd9010          LDR      r9,[sp,#0x10]         ;971
000094  1e68              SUBS     r0,r5,#1              ;972
000096  b285              UXTH     r5,r0                 ;972
                  |L11.152|
000098  2d00              CMP      r5,#0                 ;963
00009a  d1eb              BNE      |L11.116|
00009c  bf00              NOP                            ;974
00009e  bf00              NOP                            ;974
0000a0  9802              LDR      r0,[sp,#8]            ;974
0000a2  f7fffffe          BL       CPU_SR_Restore
0000a6  bf00              NOP                            ;974
0000a8  bf00              NOP                            ;974
0000aa  f4044000          AND      r0,r4,#0x8000         ;975
0000ae  b908              CBNZ     r0,|L11.180|
0000b0  f7fffffe          BL       OSSched
                  |L11.180|
0000b4  2100              MOVS     r1,#0                 ;978
0000b6  980f              LDR      r0,[sp,#0x3c]         ;978
0000b8  8001              STRH     r1,[r0,#0]            ;978
0000ba  bf00              NOP      
0000bc  e7ce              B        |L11.92|
;;;980    
                          ENDP

