; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\lib_mem.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\lib_mem.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\lib_mem.crf ..\..\uCOS-III\uC-LIB\lib_mem.c]
                          THUMB

                          AREA ||i.Mem_Clr||, CODE, READONLY, ALIGN=1

                  Mem_Clr PROC
;;;224    
;;;225    void  Mem_Clr (void        *pmem,
000000  b530              PUSH     {r4,r5,lr}
;;;226                   CPU_SIZE_T   size)
;;;227    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;228        Mem_Set(pmem,
000006  4622              MOV      r2,r4
000008  2100              MOVS     r1,#0
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       Mem_Set
;;;229                0u,                                                 /* See Note #2.                                         */
;;;230                size);
;;;231    }
000010  bd30              POP      {r4,r5,pc}
;;;232    
                          ENDP


                          AREA ||i.Mem_Cmp||, CODE, READONLY, ALIGN=1

                  Mem_Cmp PROC
;;;620    /*$PAGE*/
;;;621    CPU_BOOLEAN  Mem_Cmp (const  void        *p1_mem,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;622                          const  void        *p2_mem,
;;;623                                 CPU_SIZE_T   size)
;;;624    {
000004  4680              MOV      r8,r0
000006  4689              MOV      r9,r1
000008  4615              MOV      r5,r2
;;;625               CPU_SIZE_T    size_rem;
;;;626               CPU_ALIGN    *p1_mem_align;
;;;627               CPU_ALIGN    *p2_mem_align;
;;;628        const  CPU_INT08U   *p1_mem_08;
;;;629        const  CPU_INT08U   *p2_mem_08;
;;;630               CPU_DATA      i;
;;;631               CPU_DATA      mem_align_mod_1;
;;;632               CPU_DATA      mem_align_mod_2;
;;;633               CPU_BOOLEAN   mem_aligned;
;;;634               CPU_BOOLEAN   mem_cmp;
;;;635    
;;;636    
;;;637        if (size < 1) {                                             /* See Note #1.                                         */
00000a  b915              CBNZ     r5,|L2.18|
;;;638            return (DEF_YES);
00000c  2001              MOVS     r0,#1
                  |L2.14|
;;;639        }
;;;640        if (p1_mem == (void *)0) {
;;;641            return (DEF_NO);
;;;642        }
;;;643        if (p2_mem == (void *)0) {
;;;644            return (DEF_NO);
;;;645        }
;;;646    
;;;647    
;;;648        mem_cmp         =  DEF_YES;                                 /* Assume mem bufs are identical until cmp fails.       */
;;;649        size_rem        =  size;
;;;650                                                                    /* Start @ end of mem bufs (see Note #2).               */
;;;651        p1_mem_08       = (const CPU_INT08U *)p1_mem + size;
;;;652        p2_mem_08       = (const CPU_INT08U *)p2_mem + size;
;;;653                                                                    /* See Note #4.                                         */
;;;654        mem_align_mod_1 = (CPU_INT08U)((CPU_ADDR)p1_mem_08 % sizeof(CPU_ALIGN));
;;;655        mem_align_mod_2 = (CPU_INT08U)((CPU_ADDR)p2_mem_08 % sizeof(CPU_ALIGN));
;;;656    
;;;657        mem_aligned     = (mem_align_mod_1 == mem_align_mod_2) ? DEF_YES : DEF_NO;
;;;658    
;;;659        if (mem_aligned == DEF_YES) {                               /* If mem bufs' alignment offset equal, ...             */
;;;660                                                                    /* ... optimize cmp for mem buf alignment.              */
;;;661            if (mem_align_mod_1 != 0u) {                            /* If trailing octets avail,                  ...       */
;;;662                i = mem_align_mod_1;
;;;663                while ((mem_cmp == DEF_YES) &&                      /* ... cmp mem bufs while identical &         ...       */
;;;664                       (size_rem > 0)       &&                      /* ... start mem buf cmp with trailing octets ...       */
;;;665                       (i        > 0)) {                            /* ... until next CPU_ALIGN word boundary.              */
;;;666                    p1_mem_08--;
;;;667                    p2_mem_08--;
;;;668                    if (*p1_mem_08 != *p2_mem_08) {                 /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;669                         mem_cmp = DEF_NO;
;;;670                    }
;;;671                    size_rem -= sizeof(CPU_INT08U);
;;;672                    i--;
;;;673                }
;;;674            }
;;;675    
;;;676            if (mem_cmp == DEF_YES) {                               /* If cmp still identical, cmp aligned mem bufs.        */
;;;677                p1_mem_align = (CPU_ALIGN *)p1_mem_08;              /* See Note #3a.                                        */
;;;678                p2_mem_align = (CPU_ALIGN *)p2_mem_08;
;;;679    
;;;680                while ((mem_cmp  == DEF_YES) &&                     /* Cmp mem bufs while identical & ...                   */
;;;681                       (size_rem >= sizeof(CPU_ALIGN))) {           /* ... mem bufs aligned on CPU_ALIGN word boundaries.   */
;;;682                    p1_mem_align--;
;;;683                    p2_mem_align--;
;;;684                    if (*p1_mem_align != *p2_mem_align) {           /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;685                         mem_cmp = DEF_NO;
;;;686                    }
;;;687                    size_rem -= sizeof(CPU_ALIGN);
;;;688                }
;;;689    
;;;690                p1_mem_08 = (CPU_INT08U *)p1_mem_align;
;;;691                p2_mem_08 = (CPU_INT08U *)p2_mem_align;
;;;692            }
;;;693        }
;;;694    
;;;695        while ((mem_cmp == DEF_YES) &&                              /* Cmp mem bufs while identical ...                     */
;;;696               (size_rem > 0)) {                                    /* ... for unaligned mem bufs or trailing octets.       */
;;;697            p1_mem_08--;
;;;698            p2_mem_08--;
;;;699            if (*p1_mem_08 != *p2_mem_08) {                         /* If ANY data octet(s) NOT identical, cmp fails.       */
;;;700                 mem_cmp = DEF_NO;
;;;701            }
;;;702            size_rem -= sizeof(CPU_INT08U);
;;;703        }
;;;704    
;;;705        return (mem_cmp);
;;;706    }
00000e  e8bd8ff8          POP      {r3-r11,pc}
                  |L2.18|
000012  f1b80f00          CMP      r8,#0                 ;640
000016  d101              BNE      |L2.28|
000018  2000              MOVS     r0,#0                 ;641
00001a  e7f8              B        |L2.14|
                  |L2.28|
00001c  f1b90f00          CMP      r9,#0                 ;643
000020  d101              BNE      |L2.38|
000022  2000              MOVS     r0,#0                 ;644
000024  e7f3              B        |L2.14|
                  |L2.38|
000026  2401              MOVS     r4,#1                 ;648
000028  4629              MOV      r1,r5                 ;649
00002a  eb080205          ADD      r2,r8,r5              ;651
00002e  eb090305          ADD      r3,r9,r5              ;652
000032  f0020c03          AND      r12,r2,#3             ;654
000036  f0030b03          AND      r11,r3,#3             ;655
00003a  45dc              CMP      r12,r11               ;657
00003c  d101              BNE      |L2.66|
00003e  2001              MOVS     r0,#1                 ;657
000040  e000              B        |L2.68|
                  |L2.66|
000042  2000              MOVS     r0,#0                 ;657
                  |L2.68|
000044  9000              STR      r0,[sp,#0]            ;657
000046  9800              LDR      r0,[sp,#0]            ;659
000048  2801              CMP      r0,#1                 ;659
00004a  d129              BNE      |L2.160|
00004c  f1bc0f00          CMP      r12,#0                ;661
000050  d012              BEQ      |L2.120|
000052  46e2              MOV      r10,r12               ;662
000054  e00a              B        |L2.108|
                  |L2.86|
000056  1e52              SUBS     r2,r2,#1              ;666
000058  1e5b              SUBS     r3,r3,#1              ;667
00005a  7810              LDRB     r0,[r2,#0]            ;668
00005c  f893e000          LDRB     lr,[r3,#0]            ;668
000060  4570              CMP      r0,lr                 ;668
000062  d000              BEQ      |L2.102|
000064  2400              MOVS     r4,#0                 ;669
                  |L2.102|
000066  1e49              SUBS     r1,r1,#1              ;671
000068  f1aa0a01          SUB      r10,r10,#1            ;672
                  |L2.108|
00006c  2c01              CMP      r4,#1                 ;663
00006e  d103              BNE      |L2.120|
000070  b111              CBZ      r1,|L2.120|
000072  f1ba0f00          CMP      r10,#0                ;665
000076  d1ee              BNE      |L2.86|
                  |L2.120|
000078  2c01              CMP      r4,#1                 ;676
00007a  d111              BNE      |L2.160|
00007c  4616              MOV      r6,r2                 ;677
00007e  461f              MOV      r7,r3                 ;678
000080  e008              B        |L2.148|
                  |L2.130|
000082  1f36              SUBS     r6,r6,#4              ;682
000084  1f3f              SUBS     r7,r7,#4              ;683
000086  6830              LDR      r0,[r6,#0]            ;684
000088  f8d7e000          LDR      lr,[r7,#0]            ;684
00008c  4570              CMP      r0,lr                 ;684
00008e  d000              BEQ      |L2.146|
000090  2400              MOVS     r4,#0                 ;685
                  |L2.146|
000092  1f09              SUBS     r1,r1,#4              ;687
                  |L2.148|
000094  2c01              CMP      r4,#1                 ;680
000096  d101              BNE      |L2.156|
000098  2904              CMP      r1,#4                 ;681
00009a  d2f2              BCS      |L2.130|
                  |L2.156|
00009c  4632              MOV      r2,r6                 ;690
00009e  463b              MOV      r3,r7                 ;691
                  |L2.160|
0000a0  e008              B        |L2.180|
                  |L2.162|
0000a2  1e52              SUBS     r2,r2,#1              ;697
0000a4  1e5b              SUBS     r3,r3,#1              ;698
0000a6  7810              LDRB     r0,[r2,#0]            ;699
0000a8  f893e000          LDRB     lr,[r3,#0]            ;699
0000ac  4570              CMP      r0,lr                 ;699
0000ae  d000              BEQ      |L2.178|
0000b0  2400              MOVS     r4,#0                 ;700
                  |L2.178|
0000b2  1e49              SUBS     r1,r1,#1              ;702
                  |L2.180|
0000b4  2c01              CMP      r4,#1                 ;695
0000b6  d101              BNE      |L2.188|
0000b8  2900              CMP      r1,#0                 ;696
0000ba  d1f2              BNE      |L2.162|
                  |L2.188|
0000bc  4620              MOV      r0,r4                 ;705
0000be  e7a6              B        |L2.14|
;;;707    
                          ENDP


                          AREA ||i.Mem_HeapAlloc||, CODE, READONLY, ALIGN=2

                  Mem_HeapAlloc PROC
;;;748    #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;749    void  *Mem_HeapAlloc (CPU_SIZE_T   size,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;750                          CPU_SIZE_T   align,
;;;751                          CPU_SIZE_T  *poctets_reqd,
;;;752                          LIB_ERR     *perr)
;;;753    {
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
00000a  461c              MOV      r4,r3
;;;754        MEM_POOL    *pmem_pool_heap;
;;;755        void        *pmem_addr;
;;;756        void        *pmem_blk;
;;;757        CPU_SIZE_T   octets_reqd_unused;
;;;758        CPU_SIZE_T   size_rem;
;;;759        CPU_SIZE_T   size_req;
;;;760        CPU_SR_ALLOC();
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;761    
;;;762    
;;;763    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------- VALIDATE RTN ERR PTR ------------- */
;;;764        if (perr == (LIB_ERR *)0) {
000010  b91c              CBNZ     r4,|L3.26|
;;;765            CPU_SW_EXCEPTION((void *)0);
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SW_Exception
000018  bf00              NOP      
                  |L3.26|
;;;766        }
;;;767    #endif
;;;768    
;;;769                                                                        /* ------------ VALIDATE RTN OCTETS PTR ----------- */
;;;770        if (poctets_reqd == (CPU_SIZE_T *) 0) {                         /* If NOT avail, ...                                */
00001a  b90d              CBNZ     r5,|L3.32|
;;;771            poctets_reqd  = (CPU_SIZE_T *)&octets_reqd_unused;          /* ... re-cfg NULL rtn ptr to unused local var.     */
00001c  ad01              ADD      r5,sp,#4
;;;772           (void)&octets_reqd_unused;                                   /* Prevent possible 'variable unused' warning.      */
00001e  bf00              NOP      
                  |L3.32|
;;;773        }
;;;774       *poctets_reqd = 0u;                                              /* Init octets req'd for err (see Note #1).         */
000020  2000              MOVS     r0,#0
000022  6028              STR      r0,[r5,#0]
;;;775    
;;;776    
;;;777    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------ VALIDATE HEAP MEM ALLOC ----------- */
;;;778        if (size < 1) {
000024  b92f              CBNZ     r7,|L3.50|
;;;779           *perr = LIB_MEM_ERR_INVALID_MEM_SIZE;
000026  f2427074          MOV      r0,#0x2774
00002a  8020              STRH     r0,[r4,#0]
;;;780            return ((void *)0);
00002c  2000              MOVS     r0,#0
                  |L3.46|
;;;781        }
;;;782    
;;;783        if (align < 1) {
;;;784           *perr = LIB_MEM_ERR_INVALID_MEM_ALIGN;
;;;785            return ((void *)0);
;;;786        }
;;;787    #endif
;;;788    
;;;789                                                                        /* -------------- ALLOC HEAP MEM BLK -------------- */
;;;790        pmem_pool_heap = &Mem_PoolHeap;
;;;791    
;;;792        CPU_CRITICAL_ENTER();
;;;793    
;;;794        pmem_addr = pmem_pool_heap->SegAddrNextAvail;
;;;795        size_rem  = pmem_pool_heap->SegSizeRem;
;;;796        size_req  = Mem_SegCalcTotSize(pmem_addr,
;;;797                                       1u,                              /* Calc alloc for single mem blk from heap.         */
;;;798                                       size,
;;;799                                       align);
;;;800    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;801        if (size_req < 1) {                                             /* If req'd size ovf, ...                           */
;;;802            CPU_CRITICAL_EXIT();
;;;803           *poctets_reqd = size;                                        /* ... rtn add'l heap size needed.                  */
;;;804           *perr         = LIB_MEM_ERR_HEAP_OVF;
;;;805            return ((void *)0);
;;;806        }
;;;807    #endif
;;;808    
;;;809        if (size_req > size_rem) {                                      /* If req'd size > rem heap size, ...               */
;;;810            CPU_CRITICAL_EXIT();
;;;811           *poctets_reqd = size_req - size_rem;                         /* ... rtn add'l heap size needed.                  */
;;;812           *perr         = LIB_MEM_ERR_HEAP_EMPTY;
;;;813            return ((void *)0);
;;;814        }
;;;815    
;;;816        pmem_blk = Mem_SegAlloc(pmem_pool_heap, size, align);
;;;817        if (pmem_blk == (void *)0) {                                    /* If mem blk NOT avail from heap, ...              */
;;;818            CPU_CRITICAL_EXIT();
;;;819           *poctets_reqd = size_req;                                    /* ... rtn add'l heap size needed.                  */
;;;820           *perr         = LIB_MEM_ERR_HEAP_EMPTY;
;;;821            return ((void *)0);
;;;822        }
;;;823    
;;;824        CPU_CRITICAL_EXIT();
;;;825    
;;;826       *perr =  LIB_MEM_ERR_NONE;
;;;827    
;;;828        return (pmem_blk);
;;;829    }
00002e  e8bd8ffe          POP      {r1-r11,pc}
                  |L3.50|
000032  f1b80f00          CMP      r8,#0                 ;783
000036  d104              BNE      |L3.66|
000038  f2427075          MOV      r0,#0x2775            ;784
00003c  8020              STRH     r0,[r4,#0]            ;784
00003e  2000              MOVS     r0,#0                 ;785
000040  e7f5              B        |L3.46|
                  |L3.66|
000042  f8df90ac          LDR      r9,|L3.240|
000046  bf00              NOP                            ;792
000048  bf00              NOP                            ;792
00004a  f7fffffe          BL       CPU_SR_Save
00004e  9000              STR      r0,[sp,#0]            ;792
000050  bf00              NOP                            ;792
000052  bf00              NOP                            ;792
000054  f8d9003c          LDR      r0,[r9,#0x3c]         ;794
000058  9002              STR      r0,[sp,#8]            ;794
00005a  f8d9b044          LDR      r11,[r9,#0x44]        ;795
00005e  4643              MOV      r3,r8                 ;796
000060  463a              MOV      r2,r7                 ;796
000062  2101              MOVS     r1,#1                 ;796
000064  9802              LDR      r0,[sp,#8]            ;796
000066  f7fffffe          BL       Mem_SegCalcTotSize
00006a  4606              MOV      r6,r0                 ;796
00006c  b966              CBNZ     r6,|L3.136|
00006e  bf00              NOP                            ;802
000070  bf00              NOP                            ;802
000072  9800              LDR      r0,[sp,#0]            ;802
000074  f7fffffe          BL       CPU_SR_Restore
000078  bf00              NOP                            ;802
00007a  bf00              NOP                            ;802
00007c  602f              STR      r7,[r5,#0]            ;803
00007e  f24270e3          MOV      r0,#0x27e3            ;804
000082  8020              STRH     r0,[r4,#0]            ;804
000084  2000              MOVS     r0,#0                 ;805
000086  e7d2              B        |L3.46|
                  |L3.136|
000088  455e              CMP      r6,r11                ;809
00008a  d90e              BLS      |L3.170|
00008c  bf00              NOP                            ;810
00008e  bf00              NOP                            ;810
000090  9800              LDR      r0,[sp,#0]            ;810
000092  f7fffffe          BL       CPU_SR_Restore
000096  bf00              NOP                            ;810
000098  bf00              NOP                            ;810
00009a  eba6000b          SUB      r0,r6,r11             ;811
00009e  6028              STR      r0,[r5,#0]            ;811
0000a0  f24270e2          MOV      r0,#0x27e2            ;812
0000a4  8020              STRH     r0,[r4,#0]            ;812
0000a6  2000              MOVS     r0,#0                 ;813
0000a8  e7c1              B        |L3.46|
                  |L3.170|
0000aa  4642              MOV      r2,r8                 ;816
0000ac  4639              MOV      r1,r7                 ;816
0000ae  4648              MOV      r0,r9                 ;816
0000b0  f7fffffe          BL       Mem_SegAlloc
0000b4  4682              MOV      r10,r0                ;816
0000b6  f1ba0f00          CMP      r10,#0                ;817
0000ba  d10c              BNE      |L3.214|
0000bc  bf00              NOP                            ;818
0000be  bf00              NOP                            ;818
0000c0  9800              LDR      r0,[sp,#0]            ;818
0000c2  f7fffffe          BL       CPU_SR_Restore
0000c6  bf00              NOP                            ;818
0000c8  bf00              NOP                            ;818
0000ca  602e              STR      r6,[r5,#0]            ;819
0000cc  f24270e2          MOV      r0,#0x27e2            ;820
0000d0  8020              STRH     r0,[r4,#0]            ;820
0000d2  2000              MOVS     r0,#0                 ;821
0000d4  e7ab              B        |L3.46|
                  |L3.214|
0000d6  bf00              NOP                            ;824
0000d8  bf00              NOP                            ;824
0000da  9800              LDR      r0,[sp,#0]            ;824
0000dc  f7fffffe          BL       CPU_SR_Restore
0000e0  bf00              NOP                            ;824
0000e2  bf00              NOP                            ;824
0000e4  f2427010          MOV      r0,#0x2710            ;826
0000e8  8020              STRH     r0,[r4,#0]            ;826
0000ea  4650              MOV      r0,r10                ;828
0000ec  e79f              B        |L3.46|
;;;830    #endif
                          ENDP

0000ee  0000              DCW      0x0000
                  |L3.240|
                          DCD      Mem_PoolHeap

                          AREA ||i.Mem_HeapGetSizeRem||, CODE, READONLY, ALIGN=2

                  Mem_HeapGetSizeRem PROC
;;;861    #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;862    CPU_SIZE_T  Mem_HeapGetSizeRem (CPU_SIZE_T   align,
000000  b570              PUSH     {r4-r6,lr}
;;;863                                    LIB_ERR     *perr)
;;;864    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;865        CPU_SIZE_T  size_rem;
;;;866    
;;;867    
;;;868        size_rem = Mem_SegGetSizeRem(&Mem_PoolHeap, align, perr);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  4803              LDR      r0,|L4.24|
00000c  f7fffffe          BL       Mem_SegGetSizeRem
000010  4606              MOV      r6,r0
;;;869    
;;;870        return (size_rem);
000012  4630              MOV      r0,r6
;;;871    }
000014  bd70              POP      {r4-r6,pc}
;;;872    #endif
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      Mem_PoolHeap

                          AREA ||i.Mem_Init||, CODE, READONLY, ALIGN=2

                  Mem_Init PROC
;;;164    
;;;165    void  Mem_Init (void)
000000  480d              LDR      r0,|L5.56|
;;;166    {
;;;167    #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;168        MEM_POOL  *pmem_pool;
;;;169    
;;;170                                                                            /* --------- INIT MEM HEAP SEG / POOL --------- */
;;;171        pmem_pool                   = (MEM_POOL   *)&Mem_PoolHeap;
;;;172        pmem_pool->Type             = (LIB_MEM_TYPE) LIB_MEM_TYPE_HEAP;
000002  490e              LDR      r1,|L5.60|
000004  6001              STR      r1,[r0,#0]
;;;173        pmem_pool->SegHeadPtr       = (MEM_POOL   *)&Mem_PoolHeap;          /* Heap seg head = heap seg.                    */
000006  4601              MOV      r1,r0
000008  6041              STR      r1,[r0,#4]
;;;174        pmem_pool->SegPrevPtr       = (MEM_POOL   *) 0;
00000a  2100              MOVS     r1,#0
00000c  6081              STR      r1,[r0,#8]
;;;175        pmem_pool->SegNextPtr       = (MEM_POOL   *) 0;
00000e  60c1              STR      r1,[r0,#0xc]
;;;176        pmem_pool->PoolPrevPtr      = (MEM_POOL   *) 0;
000010  6101              STR      r1,[r0,#0x10]
;;;177        pmem_pool->PoolNextPtr      = (MEM_POOL   *) 0;
000012  6141              STR      r1,[r0,#0x14]
;;;178        pmem_pool->PoolAddrStart    = (void       *) 0;
000014  6181              STR      r1,[r0,#0x18]
;;;179        pmem_pool->PoolAddrEnd      = (void       *) 0;
000016  61c1              STR      r1,[r0,#0x1c]
;;;180        pmem_pool->PoolPtrs         = (void      **) 0;
000018  6201              STR      r1,[r0,#0x20]
;;;181        pmem_pool->BlkSize          = (CPU_SIZE_T  ) 0u;
00001a  6301              STR      r1,[r0,#0x30]
;;;182        pmem_pool->BlkNbr           = (CPU_SIZE_T  ) 0u;
00001c  62c1              STR      r1,[r0,#0x2c]
;;;183        pmem_pool->BlkIx            = (MEM_POOL_IX ) 0u;
00001e  6241              STR      r1,[r0,#0x24]
;;;184    
;;;185    #ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
;;;186        pmem_pool->SegAddr          = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
;;;187        pmem_pool->SegAddrNextAvail = (void       *) LIB_MEM_CFG_HEAP_BASE_ADDR;
;;;188    #else
;;;189        pmem_pool->SegAddr          = (void       *)&Mem_Heap[0];
000020  4907              LDR      r1,|L5.64|
000022  6381              STR      r1,[r0,#0x38]
;;;190        pmem_pool->SegAddrNextAvail = (void       *)&Mem_Heap[0];
000024  63c1              STR      r1,[r0,#0x3c]
;;;191    #endif
;;;192    
;;;193        pmem_pool->SegSizeTot       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
000026  f44f41b8          MOV      r1,#0x5c00
00002a  6401              STR      r1,[r0,#0x40]
;;;194        pmem_pool->SegSizeRem       = (CPU_SIZE_T  ) LIB_MEM_CFG_HEAP_SIZE;
00002c  6441              STR      r1,[r0,#0x44]
;;;195    
;;;196                                                                            /* ------------ INIT MEM POOL TBL ------------- */
;;;197        Mem_PoolTbl = &Mem_PoolHeap;
00002e  4601              MOV      r1,r0
000030  4a04              LDR      r2,|L5.68|
000032  6011              STR      r1,[r2,#0]  ; Mem_PoolTbl
;;;198    #endif
;;;199    }
000034  4770              BX       lr
;;;200    
                          ENDP

000036  0000              DCW      0x0000
                  |L5.56|
                          DCD      Mem_PoolHeap
                  |L5.60|
                          DCD      0x50414548
                  |L5.64|
                          DCD      Mem_Heap
                  |L5.68|
                          DCD      Mem_PoolTbl

                          AREA ||i.Mem_Move||, CODE, READONLY, ALIGN=1

                  Mem_Move PROC
;;;493    
;;;494    void  Mem_Move (       void        *pdest,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;495                    const  void        *psrc,
;;;496                           CPU_SIZE_T   size)
;;;497    {
000004  b085              SUB      sp,sp,#0x14
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
;;;498               CPU_SIZE_T    size_rem;
;;;499               CPU_SIZE_T    mem_gap_octets;
;;;500               CPU_ALIGN    *pmem_align_dest;
;;;501        const  CPU_ALIGN    *pmem_align_src;
;;;502               CPU_INT08U   *pmem_08_dest;
;;;503        const  CPU_INT08U   *pmem_08_src;
;;;504               CPU_INT08S    i;
;;;505               CPU_DATA      mem_align_mod_dest;
;;;506               CPU_DATA      mem_align_mod_src;
;;;507               CPU_BOOLEAN   mem_aligned;
;;;508    
;;;509    
;;;510    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;511        if (size < 1) {
00000c  f1b90f00          CMP      r9,#0
000010  d102              BNE      |L6.24|
                  |L6.18|
;;;512            return;
;;;513        }
;;;514        if (pdest == (void *)0) {
;;;515            return;
;;;516        }
;;;517        if (psrc  == (void *)0) {
;;;518            return;
;;;519        }
;;;520    #endif
;;;521    
;;;522        pmem_08_src  = (const CPU_INT08U *)psrc;
;;;523        pmem_08_dest = (      CPU_INT08U *)pdest;
;;;524        if (pmem_08_src > pmem_08_dest) {
;;;525            Mem_Copy(pdest, psrc, size);
;;;526            return;
;;;527        }
;;;528    
;;;529        size_rem           =  size;
;;;530    
;;;531        pmem_08_dest       = (      CPU_INT08U *)pdest + size - 1;
;;;532        pmem_08_src        = (const CPU_INT08U *)psrc  + size - 1;
;;;533        
;;;534        mem_gap_octets     = pmem_08_dest - pmem_08_src;
;;;535        
;;;536    
;;;537        if (mem_gap_octets >= sizeof(CPU_ALIGN)) {                  /* Avoid bufs overlap.                                  */
;;;538        
;;;539                                                                    /* See Note #4.                                         */
;;;540            mem_align_mod_dest = (CPU_INT08U)((CPU_ADDR)pmem_08_dest % sizeof(CPU_ALIGN));
;;;541            mem_align_mod_src  = (CPU_INT08U)((CPU_ADDR)pmem_08_src  % sizeof(CPU_ALIGN));
;;;542    
;;;543            mem_aligned        = (mem_align_mod_dest == mem_align_mod_src) ? DEF_YES : DEF_NO;
;;;544    
;;;545            if (mem_aligned == DEF_YES) {                           /* If mem bufs' alignment offset equal, ...             */
;;;546                                                                    /* ... optimize copy for mem buf alignment.             */
;;;547                if (mem_align_mod_dest != (sizeof(CPU_ALIGN) - 1)) {/* If leading octets avail,                   ...       */
;;;548                    i = mem_align_mod_dest;
;;;549                    while ((size_rem   >  0) &&                     /* ... start mem buf copy with leading octets ...       */
;;;550                           (i          >= 0)) {                     /* ... until next CPU_ALIGN word boundary.              */
;;;551                       *pmem_08_dest-- = *pmem_08_src--;
;;;552                        size_rem      -=  sizeof(CPU_INT08U);
;;;553                        i--;
;;;554                    }
;;;555                }
;;;556    
;;;557                                                                    /* See Note #3a.                                        */
;;;558                pmem_align_dest = (      CPU_ALIGN *)((CPU_INT08U *)pmem_08_dest - sizeof(CPU_ALIGN) + 1);
;;;559                pmem_align_src  = (const CPU_ALIGN *)((CPU_INT08U *)pmem_08_src  - sizeof(CPU_ALIGN) + 1);
;;;560                while (size_rem      >=  sizeof(CPU_ALIGN)) {       /* While mem bufs aligned on CPU_ALIGN word boundaries, */
;;;561                   *pmem_align_dest-- = *pmem_align_src--;          /* ... copy psrc to pdest with CPU_ALIGN-sized words.   */
;;;562                    size_rem         -=  sizeof(CPU_ALIGN);
;;;563                }
;;;564    
;;;565                pmem_08_dest = (      CPU_INT08U *)pmem_align_dest + sizeof(CPU_ALIGN) - 1;
;;;566                pmem_08_src  = (const CPU_INT08U *)pmem_align_src  + sizeof(CPU_ALIGN) - 1;
;;;567    
;;;568            }
;;;569        }
;;;570    
;;;571        while (size_rem > 0) {                                      /* For unaligned mem bufs or trailing octets, ...       */
;;;572           *pmem_08_dest-- = *pmem_08_src--;                        /* ... copy psrc to pdest by octets.                    */
;;;573            size_rem      -=  sizeof(CPU_INT08U);
;;;574        }
;;;575    }
000012  b005              ADD      sp,sp,#0x14
000014  e8bd8ff0          POP      {r4-r11,pc}
                  |L6.24|
000018  b907              CBNZ     r7,|L6.28|
00001a  e7fa              B        |L6.18|
                  |L6.28|
00001c  f1b80f00          CMP      r8,#0                 ;517
000020  d100              BNE      |L6.36|
000022  e7f6              B        |L6.18|
                  |L6.36|
000024  4646              MOV      r6,r8                 ;522
000026  463d              MOV      r5,r7                 ;523
000028  42ae              CMP      r6,r5                 ;524
00002a  d905              BLS      |L6.56|
00002c  464a              MOV      r2,r9                 ;525
00002e  4641              MOV      r1,r8                 ;525
000030  4638              MOV      r0,r7                 ;525
000032  f7fffffe          BL       Mem_Copy
000036  e7ec              B        |L6.18|
                  |L6.56|
000038  464c              MOV      r4,r9                 ;529
00003a  1938              ADDS     r0,r7,r4              ;531
00003c  1e45              SUBS     r5,r0,#1              ;531
00003e  eb080004          ADD      r0,r8,r4              ;532
000042  1e46              SUBS     r6,r0,#1              ;532
000044  1ba8              SUBS     r0,r5,r6              ;534
000046  9004              STR      r0,[sp,#0x10]         ;534
000048  9804              LDR      r0,[sp,#0x10]         ;537
00004a  2804              CMP      r0,#4                 ;537
00004c  d334              BCC      |L6.184|
00004e  f0050003          AND      r0,r5,#3              ;540
000052  9002              STR      r0,[sp,#8]            ;540
000054  f0060103          AND      r1,r6,#3              ;541
000058  9101              STR      r1,[sp,#4]            ;541
00005a  e9dd1001          LDRD     r1,r0,[sp,#4]         ;543
00005e  4288              CMP      r0,r1                 ;543
000060  d101              BNE      |L6.102|
000062  2001              MOVS     r0,#1                 ;543
000064  e000              B        |L6.104|
                  |L6.102|
000066  2000              MOVS     r0,#0                 ;543
                  |L6.104|
000068  9000              STR      r0,[sp,#0]            ;543
00006a  9800              LDR      r0,[sp,#0]            ;545
00006c  2801              CMP      r0,#1                 ;545
00006e  d123              BNE      |L6.184|
000070  9802              LDR      r0,[sp,#8]            ;547
000072  2803              CMP      r0,#3                 ;547
000074  d010              BEQ      |L6.152|
000076  9802              LDR      r0,[sp,#8]            ;548
000078  b240              SXTB     r0,r0                 ;548
00007a  9003              STR      r0,[sp,#0xc]          ;548
00007c  e008              B        |L6.144|
                  |L6.126|
00007e  f8160901          LDRB     r0,[r6],#-1           ;551
000082  f8050901          STRB     r0,[r5],#-1           ;551
000086  1e64              SUBS     r4,r4,#1              ;552
000088  9803              LDR      r0,[sp,#0xc]          ;553
00008a  1e40              SUBS     r0,r0,#1              ;553
00008c  b240              SXTB     r0,r0                 ;553
00008e  9003              STR      r0,[sp,#0xc]          ;553
                  |L6.144|
000090  b114              CBZ      r4,|L6.152|
000092  9803              LDR      r0,[sp,#0xc]          ;550
000094  2800              CMP      r0,#0                 ;550
000096  daf2              BGE      |L6.126|
                  |L6.152|
000098  f1a50a03          SUB      r10,r5,#3             ;558
00009c  f1a60b03          SUB      r11,r6,#3             ;559
0000a0  e004              B        |L6.172|
                  |L6.162|
0000a2  f85b0904          LDR      r0,[r11],#-4          ;561
0000a6  f84a0904          STR      r0,[r10],#-4          ;561
0000aa  1f24              SUBS     r4,r4,#4              ;562
                  |L6.172|
0000ac  2c04              CMP      r4,#4                 ;560
0000ae  d2f8              BCS      |L6.162|
0000b0  f10a0503          ADD      r5,r10,#3             ;565
0000b4  f10b0603          ADD      r6,r11,#3             ;566
                  |L6.184|
0000b8  e004              B        |L6.196|
                  |L6.186|
0000ba  f8160901          LDRB     r0,[r6],#-1           ;572
0000be  f8050901          STRB     r0,[r5],#-1           ;572
0000c2  1e64              SUBS     r4,r4,#1              ;573
                  |L6.196|
0000c4  2c00              CMP      r4,#0                 ;571
0000c6  d1f8              BNE      |L6.186|
0000c8  bf00              NOP      
0000ca  e7a2              B        |L6.18|
;;;576    
                          ENDP


                          AREA ||i.Mem_PoolBlkFree||, CODE, READONLY, ALIGN=2

                  Mem_PoolBlkFree PROC
;;;1880   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;1881   void  Mem_PoolBlkFree (MEM_POOL  *pmem_pool,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1882                          void      *pmem_blk,
;;;1883                          LIB_ERR   *perr)
;;;1884   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1885       void         *p_addr;
;;;1886       CPU_BOOLEAN   addr_valid;
;;;1887       MEM_POOL_IX   i;
;;;1888       CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;1889   
;;;1890   
;;;1891   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------- VALIDATE RTN ERR PTR ------------- */
;;;1892       if (perr == (LIB_ERR *)0) {
00000e  b91d              CBNZ     r5,|L7.24|
;;;1893           CPU_SW_EXCEPTION(;);
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_SW_Exception
000016  bf00              NOP      
                  |L7.24|
;;;1894       }
;;;1895   #endif
;;;1896   
;;;1897                                                                       /* ------------ VALIDATE MEM POOL FREE ------------ */
;;;1898   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* Validate mem ptrs.                               */
;;;1899       if (pmem_pool == (MEM_POOL *)0) {
000018  b924              CBNZ     r4,|L7.36|
;;;1900          *perr = LIB_MEM_ERR_NULL_PTR;
00001a  f2427011          MOV      r0,#0x2711
00001e  8028              STRH     r0,[r5,#0]
                  |L7.32|
;;;1901           return;
;;;1902       }
;;;1903   
;;;1904       if (pmem_blk == (void *)0) {
;;;1905          *perr = LIB_MEM_ERR_NULL_PTR;
;;;1906           return;
;;;1907       }
;;;1908   #endif
;;;1909   
;;;1910       CPU_CRITICAL_ENTER();
;;;1911   
;;;1912   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1913       if (pmem_pool->Type != LIB_MEM_TYPE_POOL) {                     /* Validate mem pool type.                          */
;;;1914           CPU_CRITICAL_EXIT();
;;;1915          *perr = LIB_MEM_ERR_INVALID_POOL;
;;;1916           return;
;;;1917       }
;;;1918   
;;;1919       addr_valid = Mem_PoolBlkIsValidAddr(pmem_pool, pmem_blk);       /* Validate mem blk as valid pool blk addr.         */
;;;1920       if (addr_valid != DEF_OK) {
;;;1921           CPU_CRITICAL_EXIT();
;;;1922          *perr = LIB_MEM_ERR_INVALID_BLK_ADDR;
;;;1923           return;
;;;1924       }
;;;1925   
;;;1926       for (i = 0u; i < pmem_pool->BlkIx; i++) {                       /* Validate mem blk  NOT already in pool.           */
;;;1927           if (pmem_blk == pmem_pool->PoolPtrs[i]) {
;;;1928               CPU_CRITICAL_EXIT();
;;;1929              *perr = LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL;
;;;1930               return;
;;;1931           }
;;;1932       }
;;;1933   #endif
;;;1934   
;;;1935       if (pmem_pool->BlkIx >= pmem_pool->BlkNbr) {                    /* Validate mem pool NOT already full.              */
;;;1936           CPU_CRITICAL_EXIT();
;;;1937          *perr = LIB_MEM_ERR_POOL_FULL;
;;;1938           return;
;;;1939       }
;;;1940   
;;;1941                                                                       /* ------------- FREE MEM BLK TO POOL ------------- */
;;;1942       addr_valid = DEF_NO;
;;;1943       for (i = pmem_pool->BlkIx; i < pmem_pool->BlkNbr; i++) {        /* Find ix of mem blk to free.                      */
;;;1944           p_addr = pmem_pool->PoolPtrs[i];
;;;1945           if (p_addr == pmem_blk) {
;;;1946               addr_valid = DEF_YES;
;;;1947               break;
;;;1948           }
;;;1949       }
;;;1950                                                                       /* Swap addr of mem blk to free in tbl.             */
;;;1951       if (addr_valid == DEF_YES) {
;;;1952           pmem_pool->PoolPtrs[i] = pmem_pool->PoolPtrs[pmem_pool->BlkIx];
;;;1953       } else {
;;;1954   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1955           CPU_CRITICAL_EXIT();
;;;1956          *perr = LIB_MEM_ERR_INVALID_POOL;
;;;1957           return;
;;;1958   #endif
;;;1959       }
;;;1960   
;;;1961                                                                       /* Free mem blk.                                    */
;;;1962       pmem_pool->PoolPtrs[pmem_pool->BlkIx] = pmem_blk;
;;;1963       pmem_pool->BlkIx++;
;;;1964   
;;;1965       CPU_CRITICAL_EXIT();
;;;1966   
;;;1967      *perr = LIB_MEM_ERR_NONE;
;;;1968   }
000020  e8bd87f0          POP      {r4-r10,pc}
                  |L7.36|
000024  b91f              CBNZ     r7,|L7.46|
000026  f2427011          MOV      r0,#0x2711            ;1905
00002a  8028              STRH     r0,[r5,#0]            ;1905
00002c  e7f8              B        |L7.32|
                  |L7.46|
00002e  bf00              NOP                            ;1910
000030  bf00              NOP                            ;1910
000032  f7fffffe          BL       CPU_SR_Save
000036  4682              MOV      r10,r0                ;1910
000038  bf00              NOP                            ;1910
00003a  bf00              NOP                            ;1910
00003c  4940              LDR      r1,|L7.320|
00003e  6820              LDR      r0,[r4,#0]            ;1913
000040  4288              CMP      r0,r1                 ;1913
000042  d00a              BEQ      |L7.90|
000044  bf00              NOP                            ;1914
000046  bf00              NOP                            ;1914
000048  4650              MOV      r0,r10                ;1914
00004a  f7fffffe          BL       CPU_SR_Restore
00004e  bf00              NOP                            ;1914
000050  bf00              NOP                            ;1914
000052  f2427088          MOV      r0,#0x2788            ;1915
000056  8028              STRH     r0,[r5,#0]            ;1915
000058  e7e2              B        |L7.32|
                  |L7.90|
00005a  4639              MOV      r1,r7                 ;1919
00005c  4620              MOV      r0,r4                 ;1919
00005e  f7fffffe          BL       Mem_PoolBlkIsValidAddr
000062  4680              MOV      r8,r0                 ;1919
000064  f1b80f01          CMP      r8,#1                 ;1920
000068  d00a              BEQ      |L7.128|
00006a  bf00              NOP                            ;1921
00006c  bf00              NOP                            ;1921
00006e  4650              MOV      r0,r10                ;1921
000070  f7fffffe          BL       CPU_SR_Restore
000074  bf00              NOP                            ;1921
000076  bf00              NOP                            ;1921
000078  f2427097          MOV      r0,#0x2797            ;1922
00007c  8028              STRH     r0,[r5,#0]            ;1922
00007e  e7cf              B        |L7.32|
                  |L7.128|
000080  2600              MOVS     r6,#0                 ;1926
000082  e010              B        |L7.166|
                  |L7.132|
000084  6a20              LDR      r0,[r4,#0x20]         ;1927
000086  f8500026          LDR      r0,[r0,r6,LSL #2]     ;1927
00008a  42b8              CMP      r0,r7                 ;1927
00008c  d10a              BNE      |L7.164|
00008e  bf00              NOP                            ;1928
000090  bf00              NOP                            ;1928
000092  4650              MOV      r0,r10                ;1928
000094  f7fffffe          BL       CPU_SR_Restore
000098  bf00              NOP                            ;1928
00009a  bf00              NOP                            ;1928
00009c  f2427098          MOV      r0,#0x2798            ;1929
0000a0  8028              STRH     r0,[r5,#0]            ;1929
0000a2  e7bd              B        |L7.32|
                  |L7.164|
0000a4  1c76              ADDS     r6,r6,#1              ;1926
                  |L7.166|
0000a6  6a60              LDR      r0,[r4,#0x24]         ;1926
0000a8  42b0              CMP      r0,r6                 ;1926
0000aa  d8eb              BHI      |L7.132|
0000ac  6ae1              LDR      r1,[r4,#0x2c]         ;1935
0000ae  6a60              LDR      r0,[r4,#0x24]         ;1935
0000b0  4288              CMP      r0,r1                 ;1935
0000b2  d30a              BCC      |L7.202|
0000b4  bf00              NOP                            ;1936
0000b6  bf00              NOP                            ;1936
0000b8  4650              MOV      r0,r10                ;1936
0000ba  f7fffffe          BL       CPU_SR_Restore
0000be  bf00              NOP                            ;1936
0000c0  bf00              NOP                            ;1936
0000c2  f24270dd          MOV      r0,#0x27dd            ;1937
0000c6  8028              STRH     r0,[r5,#0]            ;1937
0000c8  e7aa              B        |L7.32|
                  |L7.202|
0000ca  f04f0800          MOV      r8,#0                 ;1942
0000ce  6a66              LDR      r6,[r4,#0x24]         ;1943
0000d0  e008              B        |L7.228|
                  |L7.210|
0000d2  6a20              LDR      r0,[r4,#0x20]         ;1944
0000d4  f8509026          LDR      r9,[r0,r6,LSL #2]     ;1944
0000d8  45b9              CMP      r9,r7                 ;1945
0000da  d102              BNE      |L7.226|
0000dc  f04f0801          MOV      r8,#1                 ;1946
0000e0  e003              B        |L7.234|
                  |L7.226|
0000e2  1c76              ADDS     r6,r6,#1              ;1943
                  |L7.228|
0000e4  6ae0              LDR      r0,[r4,#0x2c]         ;1943
0000e6  42b0              CMP      r0,r6                 ;1943
0000e8  d8f3              BHI      |L7.210|
                  |L7.234|
0000ea  bf00              NOP                            ;1947
0000ec  f1b80f01          CMP      r8,#1                 ;1951
0000f0  d107              BNE      |L7.258|
0000f2  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;1952
0000f6  f8500021          LDR      r0,[r0,r1,LSL #2]     ;1952
0000fa  6a21              LDR      r1,[r4,#0x20]         ;1952
0000fc  f8410026          STR      r0,[r1,r6,LSL #2]     ;1952
000100  e00a              B        |L7.280|
                  |L7.258|
000102  bf00              NOP                            ;1955
000104  bf00              NOP                            ;1955
000106  4650              MOV      r0,r10                ;1955
000108  f7fffffe          BL       CPU_SR_Restore
00010c  bf00              NOP                            ;1955
00010e  bf00              NOP                            ;1955
000110  f2427088          MOV      r0,#0x2788            ;1956
000114  8028              STRH     r0,[r5,#0]            ;1956
000116  e783              B        |L7.32|
                  |L7.280|
000118  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;1962
00011c  f8407021          STR      r7,[r0,r1,LSL #2]     ;1962
000120  6a60              LDR      r0,[r4,#0x24]         ;1963
000122  1c40              ADDS     r0,r0,#1              ;1963
000124  6260              STR      r0,[r4,#0x24]         ;1963
000126  bf00              NOP                            ;1965
000128  bf00              NOP                            ;1965
00012a  4650              MOV      r0,r10                ;1965
00012c  f7fffffe          BL       CPU_SR_Restore
000130  bf00              NOP                            ;1965
000132  bf00              NOP                            ;1965
000134  f2427010          MOV      r0,#0x2710            ;1967
000138  8028              STRH     r0,[r5,#0]            ;1967
00013a  bf00              NOP      
00013c  e770              B        |L7.32|
;;;1969   #endif
                          ENDP

00013e  0000              DCW      0x0000
                  |L7.320|
                          DCD      0x4c4f4f50

                          AREA ||i.Mem_PoolBlkGet||, CODE, READONLY, ALIGN=2

                  Mem_PoolBlkGet PROC
;;;1678   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;1679   void  *Mem_PoolBlkGet (MEM_POOL    *pmem_pool,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1680                          CPU_SIZE_T   size,
;;;1681                          LIB_ERR     *perr)
;;;1682   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;1683       void  *pmem_blk;
;;;1684       CPU_SR_ALLOC();
00000a  f04f0800          MOV      r8,#0
;;;1685   
;;;1686   
;;;1687   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------- VALIDATE RTN ERR PTR ------------- */
;;;1688       if (perr == (LIB_ERR *)0) {
00000e  b91d              CBNZ     r5,|L8.24|
;;;1689           CPU_SW_EXCEPTION((void *)0);
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_SW_Exception
000016  bf00              NOP      
                  |L8.24|
;;;1690       }
;;;1691   #endif
;;;1692   
;;;1693                                                                       /* ------------ VALIDATE MEM POOL GET ------------- */
;;;1694   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1695       if (pmem_pool == (MEM_POOL *)0) {                               /* Validate mem ptr.                                */
000018  b92c              CBNZ     r4,|L8.38|
;;;1696          *perr = LIB_MEM_ERR_NULL_PTR;
00001a  f2427011          MOV      r0,#0x2711
00001e  8028              STRH     r0,[r5,#0]
;;;1697           return ((void *)0);
000020  2000              MOVS     r0,#0
                  |L8.34|
;;;1698       }
;;;1699   
;;;1700       if (size < 1) {                                                 /* Validate req'd size as non-NULL.                 */
;;;1701          *perr = LIB_MEM_ERR_INVALID_BLK_SIZE;
;;;1702           return ((void *)0);
;;;1703       }
;;;1704   #endif
;;;1705   
;;;1706       CPU_CRITICAL_ENTER();
;;;1707   
;;;1708   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1709       if (pmem_pool->Type != LIB_MEM_TYPE_POOL) {                     /* Validate mem pool type.                          */
;;;1710           CPU_CRITICAL_EXIT();
;;;1711          *perr = LIB_MEM_ERR_INVALID_POOL;
;;;1712           return ((void *)0);
;;;1713       }
;;;1714   
;;;1715       if (size > pmem_pool->BlkSize) {                                /* Validate req'd size <= mem pool blk size.        */
;;;1716           CPU_CRITICAL_EXIT();
;;;1717          *perr = LIB_MEM_ERR_INVALID_BLK_SIZE;
;;;1718           return ((void *)0);
;;;1719       }
;;;1720   #endif
;;;1721   
;;;1722      (void)&size;                                                     /* Prevent possible 'variable unused' warning.      */
;;;1723   
;;;1724       if (pmem_pool->BlkIx < 1) {                                     /* Validate mem pool as NOT empty.                  */
;;;1725           CPU_CRITICAL_EXIT();
;;;1726          *perr = LIB_MEM_ERR_POOL_EMPTY;
;;;1727           return ((void *)0);
;;;1728       }
;;;1729   
;;;1730       if (pmem_pool->BlkIx > pmem_pool->BlkNbr) {                     /* Validate mem pool ix NOT corrupt.                */
;;;1731           CPU_CRITICAL_EXIT();
;;;1732          *perr = LIB_MEM_ERR_INVALID_BLK_IX;
;;;1733           return ((void *)0);
;;;1734       }
;;;1735   
;;;1736                                                                       /* ------------ GET MEM BLK FROM POOL ------------- */
;;;1737       pmem_pool->BlkIx--;
;;;1738       pmem_blk = pmem_pool->PoolPtrs[pmem_pool->BlkIx];
;;;1739   
;;;1740       CPU_CRITICAL_EXIT();
;;;1741   
;;;1742      *perr =  LIB_MEM_ERR_NONE;
;;;1743   
;;;1744       return (pmem_blk);
;;;1745   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L8.38|
000026  b926              CBNZ     r6,|L8.50|
000028  f2427093          MOV      r0,#0x2793            ;1701
00002c  8028              STRH     r0,[r5,#0]            ;1701
00002e  2000              MOVS     r0,#0                 ;1702
000030  e7f7              B        |L8.34|
                  |L8.50|
000032  bf00              NOP                            ;1706
000034  bf00              NOP                            ;1706
000036  f7fffffe          BL       CPU_SR_Save
00003a  4680              MOV      r8,r0                 ;1706
00003c  bf00              NOP                            ;1706
00003e  bf00              NOP                            ;1706
000040  4927              LDR      r1,|L8.224|
000042  6820              LDR      r0,[r4,#0]            ;1709
000044  4288              CMP      r0,r1                 ;1709
000046  d00b              BEQ      |L8.96|
000048  bf00              NOP                            ;1710
00004a  bf00              NOP                            ;1710
00004c  4640              MOV      r0,r8                 ;1710
00004e  f7fffffe          BL       CPU_SR_Restore
000052  bf00              NOP                            ;1710
000054  bf00              NOP                            ;1710
000056  f2427088          MOV      r0,#0x2788            ;1711
00005a  8028              STRH     r0,[r5,#0]            ;1711
00005c  2000              MOVS     r0,#0                 ;1712
00005e  e7e0              B        |L8.34|
                  |L8.96|
000060  6b20              LDR      r0,[r4,#0x30]         ;1715
000062  42b0              CMP      r0,r6                 ;1715
000064  d20b              BCS      |L8.126|
000066  bf00              NOP                            ;1716
000068  bf00              NOP                            ;1716
00006a  4640              MOV      r0,r8                 ;1716
00006c  f7fffffe          BL       CPU_SR_Restore
000070  bf00              NOP                            ;1716
000072  bf00              NOP                            ;1716
000074  f2427093          MOV      r0,#0x2793            ;1717
000078  8028              STRH     r0,[r5,#0]            ;1717
00007a  2000              MOVS     r0,#0                 ;1718
00007c  e7d1              B        |L8.34|
                  |L8.126|
00007e  6a60              LDR      r0,[r4,#0x24]         ;1724
000080  b958              CBNZ     r0,|L8.154|
000082  bf00              NOP                            ;1725
000084  bf00              NOP                            ;1725
000086  4640              MOV      r0,r8                 ;1725
000088  f7fffffe          BL       CPU_SR_Restore
00008c  bf00              NOP                            ;1725
00008e  bf00              NOP                            ;1725
000090  f24270de          MOV      r0,#0x27de            ;1726
000094  8028              STRH     r0,[r5,#0]            ;1726
000096  2000              MOVS     r0,#0                 ;1727
000098  e7c3              B        |L8.34|
                  |L8.154|
00009a  6ae1              LDR      r1,[r4,#0x2c]         ;1730
00009c  6a60              LDR      r0,[r4,#0x24]         ;1730
00009e  4288              CMP      r0,r1                 ;1730
0000a0  d90b              BLS      |L8.186|
0000a2  bf00              NOP                            ;1731
0000a4  bf00              NOP                            ;1731
0000a6  4640              MOV      r0,r8                 ;1731
0000a8  f7fffffe          BL       CPU_SR_Restore
0000ac  bf00              NOP                            ;1731
0000ae  bf00              NOP                            ;1731
0000b0  f2427095          MOV      r0,#0x2795            ;1732
0000b4  8028              STRH     r0,[r5,#0]            ;1732
0000b6  2000              MOVS     r0,#0                 ;1733
0000b8  e7b3              B        |L8.34|
                  |L8.186|
0000ba  6a60              LDR      r0,[r4,#0x24]         ;1737
0000bc  1e40              SUBS     r0,r0,#1              ;1737
0000be  6260              STR      r0,[r4,#0x24]         ;1737
0000c0  e9d40108          LDRD     r0,r1,[r4,#0x20]      ;1738
0000c4  f8507021          LDR      r7,[r0,r1,LSL #2]     ;1738
0000c8  bf00              NOP                            ;1740
0000ca  bf00              NOP                            ;1740
0000cc  4640              MOV      r0,r8                 ;1740
0000ce  f7fffffe          BL       CPU_SR_Restore
0000d2  bf00              NOP                            ;1740
0000d4  bf00              NOP                            ;1740
0000d6  f2427010          MOV      r0,#0x2710            ;1742
0000da  8028              STRH     r0,[r5,#0]            ;1742
0000dc  4638              MOV      r0,r7                 ;1744
0000de  e7a0              B        |L8.34|
;;;1746   #endif
                          ENDP

                  |L8.224|
                          DCD      0x4c4f4f50

                          AREA ||i.Mem_PoolBlkGetNbrAvail||, CODE, READONLY, ALIGN=2

                  Mem_PoolBlkGetNbrAvail PROC
;;;1597   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;1598   MEM_POOL_BLK_QTY  Mem_PoolBlkGetNbrAvail (MEM_POOL  *pmem_pool,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1599                                             LIB_ERR   *perr)
;;;1600   {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;1601       MEM_POOL_BLK_QTY  nbr_blk_rem;
;;;1602       CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;1603   
;;;1604   
;;;1605   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1606                                                                   /* --------------- VALIDATE RTN ERR PTR --------------- */
;;;1607       if (perr == (LIB_ERR *)0) {
00000a  b91c              CBNZ     r4,|L9.20|
;;;1608           CPU_SW_EXCEPTION(0u);
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SW_Exception
000012  bf00              NOP      
                  |L9.20|
;;;1609       }
;;;1610                                                                   /* ---------------- VALIDATE MEM POOL ----------------- */
;;;1611       if (pmem_pool == (MEM_POOL *)0) {                           /* Validate mem ptr.                                    */
000014  b92d              CBNZ     r5,|L9.34|
;;;1612          *perr =  LIB_MEM_ERR_NULL_PTR;
000016  f2427011          MOV      r0,#0x2711
00001a  8020              STRH     r0,[r4,#0]
;;;1613           return (0u);
00001c  2000              MOVS     r0,#0
                  |L9.30|
;;;1614       }
;;;1615   #endif
;;;1616   
;;;1617       CPU_CRITICAL_ENTER();
;;;1618   
;;;1619   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1620       switch (pmem_pool->Type) {                                  /* Validate mem pool type.                              */
;;;1621           case LIB_MEM_TYPE_POOL:
;;;1622                break;
;;;1623   
;;;1624   
;;;1625           case LIB_MEM_TYPE_NONE:
;;;1626           case LIB_MEM_TYPE_HEAP:
;;;1627           default:
;;;1628                CPU_CRITICAL_EXIT();
;;;1629               *perr =  LIB_MEM_ERR_INVALID_POOL;
;;;1630                return (0u);                                       /* Prevent 'break NOT reachable' compiler warning.      */
;;;1631       }
;;;1632   #endif
;;;1633   
;;;1634                                                                   /* --------- GET REM'ING MEM POOL NBR BLK(S) ---------- */
;;;1635       nbr_blk_rem = pmem_pool->BlkIx;
;;;1636   
;;;1637       CPU_CRITICAL_EXIT();
;;;1638   
;;;1639   
;;;1640      *perr =  LIB_MEM_ERR_NONE;
;;;1641   
;;;1642       return (nbr_blk_rem);
;;;1643   }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L9.34|
000022  bf00              NOP                            ;1617
000024  bf00              NOP                            ;1617
000026  f7fffffe          BL       CPU_SR_Save
00002a  4607              MOV      r7,r0                 ;1617
00002c  bf00              NOP                            ;1617
00002e  bf00              NOP                            ;1617
000030  4913              LDR      r1,|L9.128|
000032  6828              LDR      r0,[r5,#0]            ;1620
000034  4408              ADD      r0,r0,r1              ;1620
000036  b140              CBZ      r0,|L9.74|
000038  4912              LDR      r1,|L9.132|
00003a  4408              ADD      r0,r0,r1              ;1620
00003c  b118              CBZ      r0,|L9.70|
00003e  4912              LDR      r1,|L9.136|
000040  4408              ADD      r0,r0,r1              ;1620
000042  b908              CBNZ     r0,|L9.72|
000044  e002              B        |L9.76|
                  |L9.70|
000046  e00d              B        |L9.100|
                  |L9.72|
000048  bf00              NOP                            ;1625
                  |L9.74|
00004a  bf00              NOP                            ;1626
                  |L9.76|
00004c  bf00              NOP                            ;1628
00004e  bf00              NOP                            ;1628
000050  4638              MOV      r0,r7                 ;1628
000052  f7fffffe          BL       CPU_SR_Restore
000056  bf00              NOP                            ;1628
000058  bf00              NOP                            ;1628
00005a  f2427088          MOV      r0,#0x2788            ;1629
00005e  8020              STRH     r0,[r4,#0]            ;1629
000060  2000              MOVS     r0,#0                 ;1630
000062  e7dc              B        |L9.30|
                  |L9.100|
000064  bf00              NOP                            ;1622
000066  6a6e              LDR      r6,[r5,#0x24]         ;1635
000068  bf00              NOP                            ;1637
00006a  bf00              NOP                            ;1637
00006c  4638              MOV      r0,r7                 ;1637
00006e  f7fffffe          BL       CPU_SR_Restore
000072  bf00              NOP                            ;1637
000074  bf00              NOP                            ;1637
000076  f2427010          MOV      r0,#0x2710            ;1640
00007a  8020              STRH     r0,[r4,#0]            ;1640
00007c  4630              MOV      r0,r6                 ;1642
00007e  e7ce              B        |L9.30|
;;;1644   #endif
                          ENDP

                  |L9.128|
                          DCD      0xbab1b0b2
                  |L9.132|
                          DCD      0xf8fefffe
                  |L9.136|
                          DCD      0xfc0e0a08

                          AREA ||i.Mem_PoolBlkGetUsedAtIx||, CODE, READONLY, ALIGN=2

                  Mem_PoolBlkGetUsedAtIx PROC
;;;1783   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;1784   void  *Mem_PoolBlkGetUsedAtIx (MEM_POOL          *pmem_pool,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1785                                  MEM_POOL_IX        used_ix,
;;;1786                                  LIB_ERR           *perr)
;;;1787   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1788       MEM_POOL_IX   blk_ix;
;;;1789       void         *pmem_blk;
;;;1790       CPU_SR_ALLOC();
00000a  f04f0900          MOV      r9,#0
;;;1791   
;;;1792   
;;;1793   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------- VALIDATE RTN ERR PTR ------------- */
;;;1794       if (perr == (LIB_ERR *)0) {
00000e  b91d              CBNZ     r5,|L10.24|
;;;1795           CPU_SW_EXCEPTION((void *)0);
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_SW_Exception
000016  bf00              NOP      
                  |L10.24|
;;;1796       }
;;;1797   #endif
;;;1798   
;;;1799                                                                       /* ------------ VALIDATE MEM POOL GET ------------- */
;;;1800   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1801       if (pmem_pool == (MEM_POOL *)0) {                               /* Validate mem ptr.                                */
000018  b92c              CBNZ     r4,|L10.38|
;;;1802          *perr = LIB_MEM_ERR_NULL_PTR;
00001a  f2427011          MOV      r0,#0x2711
00001e  8028              STRH     r0,[r5,#0]
;;;1803           return ((void *)0);
000020  2000              MOVS     r0,#0
                  |L10.34|
;;;1804       }
;;;1805   #endif
;;;1806   
;;;1807       CPU_CRITICAL_ENTER();
;;;1808   
;;;1809   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1810       if (pmem_pool->Type != LIB_MEM_TYPE_POOL) {                     /* Validate mem pool type.                          */
;;;1811           CPU_CRITICAL_EXIT();
;;;1812          *perr = LIB_MEM_ERR_INVALID_POOL;
;;;1813           return ((void *)0);
;;;1814       }
;;;1815   
;;;1816       if (pmem_pool->BlkIx >= pmem_pool->BlkNbr) {                    /* Validate mem pool as NOT full.                   */
;;;1817           CPU_CRITICAL_EXIT();
;;;1818          *perr = LIB_MEM_ERR_INVALID_BLK_IX;
;;;1819           return ((void *)0);
;;;1820       }
;;;1821   #endif
;;;1822   
;;;1823       blk_ix = pmem_pool->BlkNbr - used_ix - 1u;
;;;1824   
;;;1825       if (blk_ix >= pmem_pool->BlkNbr) {                              /* Validate ix range.                               */
;;;1826           CPU_CRITICAL_EXIT();
;;;1827          *perr = LIB_MEM_ERR_INVALID_BLK_IX;
;;;1828           return ((void *)0);
;;;1829       }
;;;1830   
;;;1831       if (blk_ix < pmem_pool->BlkIx) {
;;;1832           CPU_CRITICAL_EXIT();
;;;1833          *perr = LIB_MEM_ERR_INVALID_BLK_IX;
;;;1834           return ((void *)0);
;;;1835       }
;;;1836                                                                       /* ------------ GET MEM BLK FROM POOL ------------- */
;;;1837       pmem_blk = pmem_pool->PoolPtrs[blk_ix];
;;;1838   
;;;1839       CPU_CRITICAL_EXIT();
;;;1840   
;;;1841      *perr =  LIB_MEM_ERR_NONE;
;;;1842   
;;;1843       return (pmem_blk);
;;;1844   }
000022  e8bd87f0          POP      {r4-r10,pc}
                  |L10.38|
000026  bf00              NOP                            ;1807
000028  bf00              NOP                            ;1807
00002a  f7fffffe          BL       CPU_SR_Save
00002e  4681              MOV      r9,r0                 ;1807
000030  bf00              NOP                            ;1807
000032  bf00              NOP                            ;1807
000034  4927              LDR      r1,|L10.212|
000036  6820              LDR      r0,[r4,#0]            ;1810
000038  4288              CMP      r0,r1                 ;1810
00003a  d00b              BEQ      |L10.84|
00003c  bf00              NOP                            ;1811
00003e  bf00              NOP                            ;1811
000040  4648              MOV      r0,r9                 ;1811
000042  f7fffffe          BL       CPU_SR_Restore
000046  bf00              NOP                            ;1811
000048  bf00              NOP                            ;1811
00004a  f2427088          MOV      r0,#0x2788            ;1812
00004e  8028              STRH     r0,[r5,#0]            ;1812
000050  2000              MOVS     r0,#0                 ;1813
000052  e7e6              B        |L10.34|
                  |L10.84|
000054  6ae1              LDR      r1,[r4,#0x2c]         ;1816
000056  6a60              LDR      r0,[r4,#0x24]         ;1816
000058  4288              CMP      r0,r1                 ;1816
00005a  d30b              BCC      |L10.116|
00005c  bf00              NOP                            ;1817
00005e  bf00              NOP                            ;1817
000060  4648              MOV      r0,r9                 ;1817
000062  f7fffffe          BL       CPU_SR_Restore
000066  bf00              NOP                            ;1817
000068  bf00              NOP                            ;1817
00006a  f2427095          MOV      r0,#0x2795            ;1818
00006e  8028              STRH     r0,[r5,#0]            ;1818
000070  2000              MOVS     r0,#0                 ;1819
000072  e7d6              B        |L10.34|
                  |L10.116|
000074  6ae0              LDR      r0,[r4,#0x2c]         ;1823
000076  1bc0              SUBS     r0,r0,r7              ;1823
000078  1e46              SUBS     r6,r0,#1              ;1823
00007a  6ae0              LDR      r0,[r4,#0x2c]         ;1825
00007c  42b0              CMP      r0,r6                 ;1825
00007e  d80b              BHI      |L10.152|
000080  bf00              NOP                            ;1826
000082  bf00              NOP                            ;1826
000084  4648              MOV      r0,r9                 ;1826
000086  f7fffffe          BL       CPU_SR_Restore
00008a  bf00              NOP                            ;1826
00008c  bf00              NOP                            ;1826
00008e  f2427095          MOV      r0,#0x2795            ;1827
000092  8028              STRH     r0,[r5,#0]            ;1827
000094  2000              MOVS     r0,#0                 ;1828
000096  e7c4              B        |L10.34|
                  |L10.152|
000098  6a60              LDR      r0,[r4,#0x24]         ;1831
00009a  42b0              CMP      r0,r6                 ;1831
00009c  d90b              BLS      |L10.182|
00009e  bf00              NOP                            ;1832
0000a0  bf00              NOP                            ;1832
0000a2  4648              MOV      r0,r9                 ;1832
0000a4  f7fffffe          BL       CPU_SR_Restore
0000a8  bf00              NOP                            ;1832
0000aa  bf00              NOP                            ;1832
0000ac  f2427095          MOV      r0,#0x2795            ;1833
0000b0  8028              STRH     r0,[r5,#0]            ;1833
0000b2  2000              MOVS     r0,#0                 ;1834
0000b4  e7b5              B        |L10.34|
                  |L10.182|
0000b6  6a20              LDR      r0,[r4,#0x20]         ;1837
0000b8  f8508026          LDR      r8,[r0,r6,LSL #2]     ;1837
0000bc  bf00              NOP                            ;1839
0000be  bf00              NOP                            ;1839
0000c0  4648              MOV      r0,r9                 ;1839
0000c2  f7fffffe          BL       CPU_SR_Restore
0000c6  bf00              NOP                            ;1839
0000c8  bf00              NOP                            ;1839
0000ca  f2427010          MOV      r0,#0x2710            ;1841
0000ce  8028              STRH     r0,[r5,#0]            ;1841
0000d0  4640              MOV      r0,r8                 ;1843
0000d2  e7a6              B        |L10.34|
;;;1845   #endif
                          ENDP

                  |L10.212|
                          DCD      0x4c4f4f50

                          AREA ||i.Mem_PoolBlkIsValidAddr||, CODE, READONLY, ALIGN=1

                  Mem_PoolBlkIsValidAddr PROC
;;;2128        (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED))
;;;2129   static  CPU_BOOLEAN  Mem_PoolBlkIsValidAddr (MEM_POOL  *pmem_pool,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2130                                                void      *pmem_blk)
;;;2131   {
000004  4602              MOV      r2,r0
000006  460c              MOV      r4,r1
;;;2132       CPU_INT08U   *ppool_addr_first;
;;;2133       void         *ppool_addr_start;
;;;2134       void         *ppool_addr_end;
;;;2135       CPU_SIZE_T    align_offset;
;;;2136       CPU_SIZE_T    blk_align;
;;;2137       CPU_SIZE_T    blk_align_offset;
;;;2138       CPU_SIZE_T    blk_size;
;;;2139       CPU_SIZE_T    mem_align;
;;;2140       CPU_SIZE_T    mem_align_offset;
;;;2141       CPU_SIZE_T    mem_diff;
;;;2142       CPU_BOOLEAN   addr_valid;
;;;2143   
;;;2144   
;;;2145       ppool_addr_start = pmem_pool->PoolAddrStart;
000008  6995              LDR      r5,[r2,#0x18]
;;;2146       ppool_addr_end   = pmem_pool->PoolAddrEnd;
00000a  f8d2b01c          LDR      r11,[r2,#0x1c]
;;;2147   
;;;2148       if ((pmem_blk < ppool_addr_start) ||
00000e  42ac              CMP      r4,r5
000010  d301              BCC      |L11.22|
;;;2149           (pmem_blk > ppool_addr_end)) {
000012  455c              CMP      r4,r11
000014  d902              BLS      |L11.28|
                  |L11.22|
;;;2150           return (DEF_NO);
000016  2000              MOVS     r0,#0
                  |L11.24|
;;;2151       }
;;;2152   
;;;2153       blk_align      = (CPU_SIZE_T)pmem_pool->BlkAlign;
;;;2154       align_offset   = (CPU_SIZE_T)((CPU_ADDR)ppool_addr_start % blk_align);
;;;2155       if (align_offset != 0u) {
;;;2156           mem_align_offset = blk_align - align_offset;
;;;2157       } else {
;;;2158           mem_align_offset = 0u;
;;;2159       }
;;;2160   
;;;2161       blk_size     = pmem_pool->BlkSize;
;;;2162       align_offset = blk_size % blk_align;
;;;2163       if (align_offset != 0u) {
;;;2164           blk_align_offset = blk_align - align_offset;
;;;2165       } else {
;;;2166           blk_align_offset = 0u;
;;;2167       }
;;;2168   
;;;2169       ppool_addr_first = (CPU_INT08U *)((CPU_INT08U *)ppool_addr_start + mem_align_offset);
;;;2170       mem_diff         = (CPU_SIZE_T  )((CPU_INT08U *)pmem_blk         - ppool_addr_first);
;;;2171       mem_align        = (CPU_SIZE_T  )(              blk_size         + blk_align_offset);
;;;2172   
;;;2173       addr_valid       = ((mem_diff % mem_align) == 0u) ? DEF_YES : DEF_NO;
;;;2174   
;;;2175       return (addr_valid);
;;;2176   }
000018  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.28|
00001c  6b53              LDR      r3,[r2,#0x34]         ;2153
00001e  fbb5f0f3          UDIV     r0,r5,r3              ;2154
000022  fb035110          MLS      r1,r3,r0,r5           ;2154
000026  b111              CBZ      r1,|L11.46|
000028  eba30c01          SUB      r12,r3,r1             ;2156
00002c  e001              B        |L11.50|
                  |L11.46|
00002e  f04f0c00          MOV      r12,#0                ;2158
                  |L11.50|
000032  6b17              LDR      r7,[r2,#0x30]         ;2161
000034  fbb7f0f3          UDIV     r0,r7,r3              ;2162
000038  fb037110          MLS      r1,r3,r0,r7           ;2162
00003c  b109              CBZ      r1,|L11.66|
00003e  1a5e              SUBS     r6,r3,r1              ;2164
000040  e000              B        |L11.68|
                  |L11.66|
000042  2600              MOVS     r6,#0                 ;2166
                  |L11.68|
000044  eb05080c          ADD      r8,r5,r12             ;2169
000048  eba40a08          SUB      r10,r4,r8             ;2170
00004c  eb070906          ADD      r9,r7,r6              ;2171
000050  fbbaf0f9          UDIV     r0,r10,r9             ;2173
000054  fb09a010          MLS      r0,r9,r0,r10          ;2173
000058  b908              CBNZ     r0,|L11.94|
00005a  2001              MOVS     r0,#1                 ;2173
00005c  e000              B        |L11.96|
                  |L11.94|
00005e  2000              MOVS     r0,#0                 ;2173
                  |L11.96|
000060  4686              MOV      lr,r0                 ;2173
000062  4670              MOV      r0,lr                 ;2175
000064  e7d8              B        |L11.24|
;;;2177   #endif
                          ENDP


                          AREA ||i.Mem_PoolBlkIxGet||, CODE, READONLY, ALIGN=2

                  Mem_PoolBlkIxGet PROC
;;;2008   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;2009   MEM_POOL_IX  Mem_PoolBlkIxGet (MEM_POOL  *pmem_pool,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;2010                                  void      *pmem_blk,
;;;2011                                  LIB_ERR   *perr)
;;;2012   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;2013       void         *p_addr;
;;;2014       CPU_BOOLEAN   addr_valid;
;;;2015       MEM_POOL_IX   i;
;;;2016       MEM_POOL_IX   pool_ix;
;;;2017       MEM_POOL_IX   invalid_ix;
;;;2018       CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;2019   
;;;2020   
;;;2021       invalid_ix = DEF_GET_U_MAX_VAL(MEM_POOL_IX);
00000e  f04f3bff          MOV      r11,#0xffffffff
;;;2022   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------- VALIDATE RTN ERR PTR ------------- */
;;;2023       if (perr == (LIB_ERR *)0) {
000012  b91d              CBNZ     r5,|L12.28|
;;;2024           CPU_SW_EXCEPTION(invalid_ix);
000014  bf00              NOP      
000016  f7fffffe          BL       CPU_SW_Exception
00001a  bf00              NOP      
                  |L12.28|
;;;2025       }
;;;2026   #endif
;;;2027   
;;;2028                                                                       /* ------------ VALIDATE MEM POOL FREE ------------ */
;;;2029   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* Validate mem ptrs.                               */
;;;2030       if (pmem_pool == (MEM_POOL *)0) {
00001c  b92c              CBNZ     r4,|L12.42|
;;;2031          *perr = LIB_MEM_ERR_NULL_PTR;
00001e  f2427011          MOV      r0,#0x2711
000022  8028              STRH     r0,[r5,#0]
;;;2032           return (invalid_ix);
000024  4658              MOV      r0,r11
                  |L12.38|
;;;2033       }
;;;2034   
;;;2035       if (pmem_blk == (void *)0) {
;;;2036          *perr = LIB_MEM_ERR_NULL_PTR;
;;;2037           return (invalid_ix);
;;;2038       }
;;;2039   #endif
;;;2040   
;;;2041       CPU_CRITICAL_ENTER();
;;;2042   
;;;2043   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;2044       if (pmem_pool->Type != LIB_MEM_TYPE_POOL) {                     /* Validate mem pool type.                          */
;;;2045           CPU_CRITICAL_EXIT();
;;;2046          *perr = LIB_MEM_ERR_INVALID_POOL;
;;;2047           return(invalid_ix);
;;;2048       }
;;;2049   
;;;2050       addr_valid = Mem_PoolBlkIsValidAddr(pmem_pool, pmem_blk);       /* Validate mem blk as valid pool blk addr.         */
;;;2051       if (addr_valid != DEF_OK) {
;;;2052           CPU_CRITICAL_EXIT();
;;;2053          *perr = LIB_MEM_ERR_INVALID_BLK_ADDR;
;;;2054           return (invalid_ix);
;;;2055       }
;;;2056   
;;;2057       for (i = 0u; i < pmem_pool->BlkIx; i++) {                       /* Validate mem blk  NOT already in pool.           */
;;;2058           if (pmem_blk == pmem_pool->PoolPtrs[i]) {
;;;2059               CPU_CRITICAL_EXIT();
;;;2060              *perr = LIB_MEM_ERR_INVALID_BLK_ADDR_IN_POOL;
;;;2061               return (invalid_ix);
;;;2062           }
;;;2063       }
;;;2064   #endif
;;;2065   
;;;2066       if (pmem_pool->BlkIx >= pmem_pool->BlkNbr) {                    /* Validate mem pool NOT full.                      */
;;;2067           CPU_CRITICAL_EXIT();
;;;2068          *perr = LIB_MEM_ERR_POOL_FULL;
;;;2069           return (invalid_ix);
;;;2070       }
;;;2071   
;;;2072       addr_valid = DEF_NO;
;;;2073       for (i = pmem_pool->BlkIx; i < pmem_pool->BlkNbr; i++) {        /* Find ix of mem blk.                              */
;;;2074           p_addr = pmem_pool->PoolPtrs[i];
;;;2075           if (p_addr == pmem_blk) {
;;;2076               addr_valid = DEF_YES;
;;;2077               break;
;;;2078           }
;;;2079       }
;;;2080                                                                       /* Return ix of mem blk in tbl.                     */
;;;2081       if (addr_valid == DEF_YES) {
;;;2082           pool_ix = pmem_pool->BlkNbr - 1 - i;
;;;2083           CPU_CRITICAL_EXIT();
;;;2084          *perr = LIB_MEM_ERR_NONE;
;;;2085           return (pool_ix);
;;;2086       } else {
;;;2087           CPU_CRITICAL_EXIT();
;;;2088          *perr = LIB_MEM_ERR_INVALID_POOL;
;;;2089           return (invalid_ix);
;;;2090       }
;;;2091   
;;;2092   }
000026  e8bd8ff8          POP      {r3-r11,pc}
                  |L12.42|
00002a  b927              CBNZ     r7,|L12.54|
00002c  f2427011          MOV      r0,#0x2711            ;2036
000030  8028              STRH     r0,[r5,#0]            ;2036
000032  4658              MOV      r0,r11                ;2037
000034  e7f7              B        |L12.38|
                  |L12.54|
000036  bf00              NOP                            ;2041
000038  bf00              NOP                            ;2041
00003a  f7fffffe          BL       CPU_SR_Save
00003e  9000              STR      r0,[sp,#0]            ;2041
000040  bf00              NOP                            ;2041
000042  bf00              NOP                            ;2041
000044  493d              LDR      r1,|L12.316|
000046  6820              LDR      r0,[r4,#0]            ;2044
000048  4288              CMP      r0,r1                 ;2044
00004a  d00b              BEQ      |L12.100|
00004c  bf00              NOP                            ;2045
00004e  bf00              NOP                            ;2045
000050  9800              LDR      r0,[sp,#0]            ;2045
000052  f7fffffe          BL       CPU_SR_Restore
000056  bf00              NOP                            ;2045
000058  bf00              NOP                            ;2045
00005a  f2427088          MOV      r0,#0x2788            ;2046
00005e  8028              STRH     r0,[r5,#0]            ;2046
000060  4658              MOV      r0,r11                ;2047
000062  e7e0              B        |L12.38|
                  |L12.100|
000064  4639              MOV      r1,r7                 ;2050
000066  4620              MOV      r0,r4                 ;2050
000068  f7fffffe          BL       Mem_PoolBlkIsValidAddr
00006c  4680              MOV      r8,r0                 ;2050
00006e  f1b80f01          CMP      r8,#1                 ;2051
000072  d00b              BEQ      |L12.140|
000074  bf00              NOP                            ;2052
000076  bf00              NOP                            ;2052
000078  9800              LDR      r0,[sp,#0]            ;2052
00007a  f7fffffe          BL       CPU_SR_Restore
00007e  bf00              NOP                            ;2052
000080  bf00              NOP                            ;2052
000082  f2427097          MOV      r0,#0x2797            ;2053
000086  8028              STRH     r0,[r5,#0]            ;2053
000088  4658              MOV      r0,r11                ;2054
00008a  e7cc              B        |L12.38|
                  |L12.140|
00008c  2600              MOVS     r6,#0                 ;2057
00008e  e011              B        |L12.180|
                  |L12.144|
000090  6a20              LDR      r0,[r4,#0x20]         ;2058
000092  f8500026          LDR      r0,[r0,r6,LSL #2]     ;2058
000096  42b8              CMP      r0,r7                 ;2058
000098  d10b              BNE      |L12.178|
00009a  bf00              NOP                            ;2059
00009c  bf00              NOP                            ;2059
00009e  9800              LDR      r0,[sp,#0]            ;2059
0000a0  f7fffffe          BL       CPU_SR_Restore
0000a4  bf00              NOP                            ;2059
0000a6  bf00              NOP                            ;2059
0000a8  f2427098          MOV      r0,#0x2798            ;2060
0000ac  8028              STRH     r0,[r5,#0]            ;2060
0000ae  4658              MOV      r0,r11                ;2061
0000b0  e7b9              B        |L12.38|
                  |L12.178|
0000b2  1c76              ADDS     r6,r6,#1              ;2057
                  |L12.180|
0000b4  6a60              LDR      r0,[r4,#0x24]         ;2057
0000b6  42b0              CMP      r0,r6                 ;2057
0000b8  d8ea              BHI      |L12.144|
0000ba  6ae1              LDR      r1,[r4,#0x2c]         ;2066
0000bc  6a60              LDR      r0,[r4,#0x24]         ;2066
0000be  4288              CMP      r0,r1                 ;2066
0000c0  d30b              BCC      |L12.218|
0000c2  bf00              NOP                            ;2067
0000c4  bf00              NOP                            ;2067
0000c6  9800              LDR      r0,[sp,#0]            ;2067
0000c8  f7fffffe          BL       CPU_SR_Restore
0000cc  bf00              NOP                            ;2067
0000ce  bf00              NOP                            ;2067
0000d0  f24270dd          MOV      r0,#0x27dd            ;2068
0000d4  8028              STRH     r0,[r5,#0]            ;2068
0000d6  4658              MOV      r0,r11                ;2069
0000d8  e7a5              B        |L12.38|
                  |L12.218|
0000da  f04f0800          MOV      r8,#0                 ;2072
0000de  6a66              LDR      r6,[r4,#0x24]         ;2073
0000e0  e008              B        |L12.244|
                  |L12.226|
0000e2  6a20              LDR      r0,[r4,#0x20]         ;2074
0000e4  f8509026          LDR      r9,[r0,r6,LSL #2]     ;2074
0000e8  45b9              CMP      r9,r7                 ;2075
0000ea  d102              BNE      |L12.242|
0000ec  f04f0801          MOV      r8,#1                 ;2076
0000f0  e003              B        |L12.250|
                  |L12.242|
0000f2  1c76              ADDS     r6,r6,#1              ;2073
                  |L12.244|
0000f4  6ae0              LDR      r0,[r4,#0x2c]         ;2073
0000f6  42b0              CMP      r0,r6                 ;2073
0000f8  d8f3              BHI      |L12.226|
                  |L12.250|
0000fa  bf00              NOP                            ;2077
0000fc  f1b80f01          CMP      r8,#1                 ;2081
000100  d10f              BNE      |L12.290|
000102  6ae0              LDR      r0,[r4,#0x2c]         ;2082
000104  1e40              SUBS     r0,r0,#1              ;2082
000106  eba00a06          SUB      r10,r0,r6             ;2082
00010a  bf00              NOP                            ;2083
00010c  bf00              NOP                            ;2083
00010e  9800              LDR      r0,[sp,#0]            ;2083
000110  f7fffffe          BL       CPU_SR_Restore
000114  bf00              NOP                            ;2083
000116  bf00              NOP                            ;2083
000118  f2427010          MOV      r0,#0x2710            ;2084
00011c  8028              STRH     r0,[r5,#0]            ;2084
00011e  4650              MOV      r0,r10                ;2085
000120  e781              B        |L12.38|
                  |L12.290|
000122  bf00              NOP                            ;2087
000124  bf00              NOP                            ;2087
000126  9800              LDR      r0,[sp,#0]            ;2087
000128  f7fffffe          BL       CPU_SR_Restore
00012c  bf00              NOP                            ;2087
00012e  bf00              NOP                            ;2087
000130  f2427088          MOV      r0,#0x2788            ;2088
000134  8028              STRH     r0,[r5,#0]            ;2088
000136  4658              MOV      r0,r11                ;2089
000138  e775              B        |L12.38|
;;;2093   #endif
                          ENDP

00013a  0000              DCW      0x0000
                  |L12.316|
                          DCD      0x4c4f4f50

                          AREA ||i.Mem_PoolClr||, CODE, READONLY, ALIGN=2

                  Mem_PoolClr PROC
;;;1014   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;1015   void  Mem_PoolClr (MEM_POOL  *pmem_pool,
000000  b570              PUSH     {r4-r6,lr}
;;;1016                      LIB_ERR   *perr)
;;;1017   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1018   
;;;1019   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                 /* -------------- VALIDATE RTN ERR  PTR --------------- */
;;;1020       if (perr == (LIB_ERR *)0) {
000006  b91d              CBNZ     r5,|L13.16|
;;;1021           CPU_SW_EXCEPTION(;);
000008  bf00              NOP      
00000a  f7fffffe          BL       CPU_SW_Exception
00000e  bf00              NOP      
                  |L13.16|
;;;1022       }
;;;1023   #endif
;;;1024   
;;;1025                                                                   /* -------------- VALIDATE MEM POOL PTR --------------- */
;;;1026       if (pmem_pool == (MEM_POOL *)0) {
000010  b91c              CBNZ     r4,|L13.26|
;;;1027          *perr = LIB_MEM_ERR_NULL_PTR;
000012  f2427011          MOV      r0,#0x2711
000016  8028              STRH     r0,[r5,#0]
                  |L13.24|
;;;1028           return;
;;;1029       }
;;;1030   
;;;1031   
;;;1032       pmem_pool->Type             = (LIB_MEM_TYPE)LIB_MEM_TYPE_NONE;
;;;1033       pmem_pool->SegHeadPtr       = (MEM_POOL   *)0;
;;;1034       pmem_pool->SegPrevPtr       = (MEM_POOL   *)0;
;;;1035       pmem_pool->SegNextPtr       = (MEM_POOL   *)0;
;;;1036       pmem_pool->PoolPrevPtr      = (MEM_POOL   *)0;
;;;1037       pmem_pool->PoolNextPtr      = (MEM_POOL   *)0;
;;;1038       pmem_pool->PoolAddrStart    = (void       *)0;
;;;1039       pmem_pool->PoolAddrEnd      = (void       *)0;
;;;1040       pmem_pool->PoolPtrs         = (void      **)0;
;;;1041       pmem_pool->PoolSize         = (CPU_SIZE_T  )0u;
;;;1042       pmem_pool->BlkAlign         = (CPU_SIZE_T  )0u;
;;;1043       pmem_pool->BlkSize          = (CPU_SIZE_T  )0u;
;;;1044       pmem_pool->BlkNbr           = (CPU_SIZE_T  )0u;
;;;1045       pmem_pool->BlkIx            = (MEM_POOL_IX )0u;
;;;1046       pmem_pool->SegAddr          = (void       *)0;
;;;1047       pmem_pool->SegAddrNextAvail = (void       *)0;
;;;1048       pmem_pool->SegSizeTot       = (CPU_SIZE_T  )0u;
;;;1049       pmem_pool->SegSizeRem       = (CPU_SIZE_T  )0u;
;;;1050   
;;;1051   
;;;1052      *perr = LIB_MEM_ERR_NONE;
;;;1053   }
000018  bd70              POP      {r4-r6,pc}
                  |L13.26|
00001a  480c              LDR      r0,|L13.76|
00001c  6020              STR      r0,[r4,#0]            ;1032
00001e  2000              MOVS     r0,#0                 ;1033
000020  6060              STR      r0,[r4,#4]            ;1033
000022  60a0              STR      r0,[r4,#8]            ;1034
000024  60e0              STR      r0,[r4,#0xc]          ;1035
000026  6120              STR      r0,[r4,#0x10]         ;1036
000028  6160              STR      r0,[r4,#0x14]         ;1037
00002a  61a0              STR      r0,[r4,#0x18]         ;1038
00002c  61e0              STR      r0,[r4,#0x1c]         ;1039
00002e  6220              STR      r0,[r4,#0x20]         ;1040
000030  62a0              STR      r0,[r4,#0x28]         ;1041
000032  6360              STR      r0,[r4,#0x34]         ;1042
000034  6320              STR      r0,[r4,#0x30]         ;1043
000036  62e0              STR      r0,[r4,#0x2c]         ;1044
000038  6260              STR      r0,[r4,#0x24]         ;1045
00003a  63a0              STR      r0,[r4,#0x38]         ;1046
00003c  63e0              STR      r0,[r4,#0x3c]         ;1047
00003e  6420              STR      r0,[r4,#0x40]         ;1048
000040  6460              STR      r0,[r4,#0x44]         ;1049
000042  f2427010          MOV      r0,#0x2710            ;1052
000046  8028              STRH     r0,[r5,#0]            ;1052
000048  bf00              NOP      
00004a  e7e5              B        |L13.24|
;;;1054   #endif
                          ENDP

                  |L13.76|
                          DCD      0x454e4f4e

                          AREA ||i.Mem_PoolCreate||, CODE, READONLY, ALIGN=2

                  Mem_PoolCreate PROC
;;;1209   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;1210   void  Mem_PoolCreate (MEM_POOL          *pmem_pool,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1211                         void              *pmem_base_addr,
;;;1212                         CPU_SIZE_T         mem_size,
;;;1213                         MEM_POOL_BLK_QTY   blk_nbr,
;;;1214                         CPU_SIZE_T         blk_size,
;;;1215                         CPU_SIZE_T         blk_align,
;;;1216                         CPU_SIZE_T        *poctets_reqd,
;;;1217                         LIB_ERR           *perr)
;;;1218   {
000004  b091              SUB      sp,sp,#0x44
000006  4604              MOV      r4,r0
000008  e9dd9520          LDRD     r9,r5,[sp,#0x80]
;;;1219       MEM_POOL           *pmem_pool_heap;
;;;1220       MEM_POOL           *pmem_pool_next;
;;;1221       MEM_POOL           *pmem_seg;
;;;1222       MEM_POOL           *pmem_seg_prev;
;;;1223       MEM_POOL           *pmem_seg_next;
;;;1224       void              **ppool_ptr;
;;;1225       void               *pmem_blk;
;;;1226       CPU_INT08U         *pmem_addr_ptrs;
;;;1227       CPU_INT08U         *pmem_addr_pool;
;;;1228       CPU_INT08U         *pmem_base_addr_start;
;;;1229       CPU_INT08U         *pmem_base_addr_end;
;;;1230       CPU_INT08U         *pmem_seg_addr_start;
;;;1231       CPU_INT08U         *pmem_seg_addr_end;
;;;1232       MEM_POOL_BLK_QTY    blk_rem;
;;;1233       CPU_SIZE_T          octets_reqd_unused;
;;;1234       CPU_SIZE_T          size_tot;
;;;1235       CPU_SIZE_T          size_tot_ptrs;
;;;1236       CPU_SIZE_T          size_tot_pool;
;;;1237       CPU_SIZE_T          size_rem;
;;;1238       CPU_SIZE_T          size_pool_ptrs;
;;;1239       CPU_SIZE_T          i;
;;;1240       CPU_SR_ALLOC();
00000c  2000              MOVS     r0,#0
00000e  9000              STR      r0,[sp,#0]
;;;1241   
;;;1242   
;;;1243   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* ------------- VALIDATE RTN ERR PTR ------------- */
;;;1244       if (perr == (LIB_ERR *)0) {
000010  b91d              CBNZ     r5,|L14.26|
;;;1245           CPU_SW_EXCEPTION(;);
000012  bf00              NOP      
000014  f7fffffe          BL       CPU_SW_Exception
000018  bf00              NOP      
                  |L14.26|
;;;1246       }
;;;1247   #endif
;;;1248   
;;;1249                                                                       /* ------------ VALIDATE RTN OCTETS PTR ----------- */
;;;1250       if (poctets_reqd == (CPU_SIZE_T *) 0) {                         /* If NOT avail, ...                                */
00001a  f1b90f00          CMP      r9,#0
00001e  d102              BNE      |L14.38|
;;;1251           poctets_reqd  = (CPU_SIZE_T *)&octets_reqd_unused;          /* ... re-cfg NULL rtn ptr to unused local var.     */
000020  f10d0910          ADD      r9,sp,#0x10
;;;1252          (void)&octets_reqd_unused;                                   /* Prevent possible 'variable unused' warning.      */
000024  bf00              NOP      
                  |L14.38|
;;;1253       }
;;;1254      *poctets_reqd = 0u;                                              /* Init octets req'd for err (see Note #4).         */
000026  2000              MOVS     r0,#0
000028  f8c90000          STR      r0,[r9,#0]
;;;1255   
;;;1256   
;;;1257   
;;;1258       Mem_PoolClr(pmem_pool, perr);                                   /* Init mem pool     for err (see Note #4).         */
00002c  4629              MOV      r1,r5
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       Mem_PoolClr
;;;1259       if (*perr != LIB_MEM_ERR_NONE) {
000034  8828              LDRH     r0,[r5,#0]
000036  f2427110          MOV      r1,#0x2710
00003a  4288              CMP      r0,r1
00003c  d002              BEQ      |L14.68|
                  |L14.62|
;;;1260            return;
;;;1261       }
;;;1262   
;;;1263   
;;;1264                                                                       /* ----------- VALIDATE MEM POOL CREATE ----------- */
;;;1265   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1266       if (pmem_base_addr != (void *)0) {
;;;1267           if (mem_size < 1) {
;;;1268              *perr = LIB_MEM_ERR_INVALID_SEG_SIZE;
;;;1269               return;
;;;1270           }
;;;1271       }
;;;1272   
;;;1273       if (blk_nbr < 1) {
;;;1274          *perr = LIB_MEM_ERR_INVALID_BLK_NBR;
;;;1275           return;
;;;1276       }
;;;1277   
;;;1278       if (blk_size < 1) {
;;;1279          *perr = LIB_MEM_ERR_INVALID_BLK_SIZE;
;;;1280           return;
;;;1281       }
;;;1282   
;;;1283       if (blk_align < 1) {
;;;1284          *perr = LIB_MEM_ERR_INVALID_BLK_ALIGN;
;;;1285           return;
;;;1286       }
;;;1287   #endif
;;;1288   
;;;1289   
;;;1290                                                                       /* ------------ VALIDATE MEM POOL TBL ------------- */
;;;1291       if (Mem_PoolTbl == (MEM_POOL *)0) {
;;;1292          *perr = LIB_MEM_ERR_HEAP_NOT_FOUND;
;;;1293           return;
;;;1294       }
;;;1295   
;;;1296   
;;;1297   
;;;1298   /*$PAGE*/
;;;1299                                                                       /* ---------------- CREATE MEM POOL --------------- */
;;;1300       pmem_pool_heap = (MEM_POOL *)&Mem_PoolHeap;
;;;1301       size_tot       = (CPU_SIZE_T) 0u;
;;;1302   
;;;1303       CPU_CRITICAL_ENTER();
;;;1304   
;;;1305       if (pmem_base_addr == (void *)0) {                              /* If no base addr, cfg mem pool from heap.         */
;;;1306           pmem_seg        =  pmem_pool_heap;
;;;1307           pmem_seg_prev   =  pmem_pool_heap;
;;;1308           pmem_seg_next   =  pmem_pool_heap;
;;;1309   
;;;1310                                                                       /* --------------- VALIDATE MEM SEG --------------- */
;;;1311                                                                       /* Calc tot mem   size for mem pool ptrs.           */
;;;1312           pmem_addr_ptrs  = (CPU_INT08U *)pmem_pool_heap->SegAddrNextAvail;
;;;1313           size_tot_ptrs   =  Mem_SegCalcTotSize((void     *)pmem_addr_ptrs,
;;;1314                                                 (CPU_SIZE_T)blk_nbr,
;;;1315                                                 (CPU_SIZE_T)sizeof(void *),
;;;1316                                                 (CPU_SIZE_T)sizeof(void *));
;;;1317   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1318           if (size_tot_ptrs < 1) {                                    /* If heap ovf, ...                                 */
;;;1319               CPU_CRITICAL_EXIT();
;;;1320              *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
;;;1321               return;
;;;1322           }
;;;1323   #endif
;;;1324                                                                       /* Calc tot mem   size for mem blks.                */
;;;1325           pmem_addr_pool  =  pmem_addr_ptrs + size_tot_ptrs;          /* Adj next avail addr for mem pool blks.           */
;;;1326           size_tot_pool   =  Mem_SegCalcTotSize((void     *)pmem_addr_pool,
;;;1327                                                 (CPU_SIZE_T)blk_nbr,
;;;1328                                                 (CPU_SIZE_T)blk_size,
;;;1329                                                 (CPU_SIZE_T)blk_align);
;;;1330   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1331           if (size_tot_pool < 1) {                                    /* If heap ovf, ...                                 */
;;;1332               CPU_CRITICAL_EXIT();
;;;1333              *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
;;;1334               return;
;;;1335           }
;;;1336   #endif
;;;1337   
;;;1338           size_tot = size_tot_ptrs + size_tot_pool;
;;;1339   
;;;1340   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1341           if ((size_tot < size_tot_ptrs) ||                           /* If heap ovf, ...                                 */
;;;1342               (size_tot < size_tot_pool)) {
;;;1343               CPU_CRITICAL_EXIT();
;;;1344              *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
;;;1345               return;
;;;1346           }
;;;1347   #endif
;;;1348   
;;;1349           size_rem = pmem_pool_heap->SegSizeRem;
;;;1350           if (size_tot > size_rem) {                                  /* If tot size > rem  size, ...                     */
;;;1351               CPU_CRITICAL_EXIT();
;;;1352              *poctets_reqd = size_tot - size_rem;                     /* ... rtn add'l heap size needed.                  */
;;;1353              *perr         = LIB_MEM_ERR_HEAP_EMPTY;
;;;1354               return;
;;;1355           }
;;;1356   
;;;1357   /*$PAGE*/
;;;1358       } else {                                                        /* Else cfg mem pool from dedicated mem.            */
;;;1359                                                                       /* -------- SRCH ALL MEM SEGS FOR MEM POOL -------- */
;;;1360           pmem_base_addr_start = (CPU_INT08U *)pmem_base_addr;
;;;1361           pmem_base_addr_end   = (CPU_INT08U *)pmem_base_addr + mem_size - 1;
;;;1362   
;;;1363   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1364           if (pmem_base_addr_end < pmem_base_addr_start) {            /* Chk ovf of end addr.                             */
;;;1365               CPU_CRITICAL_EXIT();
;;;1366              *perr = LIB_MEM_ERR_INVALID_BLK_ADDR;
;;;1367               return;
;;;1368           }
;;;1369   #endif
;;;1370   
;;;1371           pmem_seg      = (MEM_POOL *)0;
;;;1372           pmem_seg_prev = (MEM_POOL *)0;
;;;1373           pmem_seg_next =  Mem_PoolTbl;
;;;1374   
;;;1375           while (pmem_seg_next != (MEM_POOL *)0) {                    /* Srch tbl for mem seg with same base addr/size.   */
;;;1376   
;;;1377               if ((pmem_base_addr == pmem_seg_next->SegAddr) &&       /* If same base addr/size found, ...                */
;;;1378                   (mem_size       == pmem_seg_next->SegSizeTot)) {
;;;1379   
;;;1380                    pmem_seg        = pmem_seg_next;                   /* ... mem seg already avail in tbl.                */
;;;1381                    break;
;;;1382   
;;;1383               } else {
;;;1384                   pmem_seg_addr_start = (CPU_INT08U *)pmem_seg_next->SegAddr;
;;;1385                   pmem_seg_addr_end   = (CPU_INT08U *)pmem_seg_next->SegAddr + pmem_seg_next->SegSizeTot - 1;
;;;1386   
;;;1387   
;;;1388                   if (pmem_base_addr_end < pmem_seg_addr_start) {     /* If mem seg addr/size prior to next mem seg, ...  */
;;;1389                       break;                                          /* ... new mem seg NOT avail in tbl.                */
;;;1390   
;;;1391                                                                       /* If mem seg overlaps prev mem seg(s) in tbl, ...  */
;;;1392                   } else if (((pmem_base_addr_start <= pmem_seg_addr_start)  &&
;;;1393                               (pmem_base_addr_end   >= pmem_seg_addr_start)) ||
;;;1394                              ((pmem_base_addr_start >= pmem_seg_addr_start)  &&
;;;1395                               (pmem_base_addr_end   <= pmem_seg_addr_end  )) ||
;;;1396                              ((pmem_base_addr_start <= pmem_seg_addr_end  )  &&
;;;1397                               (pmem_base_addr_end   >= pmem_seg_addr_end  ))) {
;;;1398                       CPU_CRITICAL_EXIT();
;;;1399                      *perr = LIB_MEM_ERR_INVALID_SEG_OVERLAP;         /* ... rtn err.                                     */
;;;1400                       return;
;;;1401                   }
;;;1402               }
;;;1403                                                                       /* If mem seg NOT found, adv to next mem seg.       */
;;;1404               pmem_seg_prev = pmem_seg_next;
;;;1405               pmem_seg_next = pmem_seg_next->SegNextPtr;
;;;1406           }
;;;1407   
;;;1408           if (pmem_seg == (MEM_POOL *)0) {                            /* If mem seg NOT found, add    new  mem seg.       */
;;;1409               pmem_seg                    = pmem_pool;
;;;1410               pmem_pool->SegAddr          = pmem_base_addr;
;;;1411               pmem_pool->SegAddrNextAvail = pmem_base_addr;
;;;1412               pmem_pool->SegSizeTot       = mem_size;
;;;1413               pmem_pool->SegSizeRem       = mem_size;
;;;1414           }
;;;1415   
;;;1416   /*$PAGE*/
;;;1417                                                                       /* --------------- VALIDATE MEM SEG --------------- */
;;;1418                                                                       /* Calc tot mem size for mem pool ptrs.             */
;;;1419           pmem_addr_ptrs = (CPU_INT08U *)pmem_pool_heap->SegAddrNextAvail;
;;;1420           size_tot_ptrs  =  Mem_SegCalcTotSize((void     *)pmem_addr_ptrs,
;;;1421                                                (CPU_SIZE_T)blk_nbr,
;;;1422                                                (CPU_SIZE_T)sizeof(void *),
;;;1423                                                (CPU_SIZE_T)sizeof(void *));
;;;1424   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1425           if (size_tot_ptrs < 1) {                                    /* If heap ovf, ...                                 */
;;;1426               CPU_CRITICAL_EXIT();
;;;1427              *perr = LIB_MEM_ERR_HEAP_OVF;                            /* ... rtn err but add'l heap size NOT avail.       */
;;;1428               return;
;;;1429           }
;;;1430   #endif
;;;1431   
;;;1432           size_rem = pmem_pool_heap->SegSizeRem;
;;;1433           if (size_tot_ptrs > size_rem) {                             /* If ptr size > rem  size, ...                     */
;;;1434               CPU_CRITICAL_EXIT();
;;;1435              *poctets_reqd = size_tot_ptrs - size_rem;                /* ... rtn add'l heap size needed.                  */
;;;1436              *perr         = LIB_MEM_ERR_HEAP_EMPTY;
;;;1437               return;
;;;1438           }
;;;1439   
;;;1440                                                                       /* Calc tot mem size for mem blks.                  */
;;;1441           pmem_addr_pool = (CPU_INT08U *)pmem_seg->SegAddrNextAvail;
;;;1442           size_tot_pool  =  Mem_SegCalcTotSize((void     *)pmem_addr_pool,
;;;1443                                                (CPU_SIZE_T)blk_nbr,
;;;1444                                                (CPU_SIZE_T)blk_size,
;;;1445                                                (CPU_SIZE_T)blk_align);
;;;1446   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;1447           if (size_tot_pool < 1) {                                    /* If seg  ovf, ...                                 */
;;;1448               CPU_CRITICAL_EXIT();
;;;1449              *perr = LIB_MEM_ERR_SEG_OVF;                             /* ... rtn err but add'l seg  size NOT avail.       */
;;;1450               return;
;;;1451           }
;;;1452   #endif
;;;1453   
;;;1454           size_rem = pmem_seg->SegSizeRem;
;;;1455           if (size_tot_pool > size_rem) {                             /* If tot size > rem  size, ...                     */
;;;1456               CPU_CRITICAL_EXIT();
;;;1457              *poctets_reqd = size_tot_pool - size_rem;                /* ... rtn add'l seg  size needed.                  */
;;;1458              *perr         = LIB_MEM_ERR_SEG_EMPTY;
;;;1459               return;
;;;1460           }
;;;1461       }
;;;1462   
;;;1463   
;;;1464   /*$PAGE*/
;;;1465                                                                       /* ---------------- ALLOC MEM BLKs ---------------- */
;;;1466       size_pool_ptrs = (CPU_SIZE_T)(blk_nbr * sizeof(void *));
;;;1467                                                                       /* Alloc stk of ptrs for mem blks from heap.        */
;;;1468       ppool_ptr      = (void **)Mem_SegAlloc((MEM_POOL *)pmem_pool_heap,
;;;1469                                              (CPU_SIZE_T)size_pool_ptrs,
;;;1470                                              (CPU_SIZE_T)sizeof(void *));
;;;1471       if (ppool_ptr == (void **)0) {                                  /* If mem pool ptrs alloc failed, ...               */
;;;1472           size_rem = pmem_pool_heap->SegSizeRem;
;;;1473           CPU_CRITICAL_EXIT();
;;;1474                                                                       /* ... rtn add'l heap size needed.                  */
;;;1475           if (pmem_base_addr == (void *)0) {
;;;1476               if (size_tot > size_rem) {
;;;1477                  *poctets_reqd = size_tot - size_rem;
;;;1478               } else {
;;;1479                  *poctets_reqd = size_tot;
;;;1480               }
;;;1481           } else {
;;;1482               if (size_pool_ptrs > size_rem) {
;;;1483                  *poctets_reqd = size_pool_ptrs - size_rem;
;;;1484               } else {
;;;1485                  *poctets_reqd = size_pool_ptrs;
;;;1486               }
;;;1487           }
;;;1488          *perr = LIB_MEM_ERR_HEAP_EMPTY;
;;;1489           return;
;;;1490       }
;;;1491   
;;;1492       for (i = 0u; i < (CPU_SIZE_T)blk_nbr; i++) {                    /* Alloc mem blks from mem seg.                     */
;;;1493           pmem_blk = (void *)Mem_SegAlloc(pmem_seg, blk_size, blk_align);
;;;1494           if (pmem_blk == (void *)0) {                                /* If    mem blks alloc failed, ...                 */
;;;1495               pmem_addr_pool = (CPU_INT08U *)pmem_seg->SegAddrNextAvail;
;;;1496               size_rem       = (CPU_SIZE_T  )pmem_seg->SegSizeRem;
;;;1497               CPU_CRITICAL_EXIT();
;;;1498               blk_rem        =  blk_nbr - (MEM_POOL_BLK_QTY)i;
;;;1499               size_tot       =  Mem_SegCalcTotSize((void           *)pmem_addr_pool,
;;;1500                                                    (MEM_POOL_BLK_QTY)blk_rem,
;;;1501                                                    (CPU_SIZE_T      )blk_size,
;;;1502                                                    (CPU_SIZE_T      )blk_align);
;;;1503                                                                       /* ... rtn add'l seg  size needed.                  */
;;;1504               if (size_tot > size_rem) {
;;;1505                  *poctets_reqd = size_tot - size_rem;
;;;1506               } else {
;;;1507                  *poctets_reqd = size_tot;
;;;1508               }
;;;1509              *perr = LIB_MEM_ERR_SEG_EMPTY;
;;;1510               return;
;;;1511           }
;;;1512           ppool_ptr[i] = pmem_blk;
;;;1513       }
;;;1514   
;;;1515   
;;;1516   /*$PAGE*/
;;;1517                                                                       /* ------------- UPDATE MEM POOL TBL -------------- */
;;;1518       if (pmem_seg == pmem_pool) {                                    /* Add mem pool as new  mem pool tbl seg.           */
;;;1519                                                                       /* Update cur  mem seg  links.                      */
;;;1520           pmem_pool->SegPrevPtr = pmem_seg_prev;
;;;1521           pmem_pool->SegNextPtr = pmem_seg_next;
;;;1522   
;;;1523           if (pmem_seg_prev != (MEM_POOL *)0) {                       /* Update prev mem seg  link.                       */
;;;1524               pmem_seg_prev->SegNextPtr = pmem_pool;
;;;1525           } else {
;;;1526               Mem_PoolTbl               = pmem_pool;                  /* Update      mem tbl.                             */
;;;1527           }
;;;1528   
;;;1529           if (pmem_seg_next != (MEM_POOL *)0) {                       /* Update next mem seg  link.                       */
;;;1530               pmem_seg_next->SegPrevPtr = pmem_pool;
;;;1531           }
;;;1532   
;;;1533       } else {                                                        /* Add mem pool into mem seg.                       */
;;;1534                                                                       /* Update cur  mem pool links.                      */
;;;1535           pmem_pool_next         = pmem_seg->PoolNextPtr;
;;;1536           pmem_pool->PoolPrevPtr = pmem_seg;
;;;1537           pmem_pool->PoolNextPtr = pmem_pool_next;
;;;1538   
;;;1539           pmem_seg->PoolNextPtr  = pmem_pool;                         /* Update prev mem pool link.                       */
;;;1540   
;;;1541           if (pmem_pool_next != (MEM_POOL *)0) {                      /* Update next mem pool link.                       */
;;;1542               pmem_pool_next->PoolPrevPtr = pmem_pool;
;;;1543           }
;;;1544       }
;;;1545   
;;;1546   
;;;1547   
;;;1548                                                                       /* ----------------- CFG MEM POOL ----------------- */
;;;1549       pmem_pool->Type          = (LIB_MEM_TYPE    ) LIB_MEM_TYPE_POOL;
;;;1550       pmem_pool->SegHeadPtr    = (MEM_POOL       *) pmem_seg;
;;;1551       pmem_pool->PoolAddrStart = (void           *) pmem_addr_pool;
;;;1552       pmem_pool->PoolAddrEnd   = (void           *)(pmem_addr_pool + size_tot_pool - 1);
;;;1553       pmem_pool->PoolPtrs      = (void          **) ppool_ptr;
;;;1554       pmem_pool->PoolSize      = (CPU_SIZE_T      ) size_tot_pool;
;;;1555       pmem_pool->BlkAlign      = (CPU_SIZE_T      ) blk_align;
;;;1556       pmem_pool->BlkSize       = (CPU_SIZE_T      ) blk_size;
;;;1557       pmem_pool->BlkNbr        = (MEM_POOL_BLK_QTY) blk_nbr;
;;;1558       pmem_pool->BlkIx         = (MEM_POOL_IX     ) blk_nbr;
;;;1559   
;;;1560   
;;;1561       CPU_CRITICAL_EXIT();
;;;1562   
;;;1563      *perr = LIB_MEM_ERR_NONE;
;;;1564   }
00003e  b015              ADD      sp,sp,#0x54
000040  e8bd8ff0          POP      {r4-r11,pc}
                  |L14.68|
000044  9812              LDR      r0,[sp,#0x48]         ;1266
000046  b128              CBZ      r0,|L14.84|
000048  9813              LDR      r0,[sp,#0x4c]         ;1267
00004a  b918              CBNZ     r0,|L14.84|
00004c  f242707e          MOV      r0,#0x277e            ;1268
000050  8028              STRH     r0,[r5,#0]            ;1268
000052  e7f4              B        |L14.62|
                  |L14.84|
000054  9814              LDR      r0,[sp,#0x50]         ;1273
000056  b918              CBNZ     r0,|L14.96|
000058  f2427092          MOV      r0,#0x2792            ;1274
00005c  8028              STRH     r0,[r5,#0]            ;1274
00005e  e7ee              B        |L14.62|
                  |L14.96|
000060  981e              LDR      r0,[sp,#0x78]         ;1278
000062  b918              CBNZ     r0,|L14.108|
000064  f2427093          MOV      r0,#0x2793            ;1279
000068  8028              STRH     r0,[r5,#0]            ;1279
00006a  e7e8              B        |L14.62|
                  |L14.108|
00006c  981f              LDR      r0,[sp,#0x7c]         ;1283
00006e  b918              CBNZ     r0,|L14.120|
000070  f2427094          MOV      r0,#0x2794            ;1284
000074  8028              STRH     r0,[r5,#0]            ;1284
000076  e7e2              B        |L14.62|
                  |L14.120|
000078  48e9              LDR      r0,|L14.1056|
00007a  6800              LDR      r0,[r0,#0]            ;1291  ; Mem_PoolTbl
00007c  b918              CBNZ     r0,|L14.134|
00007e  f24270e7          MOV      r0,#0x27e7            ;1292
000082  8028              STRH     r0,[r5,#0]            ;1292
000084  e7db              B        |L14.62|
                  |L14.134|
000086  48e7              LDR      r0,|L14.1060|
000088  9010              STR      r0,[sp,#0x40]         ;1300
00008a  f04f0a00          MOV      r10,#0                ;1301
00008e  bf00              NOP                            ;1303
000090  bf00              NOP                            ;1303
000092  f7fffffe          BL       CPU_SR_Save
000096  9000              STR      r0,[sp,#0]            ;1303
000098  bf00              NOP                            ;1303
00009a  bf00              NOP                            ;1303
00009c  9812              LDR      r0,[sp,#0x48]         ;1305
00009e  2800              CMP      r0,#0                 ;1305
0000a0  d15b              BNE      |L14.346|
0000a2  9e10              LDR      r6,[sp,#0x40]         ;1306
0000a4  9e10              LDR      r6,[sp,#0x40]         ;1307
0000a6  960e              STR      r6,[sp,#0x38]         ;1307
0000a8  9e10              LDR      r6,[sp,#0x40]         ;1308
0000aa  4637              MOV      r7,r6                 ;1308
0000ac  9e10              LDR      r6,[sp,#0x40]         ;1312
0000ae  6bf0              LDR      r0,[r6,#0x3c]         ;1312
0000b0  900b              STR      r0,[sp,#0x2c]         ;1312
0000b2  2304              MOVS     r3,#4                 ;1313
0000b4  461a              MOV      r2,r3                 ;1313
0000b6  9914              LDR      r1,[sp,#0x50]         ;1313
0000b8  980b              LDR      r0,[sp,#0x2c]         ;1313
0000ba  f7fffffe          BL       Mem_SegCalcTotSize
0000be  9003              STR      r0,[sp,#0xc]          ;1313
0000c0  9803              LDR      r0,[sp,#0xc]          ;1318
0000c2  b950              CBNZ     r0,|L14.218|
0000c4  bf00              NOP                            ;1319
0000c6  bf00              NOP                            ;1319
0000c8  9800              LDR      r0,[sp,#0]            ;1319
0000ca  f7fffffe          BL       CPU_SR_Restore
0000ce  bf00              NOP                            ;1319
0000d0  bf00              NOP                            ;1319
0000d2  f24270e3          MOV      r0,#0x27e3            ;1320
0000d6  8028              STRH     r0,[r5,#0]            ;1320
0000d8  e7b1              B        |L14.62|
                  |L14.218|
0000da  9903              LDR      r1,[sp,#0xc]          ;1325
0000dc  980b              LDR      r0,[sp,#0x2c]         ;1325
0000de  4408              ADD      r0,r0,r1              ;1325
0000e0  900a              STR      r0,[sp,#0x28]         ;1325
0000e2  e9dd231e          LDRD     r2,r3,[sp,#0x78]      ;1326
0000e6  9914              LDR      r1,[sp,#0x50]         ;1326
0000e8  980a              LDR      r0,[sp,#0x28]         ;1326
0000ea  f7fffffe          BL       Mem_SegCalcTotSize
0000ee  4683              MOV      r11,r0                ;1326
0000f0  f1bb0f00          CMP      r11,#0                ;1331
0000f4  d10a              BNE      |L14.268|
0000f6  bf00              NOP                            ;1332
0000f8  bf00              NOP                            ;1332
0000fa  9800              LDR      r0,[sp,#0]            ;1332
0000fc  f7fffffe          BL       CPU_SR_Restore
000100  bf00              NOP                            ;1332
000102  bf00              NOP                            ;1332
000104  f24270e3          MOV      r0,#0x27e3            ;1333
000108  8028              STRH     r0,[r5,#0]            ;1333
00010a  e798              B        |L14.62|
                  |L14.268|
00010c  9803              LDR      r0,[sp,#0xc]          ;1338
00010e  eb000a0b          ADD      r10,r0,r11            ;1338
000112  9803              LDR      r0,[sp,#0xc]          ;1341
000114  4582              CMP      r10,r0                ;1341
000116  d301              BCC      |L14.284|
000118  45da              CMP      r10,r11               ;1342
00011a  d20a              BCS      |L14.306|
                  |L14.284|
00011c  bf00              NOP                            ;1343
00011e  bf00              NOP                            ;1343
000120  9800              LDR      r0,[sp,#0]            ;1343
000122  f7fffffe          BL       CPU_SR_Restore
000126  bf00              NOP                            ;1343
000128  bf00              NOP                            ;1343
00012a  f24270e3          MOV      r0,#0x27e3            ;1344
00012e  8028              STRH     r0,[r5,#0]            ;1344
000130  e785              B        |L14.62|
                  |L14.306|
000132  9810              LDR      r0,[sp,#0x40]         ;1349
000134  f8d08044          LDR      r8,[r0,#0x44]         ;1349
000138  45c2              CMP      r10,r8                ;1350
00013a  d97d              BLS      |L14.568|
00013c  bf00              NOP                            ;1351
00013e  bf00              NOP                            ;1351
000140  9800              LDR      r0,[sp,#0]            ;1351
000142  f7fffffe          BL       CPU_SR_Restore
000146  bf00              NOP                            ;1351
000148  bf00              NOP                            ;1351
00014a  ebaa0008          SUB      r0,r10,r8             ;1352
00014e  f8c90000          STR      r0,[r9,#0]            ;1352
000152  f24270e2          MOV      r0,#0x27e2            ;1353
000156  8028              STRH     r0,[r5,#0]            ;1353
000158  e771              B        |L14.62|
                  |L14.346|
00015a  9812              LDR      r0,[sp,#0x48]         ;1360
00015c  9009              STR      r0,[sp,#0x24]         ;1360
00015e  e9dd0112          LDRD     r0,r1,[sp,#0x48]      ;1361
000162  4408              ADD      r0,r0,r1              ;1361
000164  1e40              SUBS     r0,r0,#1              ;1361
000166  9008              STR      r0,[sp,#0x20]         ;1361
000168  e9dd1008          LDRD     r1,r0,[sp,#0x20]      ;1364
00016c  4281              CMP      r1,r0                 ;1364
00016e  d20a              BCS      |L14.390|
000170  bf00              NOP                            ;1365
000172  bf00              NOP                            ;1365
000174  9800              LDR      r0,[sp,#0]            ;1365
000176  f7fffffe          BL       CPU_SR_Restore
00017a  bf00              NOP                            ;1365
00017c  bf00              NOP                            ;1365
00017e  f2427097          MOV      r0,#0x2797            ;1366
000182  8028              STRH     r0,[r5,#0]            ;1366
000184  e75b              B        |L14.62|
                  |L14.390|
000186  2600              MOVS     r6,#0                 ;1371
000188  2000              MOVS     r0,#0                 ;1372
00018a  900e              STR      r0,[sp,#0x38]         ;1372
00018c  48a4              LDR      r0,|L14.1056|
00018e  6807              LDR      r7,[r0,#0]            ;1373  ; Mem_PoolTbl
000190  e03a              B        |L14.520|
                  |L14.402|
000192  6bb9              LDR      r1,[r7,#0x38]         ;1377
000194  9812              LDR      r0,[sp,#0x48]         ;1377
000196  4281              CMP      r1,r0                 ;1377
000198  d105              BNE      |L14.422|
00019a  6c39              LDR      r1,[r7,#0x40]         ;1378
00019c  9813              LDR      r0,[sp,#0x4c]         ;1378
00019e  4281              CMP      r1,r0                 ;1378
0001a0  d101              BNE      |L14.422|
0001a2  463e              MOV      r6,r7                 ;1380
0001a4  e032              B        |L14.524|
                  |L14.422|
0001a6  6bb8              LDR      r0,[r7,#0x38]         ;1384
0001a8  9007              STR      r0,[sp,#0x1c]         ;1384
0001aa  6c39              LDR      r1,[r7,#0x40]         ;1385
0001ac  6bb8              LDR      r0,[r7,#0x38]         ;1385
0001ae  4408              ADD      r0,r0,r1              ;1385
0001b0  1e40              SUBS     r0,r0,#1              ;1385
0001b2  9006              STR      r0,[sp,#0x18]         ;1385
0001b4  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;1388
0001b8  4281              CMP      r1,r0                 ;1388
0001ba  d200              BCS      |L14.446|
0001bc  e026              B        |L14.524|
                  |L14.446|
0001be  9907              LDR      r1,[sp,#0x1c]         ;1392
0001c0  9809              LDR      r0,[sp,#0x24]         ;1392
0001c2  4288              CMP      r0,r1                 ;1392
0001c4  d803              BHI      |L14.462|
0001c6  e9dd1007          LDRD     r1,r0,[sp,#0x1c]      ;1393
0001ca  4288              CMP      r0,r1                 ;1393
0001cc  d20f              BCS      |L14.494|
                  |L14.462|
0001ce  9907              LDR      r1,[sp,#0x1c]         ;1394
0001d0  9809              LDR      r0,[sp,#0x24]         ;1394
0001d2  4288              CMP      r0,r1                 ;1394
0001d4  d303              BCC      |L14.478|
0001d6  9906              LDR      r1,[sp,#0x18]         ;1395
0001d8  9808              LDR      r0,[sp,#0x20]         ;1395
0001da  4288              CMP      r0,r1                 ;1395
0001dc  d907              BLS      |L14.494|
                  |L14.478|
0001de  9906              LDR      r1,[sp,#0x18]         ;1396
0001e0  9809              LDR      r0,[sp,#0x24]         ;1396
0001e2  4288              CMP      r0,r1                 ;1396
0001e4  d80e              BHI      |L14.516|
0001e6  9906              LDR      r1,[sp,#0x18]         ;1397
0001e8  9808              LDR      r0,[sp,#0x20]         ;1397
0001ea  4288              CMP      r0,r1                 ;1397
0001ec  d30a              BCC      |L14.516|
                  |L14.494|
0001ee  bf00              NOP                            ;1398
0001f0  bf00              NOP                            ;1398
0001f2  9800              LDR      r0,[sp,#0]            ;1398
0001f4  f7fffffe          BL       CPU_SR_Restore
0001f8  bf00              NOP                            ;1398
0001fa  bf00              NOP                            ;1398
0001fc  f242707f          MOV      r0,#0x277f            ;1399
000200  8028              STRH     r0,[r5,#0]            ;1399
000202  e71c              B        |L14.62|
                  |L14.516|
000204  970e              STR      r7,[sp,#0x38]         ;1404
000206  68ff              LDR      r7,[r7,#0xc]          ;1405
                  |L14.520|
000208  2f00              CMP      r7,#0                 ;1375
00020a  d1c2              BNE      |L14.402|
                  |L14.524|
00020c  bf00              NOP                            ;1381
00020e  b946              CBNZ     r6,|L14.546|
000210  4626              MOV      r6,r4                 ;1409
000212  9812              LDR      r0,[sp,#0x48]         ;1410
000214  63a0              STR      r0,[r4,#0x38]         ;1410
000216  9812              LDR      r0,[sp,#0x48]         ;1411
000218  63e0              STR      r0,[r4,#0x3c]         ;1411
00021a  9813              LDR      r0,[sp,#0x4c]         ;1412
00021c  6420              STR      r0,[r4,#0x40]         ;1412
00021e  9813              LDR      r0,[sp,#0x4c]         ;1413
000220  6460              STR      r0,[r4,#0x44]         ;1413
                  |L14.546|
000222  9810              LDR      r0,[sp,#0x40]         ;1419
000224  6bc0              LDR      r0,[r0,#0x3c]         ;1419
000226  900b              STR      r0,[sp,#0x2c]         ;1419
000228  2304              MOVS     r3,#4                 ;1420
00022a  461a              MOV      r2,r3                 ;1420
00022c  9914              LDR      r1,[sp,#0x50]         ;1420
00022e  980b              LDR      r0,[sp,#0x2c]         ;1420
000230  f7fffffe          BL       Mem_SegCalcTotSize
000234  9003              STR      r0,[sp,#0xc]          ;1420
000236  e000              B        |L14.570|
                  |L14.568|
000238  e04c              B        |L14.724|
                  |L14.570|
00023a  9803              LDR      r0,[sp,#0xc]          ;1425
00023c  b950              CBNZ     r0,|L14.596|
00023e  bf00              NOP                            ;1426
000240  bf00              NOP                            ;1426
000242  9800              LDR      r0,[sp,#0]            ;1426
000244  f7fffffe          BL       CPU_SR_Restore
000248  bf00              NOP                            ;1426
00024a  bf00              NOP                            ;1426
00024c  f24270e3          MOV      r0,#0x27e3            ;1427
000250  8028              STRH     r0,[r5,#0]            ;1427
000252  e6f4              B        |L14.62|
                  |L14.596|
000254  9810              LDR      r0,[sp,#0x40]         ;1432
000256  f8d08044          LDR      r8,[r0,#0x44]         ;1432
00025a  9803              LDR      r0,[sp,#0xc]          ;1433
00025c  4540              CMP      r0,r8                 ;1433
00025e  d90f              BLS      |L14.640|
000260  bf00              NOP                            ;1434
000262  bf00              NOP                            ;1434
000264  9800              LDR      r0,[sp,#0]            ;1434
000266  f7fffffe          BL       CPU_SR_Restore
00026a  bf00              NOP                            ;1434
00026c  bf00              NOP                            ;1434
00026e  9803              LDR      r0,[sp,#0xc]          ;1435
000270  eba00008          SUB      r0,r0,r8              ;1435
000274  f8c90000          STR      r0,[r9,#0]            ;1435
000278  f24270e2          MOV      r0,#0x27e2            ;1436
00027c  8028              STRH     r0,[r5,#0]            ;1436
00027e  e6de              B        |L14.62|
                  |L14.640|
000280  6bf0              LDR      r0,[r6,#0x3c]         ;1441
000282  900a              STR      r0,[sp,#0x28]         ;1441
000284  e9dd231e          LDRD     r2,r3,[sp,#0x78]      ;1442
000288  9914              LDR      r1,[sp,#0x50]         ;1442
00028a  980a              LDR      r0,[sp,#0x28]         ;1442
00028c  f7fffffe          BL       Mem_SegCalcTotSize
000290  4683              MOV      r11,r0                ;1442
000292  f1bb0f00          CMP      r11,#0                ;1447
000296  d10a              BNE      |L14.686|
000298  bf00              NOP                            ;1448
00029a  bf00              NOP                            ;1448
00029c  9800              LDR      r0,[sp,#0]            ;1448
00029e  f7fffffe          BL       CPU_SR_Restore
0002a2  bf00              NOP                            ;1448
0002a4  bf00              NOP                            ;1448
0002a6  f24270d9          MOV      r0,#0x27d9            ;1449
0002aa  8028              STRH     r0,[r5,#0]            ;1449
0002ac  e6c7              B        |L14.62|
                  |L14.686|
0002ae  f8d68044          LDR      r8,[r6,#0x44]         ;1454
0002b2  45c3              CMP      r11,r8                ;1455
0002b4  d90e              BLS      |L14.724|
0002b6  bf00              NOP                            ;1456
0002b8  bf00              NOP                            ;1456
0002ba  9800              LDR      r0,[sp,#0]            ;1456
0002bc  f7fffffe          BL       CPU_SR_Restore
0002c0  bf00              NOP                            ;1456
0002c2  bf00              NOP                            ;1456
0002c4  ebab0008          SUB      r0,r11,r8             ;1457
0002c8  f8c90000          STR      r0,[r9,#0]            ;1457
0002cc  f24270d8          MOV      r0,#0x27d8            ;1458
0002d0  8028              STRH     r0,[r5,#0]            ;1458
0002d2  e6b4              B        |L14.62|
                  |L14.724|
0002d4  9814              LDR      r0,[sp,#0x50]         ;1466
0002d6  0080              LSLS     r0,r0,#2              ;1466
0002d8  9002              STR      r0,[sp,#8]            ;1466
0002da  2204              MOVS     r2,#4                 ;1468
0002dc  9902              LDR      r1,[sp,#8]            ;1468
0002de  9810              LDR      r0,[sp,#0x40]         ;1468
0002e0  f7fffffe          BL       Mem_SegAlloc
0002e4  900d              STR      r0,[sp,#0x34]         ;1468
0002e6  980d              LDR      r0,[sp,#0x34]         ;1471
0002e8  bb28              CBNZ     r0,|L14.822|
0002ea  9810              LDR      r0,[sp,#0x40]         ;1472
0002ec  f8d08044          LDR      r8,[r0,#0x44]         ;1472
0002f0  bf00              NOP                            ;1473
0002f2  bf00              NOP                            ;1473
0002f4  9800              LDR      r0,[sp,#0]            ;1473
0002f6  f7fffffe          BL       CPU_SR_Restore
0002fa  bf00              NOP                            ;1473
0002fc  bf00              NOP                            ;1473
0002fe  9812              LDR      r0,[sp,#0x48]         ;1475
000300  b948              CBNZ     r0,|L14.790|
000302  45c2              CMP      r10,r8                ;1476
000304  d904              BLS      |L14.784|
000306  ebaa0008          SUB      r0,r10,r8             ;1477
00030a  f8c90000          STR      r0,[r9,#0]            ;1477
00030e  e00e              B        |L14.814|
                  |L14.784|
000310  f8c9a000          STR      r10,[r9,#0]           ;1479
000314  e00b              B        |L14.814|
                  |L14.790|
000316  9802              LDR      r0,[sp,#8]            ;1482
000318  4540              CMP      r0,r8                 ;1482
00031a  d905              BLS      |L14.808|
00031c  9802              LDR      r0,[sp,#8]            ;1483
00031e  eba00008          SUB      r0,r0,r8              ;1483
000322  f8c90000          STR      r0,[r9,#0]            ;1483
000326  e002              B        |L14.814|
                  |L14.808|
000328  9802              LDR      r0,[sp,#8]            ;1485
00032a  f8c90000          STR      r0,[r9,#0]            ;1485
                  |L14.814|
00032e  f24270e2          MOV      r0,#0x27e2            ;1488
000332  8028              STRH     r0,[r5,#0]            ;1488
000334  e683              B        |L14.62|
                  |L14.822|
000336  2000              MOVS     r0,#0                 ;1492
000338  9001              STR      r0,[sp,#4]            ;1492
00033a  e032              B        |L14.930|
                  |L14.828|
00033c  4630              MOV      r0,r6                 ;1493
00033e  e9dd121e          LDRD     r1,r2,[sp,#0x78]      ;1493
000342  f7fffffe          BL       Mem_SegAlloc
000346  900c              STR      r0,[sp,#0x30]         ;1493
000348  980c              LDR      r0,[sp,#0x30]         ;1494
00034a  bb10              CBNZ     r0,|L14.914|
00034c  6bf0              LDR      r0,[r6,#0x3c]         ;1495
00034e  900a              STR      r0,[sp,#0x28]         ;1495
000350  f8d68044          LDR      r8,[r6,#0x44]         ;1496
000354  bf00              NOP                            ;1497
000356  bf00              NOP                            ;1497
000358  9800              LDR      r0,[sp,#0]            ;1497
00035a  f7fffffe          BL       CPU_SR_Restore
00035e  bf00              NOP                            ;1497
000360  bf00              NOP                            ;1497
000362  9901              LDR      r1,[sp,#4]            ;1498
000364  9814              LDR      r0,[sp,#0x50]         ;1498
000366  1a40              SUBS     r0,r0,r1              ;1498
000368  9005              STR      r0,[sp,#0x14]         ;1498
00036a  e9dd231e          LDRD     r2,r3,[sp,#0x78]      ;1499
00036e  9905              LDR      r1,[sp,#0x14]         ;1499
000370  980a              LDR      r0,[sp,#0x28]         ;1499
000372  f7fffffe          BL       Mem_SegCalcTotSize
000376  4682              MOV      r10,r0                ;1499
000378  45c2              CMP      r10,r8                ;1504
00037a  d904              BLS      |L14.902|
00037c  ebaa0008          SUB      r0,r10,r8             ;1505
000380  f8c90000          STR      r0,[r9,#0]            ;1505
000384  e001              B        |L14.906|
                  |L14.902|
000386  f8c9a000          STR      r10,[r9,#0]           ;1507
                  |L14.906|
00038a  f24270d8          MOV      r0,#0x27d8            ;1509
00038e  8028              STRH     r0,[r5,#0]            ;1509
000390  e655              B        |L14.62|
                  |L14.914|
000392  9a01              LDR      r2,[sp,#4]            ;1512
000394  e9dd010c          LDRD     r0,r1,[sp,#0x30]      ;1512
000398  f8410022          STR      r0,[r1,r2,LSL #2]     ;1512
00039c  9801              LDR      r0,[sp,#4]            ;1492
00039e  1c40              ADDS     r0,r0,#1              ;1492
0003a0  9001              STR      r0,[sp,#4]            ;1492
                  |L14.930|
0003a2  9914              LDR      r1,[sp,#0x50]         ;1492
0003a4  9801              LDR      r0,[sp,#4]            ;1492
0003a6  4288              CMP      r0,r1                 ;1492
0003a8  d3c8              BCC      |L14.828|
0003aa  42a6              CMP      r6,r4                 ;1518
0003ac  d10c              BNE      |L14.968|
0003ae  980e              LDR      r0,[sp,#0x38]         ;1520
0003b0  60a0              STR      r0,[r4,#8]            ;1520
0003b2  60e7              STR      r7,[r4,#0xc]          ;1521
0003b4  980e              LDR      r0,[sp,#0x38]         ;1523
0003b6  b110              CBZ      r0,|L14.958|
0003b8  980e              LDR      r0,[sp,#0x38]         ;1524
0003ba  60c4              STR      r4,[r0,#0xc]          ;1524
0003bc  e001              B        |L14.962|
                  |L14.958|
0003be  4818              LDR      r0,|L14.1056|
0003c0  6004              STR      r4,[r0,#0]            ;1526  ; Mem_PoolTbl
                  |L14.962|
0003c2  b15f              CBZ      r7,|L14.988|
0003c4  60bc              STR      r4,[r7,#8]            ;1530
0003c6  e009              B        |L14.988|
                  |L14.968|
0003c8  6970              LDR      r0,[r6,#0x14]         ;1535
0003ca  900f              STR      r0,[sp,#0x3c]         ;1535
0003cc  6126              STR      r6,[r4,#0x10]         ;1536
0003ce  980f              LDR      r0,[sp,#0x3c]         ;1537
0003d0  6160              STR      r0,[r4,#0x14]         ;1537
0003d2  6174              STR      r4,[r6,#0x14]         ;1539
0003d4  980f              LDR      r0,[sp,#0x3c]         ;1541
0003d6  b108              CBZ      r0,|L14.988|
0003d8  980f              LDR      r0,[sp,#0x3c]         ;1542
0003da  6104              STR      r4,[r0,#0x10]         ;1542
                  |L14.988|
0003dc  4812              LDR      r0,|L14.1064|
0003de  6020              STR      r0,[r4,#0]            ;1549
0003e0  6066              STR      r6,[r4,#4]            ;1550
0003e2  980a              LDR      r0,[sp,#0x28]         ;1551
0003e4  61a0              STR      r0,[r4,#0x18]         ;1551
0003e6  980a              LDR      r0,[sp,#0x28]         ;1552
0003e8  4458              ADD      r0,r0,r11             ;1552
0003ea  1e40              SUBS     r0,r0,#1              ;1552
0003ec  61e0              STR      r0,[r4,#0x1c]         ;1552
0003ee  980d              LDR      r0,[sp,#0x34]         ;1553
0003f0  6220              STR      r0,[r4,#0x20]         ;1553
0003f2  f8c4b028          STR      r11,[r4,#0x28]        ;1554
0003f6  981f              LDR      r0,[sp,#0x7c]         ;1555
0003f8  6360              STR      r0,[r4,#0x34]         ;1555
0003fa  981e              LDR      r0,[sp,#0x78]         ;1556
0003fc  6320              STR      r0,[r4,#0x30]         ;1556
0003fe  9814              LDR      r0,[sp,#0x50]         ;1557
000400  62e0              STR      r0,[r4,#0x2c]         ;1557
000402  9814              LDR      r0,[sp,#0x50]         ;1558
000404  6260              STR      r0,[r4,#0x24]         ;1558
000406  bf00              NOP                            ;1561
000408  bf00              NOP                            ;1561
00040a  9800              LDR      r0,[sp,#0]            ;1561
00040c  f7fffffe          BL       CPU_SR_Restore
000410  bf00              NOP                            ;1561
000412  bf00              NOP                            ;1561
000414  f2427010          MOV      r0,#0x2710            ;1563
000418  8028              STRH     r0,[r5,#0]            ;1563
00041a  bf00              NOP      
00041c  e60f              B        |L14.62|
;;;1565   #endif
                          ENDP

00041e  0000              DCW      0x0000
                  |L14.1056|
                          DCD      Mem_PoolTbl
                  |L14.1060|
                          DCD      Mem_PoolHeap
                  |L14.1064|
                          DCD      0x4c4f4f50

                          AREA ||i.Mem_SegAlloc||, CODE, READONLY, ALIGN=1

                  Mem_SegAlloc PROC
;;;2392   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;2393   static  void  *Mem_SegAlloc (MEM_POOL    *pmem_pool,
000000  b5f0              PUSH     {r4-r7,lr}
;;;2394                                CPU_SIZE_T   size,
;;;2395                                CPU_SIZE_T   align)
;;;2396   {
000002  4603              MOV      r3,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;2397       CPU_INT08U  *pmem_addr;
;;;2398       CPU_INT08U  *pmem_addr_next;
;;;2399       CPU_SIZE_T   mem_align;
;;;2400       CPU_SIZE_T   align_offset;
;;;2401       CPU_SIZE_T   size_tot;
;;;2402   
;;;2403   
;;;2404       pmem_addr = (CPU_INT08U *)pmem_pool->SegAddrNextAvail;
000008  6bda              LDR      r2,[r3,#0x3c]
;;;2405   
;;;2406       mem_align = (CPU_SIZE_T)((CPU_ADDR)pmem_addr % align);          /* Calc mem align.                                  */
00000a  fbb2f0f6          UDIV     r0,r2,r6
00000e  fb062c10          MLS      r12,r6,r0,r2
;;;2407   
;;;2408       if (mem_align != 0u) {
000012  f1bc0f00          CMP      r12,#0
000016  d002              BEQ      |L15.30|
;;;2409           align_offset = align - mem_align;
000018  eba6040c          SUB      r4,r6,r12
00001c  e000              B        |L15.32|
                  |L15.30|
;;;2410       } else {
;;;2411           align_offset = 0u;
00001e  2400              MOVS     r4,#0
                  |L15.32|
;;;2412       }
;;;2413   
;;;2414       size_tot = align_offset + size;
000020  1961              ADDS     r1,r4,r5
;;;2415       if (size_tot > pmem_pool->SegSizeRem) {                         /* If insufficient mem seg size rem, ...            */
000022  6c58              LDR      r0,[r3,#0x44]
000024  4288              CMP      r0,r1
000026  d201              BCS      |L15.44|
;;;2416           return ((void *)0);                                         /* ... rtn NULL.                                    */
000028  2000              MOVS     r0,#0
                  |L15.42|
;;;2417       }
;;;2418   
;;;2419   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;2420       if ((size_tot < align_offset) ||                                /* If size ovf, ...                                 */
;;;2421           (size_tot < size)) {
;;;2422           return ((void *)0);                                         /* ... rtn NULL.                                    */
;;;2423       }
;;;2424   #endif
;;;2425   
;;;2426       pmem_addr_next = pmem_addr + size_tot;
;;;2427   
;;;2428   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;2429       if (pmem_addr_next < pmem_addr) {                               /* If addr ovf, ...                                 */
;;;2430           return ((void *)0);                                         /* ... rtn NULL.                                    */
;;;2431       }
;;;2432   #endif
;;;2433   
;;;2434       pmem_addr += align_offset;                                      /* Align mem addr.                                  */
;;;2435   
;;;2436       pmem_pool->SegAddrNextAvail  = (void     *)pmem_addr_next;      /* Adv next avail addr.                             */
;;;2437       pmem_pool->SegSizeRem       -= (CPU_SIZE_T)size_tot;            /* Adj rem mem seg size.                            */
;;;2438   
;;;2439       return ((void *)pmem_addr);
;;;2440   }
00002a  bdf0              POP      {r4-r7,pc}
                  |L15.44|
00002c  42a1              CMP      r1,r4                 ;2420
00002e  d301              BCC      |L15.52|
000030  42a9              CMP      r1,r5                 ;2421
000032  d201              BCS      |L15.56|
                  |L15.52|
000034  2000              MOVS     r0,#0                 ;2422
000036  e7f8              B        |L15.42|
                  |L15.56|
000038  1857              ADDS     r7,r2,r1              ;2426
00003a  4297              CMP      r7,r2                 ;2429
00003c  d201              BCS      |L15.66|
00003e  2000              MOVS     r0,#0                 ;2430
000040  e7f3              B        |L15.42|
                  |L15.66|
000042  4422              ADD      r2,r2,r4              ;2434
000044  63df              STR      r7,[r3,#0x3c]         ;2436
000046  6c58              LDR      r0,[r3,#0x44]         ;2437
000048  1a40              SUBS     r0,r0,r1              ;2437
00004a  6458              STR      r0,[r3,#0x44]         ;2437
00004c  4610              MOV      r0,r2                 ;2439
00004e  e7ec              B        |L15.42|
;;;2441   #endif
                          ENDP


                          AREA ||i.Mem_SegCalcTotSize||, CODE, READONLY, ALIGN=1

                  Mem_SegCalcTotSize PROC
;;;2284   #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;2285   static  CPU_SIZE_T  Mem_SegCalcTotSize (void              *pmem_addr,
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;2286                                           MEM_POOL_BLK_QTY   blk_nbr,
;;;2287                                           CPU_SIZE_T         blk_size,
;;;2288                                           CPU_SIZE_T         blk_align)
;;;2289   {
000004  4681              MOV      r9,r0
000006  468c              MOV      r12,r1
000008  461c              MOV      r4,r3
;;;2290   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;2291       CPU_SIZE_T  blk_size_mem_aligned;
;;;2292       CPU_SIZE_T  blk_size_aligned;
;;;2293       CPU_SIZE_T  blk_size_aligned_nbr;
;;;2294       CPU_SIZE_T  blk_size_tot;
;;;2295   #endif
;;;2296       CPU_SIZE_T  align_offset;
;;;2297       CPU_SIZE_T  mem_align_offset;
;;;2298       CPU_SIZE_T  blk_align_offset;
;;;2299       CPU_SIZE_T  size_tot;
;;;2300   
;;;2301                                                                       /* Calc mem align (see Note #2a).                   */
;;;2302       align_offset = (CPU_ADDR)pmem_addr % blk_align;
00000a  fbb9f0f4          UDIV     r0,r9,r4
00000e  fb049b10          MLS      r11,r4,r0,r9
;;;2303       if (align_offset != 0u) {
000012  f1bb0f00          CMP      r11,#0
000016  d002              BEQ      |L16.30|
;;;2304           mem_align_offset = blk_align - align_offset;
000018  eba4060b          SUB      r6,r4,r11
00001c  e000              B        |L16.32|
                  |L16.30|
;;;2305       } else {
;;;2306           mem_align_offset = 0u;
00001e  2600              MOVS     r6,#0
                  |L16.32|
;;;2307       }
;;;2308                                                                       /* Calc blk align (see Note #2b).                   */
;;;2309       align_offset = blk_size % blk_align;
000020  fbb2f0f4          UDIV     r0,r2,r4
000024  fb042b10          MLS      r11,r4,r0,r2
;;;2310       if (align_offset != 0u) {
000028  f1bb0f00          CMP      r11,#0
00002c  d002              BEQ      |L16.52|
;;;2311           blk_align_offset = blk_align - align_offset;
00002e  eba4030b          SUB      r3,r4,r11
000032  e000              B        |L16.54|
                  |L16.52|
;;;2312       } else {
;;;2313           blk_align_offset = 0u;
000034  2300              MOVS     r3,#0
                  |L16.54|
;;;2314       }
;;;2315                                                                       /* Calc tot size  (see Note #2c).                   */
;;;2316       size_tot = mem_align_offset + ((blk_size + blk_align_offset) * ((CPU_SIZE_T)blk_nbr - 1)) + blk_size;
000036  18d0              ADDS     r0,r2,r3
000038  f1ac0e01          SUB      lr,r12,#1
00003c  fb00600e          MLA      r0,r0,lr,r6
000040  1887              ADDS     r7,r0,r2
;;;2317   
;;;2318   #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)                     /* Chk ovf of tot size = A + [(B + C) * D] + E      */
;;;2319       blk_size_mem_aligned = mem_align_offset + blk_size;             /* Chk ovf of A + E :                               */
000042  eb060802          ADD      r8,r6,r2
;;;2320       if ((blk_size_mem_aligned < mem_align_offset) ||
000046  45b0              CMP      r8,r6
000048  d301              BCC      |L16.78|
;;;2321           (blk_size_mem_aligned < blk_size)) {
00004a  4590              CMP      r8,r2
00004c  d202              BCS      |L16.84|
                  |L16.78|
;;;2322           return (0u);
00004e  2000              MOVS     r0,#0
                  |L16.80|
;;;2323       }
;;;2324   
;;;2325       if (blk_nbr > 1) {
;;;2326           blk_size_aligned = blk_size + blk_align_offset;
;;;2327           if ((blk_size_aligned < blk_align_offset) ||                /* Chk ovf of      (B + C) :                        */
;;;2328               (blk_size_aligned < blk_size)) {
;;;2329               return (0u);
;;;2330           }
;;;2331   
;;;2332           blk_size_aligned_nbr = blk_size_aligned * ((CPU_SIZE_T)blk_nbr - 1);
;;;2333           if ((blk_size_aligned_nbr < blk_size_aligned) ||            /* Chk ovf of     [(B + C) * D] :                   */
;;;2334               (blk_size_aligned_nbr < blk_align_offset) ||
;;;2335               (blk_size_aligned_nbr < blk_size)) {
;;;2336               return (0u);
;;;2337           }
;;;2338   
;;;2339           blk_size_tot = blk_size_aligned_nbr + blk_size;
;;;2340           if ((blk_size_tot < blk_size_aligned_nbr) ||                /* Chk ovf of     [(B + C) * D] + E :               */
;;;2341               (blk_size_tot < blk_size)) {
;;;2342               return (0u);
;;;2343           }
;;;2344   
;;;2345           if ((size_tot < blk_size_mem_aligned) ||                    /* Chk ovf of A + [(B + C) * D] + E :               */
;;;2346               (size_tot < blk_size_aligned_nbr) ||
;;;2347               (size_tot < blk_size_tot)) {
;;;2348               return (0u);
;;;2349           }
;;;2350       }
;;;2351   #endif
;;;2352   
;;;2353       return (size_tot);
;;;2354   }
000050  e8bd8ff0          POP      {r4-r11,pc}
                  |L16.84|
000054  f1bc0f01          CMP      r12,#1                ;2325
000058  d922              BLS      |L16.160|
00005a  18d5              ADDS     r5,r2,r3              ;2326
00005c  429d              CMP      r5,r3                 ;2327
00005e  d301              BCC      |L16.100|
000060  4295              CMP      r5,r2                 ;2328
000062  d201              BCS      |L16.104|
                  |L16.100|
000064  2000              MOVS     r0,#0                 ;2329
000066  e7f3              B        |L16.80|
                  |L16.104|
000068  f1ac0001          SUB      r0,r12,#1             ;2332
00006c  fb00f105          MUL      r1,r0,r5              ;2332
000070  42a9              CMP      r1,r5                 ;2333
000072  d303              BCC      |L16.124|
000074  4299              CMP      r1,r3                 ;2334
000076  d301              BCC      |L16.124|
000078  4291              CMP      r1,r2                 ;2335
00007a  d201              BCS      |L16.128|
                  |L16.124|
00007c  2000              MOVS     r0,#0                 ;2336
00007e  e7e7              B        |L16.80|
                  |L16.128|
000080  eb010a02          ADD      r10,r1,r2             ;2339
000084  458a              CMP      r10,r1                ;2340
000086  d301              BCC      |L16.140|
000088  4592              CMP      r10,r2                ;2341
00008a  d201              BCS      |L16.144|
                  |L16.140|
00008c  2000              MOVS     r0,#0                 ;2342
00008e  e7df              B        |L16.80|
                  |L16.144|
000090  4547              CMP      r7,r8                 ;2345
000092  d303              BCC      |L16.156|
000094  428f              CMP      r7,r1                 ;2346
000096  d301              BCC      |L16.156|
000098  4557              CMP      r7,r10                ;2347
00009a  d201              BCS      |L16.160|
                  |L16.156|
00009c  2000              MOVS     r0,#0                 ;2348
00009e  e7d7              B        |L16.80|
                  |L16.160|
0000a0  4638              MOV      r0,r7                 ;2353
0000a2  e7d5              B        |L16.80|
;;;2355   #endif
                          ENDP


                          AREA ||i.Mem_SegGetSizeRem||, CODE, READONLY, ALIGN=2

                  Mem_SegGetSizeRem PROC
;;;909    #if (LIB_MEM_CFG_ALLOC_EN == DEF_ENABLED)
;;;910    CPU_SIZE_T  Mem_SegGetSizeRem (MEM_POOL    *pmem_pool,
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;911                                   CPU_SIZE_T   align,
;;;912                                   LIB_ERR     *perr)
;;;913    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
;;;914        MEM_POOL    *pmem_seg;
;;;915        MEM_POOL    *pmem_seg_size;
;;;916        CPU_SIZE_T   size_rem;
;;;917        CPU_SIZE_T   size_rem_mod;
;;;918        CPU_SIZE_T   seg_addr_mod;
;;;919        CPU_ADDR     seg_addr;
;;;920        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;921    
;;;922    
;;;923    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;924                                                                    /* --------------- VALIDATE RTN ERR PTR --------------- */
;;;925        if (perr == (LIB_ERR *)0) {
00000e  b91c              CBNZ     r4,|L17.24|
;;;926            CPU_SW_EXCEPTION(0u);
000010  bf00              NOP      
000012  f7fffffe          BL       CPU_SW_Exception
000016  bf00              NOP      
                  |L17.24|
;;;927        }
;;;928                                                                    /* ---------------- VALIDATE MEM ALIGN ---------------- */
;;;929        if (align < 1) {
000018  b92d              CBNZ     r5,|L17.38|
;;;930           *perr =  LIB_MEM_ERR_INVALID_MEM_ALIGN;
00001a  f2427075          MOV      r0,#0x2775
00001e  8020              STRH     r0,[r4,#0]
;;;931            return (0u);
000020  2000              MOVS     r0,#0
                  |L17.34|
;;;932        }
;;;933    	if (align > DEF_ALIGN_MAX_NBR_OCTETS) {
;;;934    	   *perr =  LIB_MEM_ERR_INVALID_MEM_ALIGN;
;;;935            return (0u);
;;;936        }
;;;937                                                                    /* ---------------- VALIDATE MEM POOL ----------------- */
;;;938        if (pmem_pool == (MEM_POOL *)0) {                           /* Validate mem ptr.                                    */
;;;939           *perr =  LIB_MEM_ERR_NULL_PTR;
;;;940            return (0u);
;;;941        }
;;;942    #endif
;;;943    
;;;944        CPU_CRITICAL_ENTER();
;;;945    
;;;946    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;947        switch (pmem_pool->Type) {                                  /* Validate mem pool type.                              */
;;;948            case LIB_MEM_TYPE_HEAP:
;;;949            case LIB_MEM_TYPE_POOL:
;;;950                 break;
;;;951    
;;;952    
;;;953            case LIB_MEM_TYPE_NONE:
;;;954            default:
;;;955                 CPU_CRITICAL_EXIT();
;;;956                *perr =  LIB_MEM_ERR_INVALID_POOL;
;;;957                 return (0u);                                       /* Prevent 'break NOT reachable' compiler warning.      */
;;;958        }
;;;959    #endif
;;;960    
;;;961                                                                    /* ------------- GET REM'ING MEM SEG SIZE ------------- */
;;;962        pmem_seg      =  pmem_pool->SegHeadPtr;                     /* Get mem pool's head seg.                             */
;;;963        pmem_seg_size = (pmem_seg->SegAddr != (void *)0)
;;;964                      ?  pmem_seg : &Mem_PoolHeap;                  /* See Note #1.                                         */
;;;965        size_rem      =  pmem_seg_size->SegSizeRem;                 /* Get mem seg's rem'ing mem size.                      */
;;;966        seg_addr      = (CPU_ADDR)pmem_seg_size->SegAddrNextAvail;
;;;967    
;;;968        CPU_CRITICAL_EXIT();
;;;969    
;;;970        if (align > 1) {                                            /* If align > 1 octet, ...                              */
;;;971            seg_addr_mod  =  seg_addr % align;
;;;972            size_rem_mod  = (seg_addr_mod > 0u) ? (align - seg_addr_mod) : 0u;
;;;973            size_rem     -=  size_rem_mod;                          /* ... adj rem'ing size by offset to align'd seg addr.  */
;;;974        }
;;;975    
;;;976    
;;;977       *perr =  LIB_MEM_ERR_NONE;
;;;978    
;;;979        return (size_rem);
;;;980    }
000022  e8bd9ffc          POP      {r2-r12,pc}
                  |L17.38|
000026  f5b55f80          CMP      r5,#0x1000            ;933
00002a  d904              BLS      |L17.54|
00002c  f2427075          MOV      r0,#0x2775            ;934
000030  8020              STRH     r0,[r4,#0]            ;934
000032  2000              MOVS     r0,#0                 ;935
000034  e7f5              B        |L17.34|
                  |L17.54|
000036  b926              CBNZ     r6,|L17.66|
000038  f2427011          MOV      r0,#0x2711            ;939
00003c  8020              STRH     r0,[r4,#0]            ;939
00003e  2000              MOVS     r0,#0                 ;940
000040  e7ef              B        |L17.34|
                  |L17.66|
000042  bf00              NOP                            ;944
000044  bf00              NOP                            ;944
000046  f7fffffe          BL       CPU_SR_Save
00004a  9000              STR      r0,[sp,#0]            ;944
00004c  bf00              NOP                            ;944
00004e  bf00              NOP                            ;944
000050  4921              LDR      r1,|L17.216|
000052  6830              LDR      r0,[r6,#0]            ;947
000054  4408              ADD      r0,r0,r1              ;947
000056  b140              CBZ      r0,|L17.106|
000058  4920              LDR      r1,|L17.220|
00005a  4408              ADD      r0,r0,r1              ;947
00005c  b118              CBZ      r0,|L17.102|
00005e  4920              LDR      r1,|L17.224|
000060  4408              ADD      r0,r0,r1              ;947
000062  b908              CBNZ     r0,|L17.104|
000064  bf00              NOP                            ;949
                  |L17.102|
000066  e00c              B        |L17.130|
                  |L17.104|
000068  bf00              NOP                            ;953
                  |L17.106|
00006a  bf00              NOP                            ;955
00006c  bf00              NOP                            ;955
00006e  9800              LDR      r0,[sp,#0]            ;955
000070  f7fffffe          BL       CPU_SR_Restore
000074  bf00              NOP                            ;955
000076  bf00              NOP                            ;955
000078  f2427088          MOV      r0,#0x2788            ;956
00007c  8020              STRH     r0,[r4,#0]            ;956
00007e  2000              MOVS     r0,#0                 ;957
000080  e7cf              B        |L17.34|
                  |L17.130|
000082  bf00              NOP                            ;950
000084  f8d69004          LDR      r9,[r6,#4]            ;962
000088  f8d90038          LDR      r0,[r9,#0x38]         ;963
00008c  b108              CBZ      r0,|L17.146|
00008e  4648              MOV      r0,r9                 ;964
000090  e000              B        |L17.148|
                  |L17.146|
000092  4814              LDR      r0,|L17.228|
                  |L17.148|
000094  4682              MOV      r10,r0                ;964
000096  f8da7044          LDR      r7,[r10,#0x44]        ;965
00009a  f8dab03c          LDR      r11,[r10,#0x3c]       ;966
00009e  bf00              NOP                            ;968
0000a0  bf00              NOP                            ;968
0000a2  9800              LDR      r0,[sp,#0]            ;968
0000a4  f7fffffe          BL       CPU_SR_Restore
0000a8  bf00              NOP                            ;968
0000aa  bf00              NOP                            ;968
0000ac  2d01              CMP      r5,#1                 ;970
0000ae  d90d              BLS      |L17.204|
0000b0  fbbbf0f5          UDIV     r0,r11,r5             ;971
0000b4  fb05b810          MLS      r8,r5,r0,r11          ;971
0000b8  f1b80f00          CMP      r8,#0                 ;972
0000bc  d002              BEQ      |L17.196|
0000be  eba50008          SUB      r0,r5,r8              ;972
0000c2  e000              B        |L17.198|
                  |L17.196|
0000c4  2000              MOVS     r0,#0                 ;972
                  |L17.198|
0000c6  9001              STR      r0,[sp,#4]            ;972
0000c8  9801              LDR      r0,[sp,#4]            ;973
0000ca  1a3f              SUBS     r7,r7,r0              ;973
                  |L17.204|
0000cc  f2427010          MOV      r0,#0x2710            ;977
0000d0  8020              STRH     r0,[r4,#0]            ;977
0000d2  4638              MOV      r0,r7                 ;979
0000d4  e7a5              B        |L17.34|
;;;981    #endif
                          ENDP

0000d6  0000              DCW      0x0000
                  |L17.216|
                          DCD      0xbab1b0b2
                  |L17.220|
                          DCD      0xf8fefffe
                  |L17.224|
                          DCD      0xfc0e0a08
                  |L17.228|
                          DCD      Mem_PoolHeap

                          AREA ||i.Mem_Set||, CODE, READONLY, ALIGN=1

                  Mem_Set PROC
;;;268    
;;;269    void  Mem_Set (void        *pmem,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;270                   CPU_INT08U   data_val,
;;;271                   CPU_SIZE_T   size)
;;;272    {
000004  4603              MOV      r3,r0
000006  460c              MOV      r4,r1
000008  4617              MOV      r7,r2
;;;273        CPU_SIZE_T   size_rem;
;;;274        CPU_ALIGN    data_align;
;;;275        CPU_ALIGN   *pmem_align;
;;;276        CPU_INT08U  *pmem_08;
;;;277        CPU_DATA     mem_align_mod;
;;;278        CPU_DATA     i;
;;;279    
;;;280    
;;;281    #if (LIB_MEM_CFG_ARG_CHK_EXT_EN == DEF_ENABLED)
;;;282        if (size < 1) {                                             /* See Note #1.                                         */
00000a  b90f              CBNZ     r7,|L18.16|
                  |L18.12|
;;;283            return;
;;;284        }
;;;285        if (pmem == (void *)0) {
;;;286            return;
;;;287        }
;;;288    #endif
;;;289    
;;;290    
;;;291        data_align = 0u;
;;;292        for (i = 0u; i < sizeof(CPU_ALIGN); i++) {                  /* Fill each data_align octet with data val.            */
;;;293            data_align <<=  DEF_OCTET_NBR_BITS;
;;;294            data_align  |= (CPU_ALIGN)data_val;
;;;295        }
;;;296    
;;;297        size_rem      =  size;
;;;298        mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */
;;;299    
;;;300        pmem_08 = (CPU_INT08U *)pmem;
;;;301        if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
;;;302            i = mem_align_mod;
;;;303            while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
;;;304                   (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
;;;305               *pmem_08++ = data_val;
;;;306                size_rem -= sizeof(CPU_INT08U);
;;;307                i++;
;;;308            }
;;;309        }
;;;310    
;;;311        pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2a.                                        */
;;;312        while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
;;;313           *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
;;;314            size_rem    -= sizeof(CPU_ALIGN);
;;;315        }
;;;316    
;;;317        pmem_08 = (CPU_INT08U *)pmem_align;
;;;318        while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
;;;319           *pmem_08++   = data_val;
;;;320            size_rem   -= sizeof(CPU_INT08U);
;;;321        }
;;;322    }
00000c  e8bd81f0          POP      {r4-r8,pc}
                  |L18.16|
000010  b903              CBNZ     r3,|L18.20|
000012  e7fb              B        |L18.12|
                  |L18.20|
000014  2500              MOVS     r5,#0                 ;291
000016  2200              MOVS     r2,#0                 ;292
000018  e002              B        |L18.32|
                  |L18.26|
00001a  022d              LSLS     r5,r5,#8              ;293
00001c  4325              ORRS     r5,r5,r4              ;294
00001e  1c52              ADDS     r2,r2,#1              ;292
                  |L18.32|
000020  2a04              CMP      r2,#4                 ;292
000022  d3fa              BCC      |L18.26|
000024  4638              MOV      r0,r7                 ;297
000026  f0030c03          AND      r12,r3,#3             ;298
00002a  4619              MOV      r1,r3                 ;300
00002c  f1bc0f00          CMP      r12,#0                ;301
000030  d008              BEQ      |L18.68|
000032  4662              MOV      r2,r12                ;302
000034  e003              B        |L18.62|
                  |L18.54|
000036  f8014b01          STRB     r4,[r1],#1            ;305
00003a  1e40              SUBS     r0,r0,#1              ;306
00003c  1c52              ADDS     r2,r2,#1              ;307
                  |L18.62|
00003e  b108              CBZ      r0,|L18.68|
000040  2a04              CMP      r2,#4                 ;304
000042  d3f8              BCC      |L18.54|
                  |L18.68|
000044  460e              MOV      r6,r1                 ;311
000046  e001              B        |L18.76|
                  |L18.72|
000048  c620              STM      r6!,{r5}              ;313
00004a  1f00              SUBS     r0,r0,#4              ;314
                  |L18.76|
00004c  2804              CMP      r0,#4                 ;312
00004e  d2fb              BCS      |L18.72|
000050  4631              MOV      r1,r6                 ;317
000052  e002              B        |L18.90|
                  |L18.84|
000054  f8014b01          STRB     r4,[r1],#1            ;319
000058  1e40              SUBS     r0,r0,#1              ;320
                  |L18.90|
00005a  2800              CMP      r0,#0                 ;318
00005c  d1fa              BNE      |L18.84|
00005e  bf00              NOP      
000060  e7d4              B        |L18.12|
;;;323    
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  Mem_PoolHeap
                          %        72
                  Mem_Heap
                          %        23552

                          AREA ||.data||, DATA, ALIGN=2

                  Mem_PoolTbl
                          DCD      0x00000000
