; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\guidrv_template.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\guidrv_template.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\guidrv_template.crf ..\..\emWin\DisplayDriver\GUIDRV_Template.c]
                          THUMB

                          AREA ||i._DrawBitLine16BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine16BPP PROC
;;;591    */
;;;592    static void _DrawBitLine16BPP(GUI_DEVICE * pDevice, int x, int y, U16 const * p, int xsize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  9e06              LDR      r6,[sp,#0x18]
;;;593    #if emWin_Optimize
;;;594    	if (g_ChipID == IC_8875)
00000e  4809              LDR      r0,|L1.52|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d106              BNE      |L1.36|
;;;595    	{
;;;596    		 RA8875_DrawHColorLine(x, y, xsize, (uint16_t *)p);
000016  b2b2              UXTH     r2,r6
000018  b2a9              UXTH     r1,r5
00001a  b2a0              UXTH     r0,r4
00001c  463b              MOV      r3,r7
00001e  f7fffffe          BL       RA8875_DrawHColorLine
000022  e005              B        |L1.48|
                  |L1.36|
;;;597    	}
;;;598    	else
;;;599    	{
;;;600    		ILI9488_DrawHColorLine(x, y, xsize, (uint16_t *)p);
000024  b2b2              UXTH     r2,r6
000026  b2a9              UXTH     r1,r5
000028  b2a0              UXTH     r0,r4
00002a  463b              MOV      r3,r7
00002c  f7fffffe          BL       ILI9488_DrawHColorLine
                  |L1.48|
;;;601    	}
;;;602    #else
;;;603    	for (;xsize > 0; xsize--, x++, p++) 
;;;604    	{
;;;605    		_SetPixelIndex(pDevice, x, y, *p);
;;;606    	}
;;;607    #endif
;;;608    }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;609    
                          ENDP

                  |L1.52|
                          DCD      g_ChipID

                          AREA ||i._DrawBitLine1BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine1BPP PROC
;;;360    */
;;;361    static void _DrawBitLine1BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b083              SUB      sp,sp,#0xc
000006  4681              MOV      r9,r0
000008  460e              MOV      r6,r1
00000a  461c              MOV      r4,r3
00000c  e9dd7a11          LDRD     r7,r10,[sp,#0x44]
000010  9d10              LDR      r5,[sp,#0x40]
;;;362      LCD_PIXELINDEX IndexMask, Index0, Index1, Pixel;
;;;363    
;;;364      Index0 = *(pTrans + 0);
000012  f8da0000          LDR      r0,[r10,#0]
000016  9002              STR      r0,[sp,#8]
;;;365      Index1 = *(pTrans + 1);
000018  f8da0004          LDR      r0,[r10,#4]
00001c  9001              STR      r0,[sp,#4]
;;;366      x += Diff;
00001e  442e              ADD      r6,r6,r5
;;;367      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000020  4832              LDR      r0,|L2.236|
000022  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000024  7c00              LDRB     r0,[r0,#0x10]
000026  f0000003          AND      r0,r0,#3
00002a  b130              CBZ      r0,|L2.58|
00002c  2801              CMP      r0,#1
00002e  d036              BEQ      |L2.158|
000030  2802              CMP      r0,#2
000032  d01c              BEQ      |L2.110|
000034  2803              CMP      r0,#3
000036  d155              BNE      |L2.228|
000038  e030              B        |L2.156|
                  |L2.58|
;;;368      case 0:
;;;369        do {
00003a  bf00              NOP      
                  |L2.60|
;;;370          _SetPixelIndex(pDevice, x++, y, (*p & (0x80 >> Diff)) ? Index1 : Index0);
00003c  7820              LDRB     r0,[r4,#0]
00003e  2280              MOVS     r2,#0x80
000040  412a              ASRS     r2,r2,r5
000042  4010              ANDS     r0,r0,r2
000044  b108              CBZ      r0,|L2.74|
000046  9801              LDR      r0,[sp,#4]
000048  e000              B        |L2.76|
                  |L2.74|
00004a  9802              LDR      r0,[sp,#8]
                  |L2.76|
00004c  4603              MOV      r3,r0
00004e  4631              MOV      r1,r6
000050  1c76              ADDS     r6,r6,#1
000052  4648              MOV      r0,r9
000054  9a05              LDR      r2,[sp,#0x14]
000056  f7fffffe          BL       _SetPixelIndex
;;;371          if (++Diff == 8) {
00005a  1c68              ADDS     r0,r5,#1
00005c  4605              MOV      r5,r0
00005e  2808              CMP      r0,#8
000060  d101              BNE      |L2.102|
;;;372            Diff = 0;
000062  2500              MOVS     r5,#0
;;;373            p++;
000064  1c64              ADDS     r4,r4,#1
                  |L2.102|
;;;374          }
;;;375        } while (--xsize);
000066  1e78              SUBS     r0,r7,#1
000068  0007              MOVS     r7,r0
00006a  d1e7              BNE      |L2.60|
;;;376        break;
00006c  e03a              B        |L2.228|
                  |L2.110|
;;;377      case LCD_DRAWMODE_TRANS:
;;;378        do {
00006e  bf00              NOP      
                  |L2.112|
;;;379          if (*p & (0x80 >> Diff))
000070  7820              LDRB     r0,[r4,#0]
000072  2180              MOVS     r1,#0x80
000074  4129              ASRS     r1,r1,r5
000076  4008              ANDS     r0,r0,r1
000078  b128              CBZ      r0,|L2.134|
;;;380            _SetPixelIndex(pDevice, x, y, Index1);
00007a  4631              MOV      r1,r6
00007c  4648              MOV      r0,r9
00007e  9b01              LDR      r3,[sp,#4]
000080  9a05              LDR      r2,[sp,#0x14]
000082  f7fffffe          BL       _SetPixelIndex
                  |L2.134|
;;;381          x++;
000086  1c76              ADDS     r6,r6,#1
;;;382          if (++Diff == 8) {
000088  1c68              ADDS     r0,r5,#1
00008a  4605              MOV      r5,r0
00008c  2808              CMP      r0,#8
00008e  d101              BNE      |L2.148|
;;;383            Diff = 0;
000090  2500              MOVS     r5,#0
;;;384            p++;
000092  1c64              ADDS     r4,r4,#1
                  |L2.148|
;;;385          }
;;;386        } while (--xsize);
000094  1e78              SUBS     r0,r7,#1
000096  0007              MOVS     r7,r0
000098  d1ea              BNE      |L2.112|
;;;387        break;
00009a  e023              B        |L2.228|
                  |L2.156|
;;;388      case LCD_DRAWMODE_XOR | LCD_DRAWMODE_TRANS:
;;;389      case LCD_DRAWMODE_XOR:
00009c  bf00              NOP      
                  |L2.158|
;;;390        IndexMask = pDevice->pColorConvAPI->pfGetIndexMask();
00009e  f8d91010          LDR      r1,[r9,#0x10]
0000a2  6888              LDR      r0,[r1,#8]
0000a4  4780              BLX      r0
0000a6  4680              MOV      r8,r0
;;;391        do {
0000a8  bf00              NOP      
                  |L2.170|
;;;392          if (*p & (0x80 >> Diff)) {
0000aa  7820              LDRB     r0,[r4,#0]
0000ac  2180              MOVS     r1,#0x80
0000ae  4129              ASRS     r1,r1,r5
0000b0  4008              ANDS     r0,r0,r1
0000b2  b160              CBZ      r0,|L2.206|
;;;393            Pixel = _GetPixelIndex(pDevice, x, y);
0000b4  4631              MOV      r1,r6
0000b6  4648              MOV      r0,r9
0000b8  9a05              LDR      r2,[sp,#0x14]
0000ba  f7fffffe          BL       _GetPixelIndex
0000be  4683              MOV      r11,r0
;;;394            _SetPixelIndex(pDevice, x, y, Pixel ^ IndexMask);
0000c0  ea8b0308          EOR      r3,r11,r8
0000c4  4631              MOV      r1,r6
0000c6  4648              MOV      r0,r9
0000c8  9a05              LDR      r2,[sp,#0x14]
0000ca  f7fffffe          BL       _SetPixelIndex
                  |L2.206|
;;;395          }
;;;396          x++;
0000ce  1c76              ADDS     r6,r6,#1
;;;397          if (++Diff == 8) {
0000d0  1c68              ADDS     r0,r5,#1
0000d2  4605              MOV      r5,r0
0000d4  2808              CMP      r0,#8
0000d6  d101              BNE      |L2.220|
;;;398            Diff = 0;
0000d8  2500              MOVS     r5,#0
;;;399            p++;
0000da  1c64              ADDS     r4,r4,#1
                  |L2.220|
;;;400          }
;;;401        } while (--xsize);
0000dc  1e78              SUBS     r0,r7,#1
0000de  0007              MOVS     r7,r0
0000e0  d1e3              BNE      |L2.170|
;;;402        break;
0000e2  bf00              NOP      
                  |L2.228|
0000e4  bf00              NOP                            ;376
;;;403      }
;;;404    }
0000e6  b007              ADD      sp,sp,#0x1c
0000e8  e8bd8ff0          POP      {r4-r11,pc}
;;;405    
                          ENDP

                  |L2.236|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine2BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine2BPP PROC
;;;409    */
;;;410    static void  _DrawBitLine2BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  460f              MOV      r7,r1
000008  4698              MOV      r8,r3
00000a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;411      LCD_PIXELINDEX Pixels, PixelIndex;
;;;412      int CurrentPixel, Shift, Index;
;;;413    
;;;414      Pixels = *p;
00000e  f898b000          LDRB     r11,[r8,#0]
;;;415      CurrentPixel = Diff;
000012  9d0e              LDR      r5,[sp,#0x38]
;;;416      x += Diff;
000014  9d0e              LDR      r5,[sp,#0x38]
000016  442f              ADD      r7,r7,r5
;;;417      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000018  4853              LDR      r0,|L3.360|
00001a  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00001c  7c00              LDRB     r0,[r0,#0x10]
00001e  f0000003          AND      r0,r0,#3
000022  b110              CBZ      r0,|L3.42|
000024  2802              CMP      r0,#2
000026  d14b              BNE      |L3.192|
000028  e04b              B        |L3.194|
                  |L3.42|
;;;418      case 0:
;;;419        if (pTrans) {
00002a  f1ba0f00          CMP      r10,#0
00002e  d025              BEQ      |L3.124|
;;;420          do {
000030  bf00              NOP      
                  |L3.50|
;;;421            Shift = (3 - CurrentPixel) << 1;
000032  f1c50003          RSB      r0,r5,#3
000036  0044              LSLS     r4,r0,#1
;;;422            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000038  f1c40106          RSB      r1,r4,#6
00003c  20c0              MOVS     r0,#0xc0
00003e  4108              ASRS     r0,r0,r1
000040  ea00000b          AND      r0,r0,r11
000044  fa20f604          LSR      r6,r0,r4
;;;423            PixelIndex = *(pTrans + Index);
000048  f85a0026          LDR      r0,[r10,r6,LSL #2]
00004c  9000              STR      r0,[sp,#0]
;;;424            _SetPixelIndex(pDevice, x++, y, PixelIndex);
00004e  4639              MOV      r1,r7
000050  1c7f              ADDS     r7,r7,#1
000052  e9dd3000          LDRD     r3,r0,[sp,#0]
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       _SetPixelIndex
;;;425            if (++CurrentPixel == 4) {
00005c  1c68              ADDS     r0,r5,#1
00005e  4605              MOV      r5,r0
000060  2804              CMP      r0,#4
000062  d105              BNE      |L3.112|
;;;426              CurrentPixel = 0;
000064  2500              MOVS     r5,#0
;;;427              Pixels = *(++p);
000066  f1080001          ADD      r0,r8,#1
00006a  4680              MOV      r8,r0
00006c  f890b000          LDRB     r11,[r0,#0]
                  |L3.112|
;;;428            }
;;;429          } while (--xsize);
000070  f1a90001          SUB      r0,r9,#1
000074  ea5f0900          MOVS     r9,r0
000078  d1db              BNE      |L3.50|
00007a  e021              B        |L3.192|
                  |L3.124|
;;;430        } else {
;;;431          do {
00007c  bf00              NOP      
                  |L3.126|
;;;432            Shift = (3 - CurrentPixel) << 1;
00007e  f1c50003          RSB      r0,r5,#3
000082  0044              LSLS     r4,r0,#1
;;;433            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
000084  f1c40106          RSB      r1,r4,#6
000088  20c0              MOVS     r0,#0xc0
00008a  4108              ASRS     r0,r0,r1
00008c  ea00000b          AND      r0,r0,r11
000090  fa20f604          LSR      r6,r0,r4
;;;434            _SetPixelIndex(pDevice, x++, y, Index);
000094  4639              MOV      r1,r7
000096  1c7f              ADDS     r7,r7,#1
000098  4633              MOV      r3,r6
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  9801              LDR      r0,[sp,#4]
00009e  f7fffffe          BL       _SetPixelIndex
;;;435            if (++CurrentPixel == 4) {
0000a2  1c68              ADDS     r0,r5,#1
0000a4  4605              MOV      r5,r0
0000a6  2804              CMP      r0,#4
0000a8  d105              BNE      |L3.182|
;;;436              CurrentPixel = 0;
0000aa  2500              MOVS     r5,#0
;;;437              Pixels = *(++p);
0000ac  f1080001          ADD      r0,r8,#1
0000b0  4680              MOV      r8,r0
0000b2  f890b000          LDRB     r11,[r0,#0]
                  |L3.182|
;;;438            }
;;;439          } while (--xsize);
0000b6  f1a90001          SUB      r0,r9,#1
0000ba  ea5f0900          MOVS     r9,r0
0000be  d1de              BNE      |L3.126|
                  |L3.192|
;;;440        }
;;;441        break;
0000c0  e04d              B        |L3.350|
                  |L3.194|
;;;442      case LCD_DRAWMODE_TRANS:
;;;443        if (pTrans) {
0000c2  f1ba0f00          CMP      r10,#0
0000c6  d026              BEQ      |L3.278|
;;;444          do {
0000c8  bf00              NOP      
                  |L3.202|
;;;445            Shift = (3 - CurrentPixel) << 1;
0000ca  f1c50003          RSB      r0,r5,#3
0000ce  0044              LSLS     r4,r0,#1
;;;446            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
0000d0  f1c40106          RSB      r1,r4,#6
0000d4  20c0              MOVS     r0,#0xc0
0000d6  4108              ASRS     r0,r0,r1
0000d8  ea00000b          AND      r0,r0,r11
0000dc  fa20f604          LSR      r6,r0,r4
;;;447            if (Index) {
0000e0  b146              CBZ      r6,|L3.244|
;;;448              PixelIndex = *(pTrans + Index);
0000e2  f85a0026          LDR      r0,[r10,r6,LSL #2]
0000e6  9000              STR      r0,[sp,#0]
;;;449              _SetPixelIndex(pDevice, x, y, PixelIndex);
0000e8  4639              MOV      r1,r7
0000ea  e9dd3000          LDRD     r3,r0,[sp,#0]
0000ee  9a03              LDR      r2,[sp,#0xc]
0000f0  f7fffffe          BL       _SetPixelIndex
                  |L3.244|
;;;450            }
;;;451            x++;
0000f4  1c7f              ADDS     r7,r7,#1
;;;452            if (++CurrentPixel == 4) {
0000f6  1c68              ADDS     r0,r5,#1
0000f8  4605              MOV      r5,r0
0000fa  2804              CMP      r0,#4
0000fc  d105              BNE      |L3.266|
;;;453              CurrentPixel = 0;
0000fe  2500              MOVS     r5,#0
;;;454              Pixels = *(++p);
000100  f1080001          ADD      r0,r8,#1
000104  4680              MOV      r8,r0
000106  f890b000          LDRB     r11,[r0,#0]
                  |L3.266|
;;;455            }
;;;456          } while (--xsize);
00010a  f1a90001          SUB      r0,r9,#1
00010e  ea5f0900          MOVS     r9,r0
000112  d1da              BNE      |L3.202|
000114  e022              B        |L3.348|
                  |L3.278|
;;;457        } else {
;;;458          do {
000116  bf00              NOP      
                  |L3.280|
;;;459            Shift = (3 - CurrentPixel) << 1;
000118  f1c50003          RSB      r0,r5,#3
00011c  0044              LSLS     r4,r0,#1
;;;460            Index = (Pixels & (0xC0 >> (6 - Shift))) >> Shift;
00011e  f1c40106          RSB      r1,r4,#6
000122  20c0              MOVS     r0,#0xc0
000124  4108              ASRS     r0,r0,r1
000126  ea00000b          AND      r0,r0,r11
00012a  fa20f604          LSR      r6,r0,r4
;;;461            if (Index) {
00012e  b12e              CBZ      r6,|L3.316|
;;;462              _SetPixelIndex(pDevice, x, y, Index);
000130  4633              MOV      r3,r6
000132  4639              MOV      r1,r7
000134  9a03              LDR      r2,[sp,#0xc]
000136  9801              LDR      r0,[sp,#4]
000138  f7fffffe          BL       _SetPixelIndex
                  |L3.316|
;;;463            }
;;;464            x++;
00013c  1c7f              ADDS     r7,r7,#1
;;;465            if (++CurrentPixel == 4) {
00013e  1c68              ADDS     r0,r5,#1
000140  4605              MOV      r5,r0
000142  2804              CMP      r0,#4
000144  d105              BNE      |L3.338|
;;;466              CurrentPixel = 0;
000146  2500              MOVS     r5,#0
;;;467              Pixels = *(++p);
000148  f1080001          ADD      r0,r8,#1
00014c  4680              MOV      r8,r0
00014e  f890b000          LDRB     r11,[r0,#0]
                  |L3.338|
;;;468            }
;;;469          } while (--xsize);
000152  f1a90001          SUB      r0,r9,#1
000156  ea5f0900          MOVS     r9,r0
00015a  d1dd              BNE      |L3.280|
                  |L3.348|
;;;470        }
;;;471        break;
00015c  bf00              NOP      
                  |L3.350|
00015e  bf00              NOP                            ;441
;;;472      }
;;;473    }
000160  b005              ADD      sp,sp,#0x14
000162  e8bd8ff0          POP      {r4-r11,pc}
;;;474    
                          ENDP

000166  0000              DCW      0x0000
                  |L3.360|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine32BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine32BPP PROC
;;;617    */
;;;618    static void _DrawBitLine32BPP(GUI_DEVICE * pDevice, int x, int y, U32 const * p, int xsize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
00000c  9e06              LDR      r6,[sp,#0x18]
;;;619    #if emWin_Optimize
;;;620    	if (g_ChipID == IC_8875)
00000e  4809              LDR      r0,|L4.52|
000010  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000012  2875              CMP      r0,#0x75
000014  d106              BNE      |L4.36|
;;;621    	{
;;;622    		 RA8875_DrawHColorLine(x, y, xsize, (uint16_t *)p);
000016  b2b2              UXTH     r2,r6
000018  b2a9              UXTH     r1,r5
00001a  b2a0              UXTH     r0,r4
00001c  463b              MOV      r3,r7
00001e  f7fffffe          BL       RA8875_DrawHColorLine
000022  e005              B        |L4.48|
                  |L4.36|
;;;623    	}
;;;624    	else
;;;625    	{
;;;626    		ILI9488_DrawHColorLine(x, y, xsize, (uint16_t *)p);
000024  b2b2              UXTH     r2,r6
000026  b2a9              UXTH     r1,r5
000028  b2a0              UXTH     r0,r4
00002a  463b              MOV      r3,r7
00002c  f7fffffe          BL       ILI9488_DrawHColorLine
                  |L4.48|
;;;627    	}
;;;628    #else
;;;629    	for (;xsize > 0; xsize--, x++, p++) 
;;;630    	{
;;;631    		_SetPixelIndex(pDevice, x, y, *p);
;;;632    	}
;;;633    #endif
;;;634    }
000030  e8bd81f0          POP      {r4-r8,pc}
;;;635    
                          ENDP

                  |L4.52|
                          DCD      g_ChipID

                          AREA ||i._DrawBitLine4BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine4BPP PROC
;;;478    */
;;;479    static void  _DrawBitLine4BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int Diff, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d4fff          PUSH     {r0-r11,lr}
000004  b081              SUB      sp,sp,#4
000006  460f              MOV      r7,r1
000008  4698              MOV      r8,r3
00000a  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
;;;480      LCD_PIXELINDEX Pixels, PixelIndex;
;;;481      int CurrentPixel, Shift, Index;
;;;482    
;;;483      Pixels = *p;
00000e  f898b000          LDRB     r11,[r8,#0]
;;;484      CurrentPixel = Diff;
000012  9d0e              LDR      r5,[sp,#0x38]
;;;485      x += Diff;
000014  9d0e              LDR      r5,[sp,#0x38]
000016  442f              ADD      r7,r7,r5
;;;486      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000018  4853              LDR      r0,|L5.360|
00001a  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00001c  7c00              LDRB     r0,[r0,#0x10]
00001e  f0000003          AND      r0,r0,#3
000022  b110              CBZ      r0,|L5.42|
000024  2802              CMP      r0,#2
000026  d14b              BNE      |L5.192|
000028  e04b              B        |L5.194|
                  |L5.42|
;;;487      case 0:
;;;488        if (pTrans) {
00002a  f1ba0f00          CMP      r10,#0
00002e  d025              BEQ      |L5.124|
;;;489          do {
000030  bf00              NOP      
                  |L5.50|
;;;490            Shift = (1 - CurrentPixel) << 2;
000032  f1c50001          RSB      r0,r5,#1
000036  0084              LSLS     r4,r0,#2
;;;491            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000038  f1c40104          RSB      r1,r4,#4
00003c  20f0              MOVS     r0,#0xf0
00003e  4108              ASRS     r0,r0,r1
000040  ea00000b          AND      r0,r0,r11
000044  fa20f604          LSR      r6,r0,r4
;;;492            PixelIndex = *(pTrans + Index);
000048  f85a0026          LDR      r0,[r10,r6,LSL #2]
00004c  9000              STR      r0,[sp,#0]
;;;493            _SetPixelIndex(pDevice, x++, y, PixelIndex);
00004e  4639              MOV      r1,r7
000050  1c7f              ADDS     r7,r7,#1
000052  e9dd3000          LDRD     r3,r0,[sp,#0]
000056  9a03              LDR      r2,[sp,#0xc]
000058  f7fffffe          BL       _SetPixelIndex
;;;494            if (++CurrentPixel == 2) {
00005c  1c68              ADDS     r0,r5,#1
00005e  4605              MOV      r5,r0
000060  2802              CMP      r0,#2
000062  d105              BNE      |L5.112|
;;;495              CurrentPixel = 0;
000064  2500              MOVS     r5,#0
;;;496              Pixels = *(++p);
000066  f1080001          ADD      r0,r8,#1
00006a  4680              MOV      r8,r0
00006c  f890b000          LDRB     r11,[r0,#0]
                  |L5.112|
;;;497            }
;;;498          } while (--xsize);
000070  f1a90001          SUB      r0,r9,#1
000074  ea5f0900          MOVS     r9,r0
000078  d1db              BNE      |L5.50|
00007a  e021              B        |L5.192|
                  |L5.124|
;;;499        } else {
;;;500          do {
00007c  bf00              NOP      
                  |L5.126|
;;;501            Shift = (1 - CurrentPixel) << 2;
00007e  f1c50001          RSB      r0,r5,#1
000082  0084              LSLS     r4,r0,#2
;;;502            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
000084  f1c40104          RSB      r1,r4,#4
000088  20f0              MOVS     r0,#0xf0
00008a  4108              ASRS     r0,r0,r1
00008c  ea00000b          AND      r0,r0,r11
000090  fa20f604          LSR      r6,r0,r4
;;;503            _SetPixelIndex(pDevice, x++, y, Index);
000094  4639              MOV      r1,r7
000096  1c7f              ADDS     r7,r7,#1
000098  4633              MOV      r3,r6
00009a  9a03              LDR      r2,[sp,#0xc]
00009c  9801              LDR      r0,[sp,#4]
00009e  f7fffffe          BL       _SetPixelIndex
;;;504            if (++CurrentPixel == 2) {
0000a2  1c68              ADDS     r0,r5,#1
0000a4  4605              MOV      r5,r0
0000a6  2802              CMP      r0,#2
0000a8  d105              BNE      |L5.182|
;;;505              CurrentPixel = 0;
0000aa  2500              MOVS     r5,#0
;;;506              Pixels = *(++p);
0000ac  f1080001          ADD      r0,r8,#1
0000b0  4680              MOV      r8,r0
0000b2  f890b000          LDRB     r11,[r0,#0]
                  |L5.182|
;;;507            }
;;;508          } while (--xsize);
0000b6  f1a90001          SUB      r0,r9,#1
0000ba  ea5f0900          MOVS     r9,r0
0000be  d1de              BNE      |L5.126|
                  |L5.192|
;;;509        }
;;;510        break;
0000c0  e04d              B        |L5.350|
                  |L5.194|
;;;511      case LCD_DRAWMODE_TRANS:
;;;512        if (pTrans) {
0000c2  f1ba0f00          CMP      r10,#0
0000c6  d026              BEQ      |L5.278|
;;;513          do {
0000c8  bf00              NOP      
                  |L5.202|
;;;514            Shift = (1 - CurrentPixel) << 2;
0000ca  f1c50001          RSB      r0,r5,#1
0000ce  0084              LSLS     r4,r0,#2
;;;515            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
0000d0  f1c40104          RSB      r1,r4,#4
0000d4  20f0              MOVS     r0,#0xf0
0000d6  4108              ASRS     r0,r0,r1
0000d8  ea00000b          AND      r0,r0,r11
0000dc  fa20f604          LSR      r6,r0,r4
;;;516            if (Index) {
0000e0  b146              CBZ      r6,|L5.244|
;;;517              PixelIndex = *(pTrans + Index);
0000e2  f85a0026          LDR      r0,[r10,r6,LSL #2]
0000e6  9000              STR      r0,[sp,#0]
;;;518              _SetPixelIndex(pDevice, x, y, PixelIndex);
0000e8  4639              MOV      r1,r7
0000ea  e9dd3000          LDRD     r3,r0,[sp,#0]
0000ee  9a03              LDR      r2,[sp,#0xc]
0000f0  f7fffffe          BL       _SetPixelIndex
                  |L5.244|
;;;519            }
;;;520            x++;
0000f4  1c7f              ADDS     r7,r7,#1
;;;521            if (++CurrentPixel == 2) {
0000f6  1c68              ADDS     r0,r5,#1
0000f8  4605              MOV      r5,r0
0000fa  2802              CMP      r0,#2
0000fc  d105              BNE      |L5.266|
;;;522              CurrentPixel = 0;
0000fe  2500              MOVS     r5,#0
;;;523              Pixels = *(++p);
000100  f1080001          ADD      r0,r8,#1
000104  4680              MOV      r8,r0
000106  f890b000          LDRB     r11,[r0,#0]
                  |L5.266|
;;;524            }
;;;525          } while (--xsize);
00010a  f1a90001          SUB      r0,r9,#1
00010e  ea5f0900          MOVS     r9,r0
000112  d1da              BNE      |L5.202|
000114  e022              B        |L5.348|
                  |L5.278|
;;;526        } else {
;;;527          do {
000116  bf00              NOP      
                  |L5.280|
;;;528            Shift = (1 - CurrentPixel) << 2;
000118  f1c50001          RSB      r0,r5,#1
00011c  0084              LSLS     r4,r0,#2
;;;529            Index = (Pixels & (0xF0 >> (4 - Shift))) >> Shift;
00011e  f1c40104          RSB      r1,r4,#4
000122  20f0              MOVS     r0,#0xf0
000124  4108              ASRS     r0,r0,r1
000126  ea00000b          AND      r0,r0,r11
00012a  fa20f604          LSR      r6,r0,r4
;;;530            if (Index) {
00012e  b12e              CBZ      r6,|L5.316|
;;;531              _SetPixelIndex(pDevice, x, y, Index);
000130  4633              MOV      r3,r6
000132  4639              MOV      r1,r7
000134  9a03              LDR      r2,[sp,#0xc]
000136  9801              LDR      r0,[sp,#4]
000138  f7fffffe          BL       _SetPixelIndex
                  |L5.316|
;;;532            }
;;;533            x++;
00013c  1c7f              ADDS     r7,r7,#1
;;;534            if (++CurrentPixel == 2) {
00013e  1c68              ADDS     r0,r5,#1
000140  4605              MOV      r5,r0
000142  2802              CMP      r0,#2
000144  d105              BNE      |L5.338|
;;;535              CurrentPixel = 0;
000146  2500              MOVS     r5,#0
;;;536              Pixels = *(++p);
000148  f1080001          ADD      r0,r8,#1
00014c  4680              MOV      r8,r0
00014e  f890b000          LDRB     r11,[r0,#0]
                  |L5.338|
;;;537            }
;;;538          } while (--xsize);
000152  f1a90001          SUB      r0,r9,#1
000156  ea5f0900          MOVS     r9,r0
00015a  d1dd              BNE      |L5.280|
                  |L5.348|
;;;539        }
;;;540        break;
00015c  bf00              NOP      
                  |L5.350|
00015e  bf00              NOP                            ;510
;;;541      }
;;;542    }
000160  b005              ADD      sp,sp,#0x14
000162  e8bd8ff0          POP      {r4-r11,pc}
;;;543    
                          ENDP

000166  0000              DCW      0x0000
                  |L5.360|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitLine8BPP||, CODE, READONLY, ALIGN=2

                  _DrawBitLine8BPP PROC
;;;547    */
;;;548    static void  _DrawBitLine8BPP(GUI_DEVICE * pDevice, int x, int y, U8 const * p, int xsize, const LCD_PIXELINDEX * pTrans) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4681              MOV      r9,r0
000006  460f              MOV      r7,r1
000008  4692              MOV      r10,r2
00000a  461c              MOV      r4,r3
00000c  e9dd5808          LDRD     r5,r8,[sp,#0x20]
;;;549      LCD_PIXELINDEX Pixel;
;;;550    
;;;551      switch (GUI_pContext->DrawMode & (LCD_DRAWMODE_TRANS | LCD_DRAWMODE_XOR)) {
000010  4826              LDR      r0,|L6.172|
000012  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000014  7c00              LDRB     r0,[r0,#0x10]
000016  f0000003          AND      r0,r0,#3
00001a  b110              CBZ      r0,|L6.34|
00001c  2802              CMP      r0,#2
00001e  d141              BNE      |L6.164|
000020  e01e              B        |L6.96|
                  |L6.34|
;;;552      case 0:
;;;553        if (pTrans) {
000022  f1b80f00          CMP      r8,#0
000026  d00e              BEQ      |L6.70|
;;;554          for (; xsize > 0; xsize--, x++, p++) {
000028  e00a              B        |L6.64|
                  |L6.42|
;;;555            Pixel = *p;
00002a  7826              LDRB     r6,[r4,#0]
;;;556            _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
00002c  f8583026          LDR      r3,[r8,r6,LSL #2]
000030  4652              MOV      r2,r10
000032  4639              MOV      r1,r7
000034  4648              MOV      r0,r9
000036  f7fffffe          BL       _SetPixelIndex
00003a  1e6d              SUBS     r5,r5,#1              ;554
00003c  1c7f              ADDS     r7,r7,#1              ;554
00003e  1c64              ADDS     r4,r4,#1              ;554
                  |L6.64|
000040  2d00              CMP      r5,#0                 ;554
000042  dcf2              BGT      |L6.42|
000044  e00b              B        |L6.94|
                  |L6.70|
;;;557          }
;;;558        } else {
;;;559          for (; xsize > 0; xsize--, x++, p++) {
000046  e008              B        |L6.90|
                  |L6.72|
;;;560            _SetPixelIndex(pDevice, x, y, *p);
000048  7823              LDRB     r3,[r4,#0]
00004a  4652              MOV      r2,r10
00004c  4639              MOV      r1,r7
00004e  4648              MOV      r0,r9
000050  f7fffffe          BL       _SetPixelIndex
000054  1e6d              SUBS     r5,r5,#1              ;559
000056  1c7f              ADDS     r7,r7,#1              ;559
000058  1c64              ADDS     r4,r4,#1              ;559
                  |L6.90|
00005a  2d00              CMP      r5,#0                 ;559
00005c  dcf4              BGT      |L6.72|
                  |L6.94|
;;;561          }
;;;562        }
;;;563        break;
00005e  e021              B        |L6.164|
                  |L6.96|
;;;564      case LCD_DRAWMODE_TRANS:
;;;565        if (pTrans) {
000060  f1b80f00          CMP      r8,#0
000064  d00f              BEQ      |L6.134|
;;;566          for (; xsize > 0; xsize--, x++, p++) {
000066  e00b              B        |L6.128|
                  |L6.104|
;;;567            Pixel = *p;
000068  7826              LDRB     r6,[r4,#0]
;;;568            if (Pixel) {
00006a  b136              CBZ      r6,|L6.122|
;;;569              _SetPixelIndex(pDevice, x, y, *(pTrans + Pixel));
00006c  f8583026          LDR      r3,[r8,r6,LSL #2]
000070  4652              MOV      r2,r10
000072  4639              MOV      r1,r7
000074  4648              MOV      r0,r9
000076  f7fffffe          BL       _SetPixelIndex
                  |L6.122|
00007a  1e6d              SUBS     r5,r5,#1              ;566
00007c  1c7f              ADDS     r7,r7,#1              ;566
00007e  1c64              ADDS     r4,r4,#1              ;566
                  |L6.128|
000080  2d00              CMP      r5,#0                 ;566
000082  dcf1              BGT      |L6.104|
000084  e00d              B        |L6.162|
                  |L6.134|
;;;570            }
;;;571          }
;;;572        } else {
;;;573          for (; xsize > 0; xsize--, x++, p++) {
000086  e00a              B        |L6.158|
                  |L6.136|
;;;574            Pixel = *p;
000088  7826              LDRB     r6,[r4,#0]
;;;575            if (Pixel) {
00008a  b12e              CBZ      r6,|L6.152|
;;;576              _SetPixelIndex(pDevice, x, y, Pixel);
00008c  4633              MOV      r3,r6
00008e  4652              MOV      r2,r10
000090  4639              MOV      r1,r7
000092  4648              MOV      r0,r9
000094  f7fffffe          BL       _SetPixelIndex
                  |L6.152|
000098  1e6d              SUBS     r5,r5,#1              ;573
00009a  1c7f              ADDS     r7,r7,#1              ;573
00009c  1c64              ADDS     r4,r4,#1              ;573
                  |L6.158|
00009e  2d00              CMP      r5,#0                 ;573
0000a0  dcf2              BGT      |L6.136|
                  |L6.162|
;;;577            }
;;;578          }
;;;579        }
;;;580        break;
0000a2  bf00              NOP      
                  |L6.164|
0000a4  bf00              NOP                            ;563
;;;581      }
;;;582    }
0000a6  e8bd87f0          POP      {r4-r10,pc}
;;;583    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L6.172|
                          DCD      GUI_pContext

                          AREA ||i._DrawBitmap||, CODE, READONLY, ALIGN=1

                  _DrawBitmap PROC
;;;639    */
;;;640    static void _DrawBitmap(GUI_DEVICE * pDevice, int x0, int y0,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;641                           int xSize, int ySize,
;;;642                           int BitsPerPixel, 
;;;643                           int BytesPerLine,
;;;644                           const U8 * pData, int Diff,
;;;645                           const LCD_PIXELINDEX * pTrans) {
000004  b083              SUB      sp,sp,#0xc
000006  4615              MOV      r5,r2
000008  461e              MOV      r6,r3
00000a  e9ddba14          LDRD     r11,r10,[sp,#0x50]
00000e  e9dd9712          LDRD     r9,r7,[sp,#0x48]
000012  f8dd8040          LDR      r8,[sp,#0x40]
;;;646      int i;
;;;647    
;;;648      switch (BitsPerPixel) {
000016  9811              LDR      r0,[sp,#0x44]
000018  2808              CMP      r0,#8
00001a  d03f              BEQ      |L7.156|
00001c  dc06              BGT      |L7.44|
00001e  2801              CMP      r0,#1
000020  d009              BEQ      |L7.54|
000022  2802              CMP      r0,#2
000024  d018              BEQ      |L7.88|
000026  2804              CMP      r0,#4
000028  d163              BNE      |L7.242|
00002a  e026              B        |L7.122|
                  |L7.44|
00002c  2810              CMP      r0,#0x10
00002e  d044              BEQ      |L7.186|
000030  2820              CMP      r0,#0x20
000032  d15e              BNE      |L7.242|
000034  e04f              B        |L7.214|
                  |L7.54|
;;;649      case 1:
;;;650        for (i = 0; i < ySize; i++) {
000036  2400              MOVS     r4,#0
000038  e00b              B        |L7.82|
                  |L7.58|
;;;651          _DrawBitLine1BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
00003a  1962              ADDS     r2,r4,r5
00003c  463b              MOV      r3,r7
00003e  e9cdb600          STRD     r11,r6,[sp,#0]
000042  f8cda008          STR      r10,[sp,#8]
000046  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00004a  f7fffffe          BL       _DrawBitLine1BPP
;;;652          pData += BytesPerLine;
00004e  444f              ADD      r7,r7,r9
000050  1c64              ADDS     r4,r4,#1              ;650
                  |L7.82|
000052  4544              CMP      r4,r8                 ;650
000054  dbf1              BLT      |L7.58|
;;;653        }
;;;654        break;
000056  e04c              B        |L7.242|
                  |L7.88|
;;;655      case 2:
;;;656        for (i = 0; i < ySize; i++) {
000058  2400              MOVS     r4,#0
00005a  e00b              B        |L7.116|
                  |L7.92|
;;;657          _DrawBitLine2BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
00005c  1962              ADDS     r2,r4,r5
00005e  463b              MOV      r3,r7
000060  e9cdb600          STRD     r11,r6,[sp,#0]
000064  f8cda008          STR      r10,[sp,#8]
000068  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00006c  f7fffffe          BL       _DrawBitLine2BPP
;;;658          pData += BytesPerLine;
000070  444f              ADD      r7,r7,r9
000072  1c64              ADDS     r4,r4,#1              ;656
                  |L7.116|
000074  4544              CMP      r4,r8                 ;656
000076  dbf1              BLT      |L7.92|
;;;659        }
;;;660        break;
000078  e03b              B        |L7.242|
                  |L7.122|
;;;661      case 4:
;;;662        for (i = 0; i < ySize; i++) {
00007a  2400              MOVS     r4,#0
00007c  e00b              B        |L7.150|
                  |L7.126|
;;;663          _DrawBitLine4BPP(pDevice, x0, i + y0, pData, Diff, xSize, pTrans);
00007e  1962              ADDS     r2,r4,r5
000080  463b              MOV      r3,r7
000082  e9cdb600          STRD     r11,r6,[sp,#0]
000086  f8cda008          STR      r10,[sp,#8]
00008a  e9dd0103          LDRD     r0,r1,[sp,#0xc]
00008e  f7fffffe          BL       _DrawBitLine4BPP
;;;664          pData += BytesPerLine;
000092  444f              ADD      r7,r7,r9
000094  1c64              ADDS     r4,r4,#1              ;662
                  |L7.150|
000096  4544              CMP      r4,r8                 ;662
000098  dbf1              BLT      |L7.126|
;;;665        }
;;;666        break;
00009a  e02a              B        |L7.242|
                  |L7.156|
;;;667      case 8:
;;;668        for (i = 0; i < ySize; i++) {
00009c  2400              MOVS     r4,#0
00009e  e009              B        |L7.180|
                  |L7.160|
;;;669          _DrawBitLine8BPP(pDevice, x0, i + y0, pData, xSize, pTrans);
0000a0  1962              ADDS     r2,r4,r5
0000a2  463b              MOV      r3,r7
0000a4  e9cd6a00          STRD     r6,r10,[sp,#0]
0000a8  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000ac  f7fffffe          BL       _DrawBitLine8BPP
;;;670          pData += BytesPerLine;
0000b0  444f              ADD      r7,r7,r9
0000b2  1c64              ADDS     r4,r4,#1              ;668
                  |L7.180|
0000b4  4544              CMP      r4,r8                 ;668
0000b6  dbf3              BLT      |L7.160|
;;;671        }
;;;672        break;
0000b8  e01b              B        |L7.242|
                  |L7.186|
;;;673      //
;;;674      // Only required for 16bpp color depth of target. Should be removed otherwise.
;;;675      //
;;;676      case 16:
;;;677        for (i = 0; i < ySize; i++) {
0000ba  2400              MOVS     r4,#0
0000bc  e008              B        |L7.208|
                  |L7.190|
;;;678          _DrawBitLine16BPP(pDevice, x0, i + y0, (const U16 *)pData, xSize);
0000be  1962              ADDS     r2,r4,r5
0000c0  463b              MOV      r3,r7
0000c2  9600              STR      r6,[sp,#0]
0000c4  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000c8  f7fffffe          BL       _DrawBitLine16BPP
;;;679          pData += BytesPerLine;
0000cc  444f              ADD      r7,r7,r9
0000ce  1c64              ADDS     r4,r4,#1              ;677
                  |L7.208|
0000d0  4544              CMP      r4,r8                 ;677
0000d2  dbf4              BLT      |L7.190|
;;;680        }
;;;681        break;
0000d4  e00d              B        |L7.242|
                  |L7.214|
;;;682      //
;;;683      // Only required for 32bpp color depth of target. Should be removed otherwise.
;;;684      //
;;;685      case 32:
;;;686        for (i = 0; i < ySize; i++) {
0000d6  2400              MOVS     r4,#0
0000d8  e008              B        |L7.236|
                  |L7.218|
;;;687          _DrawBitLine32BPP(pDevice, x0, i + y0, (const U32 *)pData, xSize);
0000da  1962              ADDS     r2,r4,r5
0000dc  463b              MOV      r3,r7
0000de  9600              STR      r6,[sp,#0]
0000e0  e9dd0103          LDRD     r0,r1,[sp,#0xc]
0000e4  f7fffffe          BL       _DrawBitLine32BPP
;;;688          pData += BytesPerLine;
0000e8  444f              ADD      r7,r7,r9
0000ea  1c64              ADDS     r4,r4,#1              ;686
                  |L7.236|
0000ec  4544              CMP      r4,r8                 ;686
0000ee  dbf4              BLT      |L7.218|
;;;689        }
;;;690        break;
0000f0  bf00              NOP      
                  |L7.242|
0000f2  bf00              NOP                            ;654
;;;691      }
;;;692    }
0000f4  b007              ADD      sp,sp,#0x1c
0000f6  e8bd8ff0          POP      {r4-r11,pc}
;;;693    
                          ENDP


                          AREA ||i._DrawHLine||, CODE, READONLY, ALIGN=2

                  _DrawHLine PROC
;;;255    */
;;;256    static void _DrawHLine  (GUI_DEVICE * pDevice, int x0, int y,  int x1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460c              MOV      r4,r1
000008  4616              MOV      r6,r2
00000a  461d              MOV      r5,r3
;;;257      LCD_PIXELINDEX ColorIndex;
;;;258    	
;;;259      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
00000c  4813              LDR      r0,|L8.92|
00000e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000010  7c00              LDRB     r0,[r0,#0x10]
000012  f0000001          AND      r0,r0,#1
000016  b148              CBZ      r0,|L8.44|
;;;260        for (; x0 <= x1; x0++) {
000018  e005              B        |L8.38|
                  |L8.26|
;;;261          _XorPixel(pDevice, x0, y);
00001a  4632              MOV      r2,r6
00001c  4621              MOV      r1,r4
00001e  4640              MOV      r0,r8
000020  f7fffffe          BL       _XorPixel
000024  1c64              ADDS     r4,r4,#1              ;260
                  |L8.38|
000026  42ac              CMP      r4,r5                 ;260
000028  ddf7              BLE      |L8.26|
00002a  e014              B        |L8.86|
                  |L8.44|
;;;262        }
;;;263      } else {
;;;264    	  #if emWin_Optimize
;;;265    		ColorIndex = LCD__GetColorIndex();
00002c  480b              LDR      r0,|L8.92|
00002e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  6807              LDR      r7,[r0,#0]
;;;266            if (g_ChipID == IC_8875)
000034  480a              LDR      r0,|L8.96|
000036  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000038  2875              CMP      r0,#0x75
00003a  d106              BNE      |L8.74|
;;;267    		{
;;;268    			 RA8875_DrawHLine( x0, y, x1, ColorIndex);
00003c  b2bb              UXTH     r3,r7
00003e  b2aa              UXTH     r2,r5
000040  b2b1              UXTH     r1,r6
000042  b2a0              UXTH     r0,r4
000044  f7fffffe          BL       RA8875_DrawHLine
000048  e005              B        |L8.86|
                  |L8.74|
;;;269    		}
;;;270    		else
;;;271    		{
;;;272    			ILI9488_DrawHLine(x0, y, x1, ColorIndex);
00004a  b2bb              UXTH     r3,r7
00004c  b2aa              UXTH     r2,r5
00004e  b2b1              UXTH     r1,r6
000050  b2a0              UXTH     r0,r4
000052  f7fffffe          BL       ILI9488_DrawHLine
                  |L8.86|
;;;273    		}
;;;274    	  #else
;;;275    		ColorIndex = LCD__GetColorIndex();
;;;276    		for (; x0 <= x1; x0++) {
;;;277    		  _SetPixelIndex(pDevice, x0, y, ColorIndex);
;;;278    	  
;;;279    		}
;;;280    	  #endif
;;;281        }
;;;282    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;283    
                          ENDP

00005a  0000              DCW      0x0000
                  |L8.92|
                          DCD      GUI_pContext
                  |L8.96|
                          DCD      g_ChipID

                          AREA ||i._DrawVLine||, CODE, READONLY, ALIGN=2

                  _DrawVLine PROC
;;;287    */
;;;288    static void _DrawVLine  (GUI_DEVICE * pDevice, int x, int y0,  int y1) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4680              MOV      r8,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;289      LCD_PIXELINDEX ColorIndex;
;;;290      if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) {
00000c  4813              LDR      r0,|L9.92|
00000e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000010  7c00              LDRB     r0,[r0,#0x10]
000012  f0000001          AND      r0,r0,#1
000016  b148              CBZ      r0,|L9.44|
;;;291        for (; y0 <= y1; y0++) {
000018  e005              B        |L9.38|
                  |L9.26|
;;;292          _XorPixel(pDevice, x, y0);
00001a  4622              MOV      r2,r4
00001c  4631              MOV      r1,r6
00001e  4640              MOV      r0,r8
000020  f7fffffe          BL       _XorPixel
000024  1c64              ADDS     r4,r4,#1              ;291
                  |L9.38|
000026  42ac              CMP      r4,r5                 ;291
000028  ddf7              BLE      |L9.26|
00002a  e014              B        |L9.86|
                  |L9.44|
;;;293        }
;;;294      } else {
;;;295        #if emWin_Optimize
;;;296    		ColorIndex = LCD__GetColorIndex();
00002c  480b              LDR      r0,|L9.92|
00002e  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000030  6bc0              LDR      r0,[r0,#0x3c]
000032  6807              LDR      r7,[r0,#0]
;;;297    	  
;;;298    		if (g_ChipID == IC_8875)
000034  480a              LDR      r0,|L9.96|
000036  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000038  2875              CMP      r0,#0x75
00003a  d106              BNE      |L9.74|
;;;299    		{
;;;300    			 RA8875_DrawVLine(x, y0, y1, ColorIndex);
00003c  b2bb              UXTH     r3,r7
00003e  b2aa              UXTH     r2,r5
000040  b2a1              UXTH     r1,r4
000042  b2b0              UXTH     r0,r6
000044  f7fffffe          BL       RA8875_DrawVLine
000048  e005              B        |L9.86|
                  |L9.74|
;;;301    		}
;;;302    		else
;;;303    		{
;;;304    			ILI9488_DrawVLine(x, y0, y1, ColorIndex);
00004a  b2bb              UXTH     r3,r7
00004c  b2aa              UXTH     r2,r5
00004e  b2a1              UXTH     r1,r4
000050  b2b0              UXTH     r0,r6
000052  f7fffffe          BL       ILI9488_DrawVLine
                  |L9.86|
;;;305    		}
;;;306    	#else
;;;307    		ColorIndex = LCD__GetColorIndex();
;;;308    	    for (; y0 <= y1; y0++) {
;;;309    	      _SetPixelIndex(pDevice, x, y0, ColorIndex);
;;;310    	    }
;;;311    	#endif
;;;312      }
;;;313    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;314    
                          ENDP

00005a  0000              DCW      0x0000
                  |L9.92|
                          DCD      GUI_pContext
                  |L9.96|
                          DCD      g_ChipID

                          AREA ||i._FillRect||, CODE, READONLY, ALIGN=2

                  _FillRect PROC
;;;318    */
;;;319    static void _FillRect(GUI_DEVICE * pDevice, int x0, int y0, int x1, int y1) {
000000  e92d4ff8          PUSH     {r3-r11,lr}
000004  4682              MOV      r10,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  461e              MOV      r6,r3
00000c  9f0a              LDR      r7,[sp,#0x28]
;;;320        LCD_PIXELINDEX ColorIndex;
;;;321    	int x;
;;;322    	
;;;323    	if (GUI_pContext->DrawMode & LCD_DRAWMODE_XOR) 
00000e  481f              LDR      r0,|L10.140|
000010  6800              LDR      r0,[r0,#0]  ; GUI_pContext
000012  7c00              LDRB     r0,[r0,#0x10]
000014  f0000001          AND      r0,r0,#1
000018  b178              CBZ      r0,|L10.58|
;;;324    	{
;;;325    		for (; y0 <= y1; y0++) 
00001a  e00b              B        |L10.52|
                  |L10.28|
;;;326    		{
;;;327    			for (x = x0; x <= x1; x++) 
00001c  46a9              MOV      r9,r5
00001e  e006              B        |L10.46|
                  |L10.32|
;;;328    			{
;;;329    				_XorPixel(pDevice, x, y0);
000020  4622              MOV      r2,r4
000022  4649              MOV      r1,r9
000024  4650              MOV      r0,r10
000026  f7fffffe          BL       _XorPixel
00002a  f1090901          ADD      r9,r9,#1              ;327
                  |L10.46|
00002e  45b1              CMP      r9,r6                 ;327
000030  ddf6              BLE      |L10.32|
000032  1c64              ADDS     r4,r4,#1              ;325
                  |L10.52|
000034  42bc              CMP      r4,r7                 ;325
000036  ddf1              BLE      |L10.28|
000038  e025              B        |L10.134|
                  |L10.58|
;;;330    			}
;;;331    		}
;;;332    	} 
;;;333    	else
;;;334    	{
;;;335    	  /* 选择进行优化 */
;;;336    	#if emWin_Optimize
;;;337    		ColorIndex = LCD__GetColorIndex();
00003a  4814              LDR      r0,|L10.140|
00003c  6800              LDR      r0,[r0,#0]  ; GUI_pContext
00003e  6bc0              LDR      r0,[r0,#0x3c]
000040  f8d08000          LDR      r8,[r0,#0]
;;;338    		if (g_ChipID == IC_8875)
000044  4812              LDR      r0,|L10.144|
000046  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000048  2875              CMP      r0,#0x75
00004a  d109              BNE      |L10.96|
;;;339    		{
;;;340    			RA8875_RTERect( x0,  y0,  x1,  y1,  ColorIndex); 
00004c  fa1ff088          UXTH     r0,r8
000050  b2bb              UXTH     r3,r7
000052  b2b2              UXTH     r2,r6
000054  b2a1              UXTH     r1,r4
000056  9000              STR      r0,[sp,#0]
000058  b2a8              UXTH     r0,r5
00005a  f7fffffe          BL       RA8875_RTERect
00005e  e012              B        |L10.134|
                  |L10.96|
;;;341    		}
;;;342    		else
;;;343    		{
;;;344    			ILI9488_FillRect(x0, y0, y1-y0+1, x1-x0+1, ColorIndex);
000060  fa1ff088          UXTH     r0,r8
000064  eba60c05          SUB      r12,r6,r5
000068  f10c0c01          ADD      r12,r12,#1
00006c  fa1ff38c          UXTH     r3,r12
000070  eba70c04          SUB      r12,r7,r4
000074  f10c0c01          ADD      r12,r12,#1
000078  fa1ff28c          UXTH     r2,r12
00007c  b2a1              UXTH     r1,r4
00007e  9000              STR      r0,[sp,#0]
000080  b2a8              UXTH     r0,r5
000082  f7fffffe          BL       ILI9488_FillRect
                  |L10.134|
;;;345    		}
;;;346    		
;;;347    	#else
;;;348    		for (; y0 <= y1; y0++) 
;;;349    		{
;;;350    			_DrawHLine(pDevice, x0, y0, x1);
;;;351    		}
;;;352    	#endif 
;;;353    	}
;;;354    }
000086  e8bd8ff8          POP      {r3-r11,pc}
;;;355    
                          ENDP

00008a  0000              DCW      0x0000
                  |L10.140|
                          DCD      GUI_pContext
                  |L10.144|
                          DCD      g_ChipID

                          AREA ||i._GetDevData||, CODE, READONLY, ALIGN=2

                  _GetDevData PROC
;;;753    */
;;;754    static void * _GetDevData(GUI_DEVICE * pDevice, int Index) {
000000  4602              MOV      r2,r0
;;;755      GUI_USE_PARA(pDevice);
;;;756      #if GUI_SUPPORT_MEMDEV
;;;757        switch (Index) {
000002  2901              CMP      r1,#1
000004  d101              BNE      |L11.10|
;;;758        case LCD_DEVDATA_MEMDEV:
;;;759          return (void *)&GUI_MEMDEV_DEVICE_16; // TBD: Has to be adapted to the right memory device depending on the used color depth!
000006  4802              LDR      r0,|L11.16|
                  |L11.8|
;;;760        }
;;;761      #else
;;;762        GUI_USE_PARA(Index);
;;;763      #endif
;;;764      return NULL;
;;;765    }
000008  4770              BX       lr
                  |L11.10|
00000a  2000              MOVS     r0,#0                 ;764
00000c  e7fc              B        |L11.8|
;;;766    
                          ENDP

00000e  0000              DCW      0x0000
                  |L11.16|
                          DCD      GUI_MEMDEV_DEVICE_16

                          AREA ||i._GetDevFunc||, CODE, READONLY, ALIGN=2

                  _GetDevFunc PROC
;;;894    */
;;;895    static void (* _GetDevFunc(GUI_DEVICE ** ppDevice, int Index))(void) {
000000  4602              MOV      r2,r0
;;;896      GUI_USE_PARA(ppDevice);
;;;897      switch (Index) {
000002  f1a10009          SUB      r0,r1,#9
000006  2808              CMP      r0,#8
000008  d213              BCS      |L12.50|
00000a  e8dff000          TBB      [pc,r0]
00000e  0406              DCB      0x04,0x06
000010  080a120c          DCB      0x08,0x0a,0x12,0x0c
000014  0e10              DCB      0x0e,0x10
;;;898      case LCD_DEVFUNC_SET_VRAM_ADDR:
;;;899        return (void (*)(void))_SetVRAMAddr;
000016  4808              LDR      r0,|L12.56|
                  |L12.24|
;;;900      case LCD_DEVFUNC_SET_VSIZE:
;;;901        return (void (*)(void))_SetVSize;
;;;902      case LCD_DEVFUNC_SET_SIZE:
;;;903        return (void (*)(void))_SetSize;
;;;904      case LCD_DEVFUNC_INIT:
;;;905        return (void (*)(void))_Init;
;;;906      case LCD_DEVFUNC_ON:
;;;907        return (void (*)(void))_On;
;;;908      case LCD_DEVFUNC_OFF:
;;;909        return (void (*)(void))_Off;
;;;910      case LCD_DEVFUNC_SETLUTENTRY:
;;;911        return (void (*)(void))_SetLUTEntry;
;;;912      }
;;;913      return NULL;
;;;914    }
000018  4770              BX       lr
00001a  4808              LDR      r0,|L12.60|
00001c  e7fc              B        |L12.24|
00001e  4808              LDR      r0,|L12.64|
000020  e7fa              B        |L12.24|
000022  4808              LDR      r0,|L12.68|
000024  e7f8              B        |L12.24|
000026  4808              LDR      r0,|L12.72|
000028  e7f6              B        |L12.24|
00002a  4808              LDR      r0,|L12.76|
00002c  e7f4              B        |L12.24|
00002e  4808              LDR      r0,|L12.80|
000030  e7f2              B        |L12.24|
                  |L12.50|
000032  2000              MOVS     r0,#0                 ;913
000034  e7f0              B        |L12.24|
;;;915    
                          ENDP

000036  0000              DCW      0x0000
                  |L12.56|
                          DCD      _SetVRAMAddr
                  |L12.60|
                          DCD      _SetVSize
                  |L12.64|
                          DCD      _SetSize
                  |L12.68|
                          DCD      _Init
                  |L12.72|
                          DCD      _On
                  |L12.76|
                          DCD      _Off
                  |L12.80|
                          DCD      _SetLUTEntry

                          AREA ||i._GetDevProp||, CODE, READONLY, ALIGN=1

                  _GetDevProp PROC
;;;718    */
;;;719    static I32 _GetDevProp(GUI_DEVICE * pDevice, int Index) {
000000  4603              MOV      r3,r0
000002  460a              MOV      r2,r1
;;;720      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;721    
;;;722      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000004  6899              LDR      r1,[r3,#8]
;;;723      switch (Index) {
000006  2a0f              CMP      r2,#0xf
000008  d21f              BCS      |L13.74|
00000a  e8dff002          TBB      [pc,r2]
00000e  1e08              DCB      0x1e,0x08
000010  0a0c0e1e          DCB      0x0a,0x0c,0x0e,0x1e
000014  1e1e1012          DCB      0x1e,0x1e,0x10,0x12
000018  1416181a          DCB      0x14,0x16,0x18,0x1a
00001c  1c00              DCB      0x1c,0x00
;;;724      case LCD_DEVCAP_XSIZE:
;;;725        return pContext->xSize;
00001e  6848              LDR      r0,[r1,#4]
                  |L13.32|
;;;726      case LCD_DEVCAP_YSIZE:
;;;727        return pContext->ySize;
;;;728      case LCD_DEVCAP_VXSIZE:
;;;729        return pContext->vxSize;
;;;730      case LCD_DEVCAP_VYSIZE:
;;;731        return pContext->vySize;
;;;732      case LCD_DEVCAP_BITSPERPIXEL:
;;;733        return pContext->BitsPerPixel;
;;;734      case LCD_DEVCAP_NUMCOLORS:
;;;735        return 0;
;;;736      case LCD_DEVCAP_XMAG:
;;;737        return 1;
;;;738      case LCD_DEVCAP_YMAG:
;;;739        return 1;
;;;740      case LCD_DEVCAP_MIRROR_X:
;;;741        return 0;
;;;742      case LCD_DEVCAP_MIRROR_Y:
;;;743        return 0;
;;;744      case LCD_DEVCAP_SWAP_XY:
;;;745        return 0;
;;;746      }
;;;747      return -1;
;;;748    }
000020  4770              BX       lr
000022  6888              LDR      r0,[r1,#8]            ;727
000024  e7fc              B        |L13.32|
000026  68c8              LDR      r0,[r1,#0xc]          ;729
000028  e7fa              B        |L13.32|
00002a  6908              LDR      r0,[r1,#0x10]         ;731
00002c  e7f8              B        |L13.32|
00002e  6988              LDR      r0,[r1,#0x18]         ;733
000030  e7f6              B        |L13.32|
000032  2000              MOVS     r0,#0                 ;735
000034  e7f4              B        |L13.32|
000036  2001              MOVS     r0,#1                 ;737
000038  e7f2              B        |L13.32|
00003a  2001              MOVS     r0,#1                 ;739
00003c  e7f0              B        |L13.32|
00003e  2000              MOVS     r0,#0                 ;741
000040  e7ee              B        |L13.32|
000042  2000              MOVS     r0,#0                 ;743
000044  e7ec              B        |L13.32|
000046  2000              MOVS     r0,#0                 ;745
000048  e7ea              B        |L13.32|
                  |L13.74|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;747
00004e  e7e7              B        |L13.32|
;;;749    
                          ENDP


                          AREA ||i._GetPixelIndex||, CODE, READONLY, ALIGN=2

                  _GetPixelIndex PROC
;;;195    */
;;;196    static unsigned int _GetPixelIndex(GUI_DEVICE * pDevice, int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;197      unsigned int PixelIndex;
;;;198      #ifdef WIN32
;;;199        PixelIndex = LCDSIM_GetPixelIndex(x, y, pDevice->LayerIndex);
;;;200      #else
;;;201        //
;;;202        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;203        //
;;;204        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;205          int xPhys, yPhys;
;;;206    
;;;207          xPhys = LOG2PHYS_X(x, y);
;;;208          yPhys = LOG2PHYS_Y(x, y);
;;;209        #else
;;;210          #define xPhys x
;;;211          #define yPhys y
;;;212        #endif
;;;213        GUI_USE_PARA(pDevice);
;;;214        GUI_USE_PARA(x);
;;;215        GUI_USE_PARA(y);
;;;216        {
;;;217          //
;;;218          // Write into hardware ... Adapt to your system
;;;219          //
;;;220          // TBD by customer...
;;;221          //
;;;222    		if (g_ChipID == IC_8875)
00000a  480c              LDR      r0,|L14.60|
00000c  8800              LDRH     r0,[r0,#0]  ; g_ChipID
00000e  2875              CMP      r0,#0x75
000010  d105              BNE      |L14.30|
;;;223    		{
;;;224    			PixelIndex = RA8875_GetPixelGUI(xPhys, yPhys);
000012  b2a9              UXTH     r1,r5
000014  b2a0              UXTH     r0,r4
000016  f7fffffe          BL       RA8875_GetPixelGUI
00001a  4606              MOV      r6,r0
00001c  e00a              B        |L14.52|
                  |L14.30|
;;;225    		}
;;;226    		else if (g_ChipID == IC_9488)
00001e  4807              LDR      r0,|L14.60|
000020  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000022  f2494188          MOV      r1,#0x9488
000026  4288              CMP      r0,r1
000028  d104              BNE      |L14.52|
;;;227    		{
;;;228    			PixelIndex = ILI9488_GetPixel(xPhys, yPhys);
00002a  b2a9              UXTH     r1,r5
00002c  b2a0              UXTH     r0,r4
00002e  f7fffffe          BL       ILI9488_GetPixel
000032  4606              MOV      r6,r0
                  |L14.52|
;;;229    		}
;;;230        }
;;;231        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;232          #undef xPhys
;;;233          #undef yPhys
;;;234        #endif
;;;235      #endif
;;;236      return PixelIndex;
000034  4630              MOV      r0,r6
;;;237    }
000036  e8bd81f0          POP      {r4-r8,pc}
;;;238    
                          ENDP

00003a  0000              DCW      0x0000
                  |L14.60|
                          DCD      g_ChipID

                          AREA ||i._GetRect||, CODE, READONLY, ALIGN=1

                  _GetRect PROC
;;;770    */
;;;771    static void _GetRect(GUI_DEVICE * pDevice, LCD_RECT * pRect) {
000000  6882              LDR      r2,[r0,#8]
;;;772      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;773    
;;;774      pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
;;;775      pRect->x0 = 0;
000002  2300              MOVS     r3,#0
000004  800b              STRH     r3,[r1,#0]
;;;776      pRect->y0 = 0;
000006  804b              STRH     r3,[r1,#2]
;;;777      pRect->x1 = pContext->vxSize - 1;
000008  8993              LDRH     r3,[r2,#0xc]
00000a  1e5b              SUBS     r3,r3,#1
00000c  b21b              SXTH     r3,r3
00000e  808b              STRH     r3,[r1,#4]
;;;778      pRect->y1 = pContext->vySize - 1;
000010  8a13              LDRH     r3,[r2,#0x10]
000012  1e5b              SUBS     r3,r3,#1
000014  b21b              SXTH     r3,r3
000016  80cb              STRH     r3,[r1,#6]
;;;779    }
000018  4770              BX       lr
;;;780    
                          ENDP


                          AREA ||i._Init||, CODE, READONLY, ALIGN=1

                  _Init PROC
;;;854    */
;;;855    static int  _Init(GUI_DEVICE * pDevice) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;856      int r;
;;;857    
;;;858      r = _InitOnce(pDevice);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       _InitOnce
00000a  4605              MOV      r5,r0
;;;859      r |= LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_INITCONTROLLER, NULL);
00000c  2200              MOVS     r2,#0
00000e  2101              MOVS     r1,#1
000010  69a0              LDR      r0,[r4,#0x18]
000012  f7fffffe          BL       LCD_X_DisplayDriver
000016  4305              ORRS     r5,r5,r0
;;;860      return r;
000018  4628              MOV      r0,r5
;;;861    }
00001a  bd70              POP      {r4-r6,pc}
;;;862    
                          ENDP


                          AREA ||i._InitOnce||, CODE, READONLY, ALIGN=1

                  _InitOnce PROC
;;;703    */
;;;704    static int _InitOnce(GUI_DEVICE * pDevice) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;705      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;706    
;;;707      if (pDevice->u.pContext == NULL) {
000004  68a0              LDR      r0,[r4,#8]
000006  b958              CBNZ     r0,|L17.32|
;;;708        pDevice->u.pContext = GUI_ALLOC_GetFixedBlock(sizeof(DRIVER_CONTEXT_TEMPLATE));
000008  201c              MOVS     r0,#0x1c
00000a  f7fffffe          BL       GUI_ALLOC_GetFixedBlock
00000e  60a0              STR      r0,[r4,#8]
;;;709        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000010  68a5              LDR      r5,[r4,#8]
;;;710        pContext->BitsPerPixel = LCD__GetBPP(pDevice->pColorConvAPI->pfGetIndexMask());
000012  6921              LDR      r1,[r4,#0x10]
000014  6888              LDR      r0,[r1,#8]
000016  4780              BLX      r0
000018  4606              MOV      r6,r0
00001a  f7fffffe          BL       LCD__GetBPP
00001e  61a8              STR      r0,[r5,#0x18]
                  |L17.32|
;;;711      }
;;;712      return pDevice->u.pContext ? 0 : 1;
000020  68a0              LDR      r0,[r4,#8]
000022  b908              CBNZ     r0,|L17.40|
000024  2001              MOVS     r0,#1
                  |L17.38|
;;;713    }
000026  bd70              POP      {r4-r6,pc}
                  |L17.40|
000028  2000              MOVS     r0,#0                 ;712
00002a  e7fc              B        |L17.38|
;;;714    
                          ENDP


                          AREA ||i._Off||, CODE, READONLY, ALIGN=1

                  _Off PROC
;;;874    */
;;;875    static void _Off (GUI_DEVICE * pDevice) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;876      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_OFF, NULL);
000004  2200              MOVS     r2,#0
000006  2106              MOVS     r1,#6
000008  69a0              LDR      r0,[r4,#0x18]
00000a  f7fffffe          BL       LCD_X_DisplayDriver
;;;877    }
00000e  bd10              POP      {r4,pc}
;;;878    
                          ENDP


                          AREA ||i._On||, CODE, READONLY, ALIGN=1

                  _On PROC
;;;866    */
;;;867    static void _On (GUI_DEVICE * pDevice) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;868      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_ON, NULL);
000004  2200              MOVS     r2,#0
000006  2105              MOVS     r1,#5
000008  69a0              LDR      r0,[r4,#0x18]
00000a  f7fffffe          BL       LCD_X_DisplayDriver
;;;869    }
00000e  bd10              POP      {r4,pc}
;;;870    
                          ENDP


                          AREA ||i._SetLUTEntry||, CODE, READONLY, ALIGN=1

                  _SetLUTEntry PROC
;;;882    */
;;;883    static void _SetLUTEntry(GUI_DEVICE * pDevice, U8 Pos, LCD_COLOR Color) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;884      LCD_X_SETLUTENTRY_INFO Data = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
;;;885    
;;;886      Data.Pos   = Pos;
00000e  f88d5004          STRB     r5,[sp,#4]
;;;887      Data.Color = Color;
000012  9600              STR      r6,[sp,#0]
;;;888      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETLUTENTRY, (void *)&Data);
000014  466a              MOV      r2,sp
000016  2104              MOVS     r1,#4
000018  69a0              LDR      r0,[r4,#0x18]
00001a  f7fffffe          BL       LCD_X_DisplayDriver
;;;889    }
00001e  bd7c              POP      {r2-r6,pc}
;;;890    
                          ENDP


                          AREA ||i._SetOrg||, CODE, READONLY, ALIGN=1

                  _SetOrg PROC
;;;784    */
;;;785    static void _SetOrg(GUI_DEVICE * pDevice, int x, int y) {
000000  b57c              PUSH     {r2-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;786      LCD_X_SETORG_INFO Data = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9001              STR      r0,[sp,#4]
;;;787    
;;;788      Data.xPos = x;
00000e  9500              STR      r5,[sp,#0]
;;;789      Data.yPos = y;
000010  9601              STR      r6,[sp,#4]
;;;790      LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETORG, (void *)&Data);
000012  466a              MOV      r2,sp
000014  2103              MOVS     r1,#3
000016  69a0              LDR      r0,[r4,#0x18]
000018  f7fffffe          BL       LCD_X_DisplayDriver
;;;791    }
00001c  bd7c              POP      {r2-r6,pc}
;;;792    
                          ENDP


                          AREA ||i._SetPixelIndex||, CODE, READONLY, ALIGN=2

                  _SetPixelIndex PROC
;;;144    */
;;;145    static void _SetPixelIndex(GUI_DEVICE * pDevice, int x, int y, int PixelIndex) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461e              MOV      r6,r3
;;;146      #ifdef WIN32
;;;147        LCDSIM_SetPixelIndex(x, y, PixelIndex, pDevice->LayerIndex);
;;;148      #else
;;;149        //
;;;150        // Convert logical into physical coordinates (Dep. on LCDConf.h)
;;;151        //
;;;152        #if (LCD_MIRROR_X == 1) || (LCD_MIRROR_Y == 1) || (LCD_SWAP_XY == 1)
;;;153          int xPhys, yPhys;
;;;154    
;;;155          xPhys = LOG2PHYS_X(x, y);
;;;156          yPhys = LOG2PHYS_Y(x, y);
;;;157        #else
;;;158          #define xPhys x
;;;159          #define yPhys y
;;;160        #endif
;;;161        GUI_USE_PARA(pDevice);
;;;162        GUI_USE_PARA(x);
;;;163        GUI_USE_PARA(y);
;;;164        GUI_USE_PARA(PixelIndex);
;;;165        {
;;;166          //
;;;167          // Write into hardware ... Adapt to your system
;;;168          //
;;;169          // TBD by customer...
;;;170          //
;;;171    		if (g_ChipID == IC_8875)
00000c  4808              LDR      r0,|L22.48|
00000e  8800              LDRH     r0,[r0,#0]  ; g_ChipID
000010  2875              CMP      r0,#0x75
000012  d105              BNE      |L22.32|
;;;172    		{
;;;173    			RA8875_PutPixelGUI(xPhys, yPhys, PixelIndex);
000014  b2b2              UXTH     r2,r6
000016  b2a9              UXTH     r1,r5
000018  b2a0              UXTH     r0,r4
00001a  f7fffffe          BL       RA8875_PutPixelGUI
00001e  e004              B        |L22.42|
                  |L22.32|
;;;174    		}
;;;175    		else
;;;176    		{
;;;177    			ILI9488_PutPixel(xPhys, yPhys, PixelIndex);
000020  b2b2              UXTH     r2,r6
000022  b2a9              UXTH     r1,r5
000024  b2a0              UXTH     r0,r4
000026  f7fffffe          BL       ILI9488_PutPixel
                  |L22.42|
;;;178    		}
;;;179        }
;;;180        #if (LCD_MIRROR_X == 0) && (LCD_MIRROR_Y == 0) && (LCD_SWAP_XY == 0)
;;;181          #undef xPhys
;;;182          #undef yPhys
;;;183        #endif
;;;184      #endif
;;;185    }
00002a  e8bd81f0          POP      {r4-r8,pc}
;;;186    
                          ENDP

00002e  0000              DCW      0x0000
                  |L22.48|
                          DCD      g_ChipID

                          AREA ||i._SetSize||, CODE, READONLY, ALIGN=1

                  _SetSize PROC
;;;835    */
;;;836    static void _SetSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
000000  e92d41fc          PUSH     {r2-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;837      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;838      LCD_X_SETSIZE_INFO Data = {0};
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
00000e  9001              STR      r0,[sp,#4]
;;;839    
;;;840      _InitOnce(pDevice);
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       _InitOnce
;;;841      if (pDevice->u.pContext) {
000016  68a8              LDR      r0,[r5,#8]
000018  b178              CBZ      r0,|L23.58|
;;;842        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
00001a  68ac              LDR      r4,[r5,#8]
;;;843        pContext->vxSizePhys = (pContext->vxSizePhys == 0) ? xSize : pContext->vxSizePhys;
00001c  6960              LDR      r0,[r4,#0x14]
00001e  b908              CBNZ     r0,|L23.36|
000020  4630              MOV      r0,r6
000022  e000              B        |L23.38|
                  |L23.36|
000024  6960              LDR      r0,[r4,#0x14]
                  |L23.38|
000026  6160              STR      r0,[r4,#0x14]
;;;844        pContext->xSize = xSize;
000028  6066              STR      r6,[r4,#4]
;;;845        pContext->ySize = ySize;
00002a  60a7              STR      r7,[r4,#8]
;;;846        Data.xSize = xSize;
00002c  9600              STR      r6,[sp,#0]
;;;847        Data.ySize = ySize;
00002e  9701              STR      r7,[sp,#4]
;;;848        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETSIZE, (void *)&Data);
000030  466a              MOV      r2,sp
000032  2107              MOVS     r1,#7
000034  69a8              LDR      r0,[r5,#0x18]
000036  f7fffffe          BL       LCD_X_DisplayDriver
                  |L23.58|
;;;849      }
;;;850    }
00003a  e8bd81fc          POP      {r2-r8,pc}
;;;851    /*********************************************************************
                          ENDP


                          AREA ||i._SetVRAMAddr||, CODE, READONLY, ALIGN=1

                  _SetVRAMAddr PROC
;;;802    */
;;;803    static void _SetVRAMAddr(GUI_DEVICE * pDevice, void * pVRAM) {
000000  b5f8              PUSH     {r3-r7,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;804      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;805      LCD_X_SETVRAMADDR_INFO Data = {0};
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;806    
;;;807      _InitOnce(pDevice);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       _InitOnce
;;;808      if (pDevice->u.pContext) {
000010  68a0              LDR      r0,[r4,#8]
000012  b138              CBZ      r0,|L24.36|
;;;809        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000014  68a6              LDR      r6,[r4,#8]
;;;810        pContext->VRAMAddr = (U32)pVRAM;
000016  6035              STR      r5,[r6,#0]
;;;811        Data.pVRAM = pVRAM;
000018  9500              STR      r5,[sp,#0]
;;;812        LCD_X_DisplayDriver(pDevice->LayerIndex, LCD_X_SETVRAMADDR, (void *)&Data);
00001a  466a              MOV      r2,sp
00001c  2102              MOVS     r1,#2
00001e  69a0              LDR      r0,[r4,#0x18]
000020  f7fffffe          BL       LCD_X_DisplayDriver
                  |L24.36|
;;;813      }
;;;814    }
000024  bdf8              POP      {r3-r7,pc}
;;;815    
                          ENDP


                          AREA ||i._SetVSize||, CODE, READONLY, ALIGN=1

                  _SetVSize PROC
;;;819    */
;;;820    static void _SetVSize(GUI_DEVICE * pDevice, int xSize, int ySize) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;821      DRIVER_CONTEXT_TEMPLATE * pContext;
;;;822    
;;;823      _InitOnce(pDevice);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       _InitOnce
;;;824      if (pDevice->u.pContext) {
000010  68a8              LDR      r0,[r5,#8]
000012  b118              CBZ      r0,|L25.28|
;;;825        pContext = (DRIVER_CONTEXT_TEMPLATE *)pDevice->u.pContext;
000014  68ac              LDR      r4,[r5,#8]
;;;826        pContext->vxSize = xSize;
000016  60e6              STR      r6,[r4,#0xc]
;;;827        pContext->vySize = ySize;
000018  6127              STR      r7,[r4,#0x10]
;;;828        pContext->vxSizePhys = xSize;
00001a  6166              STR      r6,[r4,#0x14]
                  |L25.28|
;;;829      }
;;;830    }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;831    
                          ENDP


                          AREA ||i._XorPixel||, CODE, READONLY, ALIGN=1

                  _XorPixel PROC
;;;242    */
;;;243    static void _XorPixel(GUI_DEVICE * pDevice, int x, int y) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
;;;244      LCD_PIXELINDEX PixelIndex;
;;;245      LCD_PIXELINDEX IndexMask;
;;;246    
;;;247      PixelIndex = _GetPixelIndex(pDevice, x, y);
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       _GetPixelIndex
000014  4607              MOV      r7,r0
;;;248      IndexMask  = pDevice->pColorConvAPI->pfGetIndexMask();
000016  6921              LDR      r1,[r4,#0x10]
000018  6888              LDR      r0,[r1,#8]
00001a  4780              BLX      r0
00001c  4680              MOV      r8,r0
;;;249      _SetPixelIndex(pDevice, x, y, PixelIndex ^ IndexMask);
00001e  ea870308          EOR      r3,r7,r8
000022  4632              MOV      r2,r6
000024  4629              MOV      r1,r5
000026  4620              MOV      r0,r4
000028  f7fffffe          BL       _SetPixelIndex
;;;250    }
00002c  e8bd81f0          POP      {r4-r8,pc}
;;;251    
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  GUIDRV_Template_API
                          DCD      0x00000000
                          DCD      _DrawBitmap
                          DCD      _DrawHLine
                          DCD      _DrawVLine
                          DCD      _FillRect
                          DCD      _GetPixelIndex
                          DCD      _SetPixelIndex
                          DCD      _XorPixel
                          DCD      _SetOrg
                          DCD      _GetDevFunc
                          DCD      _GetDevProp
                          DCD      _GetDevData
                          DCD      _GetRect

;*** Start embedded assembler ***

#line 1 "..\\..\\emWin\\DisplayDriver\\GUIDRV_Template.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___17_GUIDRV_Template_c_4a54813b____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____REVSH|
#line 144
|__asm___17_GUIDRV_Template_c_4a54813b____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_GUIDRV_Template_c_4a54813b____RRX|
#line 300
|__asm___17_GUIDRV_Template_c_4a54813b____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
