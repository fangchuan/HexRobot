; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\lib_str.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\lib_str.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\lib_str.crf ..\..\uCOS-III\uC-LIB\lib_str.c]
                          THUMB

                          AREA ||i.Str_Cat||, CODE, READONLY, ALIGN=1

                  Str_Cat PROC
;;;544    
;;;545    CPU_CHAR  *Str_Cat (       CPU_CHAR  *pstr_dest,
000000  b570              PUSH     {r4-r6,lr}
;;;546                        const  CPU_CHAR  *pstr_cat)
;;;547    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;548        CPU_CHAR  *pstr_rtn;
;;;549    
;;;550    
;;;551        pstr_rtn = Str_Cat_N(pstr_dest,
000006  f04f32ff          MOV      r2,#0xffffffff
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Str_Cat_N
000012  4606              MOV      r6,r0
;;;552                             pstr_cat,
;;;553                             DEF_INT_CPU_U_MAX_VAL);
;;;554    
;;;555        return (pstr_rtn);
000014  4630              MOV      r0,r6
;;;556    }
000016  bd70              POP      {r4-r6,pc}
;;;557    
                          ENDP


                          AREA ||i.Str_Cat_N||, CODE, READONLY, ALIGN=1

                  Str_Cat_N PROC
;;;627    /*$PAGE*/
;;;628    CPU_CHAR  *Str_Cat_N (       CPU_CHAR    *pstr_dest,
000000  b570              PUSH     {r4-r6,lr}
;;;629                          const  CPU_CHAR    *pstr_cat,
;;;630                                 CPU_SIZE_T   len_max)
;;;631    {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;632               CPU_CHAR    *pstr_cat_dest;
;;;633        const  CPU_CHAR    *pstr_cat_src;
;;;634               CPU_SIZE_T   len_cat;
;;;635    
;;;636                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #3a1).         */
;;;637        if (pstr_dest == (CPU_CHAR *)0) {
000008  b90b              CBNZ     r3,|L2.14|
;;;638            return ((CPU_CHAR *)0);
00000a  2000              MOVS     r0,#0
                  |L2.12|
;;;639        }
;;;640        if (pstr_cat  == (const CPU_CHAR *)0) {
;;;641            return ((CPU_CHAR *)0);
;;;642        }
;;;643    
;;;644        if (len_max < 1) {                                          /* Rtn dest str if cat len = 0 (see Note #3d2A).        */
;;;645            return ((CPU_CHAR *)pstr_dest);
;;;646        }
;;;647    
;;;648    
;;;649        pstr_cat_dest = pstr_dest;
;;;650        while (( pstr_cat_dest != (CPU_CHAR *)  0 ) &&              /* Adv to end of cur dest str until NULL ptr ...        */
;;;651               (*pstr_cat_dest != (CPU_CHAR  )'\0')) {              /* ... or NULL char found..                             */
;;;652            pstr_cat_dest++;
;;;653        }
;;;654        if (pstr_cat_dest == (CPU_CHAR *)0) {                       /* Rtn NULL if NULL ptr found (see Note #3b1).          */
;;;655            return ((CPU_CHAR *)0);
;;;656        }
;;;657    
;;;658        pstr_cat_src = pstr_cat;
;;;659        len_cat      = 0u;
;;;660    
;;;661        while (( pstr_cat_dest != (      CPU_CHAR *)  0 ) &&        /* Cat str until NULL ptr(s)  [see Note #3b]  ...       */
;;;662               ( pstr_cat_src  != (const CPU_CHAR *)  0 ) &&
;;;663               (*pstr_cat_src  != (      CPU_CHAR  )'\0') &&        /* ... or NULL char found     (see Note #3c); ...       */
;;;664               ( len_cat       <  (      CPU_SIZE_T)len_max)) {     /* ... or max nbr chars cat'd (see Note #3d).           */
;;;665           *pstr_cat_dest = *pstr_cat_src;
;;;666            pstr_cat_dest++;
;;;667            pstr_cat_src++;
;;;668            len_cat++;
;;;669        }
;;;670                                                                    /* Rtn NULL if NULL ptr(s) found (see Note #3b1).       */
;;;671        if ((pstr_cat_dest == (      CPU_CHAR *)0) ||
;;;672            (pstr_cat_src  == (const CPU_CHAR *)0)) {
;;;673             return ((CPU_CHAR *)0);
;;;674        }
;;;675    
;;;676       *pstr_cat_dest = (CPU_CHAR)'\0';                             /* Append NULL char    (see Note #2a2C).                */
;;;677    
;;;678    
;;;679        return (pstr_dest);                                         /* Rtn ptr to dest str (see Note #2b1).                 */
;;;680    }
00000c  bd70              POP      {r4-r6,pc}
                  |L2.14|
00000e  b90c              CBNZ     r4,|L2.20|
000010  2000              MOVS     r0,#0                 ;641
000012  e7fb              B        |L2.12|
                  |L2.20|
000014  b90d              CBNZ     r5,|L2.26|
000016  4618              MOV      r0,r3                 ;645
000018  e7f8              B        |L2.12|
                  |L2.26|
00001a  4619              MOV      r1,r3                 ;649
00001c  e000              B        |L2.32|
                  |L2.30|
00001e  1c49              ADDS     r1,r1,#1              ;652
                  |L2.32|
000020  b111              CBZ      r1,|L2.40|
000022  7808              LDRB     r0,[r1,#0]            ;651
000024  2800              CMP      r0,#0                 ;651
000026  d1fa              BNE      |L2.30|
                  |L2.40|
000028  b909              CBNZ     r1,|L2.46|
00002a  2000              MOVS     r0,#0                 ;655
00002c  e7ee              B        |L2.12|
                  |L2.46|
00002e  4622              MOV      r2,r4                 ;658
000030  2600              MOVS     r6,#0                 ;659
000032  e004              B        |L2.62|
                  |L2.52|
000034  7810              LDRB     r0,[r2,#0]            ;665
000036  7008              STRB     r0,[r1,#0]            ;665
000038  1c49              ADDS     r1,r1,#1              ;666
00003a  1c52              ADDS     r2,r2,#1              ;667
00003c  1c76              ADDS     r6,r6,#1              ;668
                  |L2.62|
00003e  b121              CBZ      r1,|L2.74|
000040  b11a              CBZ      r2,|L2.74|
000042  7810              LDRB     r0,[r2,#0]            ;663
000044  b108              CBZ      r0,|L2.74|
000046  42ae              CMP      r6,r5                 ;664
000048  d3f4              BCC      |L2.52|
                  |L2.74|
00004a  b101              CBZ      r1,|L2.78|
00004c  b90a              CBNZ     r2,|L2.82|
                  |L2.78|
00004e  2000              MOVS     r0,#0                 ;673
000050  e7dc              B        |L2.12|
                  |L2.82|
000052  2000              MOVS     r0,#0                 ;676
000054  7008              STRB     r0,[r1,#0]            ;676
000056  4618              MOV      r0,r3                 ;679
000058  e7d8              B        |L2.12|
;;;681    
                          ENDP


                          AREA ||i.Str_Char||, CODE, READONLY, ALIGN=1

                  Str_Char PROC
;;;1277   
;;;1278   CPU_CHAR  *Str_Char (const  CPU_CHAR  *pstr,
000000  b570              PUSH     {r4-r6,lr}
;;;1279                               CPU_CHAR   srch_char)
;;;1280   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1281       CPU_CHAR  *pstr_rtn;
;;;1282   
;;;1283   
;;;1284       pstr_rtn = Str_Char_N(pstr,
000006  4622              MOV      r2,r4
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       Str_Char_N
000012  4606              MOV      r6,r0
;;;1285                             DEF_INT_CPU_U_MAX_VAL,
;;;1286                             srch_char);
;;;1287   
;;;1288       return (pstr_rtn);
000014  4630              MOV      r0,r6
;;;1289   }
000016  bd70              POP      {r4-r6,pc}
;;;1290   
                          ENDP


                          AREA ||i.Str_Char_Last||, CODE, READONLY, ALIGN=1

                  Str_Char_Last PROC
;;;1456   
;;;1457   CPU_CHAR  *Str_Char_Last (const  CPU_CHAR  *pstr,
000000  b570              PUSH     {r4-r6,lr}
;;;1458                                    CPU_CHAR   srch_char)
;;;1459   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1460       CPU_CHAR  *pstr_rtn;
;;;1461   
;;;1462   
;;;1463       pstr_rtn = Str_Char_Last_N(pstr,
000006  4622              MOV      r2,r4
000008  f04f31ff          MOV      r1,#0xffffffff
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       Str_Char_Last_N
000012  4606              MOV      r6,r0
;;;1464                                  DEF_INT_CPU_U_MAX_VAL,
;;;1465                                  srch_char);
;;;1466   
;;;1467       return (pstr_rtn);
000014  4630              MOV      r0,r6
;;;1468   }
000016  bd70              POP      {r4-r6,pc}
;;;1469   
                          ENDP


                          AREA ||i.Str_Char_Last_N||, CODE, READONLY, ALIGN=1

                  Str_Char_Last_N PROC
;;;1539   /*$PAGE*/
;;;1540   CPU_CHAR  *Str_Char_Last_N (const  CPU_CHAR    *pstr,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;1541                                      CPU_SIZE_T   len_max,
;;;1542                                      CPU_CHAR     srch_char)
;;;1543   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1544       const  CPU_CHAR    *pstr_char;
;;;1545              CPU_SIZE_T   str_len_max;
;;;1546              CPU_SIZE_T   str_len;
;;;1547   
;;;1548   
;;;1549       if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #3a1).       */
00000a  b915              CBNZ     r5,|L5.18|
;;;1550           return ((CPU_CHAR *)0);
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;1551       }
;;;1552   
;;;1553       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0      (see Note #3e1).       */
;;;1554           return ((CPU_CHAR *)0);
;;;1555       }
;;;1556   
;;;1557   
;;;1558       pstr_char    = pstr;
;;;1559        str_len_max = len_max - sizeof((CPU_CHAR)'\0');            /* Str len adj'd for NULL char len.                     */
;;;1560        str_len     = Str_Len_N(pstr_char, str_len_max);
;;;1561       pstr_char   += str_len;
;;;1562   
;;;1563       if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found        (see Note #3b1).   */
;;;1564           return ((CPU_CHAR *)0);
;;;1565       }
;;;1566   
;;;1567       while (( pstr_char != pstr) &&                              /* Srch str from end until beginning (see Note #3c) ... */
;;;1568              (*pstr_char != srch_char)) {                         /* ... until srch char found         (see Note #3d).    */
;;;1569           pstr_char--;
;;;1570       }
;;;1571   
;;;1572   
;;;1573       if (*pstr_char != srch_char) {                              /* Rtn NULL if srch char NOT found   (see Note #3c1).   */
;;;1574            return ((CPU_CHAR *)0);
;;;1575       }
;;;1576   
;;;1577   
;;;1578       return ((CPU_CHAR *)pstr_char);                             /* Else rtn ptr to found srch char   (see Note #3d1).   */
;;;1579   }
00000e  e8bd83f0          POP      {r4-r9,pc}
                  |L5.18|
000012  b90e              CBNZ     r6,|L5.24|
000014  2000              MOVS     r0,#0                 ;1554
000016  e7fa              B        |L5.14|
                  |L5.24|
000018  462c              MOV      r4,r5                 ;1558
00001a  f1a60901          SUB      r9,r6,#1              ;1559
00001e  4649              MOV      r1,r9                 ;1560
000020  4620              MOV      r0,r4                 ;1560
000022  f7fffffe          BL       Str_Len_N
000026  4680              MOV      r8,r0                 ;1560
000028  4444              ADD      r4,r4,r8              ;1561
00002a  b90c              CBNZ     r4,|L5.48|
00002c  2000              MOVS     r0,#0                 ;1564
00002e  e7ee              B        |L5.14|
                  |L5.48|
000030  e000              B        |L5.52|
                  |L5.50|
000032  1e64              SUBS     r4,r4,#1              ;1569
                  |L5.52|
000034  42ac              CMP      r4,r5                 ;1567
000036  d002              BEQ      |L5.62|
000038  7820              LDRB     r0,[r4,#0]            ;1568
00003a  42b8              CMP      r0,r7                 ;1568
00003c  d1f9              BNE      |L5.50|
                  |L5.62|
00003e  7820              LDRB     r0,[r4,#0]            ;1573
000040  42b8              CMP      r0,r7                 ;1573
000042  d001              BEQ      |L5.72|
000044  2000              MOVS     r0,#0                 ;1574
000046  e7e2              B        |L5.14|
                  |L5.72|
000048  4620              MOV      r0,r4                 ;1578
00004a  e7e0              B        |L5.14|
;;;1580   
                          ENDP


                          AREA ||i.Str_Char_N||, CODE, READONLY, ALIGN=1

                  Str_Char_N PROC
;;;1358   /*$PAGE*/
;;;1359   CPU_CHAR  *Str_Char_N (const  CPU_CHAR    *pstr,
000000  b530              PUSH     {r4,r5,lr}
;;;1360                                 CPU_SIZE_T   len_max,
;;;1361                                 CPU_CHAR     srch_char)
;;;1362   {
000002  4604              MOV      r4,r0
000004  460b              MOV      r3,r1
000006  4615              MOV      r5,r2
;;;1363       const  CPU_CHAR    *pstr_char;
;;;1364              CPU_SIZE_T   len_srch;
;;;1365   
;;;1366   
;;;1367       if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #3a1).       */
000008  b90c              CBNZ     r4,|L6.14|
;;;1368           return ((CPU_CHAR *)0);
00000a  2000              MOVS     r0,#0
                  |L6.12|
;;;1369       }
;;;1370   
;;;1371       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0      (see Note #3e1).       */
;;;1372           return ((CPU_CHAR *)0);
;;;1373       }
;;;1374   
;;;1375   
;;;1376       pstr_char = pstr;
;;;1377       len_srch  = 0u;
;;;1378   
;;;1379       while (( pstr_char != (const CPU_CHAR *)  0 )      &&       /* Srch str until NULL ptr     [see Note #3b]  ...      */
;;;1380              (*pstr_char != (      CPU_CHAR  )'\0')      &&       /* ... or NULL char            (see Note #3c)  ...      */
;;;1381              (*pstr_char != (      CPU_CHAR  )srch_char) &&       /* ... or srch char found      (see Note #3d); ...      */
;;;1382              ( len_srch  <  (      CPU_SIZE_T)len_max)) {         /* ... or max nbr chars srch'd (see Note #3e).          */
;;;1383           pstr_char++;
;;;1384           len_srch++;
;;;1385       }
;;;1386   
;;;1387   
;;;1388       if (pstr_char == (const CPU_CHAR *)0) {                     /* Rtn NULL if NULL ptr found      (see Note #3b1).     */
;;;1389           return ((CPU_CHAR *)0);
;;;1390       }
;;;1391   
;;;1392       if (len_srch >= len_max) {                                  /* Rtn NULL if srch char NOT found ...                  */
;;;1393           return ((CPU_CHAR *)0);                                 /* ... within max nbr of chars     (see Note #3e1).     */
;;;1394       }
;;;1395   
;;;1396       if (*pstr_char != srch_char) {                              /* Rtn NULL if srch char NOT found (see Note #3c1).     */
;;;1397            return ((CPU_CHAR *)0);
;;;1398       }
;;;1399   
;;;1400   
;;;1401       return ((CPU_CHAR *)pstr_char);                             /* Else rtn ptr to found srch char (see Note #3d1).     */
;;;1402   }
00000c  bd30              POP      {r4,r5,pc}
                  |L6.14|
00000e  b90b              CBNZ     r3,|L6.20|
000010  2000              MOVS     r0,#0                 ;1372
000012  e7fb              B        |L6.12|
                  |L6.20|
000014  4621              MOV      r1,r4                 ;1376
000016  2200              MOVS     r2,#0                 ;1377
000018  e001              B        |L6.30|
                  |L6.26|
00001a  1c49              ADDS     r1,r1,#1              ;1383
00001c  1c52              ADDS     r2,r2,#1              ;1384
                  |L6.30|
00001e  b131              CBZ      r1,|L6.46|
000020  7808              LDRB     r0,[r1,#0]            ;1380
000022  b120              CBZ      r0,|L6.46|
000024  7808              LDRB     r0,[r1,#0]            ;1381
000026  42a8              CMP      r0,r5                 ;1381
000028  d001              BEQ      |L6.46|
00002a  429a              CMP      r2,r3                 ;1382
00002c  d3f5              BCC      |L6.26|
                  |L6.46|
00002e  b909              CBNZ     r1,|L6.52|
000030  2000              MOVS     r0,#0                 ;1389
000032  e7eb              B        |L6.12|
                  |L6.52|
000034  429a              CMP      r2,r3                 ;1392
000036  d301              BCC      |L6.60|
000038  2000              MOVS     r0,#0                 ;1393
00003a  e7e7              B        |L6.12|
                  |L6.60|
00003c  7808              LDRB     r0,[r1,#0]            ;1396
00003e  42a8              CMP      r0,r5                 ;1396
000040  d001              BEQ      |L6.70|
000042  2000              MOVS     r0,#0                 ;1397
000044  e7e2              B        |L6.12|
                  |L6.70|
000046  4608              MOV      r0,r1                 ;1401
000048  e7e0              B        |L6.12|
;;;1403   
                          ENDP


                          AREA ||i.Str_Char_Replace||, CODE, READONLY, ALIGN=1

                  Str_Char_Replace PROC
;;;1619   
;;;1620   CPU_CHAR  *Str_Char_Replace (CPU_CHAR  *pstr,
000000  b5f0              PUSH     {r4-r7,lr}
;;;1621                                CPU_CHAR   char_srch,
;;;1622                                CPU_CHAR   char_replace)
;;;1623   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1624       CPU_CHAR  *pstr_rtn;
;;;1625   
;;;1626   
;;;1627       pstr_rtn = Str_Char_Replace_N(pstr,
000008  f04f33ff          MOV      r3,#0xffffffff
00000c  4632              MOV      r2,r6
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       Str_Char_Replace_N
000016  4607              MOV      r7,r0
;;;1628                                     char_srch,
;;;1629                                     char_replace,
;;;1630                                     DEF_INT_CPU_U_MAX_VAL);
;;;1631   
;;;1632       return (pstr_rtn);
000018  4638              MOV      r0,r7
;;;1633   }
00001a  bdf0              POP      {r4-r7,pc}
;;;1634   
                          ENDP


                          AREA ||i.Str_Char_Replace_N||, CODE, READONLY, ALIGN=1

                  Str_Char_Replace_N PROC
;;;1682   
;;;1683   CPU_CHAR  *Str_Char_Replace_N (CPU_CHAR    *pstr,
000000  b570              PUSH     {r4-r6,lr}
;;;1684                                  CPU_CHAR     char_srch,
;;;1685                                  CPU_CHAR     char_replace,
;;;1686                                  CPU_SIZE_T   len_max)
;;;1687   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1688       CPU_CHAR    *pstr_char;
;;;1689       CPU_SIZE_T   len;
;;;1690   
;;;1691   
;;;1692       if (pstr == (const CPU_CHAR *)0) {                          /* Rtn NULL if srch str ptr NULL (see Note #2a1).       */
000008  b90c              CBNZ     r4,|L8.14|
;;;1693           return ((CPU_CHAR *)0);
00000a  2000              MOVS     r0,#0
                  |L8.12|
;;;1694       }
;;;1695   
;;;1696       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0      (see Note #2e1).       */
;;;1697           return ((CPU_CHAR *)0);
;;;1698       }
;;;1699   
;;;1700       pstr_char = pstr;
;;;1701       len       = len_max;
;;;1702   
;;;1703       while (( pstr_char != (const CPU_CHAR *)0) &&               /* Srch str until NULL ptr     [see Note #2b]  ...      */
;;;1704              (*pstr_char !=  ASCII_CHAR_NULL   ) &&               /* ... or NULL char            (see Note #2c)  ...      */
;;;1705              ( len        >                   0)) {               /* ... or max nbr chars srch'd (see Note #2e).          */
;;;1706   
;;;1707           if (*pstr_char == char_srch) {
;;;1708               *pstr_char  = char_replace;                         /* Replace char if srch char is found.                  */
;;;1709           }
;;;1710   
;;;1711           pstr_char++;
;;;1712           len--;
;;;1713       }
;;;1714   
;;;1715       return (pstr);
;;;1716   }
00000c  bd70              POP      {r4-r6,pc}
                  |L8.14|
00000e  b90b              CBNZ     r3,|L8.20|
000010  2000              MOVS     r0,#0                 ;1697
000012  e7fb              B        |L8.12|
                  |L8.20|
000014  4621              MOV      r1,r4                 ;1700
000016  461a              MOV      r2,r3                 ;1701
000018  e005              B        |L8.38|
                  |L8.26|
00001a  7808              LDRB     r0,[r1,#0]            ;1707
00001c  42a8              CMP      r0,r5                 ;1707
00001e  d100              BNE      |L8.34|
000020  700e              STRB     r6,[r1,#0]            ;1708
                  |L8.34|
000022  1c49              ADDS     r1,r1,#1              ;1711
000024  1e52              SUBS     r2,r2,#1              ;1712
                  |L8.38|
000026  b119              CBZ      r1,|L8.48|
000028  7808              LDRB     r0,[r1,#0]            ;1704
00002a  b108              CBZ      r0,|L8.48|
00002c  2a00              CMP      r2,#0                 ;1705
00002e  d1f4              BNE      |L8.26|
                  |L8.48|
000030  4620              MOV      r0,r4                 ;1715
000032  e7eb              B        |L8.12|
;;;1717   
                          ENDP


                          AREA ||i.Str_Cmp||, CODE, READONLY, ALIGN=1

                  Str_Cmp PROC
;;;758    
;;;759    CPU_INT16S  Str_Cmp (const  CPU_CHAR  *p1_str,
000000  b570              PUSH     {r4-r6,lr}
;;;760                         const  CPU_CHAR  *p2_str)
;;;761    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;762        CPU_INT16S  cmp_val;
;;;763    
;;;764    
;;;765        cmp_val = Str_Cmp_N(p1_str,
000006  f04f32ff          MOV      r2,#0xffffffff
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Str_Cmp_N
000012  4606              MOV      r6,r0
;;;766                            p2_str,
;;;767                            DEF_INT_CPU_U_MAX_VAL);
;;;768    
;;;769        return (cmp_val);
000014  4630              MOV      r0,r6
;;;770    }
000016  bd70              POP      {r4-r6,pc}
;;;771    
                          ENDP


                          AREA ||i.Str_CmpIgnoreCase||, CODE, READONLY, ALIGN=1

                  Str_CmpIgnoreCase PROC
;;;1025   /*$PAGE*/
;;;1026   CPU_INT16S  Str_CmpIgnoreCase (const  CPU_CHAR  *p1_str,
000000  b570              PUSH     {r4-r6,lr}
;;;1027                                  const  CPU_CHAR  *p2_str)
;;;1028   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1029       CPU_INT16S  cmp_val;
;;;1030   
;;;1031   
;;;1032       cmp_val = Str_CmpIgnoreCase_N(p1_str,
000006  f04f32ff          MOV      r2,#0xffffffff
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Str_CmpIgnoreCase_N
000012  4606              MOV      r6,r0
;;;1033                                     p2_str,
;;;1034                                     DEF_INT_CPU_U_MAX_VAL);
;;;1035   
;;;1036       return (cmp_val);
000014  4630              MOV      r0,r6
;;;1037   }
000016  bd70              POP      {r4-r6,pc}
;;;1038   
                          ENDP


                          AREA ||i.Str_CmpIgnoreCase_N||, CODE, READONLY, ALIGN=1

                  Str_CmpIgnoreCase_N PROC
;;;1137   
;;;1138   CPU_INT16S  Str_CmpIgnoreCase_N (const  CPU_CHAR    *p1_str,
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;1139                                    const  CPU_CHAR    *p2_str,
;;;1140                                           CPU_SIZE_T   len_max)
;;;1141   {
000004  b082              SUB      sp,sp,#8
000006  4680              MOV      r8,r0
000008  460e              MOV      r6,r1
;;;1142       const  CPU_CHAR    *p1_str_cmp;
;;;1143       const  CPU_CHAR    *p2_str_cmp;
;;;1144       const  CPU_CHAR    *p1_str_cmp_next;
;;;1145       const  CPU_CHAR    *p2_str_cmp_next;
;;;1146              CPU_CHAR     char_1;
;;;1147              CPU_CHAR     char_2;
;;;1148              CPU_INT16S   cmp_val;
;;;1149              CPU_SIZE_T   cmp_len;
;;;1150   
;;;1151   
;;;1152       if (len_max < 1) {                                          /* If cmp len = 0,        rtn 0       (see Note #3d1A). */
00000a  9804              LDR      r0,[sp,#0x10]
00000c  b918              CBNZ     r0,|L11.22|
;;;1153           return (0);
00000e  2000              MOVS     r0,#0
                  |L11.16|
;;;1154       }
;;;1155   
;;;1156       if (p1_str == (const CPU_CHAR *)0) {
;;;1157           if (p2_str == (const CPU_CHAR *)0) {
;;;1158               return (0);                                         /* If BOTH str ptrs NULL, rtn 0       (see Note #3a1A). */
;;;1159           }
;;;1160           char_2  =  ASCII_ToLower(*p2_str);
;;;1161           cmp_val = (CPU_INT16S)0 - (CPU_INT16S)char_2;
;;;1162           return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #3a1B1).*/
;;;1163       }
;;;1164       if (p2_str == (const CPU_CHAR *)0) {
;;;1165           char_1  =  ASCII_ToLower(*p1_str);
;;;1166           cmp_val = (CPU_INT16S)char_1;
;;;1167           return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #3a1B2).*/
;;;1168       }
;;;1169   
;;;1170   
;;;1171       p1_str_cmp      = p1_str;
;;;1172       p2_str_cmp      = p2_str;
;;;1173       p1_str_cmp_next = p1_str_cmp;
;;;1174       p2_str_cmp_next = p2_str_cmp;
;;;1175       p1_str_cmp_next++;
;;;1176       p2_str_cmp_next++;
;;;1177       char_1          = ASCII_ToLower(*p1_str_cmp);
;;;1178       char_2          = ASCII_ToLower(*p2_str_cmp);
;;;1179       cmp_len         = 0u;
;;;1180   
;;;1181       while (( char_1          ==  char_2)                &&      /* Cmp strs until non-matching chars (see Note #3c) ... */
;;;1182              (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
;;;1183              ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2).   */
;;;1184              ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
;;;1185              ( cmp_len         <  (      CPU_SIZE_T)len_max)) {   /* ... or max nbr chars cmp'd        (see Note #3d2).   */
;;;1186           p1_str_cmp++;
;;;1187           p2_str_cmp++;
;;;1188           p1_str_cmp_next++;
;;;1189           p2_str_cmp_next++;
;;;1190           cmp_len++;
;;;1191           char_1 = ASCII_ToLower(*p1_str_cmp);
;;;1192           char_2 = ASCII_ToLower(*p2_str_cmp);
;;;1193       }
;;;1194   
;;;1195   
;;;1196       if (cmp_len == len_max) {                                   /* If strs     identical for max len nbr of chars, ...  */
;;;1197           return (0);                                             /* ... rtn 0                 (see Note #3d2A).          */
;;;1198       }
;;;1199   
;;;1200       if (char_1 != char_2) {                                     /* If strs NOT identical, ...                           */
;;;1201            cmp_val = (CPU_INT16S)char_1 - (CPU_INT16S)char_2;     /* ... calc & rtn char diff  (see Note #3c1).           */
;;;1202   
;;;1203       } else if (char_1 == (CPU_CHAR)'\0') {                      /* If NULL char(s) found, ...                           */
;;;1204            cmp_val = (CPU_INT16S)0;                               /* ... strs identical; rtn 0 (see Note #3b).            */
;;;1205   
;;;1206       } else {
;;;1207           if (p1_str_cmp_next == (const CPU_CHAR *)0) {
;;;1208               if (p2_str_cmp_next == (const CPU_CHAR *)0) {       /* If BOTH next str ptrs NULL, ...                      */
;;;1209                   cmp_val = (CPU_INT16S)0;                        /* ... rtn 0                       (see Note #3a2A).    */
;;;1210               } else {                                            /* If p1_str_cmp_next NULL, ...                         */
;;;1211                   char_2  =  ASCII_ToLower(*p2_str_cmp_next);
;;;1212                   cmp_val = (CPU_INT16S)0 - (CPU_INT16S)char_2;   /* ... rtn neg p2_str_cmp_next val (see Note #3a2B1).   */
;;;1213               }
;;;1214           } else {                                                /* If p2_str_cmp_next NULL, ...                         */
;;;1215               char_1  =  ASCII_ToLower(*p1_str_cmp_next);
;;;1216               cmp_val = (CPU_INT16S)char_1;                       /* ... rtn pos p1_str_cmp_next val (see Note #3a2B2).   */
;;;1217           }
;;;1218       }
;;;1219   
;;;1220   
;;;1221       return (cmp_val);
;;;1222   }
000010  b005              ADD      sp,sp,#0x14
000012  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.22|
000016  f1b80f00          CMP      r8,#0                 ;1156
00001a  d109              BNE      |L11.48|
00001c  b90e              CBNZ     r6,|L11.34|
00001e  2000              MOVS     r0,#0                 ;1158
000020  e7f6              B        |L11.16|
                  |L11.34|
000022  7830              LDRB     r0,[r6,#0]            ;1160
000024  f7fffffe          BL       ASCII_ToLower
000028  4607              MOV      r7,r0                 ;1160
00002a  427c              RSBS     r4,r7,#0              ;1161
00002c  4620              MOV      r0,r4                 ;1162
00002e  e7ef              B        |L11.16|
                  |L11.48|
000030  b93e              CBNZ     r6,|L11.66|
000032  f8980000          LDRB     r0,[r8,#0]            ;1165
000036  f7fffffe          BL       ASCII_ToLower
00003a  4605              MOV      r5,r0                 ;1165
00003c  462c              MOV      r4,r5                 ;1166
00003e  4620              MOV      r0,r4                 ;1167
000040  e7e6              B        |L11.16|
                  |L11.66|
000042  46c1              MOV      r9,r8                 ;1171
000044  46b2              MOV      r10,r6                ;1172
000046  46c8              MOV      r8,r9                 ;1173
000048  46c3              MOV      r11,r8                ;1173
00004a  4656              MOV      r6,r10                ;1174
00004c  f8cda004          STR      r10,[sp,#4]           ;1174
000050  46d8              MOV      r8,r11                ;1175
000052  f10b0b01          ADD      r11,r11,#1            ;1175
000056  9e01              LDR      r6,[sp,#4]            ;1176
000058  1c70              ADDS     r0,r6,#1              ;1176
00005a  9001              STR      r0,[sp,#4]            ;1176
00005c  46c8              MOV      r8,r9                 ;1177
00005e  f8990000          LDRB     r0,[r9,#0]            ;1177
000062  f7fffffe          BL       ASCII_ToLower
000066  4605              MOV      r5,r0                 ;1177
000068  4656              MOV      r6,r10                ;1178
00006a  f89a0000          LDRB     r0,[r10,#0]           ;1178
00006e  f7fffffe          BL       ASCII_ToLower
000072  4607              MOV      r7,r0                 ;1178
000074  2000              MOVS     r0,#0                 ;1179
000076  9000              STR      r0,[sp,#0]            ;1179
000078  e015              B        |L11.166|
                  |L11.122|
00007a  f1090901          ADD      r9,r9,#1              ;1186
00007e  f10a0a01          ADD      r10,r10,#1            ;1187
000082  f10b0b01          ADD      r11,r11,#1            ;1188
000086  9801              LDR      r0,[sp,#4]            ;1189
000088  1c40              ADDS     r0,r0,#1              ;1189
00008a  9001              STR      r0,[sp,#4]            ;1189
00008c  9800              LDR      r0,[sp,#0]            ;1190
00008e  1c40              ADDS     r0,r0,#1              ;1190
000090  9000              STR      r0,[sp,#0]            ;1190
000092  f8990000          LDRB     r0,[r9,#0]            ;1191
000096  f7fffffe          BL       ASCII_ToLower
00009a  4605              MOV      r5,r0                 ;1191
00009c  f89a0000          LDRB     r0,[r10,#0]           ;1192
0000a0  f7fffffe          BL       ASCII_ToLower
0000a4  4607              MOV      r7,r0                 ;1192
                  |L11.166|
0000a6  42bd              CMP      r5,r7                 ;1181
0000a8  d10b              BNE      |L11.194|
0000aa  f8990000          LDRB     r0,[r9,#0]            ;1182
0000ae  b140              CBZ      r0,|L11.194|
0000b0  f1bb0f00          CMP      r11,#0                ;1183
0000b4  d005              BEQ      |L11.194|
0000b6  9801              LDR      r0,[sp,#4]            ;1184
0000b8  b118              CBZ      r0,|L11.194|
0000ba  9904              LDR      r1,[sp,#0x10]         ;1185
0000bc  9800              LDR      r0,[sp,#0]            ;1185
0000be  4288              CMP      r0,r1                 ;1185
0000c0  d3db              BCC      |L11.122|
                  |L11.194|
0000c2  9904              LDR      r1,[sp,#0x10]         ;1196
0000c4  9800              LDR      r0,[sp,#0]            ;1196
0000c6  4288              CMP      r0,r1                 ;1196
0000c8  d101              BNE      |L11.206|
0000ca  2000              MOVS     r0,#0                 ;1197
0000cc  e7a0              B        |L11.16|
                  |L11.206|
0000ce  42bd              CMP      r5,r7                 ;1200
0000d0  d001              BEQ      |L11.214|
0000d2  1bec              SUBS     r4,r5,r7              ;1201
0000d4  e016              B        |L11.260|
                  |L11.214|
0000d6  b90d              CBNZ     r5,|L11.220|
0000d8  2400              MOVS     r4,#0                 ;1204
0000da  e013              B        |L11.260|
                  |L11.220|
0000dc  f1bb0f00          CMP      r11,#0                ;1207
0000e0  d10a              BNE      |L11.248|
0000e2  9801              LDR      r0,[sp,#4]            ;1208
0000e4  b908              CBNZ     r0,|L11.234|
0000e6  2400              MOVS     r4,#0                 ;1209
0000e8  e00c              B        |L11.260|
                  |L11.234|
0000ea  9901              LDR      r1,[sp,#4]            ;1211
0000ec  7808              LDRB     r0,[r1,#0]            ;1211
0000ee  f7fffffe          BL       ASCII_ToLower
0000f2  4607              MOV      r7,r0                 ;1211
0000f4  427c              RSBS     r4,r7,#0              ;1212
0000f6  e005              B        |L11.260|
                  |L11.248|
0000f8  f89b0000          LDRB     r0,[r11,#0]           ;1215
0000fc  f7fffffe          BL       ASCII_ToLower
000100  4605              MOV      r5,r0                 ;1215
000102  462c              MOV      r4,r5                 ;1216
                  |L11.260|
000104  4620              MOV      r0,r4                 ;1221
000106  e783              B        |L11.16|
;;;1223   
                          ENDP


                          AREA ||i.Str_Cmp_N||, CODE, READONLY, ALIGN=1

                  Str_Cmp_N PROC
;;;860    /*$PAGE*/
;;;861    CPU_INT16S  Str_Cmp_N (const  CPU_CHAR    *p1_str,
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;862                           const  CPU_CHAR    *p2_str,
;;;863                                  CPU_SIZE_T   len_max)
;;;864    {
000004  4605              MOV      r5,r0
000006  460b              MOV      r3,r1
000008  4694              MOV      r12,r2
;;;865        const  CPU_CHAR    *p1_str_cmp;
;;;866        const  CPU_CHAR    *p2_str_cmp;
;;;867        const  CPU_CHAR    *p1_str_cmp_next;
;;;868        const  CPU_CHAR    *p2_str_cmp_next;
;;;869               CPU_INT16S   cmp_val;
;;;870               CPU_SIZE_T   cmp_len;
;;;871    
;;;872    
;;;873        if (len_max < 1) {                                          /* If cmp len = 0,        rtn 0       (see Note #3d1A). */
00000a  f1bc0f00          CMP      r12,#0
00000e  d102              BNE      |L12.22|
;;;874            return (0);
000010  2000              MOVS     r0,#0
                  |L12.18|
;;;875        }
;;;876    
;;;877        if (p1_str == (const CPU_CHAR *)0) {
;;;878            if (p2_str == (const CPU_CHAR *)0) {
;;;879                return (0);                                         /* If BOTH str ptrs NULL, rtn 0       (see Note #3a1A). */
;;;880            }
;;;881            cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str);
;;;882            return (cmp_val);                                       /* If p1_str NULL, rtn neg p2_str val (see Note #3a1B1).*/
;;;883        }
;;;884        if (p2_str == (const CPU_CHAR *)0) {
;;;885            cmp_val = (CPU_INT16S)(*p1_str);
;;;886            return (cmp_val);                                       /* If p2_str NULL, rtn pos p1_str val (see Note #3a1B2).*/
;;;887        }
;;;888    
;;;889    
;;;890        p1_str_cmp      = p1_str;
;;;891        p2_str_cmp      = p2_str;
;;;892        p1_str_cmp_next = p1_str_cmp;
;;;893        p2_str_cmp_next = p2_str_cmp;
;;;894        p1_str_cmp_next++;
;;;895        p2_str_cmp_next++;
;;;896        cmp_len         = 0u;
;;;897    
;;;898        while ((*p1_str_cmp      == *p2_str_cmp)            &&      /* Cmp strs until non-matching chars (see Note #3c) ... */
;;;899               (*p1_str_cmp      != (      CPU_CHAR  )'\0') &&      /* ... or NULL chars                 (see Note #3b) ... */
;;;900               ( p1_str_cmp_next != (const CPU_CHAR *)  0 ) &&      /* ... or NULL ptr(s) found          (see Note #3a2).   */
;;;901               ( p2_str_cmp_next != (const CPU_CHAR *)  0 ) &&
;;;902               ( cmp_len         <  (      CPU_SIZE_T)len_max)) {   /* ... or max nbr chars cmp'd        (see Note #3d2).   */
;;;903            p1_str_cmp++;
;;;904            p2_str_cmp++;
;;;905            p1_str_cmp_next++;
;;;906            p2_str_cmp_next++;
;;;907            cmp_len++;
;;;908        }
;;;909    
;;;910    
;;;911        if (cmp_len == len_max) {                                   /* If strs     identical for max len nbr of chars, ...  */
;;;912            return (0);                                             /* ... rtn 0                 (see Note #3d2A).          */
;;;913        }
;;;914    
;;;915        if (*p1_str_cmp != *p2_str_cmp) {                           /* If strs NOT identical, ...                           */
;;;916                                                                    /* ... calc & rtn char diff  (see Note #3c1).           */
;;;917             cmp_val = (CPU_INT16S)(*p1_str_cmp) - (CPU_INT16S)(*p2_str_cmp);
;;;918    
;;;919        } else if (*p1_str_cmp  == (CPU_CHAR)'\0') {                /* If NULL char(s) found, ...                           */
;;;920             cmp_val = (CPU_INT16S)0;                               /* ... strs identical; rtn 0 (see Note #3b).            */
;;;921    
;;;922        } else {
;;;923            if (p1_str_cmp_next == (const CPU_CHAR *)0) {
;;;924                if (p2_str_cmp_next == (const CPU_CHAR *)0) {       /* If BOTH next str ptrs NULL, ...                      */
;;;925                    cmp_val = (CPU_INT16S)0;                        /* ... rtn 0                       (see Note #3a2A).    */
;;;926                } else {                                            /* If p1_str_cmp_next NULL, ...                         */
;;;927                                                                    /* ... rtn neg p2_str_cmp_next val (see Note #3a2B1).   */
;;;928                    cmp_val = (CPU_INT16S)0 - (CPU_INT16S)(*p2_str_cmp_next);
;;;929                }
;;;930            } else {                                                /* If p2_str_cmp_next NULL, ...                         */
;;;931                cmp_val = (CPU_INT16S)(*p1_str_cmp_next);           /* ... rtn pos p1_str_cmp_next val (see Note #3a2B2).   */
;;;932            }
;;;933        }
;;;934    
;;;935    
;;;936        return (cmp_val);
;;;937    }
000012  e8bd83f0          POP      {r4-r9,pc}
                  |L12.22|
000016  b935              CBNZ     r5,|L12.38|
000018  b90b              CBNZ     r3,|L12.30|
00001a  2000              MOVS     r0,#0                 ;879
00001c  e7f9              B        |L12.18|
                  |L12.30|
00001e  7818              LDRB     r0,[r3,#0]            ;881
000020  4242              RSBS     r2,r0,#0              ;881
000022  4610              MOV      r0,r2                 ;882
000024  e7f5              B        |L12.18|
                  |L12.38|
000026  b913              CBNZ     r3,|L12.46|
000028  782a              LDRB     r2,[r5,#0]            ;885
00002a  4610              MOV      r0,r2                 ;886
00002c  e7f1              B        |L12.18|
                  |L12.46|
00002e  4629              MOV      r1,r5                 ;890
000030  461c              MOV      r4,r3                 ;891
000032  460f              MOV      r7,r1                 ;892
000034  4626              MOV      r6,r4                 ;893
000036  1c7f              ADDS     r7,r7,#1              ;894
000038  1c76              ADDS     r6,r6,#1              ;895
00003a  f04f0800          MOV      r8,#0                 ;896
00003e  e005              B        |L12.76|
                  |L12.64|
000040  1c49              ADDS     r1,r1,#1              ;903
000042  1c64              ADDS     r4,r4,#1              ;904
000044  1c7f              ADDS     r7,r7,#1              ;905
000046  1c76              ADDS     r6,r6,#1              ;906
000048  f1080801          ADD      r8,r8,#1              ;907
                  |L12.76|
00004c  7808              LDRB     r0,[r1,#0]            ;898
00004e  f8949000          LDRB     r9,[r4,#0]            ;898
000052  4548              CMP      r0,r9                 ;898
000054  d105              BNE      |L12.98|
000056  7808              LDRB     r0,[r1,#0]            ;899
000058  b118              CBZ      r0,|L12.98|
00005a  b117              CBZ      r7,|L12.98|
00005c  b10e              CBZ      r6,|L12.98|
00005e  45e0              CMP      r8,r12                ;902
000060  d3ee              BCC      |L12.64|
                  |L12.98|
000062  45e0              CMP      r8,r12                ;911
000064  d101              BNE      |L12.106|
000066  2000              MOVS     r0,#0                 ;912
000068  e7d3              B        |L12.18|
                  |L12.106|
00006a  7808              LDRB     r0,[r1,#0]            ;915
00006c  f8949000          LDRB     r9,[r4,#0]            ;915
000070  4548              CMP      r0,r9                 ;915
000072  d005              BEQ      |L12.128|
000074  7808              LDRB     r0,[r1,#0]            ;917
000076  f8949000          LDRB     r9,[r4,#0]            ;917
00007a  eba00209          SUB      r2,r0,r9              ;917
00007e  e00b              B        |L12.152|
                  |L12.128|
000080  7808              LDRB     r0,[r1,#0]            ;919
000082  b908              CBNZ     r0,|L12.136|
000084  2200              MOVS     r2,#0                 ;920
000086  e007              B        |L12.152|
                  |L12.136|
000088  b92f              CBNZ     r7,|L12.150|
00008a  b90e              CBNZ     r6,|L12.144|
00008c  2200              MOVS     r2,#0                 ;925
00008e  e003              B        |L12.152|
                  |L12.144|
000090  7830              LDRB     r0,[r6,#0]            ;928
000092  4242              RSBS     r2,r0,#0              ;928
000094  e000              B        |L12.152|
                  |L12.150|
000096  783a              LDRB     r2,[r7,#0]            ;931
                  |L12.152|
000098  4610              MOV      r0,r2                 ;936
00009a  e7ba              B        |L12.18|
;;;938    
                          ENDP


                          AREA ||i.Str_Copy||, CODE, READONLY, ALIGN=1

                  Str_Copy PROC
;;;351    
;;;352    CPU_CHAR  *Str_Copy (       CPU_CHAR  *pstr_dest,
000000  b570              PUSH     {r4-r6,lr}
;;;353                         const  CPU_CHAR  *pstr_src)
;;;354    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;355        CPU_CHAR  *pstr_rtn;
;;;356    
;;;357    
;;;358        pstr_rtn = Str_Copy_N(pstr_dest,
000006  f04f32ff          MOV      r2,#0xffffffff
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Str_Copy_N
000012  4606              MOV      r6,r0
;;;359                              pstr_src,
;;;360                              DEF_INT_CPU_U_MAX_VAL);
;;;361    
;;;362        return (pstr_rtn);
000014  4630              MOV      r0,r6
;;;363    }
000016  bd70              POP      {r4-r6,pc}
;;;364    
                          ENDP


                          AREA ||i.Str_Copy_N||, CODE, READONLY, ALIGN=1

                  Str_Copy_N PROC
;;;442    /*$PAGE*/
;;;443    CPU_CHAR  *Str_Copy_N (       CPU_CHAR    *pstr_dest,
000000  b570              PUSH     {r4-r6,lr}
;;;444                           const  CPU_CHAR    *pstr_src,
;;;445                                  CPU_SIZE_T   len_max)
;;;446    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;447               CPU_CHAR    *pstr_copy_dest;
;;;448        const  CPU_CHAR    *pstr_copy_src;
;;;449               CPU_SIZE_T   len_copy;
;;;450    
;;;451                                                                    /* Rtn NULL if str ptr(s) NULL (see Note #3a1).         */
;;;452        if (pstr_dest == (CPU_CHAR *)0) {
000008  b90c              CBNZ     r4,|L14.14|
;;;453            return ((CPU_CHAR *)0);
00000a  2000              MOVS     r0,#0
                  |L14.12|
;;;454        }
;;;455        if (pstr_src  == (const CPU_CHAR *)0) {
;;;456            return ((CPU_CHAR *)0);
;;;457        }
;;;458    
;;;459    
;;;460        pstr_copy_dest = pstr_dest;
;;;461        pstr_copy_src  = pstr_src;
;;;462        len_copy       = 0u;
;;;463    
;;;464        while (( pstr_copy_dest != (      CPU_CHAR *)  0 ) &&       /* Copy str until NULL ptr(s)  [see Note #3b]  ...      */
;;;465               ( pstr_copy_src  != (const CPU_CHAR *)  0 ) &&
;;;466               (*pstr_copy_src  != (      CPU_CHAR  )'\0') &&       /* ... or NULL char found      (see Note #3c); ...      */
;;;467               ( len_copy       <  (      CPU_SIZE_T)len_max)) {    /* ... or max nbr chars copied (see Note #3d).          */
;;;468           *pstr_copy_dest = *pstr_copy_src;
;;;469            pstr_copy_dest++;
;;;470            pstr_copy_src++;
;;;471            len_copy++;
;;;472        }
;;;473                                                                    /* Rtn NULL if NULL ptr(s) found  (see Note #3b1).      */
;;;474        if ((pstr_copy_dest == (      CPU_CHAR *)0) ||
;;;475            (pstr_copy_src  == (const CPU_CHAR *)0)) {
;;;476             return ((CPU_CHAR *)0);
;;;477        }
;;;478    
;;;479        if (len_copy < len_max) {                                   /* If  copy str len < max buf len (see Note #2a2A), ... */
;;;480           *pstr_copy_dest = (CPU_CHAR)'\0';                        /* ... copy NULL char  (see Note #3c1).                 */
;;;481        }
;;;482    
;;;483    
;;;484        return (pstr_dest);                                         /* Rtn ptr to dest str (see Note #2b1).                 */
;;;485    }
00000c  bd70              POP      {r4-r6,pc}
                  |L14.14|
00000e  b90d              CBNZ     r5,|L14.20|
000010  2000              MOVS     r0,#0                 ;456
000012  e7fb              B        |L14.12|
                  |L14.20|
000014  4621              MOV      r1,r4                 ;460
000016  462a              MOV      r2,r5                 ;461
000018  2300              MOVS     r3,#0                 ;462
00001a  e004              B        |L14.38|
                  |L14.28|
00001c  7810              LDRB     r0,[r2,#0]            ;468
00001e  7008              STRB     r0,[r1,#0]            ;468
000020  1c49              ADDS     r1,r1,#1              ;469
000022  1c52              ADDS     r2,r2,#1              ;470
000024  1c5b              ADDS     r3,r3,#1              ;471
                  |L14.38|
000026  b121              CBZ      r1,|L14.50|
000028  b11a              CBZ      r2,|L14.50|
00002a  7810              LDRB     r0,[r2,#0]            ;466
00002c  b108              CBZ      r0,|L14.50|
00002e  42b3              CMP      r3,r6                 ;467
000030  d3f4              BCC      |L14.28|
                  |L14.50|
000032  b101              CBZ      r1,|L14.54|
000034  b90a              CBNZ     r2,|L14.58|
                  |L14.54|
000036  2000              MOVS     r0,#0                 ;476
000038  e7e8              B        |L14.12|
                  |L14.58|
00003a  42b3              CMP      r3,r6                 ;479
00003c  d201              BCS      |L14.66|
00003e  2000              MOVS     r0,#0                 ;480
000040  7008              STRB     r0,[r1,#0]            ;480
                  |L14.66|
000042  4620              MOV      r0,r4                 ;484
000044  e7e2              B        |L14.12|
;;;486    
                          ENDP


                          AREA ||i.Str_FmtNbr_Int32||, CODE, READONLY, ALIGN=1

                  Str_FmtNbr_Int32 PROC
;;;3471   
;;;3472   static  CPU_CHAR  *Str_FmtNbr_Int32 (CPU_INT32U    nbr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;3473                                        CPU_INT08U    nbr_dig,
;;;3474                                        CPU_INT08U    nbr_base,
;;;3475                                        CPU_BOOLEAN   nbr_neg,
;;;3476                                        CPU_CHAR      lead_char,
;;;3477                                        CPU_BOOLEAN   lower_case,
;;;3478                                        CPU_BOOLEAN   nul,
;;;3479                                        CPU_CHAR     *pstr)
;;;3480   {
000004  b08d              SUB      sp,sp,#0x34
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
00000a  9e1a              LDR      r6,[sp,#0x68]
;;;3481       CPU_CHAR     *pstr_fmt;
;;;3482       CPU_DATA      i;
;;;3483       CPU_INT32U    nbr_fmt;
;;;3484       CPU_INT32U    nbr_log;
;;;3485       CPU_INT08U    nbr_dig_max;
;;;3486       CPU_INT08U    nbr_dig_min;
;;;3487       CPU_INT08U    nbr_dig_fmtd;
;;;3488       CPU_INT08U    nbr_neg_sign;
;;;3489       CPU_INT08U    nbr_lead_char;
;;;3490       CPU_INT08U    dig_val;
;;;3491       CPU_INT08U    lead_char_delta_0;
;;;3492       CPU_INT08U    lead_char_delta_a;
;;;3493       CPU_BOOLEAN   lead_char_dig;
;;;3494       CPU_BOOLEAN   lead_char_0;
;;;3495       CPU_BOOLEAN   fmt_invalid;
;;;3496       CPU_BOOLEAN   print_char;
;;;3497       CPU_BOOLEAN   nbr_neg_fmtd;
;;;3498   
;;;3499   
;;;3500   /*$PAGE*/
;;;3501                                                                   /* ---------------- VALIDATE FMT ARGS ----------------- */
;;;3502       if (pstr == (CPU_CHAR *)0) {                                /* Rtn NULL if str ptr NULL (see Note #6a).             */
00000c  981d              LDR      r0,[sp,#0x74]
00000e  b918              CBNZ     r0,|L15.24|
;;;3503           return ((CPU_CHAR *)0);
000010  2000              MOVS     r0,#0
                  |L15.18|
;;;3504       }
;;;3505   
;;;3506       fmt_invalid = DEF_NO;
;;;3507   
;;;3508       if (nbr_dig < 1) {                                          /* If nbr digs = 0, ...                                 */
;;;3509           fmt_invalid = DEF_YES;                                  /* ... fmt invalid str (see Note #6b).                  */
;;;3510       }
;;;3511                                                                   /* If invalid base, ...                                 */
;;;3512       if ((nbr_base <  2u) ||
;;;3513           (nbr_base > 36u)) {
;;;3514           fmt_invalid = DEF_YES;                                  /* ... fmt invalid str (see Note #6d).                  */
;;;3515       }
;;;3516   
;;;3517       if (lead_char != (CPU_CHAR)'\0') {
;;;3518           print_char =  ASCII_IsPrint(lead_char);
;;;3519           if (print_char != DEF_YES) {                            /* If lead char non-printable (see Note #3a1), ...      */
;;;3520               fmt_invalid = DEF_YES;                              /* ... fmt invalid str        (see Note #6e).           */
;;;3521   
;;;3522           } else if (lead_char != '0') {                          /* Chk lead char for non-0 nbr base dig.                */
;;;3523               lead_char_delta_0 = (CPU_INT08U)(lead_char - '0');
;;;3524               if (lower_case != DEF_YES) {
;;;3525                   lead_char_delta_a = (CPU_INT08U)(lead_char - 'A');
;;;3526               } else {
;;;3527                   lead_char_delta_a = (CPU_INT08U)(lead_char - 'a');
;;;3528               }
;;;3529   
;;;3530               lead_char_dig = (((nbr_base <= 10u) &&  (lead_char_delta_0 <  nbr_base))      ||
;;;3531                                ((nbr_base >  10u) && ((lead_char_delta_0 <             10u) ||
;;;3532                                                       (lead_char_delta_a < (nbr_base - 10u))))) ? DEF_YES : DEF_NO;
;;;3533   
;;;3534               if (lead_char_dig == DEF_YES) {                     /* If lead char non-0 nbr base dig (see Note #3a2A), ...*/
;;;3535                   fmt_invalid = DEF_YES;                          /* ... fmt invalid str             (see Note #6e).      */
;;;3536               }
;;;3537           }
;;;3538       }
;;;3539   
;;;3540   
;;;3541                                                                   /* ----------------- PREPARE NBR FMT ------------------ */
;;;3542       pstr_fmt = pstr;
;;;3543   
;;;3544       if (fmt_invalid == DEF_NO) {
;;;3545           nbr_fmt     = nbr;
;;;3546           nbr_log     = nbr;
;;;3547           nbr_dig_max = 1u;
;;;3548           while (nbr_log >= nbr_base) {                           /* While nbr base digs avail, ...                       */
;;;3549               nbr_dig_max++;                                      /* ... calc max nbr digs.                               */
;;;3550               nbr_log /= nbr_base;
;;;3551           }
;;;3552   
;;;3553           nbr_neg_sign = (nbr_neg == DEF_YES) ? 1u : 0u;
;;;3554           if (nbr_dig >= (nbr_dig_max + nbr_neg_sign)) {          /* If req'd nbr digs >= (max nbr digs + neg sign), ...  */
;;;3555               nbr_neg_fmtd = DEF_NO;
;;;3556               nbr_dig_min  = DEF_MIN(nbr_dig_max, nbr_dig);
;;;3557                                                                   /* ... calc nbr digs to fmt & nbr lead chars.           */
;;;3558               if (lead_char != (CPU_CHAR)'\0') {
;;;3559                   nbr_dig_fmtd  = nbr_dig;
;;;3560                   nbr_lead_char = nbr_dig     -
;;;3561                                   nbr_dig_min - nbr_neg_sign;
;;;3562               } else {
;;;3563                   nbr_dig_fmtd  = nbr_dig_min + nbr_neg_sign;
;;;3564                   nbr_lead_char = 0u;
;;;3565               }
;;;3566   
;;;3567               if (nbr_lead_char > 0) {                            /* If lead chars to fmt, ...                            */
;;;3568                   lead_char_0 = (lead_char == '0')                /* ... chk if lead char a '0' dig (see Note #3a2B).     */
;;;3569                               ?  DEF_YES : DEF_NO;
;;;3570               } else {
;;;3571                   lead_char_0 =  DEF_NO;
;;;3572               }
;;;3573   
;;;3574           } else {                                                /* Else if nbr trunc'd, ...                             */
;;;3575               fmt_invalid = DEF_YES;                              /* ... fmt invalid str (see Note #6c).                  */
;;;3576           }
;;;3577       }
;;;3578   
;;;3579       if (fmt_invalid != DEF_NO) {
;;;3580           nbr_dig_fmtd = nbr_dig;
;;;3581       }
;;;3582   
;;;3583   
;;;3584   /*$PAGE*/
;;;3585                                                                   /* ------------------- FMT NBR STR -------------------- */
;;;3586       pstr_fmt += nbr_dig_fmtd;                                   /* Start fmt @ least-sig dig.                           */
;;;3587   
;;;3588       if (nul != DEF_NO) {                                        /* If NOT DISABLED, append NULL char (see Note #4).     */
;;;3589          *pstr_fmt = (CPU_CHAR)'\0';
;;;3590       }
;;;3591       pstr_fmt--;
;;;3592   
;;;3593   
;;;3594       for (i = 0u; i < nbr_dig_fmtd; i++) {                       /* Fmt str for desired nbr digs :                       */
;;;3595           if (fmt_invalid == DEF_NO) {
;;;3596               if ((nbr_fmt > 0) ||                                /* If fmt nbr > 0                               ...     */
;;;3597                   (i == 0u)) {                                    /* ... OR on one's  dig to fmt (see Note #3c1), ...     */
;;;3598                                                                   /* ... calc & fmt dig val;                      ...     */
;;;3599                   dig_val = (CPU_INT08U)(nbr_fmt % nbr_base);
;;;3600                   if (dig_val < 10u) {
;;;3601                      *pstr_fmt-- = (CPU_CHAR)(dig_val + '0');
;;;3602                   } else {
;;;3603                       if (lower_case !=  DEF_YES) {
;;;3604                          *pstr_fmt--  = (CPU_CHAR)((dig_val - 10u) + 'A');
;;;3605                       } else {
;;;3606                          *pstr_fmt--  = (CPU_CHAR)((dig_val - 10u) + 'a');
;;;3607                       }
;;;3608                   }
;;;3609   
;;;3610                   nbr_fmt /= nbr_base;                            /* Shift to next more-sig dig.                          */
;;;3611   
;;;3612               } else if ((nbr_neg      == DEF_YES)  &&            /* ... else if nbr neg             AND          ...     */
;;;3613                        (((lead_char_0  == DEF_NO )  &&            /* ... lead char NOT a '0' dig                  ...     */
;;;3614                          (nbr_neg_fmtd == DEF_NO )) ||            /* ... but neg sign NOT yet fmt'd  OR           ...     */
;;;3615                         ((lead_char_0  != DEF_NO )  &&            /* ... lead char is  a '0' dig                  ...     */
;;;3616                          (i == (nbr_dig_fmtd - 1u))))) {          /* ... & on most-sig dig to fmt,                ...     */
;;;3617   
;;;3618                  *pstr_fmt--   = '-';                             /* ... prepend neg sign (see Note #3b);         ...     */
;;;3619                   nbr_neg_fmtd = DEF_YES;
;;;3620   
;;;3621               } else if (lead_char != (CPU_CHAR)'\0') {           /* ... else if avail,                           ...     */
;;;3622                  *pstr_fmt-- = lead_char;                         /* ... fmt lead char.                                   */
;;;3623               }
;;;3624   
;;;3625           } else {                                                /* Else fmt '?' for invalid str (see Note #7).          */
;;;3626              *pstr_fmt-- = '?';
;;;3627           }
;;;3628       }
;;;3629   
;;;3630   
;;;3631       if (fmt_invalid != DEF_NO) {                                /* Rtn NULL for invalid str fmt (see Notes #6a - #6e).  */
;;;3632           return ((CPU_CHAR *)0);
;;;3633       }
;;;3634   
;;;3635   
;;;3636       return (pstr);                                              /* Rtn ptr to fmt'd str (see Note #6f).                 */
;;;3637   }
000012  b011              ADD      sp,sp,#0x44
000014  e8bd8ff0          POP      {r4-r11,pc}
                  |L15.24|
000018  2000              MOVS     r0,#0                 ;3506
00001a  9003              STR      r0,[sp,#0xc]          ;3506
00001c  2f01              CMP      r7,#1                 ;3508
00001e  da01              BGE      |L15.36|
000020  2001              MOVS     r0,#1                 ;3509
000022  9003              STR      r0,[sp,#0xc]          ;3509
                  |L15.36|
000024  2d02              CMP      r5,#2                 ;3512
000026  d301              BCC      |L15.44|
000028  2d24              CMP      r5,#0x24              ;3513
00002a  d901              BLS      |L15.48|
                  |L15.44|
00002c  2001              MOVS     r0,#1                 ;3514
00002e  9003              STR      r0,[sp,#0xc]          ;3514
                  |L15.48|
000030  b396              CBZ      r6,|L15.152|
000032  4630              MOV      r0,r6                 ;3518
000034  f7fffffe          BL       ASCII_IsPrint
000038  9002              STR      r0,[sp,#8]            ;3518
00003a  9802              LDR      r0,[sp,#8]            ;3519
00003c  2801              CMP      r0,#1                 ;3519
00003e  d002              BEQ      |L15.70|
000040  2001              MOVS     r0,#1                 ;3520
000042  9003              STR      r0,[sp,#0xc]          ;3520
000044  e028              B        |L15.152|
                  |L15.70|
000046  2e30              CMP      r6,#0x30              ;3522
000048  d026              BEQ      |L15.152|
00004a  f1a60030          SUB      r0,r6,#0x30           ;3523
00004e  b2c0              UXTB     r0,r0                 ;3523
000050  9007              STR      r0,[sp,#0x1c]         ;3523
000052  981b              LDR      r0,[sp,#0x6c]         ;3524
000054  2801              CMP      r0,#1                 ;3524
000056  d004              BEQ      |L15.98|
000058  f1a60041          SUB      r0,r6,#0x41           ;3525
00005c  b2c0              UXTB     r0,r0                 ;3525
00005e  9006              STR      r0,[sp,#0x18]         ;3525
000060  e003              B        |L15.106|
                  |L15.98|
000062  f1a60061          SUB      r0,r6,#0x61           ;3527
000066  b2c0              UXTB     r0,r0                 ;3527
000068  9006              STR      r0,[sp,#0x18]         ;3527
                  |L15.106|
00006a  2d0a              CMP      r5,#0xa               ;3530
00006c  d802              BHI      |L15.116|
00006e  9807              LDR      r0,[sp,#0x1c]         ;3530
000070  42a8              CMP      r0,r5                 ;3530
000072  db09              BLT      |L15.136|
                  |L15.116|
000074  2d0a              CMP      r5,#0xa               ;3531
000076  d909              BLS      |L15.140|
000078  9807              LDR      r0,[sp,#0x1c]         ;3531
00007a  280a              CMP      r0,#0xa               ;3531
00007c  d304              BCC      |L15.136|
00007e  f1a5000a          SUB      r0,r5,#0xa            ;3532
000082  9906              LDR      r1,[sp,#0x18]         ;3532
000084  4288              CMP      r0,r1                 ;3532
000086  d901              BLS      |L15.140|
                  |L15.136|
000088  2001              MOVS     r0,#1                 ;3532
00008a  e000              B        |L15.142|
                  |L15.140|
00008c  2000              MOVS     r0,#0                 ;3532
                  |L15.142|
00008e  9005              STR      r0,[sp,#0x14]         ;3532
000090  9805              LDR      r0,[sp,#0x14]         ;3534
000092  2801              CMP      r0,#1                 ;3534
000094  d100              BNE      |L15.152|
000096  9003              STR      r0,[sp,#0xc]          ;3535
                  |L15.152|
000098  9c1d              LDR      r4,[sp,#0x74]         ;3542
00009a  9803              LDR      r0,[sp,#0xc]          ;3544
00009c  2800              CMP      r0,#0                 ;3544
00009e  d146              BNE      |L15.302|
0000a0  f8dda034          LDR      r10,[sp,#0x34]        ;3545
0000a4  f8dda034          LDR      r10,[sp,#0x34]        ;3546
0000a8  f8cda030          STR      r10,[sp,#0x30]        ;3546
0000ac  2001              MOVS     r0,#1                 ;3547
0000ae  900b              STR      r0,[sp,#0x2c]         ;3547
0000b0  e007              B        |L15.194|
                  |L15.178|
0000b2  980b              LDR      r0,[sp,#0x2c]         ;3549
0000b4  1c40              ADDS     r0,r0,#1              ;3549
0000b6  b2c0              UXTB     r0,r0                 ;3549
0000b8  900b              STR      r0,[sp,#0x2c]         ;3549
0000ba  980c              LDR      r0,[sp,#0x30]         ;3550
0000bc  fbb0f0f5          UDIV     r0,r0,r5              ;3550
0000c0  900c              STR      r0,[sp,#0x30]         ;3550
                  |L15.194|
0000c2  980c              LDR      r0,[sp,#0x30]         ;3548
0000c4  42a8              CMP      r0,r5                 ;3548
0000c6  d2f4              BCS      |L15.178|
0000c8  9810              LDR      r0,[sp,#0x40]         ;3553
0000ca  2801              CMP      r0,#1                 ;3553
0000cc  d100              BNE      |L15.208|
0000ce  e000              B        |L15.210|
                  |L15.208|
0000d0  2000              MOVS     r0,#0                 ;3553
                  |L15.210|
0000d2  9009              STR      r0,[sp,#0x24]         ;3553
0000d4  990b              LDR      r1,[sp,#0x2c]         ;3554
0000d6  9809              LDR      r0,[sp,#0x24]         ;3554
0000d8  4408              ADD      r0,r0,r1              ;3554
0000da  42b8              CMP      r0,r7                 ;3554
0000dc  dc25              BGT      |L15.298|
0000de  2000              MOVS     r0,#0                 ;3555
0000e0  9001              STR      r0,[sp,#4]            ;3555
0000e2  980b              LDR      r0,[sp,#0x2c]         ;3556
0000e4  42b8              CMP      r0,r7                 ;3556
0000e6  da01              BGE      |L15.236|
0000e8  980b              LDR      r0,[sp,#0x2c]         ;3556
0000ea  e000              B        |L15.238|
                  |L15.236|
0000ec  4638              MOV      r0,r7                 ;3556
                  |L15.238|
0000ee  900a              STR      r0,[sp,#0x28]         ;3556
0000f0  b13e              CBZ      r6,|L15.258|
0000f2  46b8              MOV      r8,r7                 ;3559
0000f4  980a              LDR      r0,[sp,#0x28]         ;3560
0000f6  1a39              SUBS     r1,r7,r0              ;3560
0000f8  9809              LDR      r0,[sp,#0x24]         ;3560
0000fa  1a08              SUBS     r0,r1,r0              ;3560
0000fc  b2c0              UXTB     r0,r0                 ;3560
0000fe  9008              STR      r0,[sp,#0x20]         ;3560
000100  e006              B        |L15.272|
                  |L15.258|
000102  e9dd1009          LDRD     r1,r0,[sp,#0x24]      ;3563
000106  4408              ADD      r0,r0,r1              ;3563
000108  f00008ff          AND      r8,r0,#0xff           ;3563
00010c  2000              MOVS     r0,#0                 ;3564
00010e  9008              STR      r0,[sp,#0x20]         ;3564
                  |L15.272|
000110  9808              LDR      r0,[sp,#0x20]         ;3567
000112  2800              CMP      r0,#0                 ;3567
000114  dd06              BLE      |L15.292|
000116  2e30              CMP      r6,#0x30              ;3568
000118  d101              BNE      |L15.286|
00011a  2001              MOVS     r0,#1                 ;3569
00011c  e000              B        |L15.288|
                  |L15.286|
00011e  2000              MOVS     r0,#0                 ;3569
                  |L15.288|
000120  9004              STR      r0,[sp,#0x10]         ;3569
000122  e004              B        |L15.302|
                  |L15.292|
000124  2000              MOVS     r0,#0                 ;3571
000126  9004              STR      r0,[sp,#0x10]         ;3571
000128  e001              B        |L15.302|
                  |L15.298|
00012a  2001              MOVS     r0,#1                 ;3575
00012c  9003              STR      r0,[sp,#0xc]          ;3575
                  |L15.302|
00012e  9803              LDR      r0,[sp,#0xc]          ;3579
000130  b100              CBZ      r0,|L15.308|
000132  46b8              MOV      r8,r7                 ;3580
                  |L15.308|
000134  4444              ADD      r4,r4,r8              ;3586
000136  981c              LDR      r0,[sp,#0x70]         ;3588
000138  b108              CBZ      r0,|L15.318|
00013a  2000              MOVS     r0,#0                 ;3589
00013c  7020              STRB     r0,[r4,#0]            ;3589
                  |L15.318|
00013e  1e64              SUBS     r4,r4,#1              ;3591
000140  f04f0900          MOV      r9,#0                 ;3594
000144  e041              B        |L15.458|
                  |L15.326|
000146  9803              LDR      r0,[sp,#0xc]          ;3595
000148  bba8              CBNZ     r0,|L15.438|
00014a  f1ba0f00          CMP      r10,#0                ;3596
00014e  d102              BNE      |L15.342|
000150  f1b90f00          CMP      r9,#0                 ;3597
000154  d11c              BNE      |L15.400|
                  |L15.342|
000156  fbbaf0f5          UDIV     r0,r10,r5             ;3599
00015a  fb05a010          MLS      r0,r5,r0,r10          ;3599
00015e  f0000bff          AND      r11,r0,#0xff          ;3599
000162  f1bb0f0a          CMP      r11,#0xa              ;3600
000166  d204              BCS      |L15.370|
000168  f10b0030          ADD      r0,r11,#0x30          ;3601
00016c  f8040901          STRB     r0,[r4],#-1           ;3601
000170  e00b              B        |L15.394|
                  |L15.370|
000172  981b              LDR      r0,[sp,#0x6c]         ;3603
000174  2801              CMP      r0,#1                 ;3603
000176  d004              BEQ      |L15.386|
000178  f10b0037          ADD      r0,r11,#0x37          ;3604
00017c  f8040901          STRB     r0,[r4],#-1           ;3604
000180  e003              B        |L15.394|
                  |L15.386|
000182  f10b0057          ADD      r0,r11,#0x57          ;3606
000186  f8040901          STRB     r0,[r4],#-1           ;3606
                  |L15.394|
00018a  fbbafaf5          UDIV     r10,r10,r5            ;3610
00018e  e01a              B        |L15.454|
                  |L15.400|
000190  9810              LDR      r0,[sp,#0x40]         ;3612
000192  2801              CMP      r0,#1                 ;3612
000194  d110              BNE      |L15.440|
000196  9804              LDR      r0,[sp,#0x10]         ;3613
000198  b908              CBNZ     r0,|L15.414|
00019a  9801              LDR      r0,[sp,#4]            ;3614
00019c  b128              CBZ      r0,|L15.426|
                  |L15.414|
00019e  9804              LDR      r0,[sp,#0x10]         ;3615
0001a0  b150              CBZ      r0,|L15.440|
0001a2  f1a80001          SUB      r0,r8,#1              ;3616
0001a6  4548              CMP      r0,r9                 ;3616
0001a8  d106              BNE      |L15.440|
                  |L15.426|
0001aa  202d              MOVS     r0,#0x2d              ;3618
0001ac  f8040901          STRB     r0,[r4],#-1           ;3618
0001b0  2001              MOVS     r0,#1                 ;3619
0001b2  9001              STR      r0,[sp,#4]            ;3619
0001b4  e007              B        |L15.454|
                  |L15.438|
0001b6  e003              B        |L15.448|
                  |L15.440|
0001b8  b12e              CBZ      r6,|L15.454|
0001ba  f8046901          STRB     r6,[r4],#-1           ;3622
0001be  e002              B        |L15.454|
                  |L15.448|
0001c0  203f              MOVS     r0,#0x3f              ;3626
0001c2  f8040901          STRB     r0,[r4],#-1           ;3626
                  |L15.454|
0001c6  f1090901          ADD      r9,r9,#1              ;3594
                  |L15.458|
0001ca  45c1              CMP      r9,r8                 ;3594
0001cc  d3bb              BCC      |L15.326|
0001ce  9803              LDR      r0,[sp,#0xc]          ;3631
0001d0  b108              CBZ      r0,|L15.470|
0001d2  2000              MOVS     r0,#0                 ;3632
0001d4  e71d              B        |L15.18|
                  |L15.470|
0001d6  981d              LDR      r0,[sp,#0x74]         ;3636
0001d8  e71b              B        |L15.18|
;;;3638   
                          ENDP


                          AREA ||i.Str_FmtNbr_Int32S||, CODE, READONLY, ALIGN=1

                  Str_FmtNbr_Int32S PROC
;;;2275   
;;;2276   CPU_CHAR  *Str_FmtNbr_Int32S (CPU_INT32S    nbr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2277                                 CPU_INT08U    nbr_dig,
;;;2278                                 CPU_INT08U    nbr_base,
;;;2279                                 CPU_CHAR      lead_char,
;;;2280                                 CPU_BOOLEAN   lower_case,
;;;2281                                 CPU_BOOLEAN   nul,
;;;2282                                 CPU_CHAR     *pstr)
;;;2283   {
000004  b085              SUB      sp,sp,#0x14
000006  4604              MOV      r4,r0
000008  4689              MOV      r9,r1
00000a  461f              MOV      r7,r3
00000c  e9ddab13          LDRD     r10,r11,[sp,#0x4c]
;;;2284       CPU_CHAR     *pstr_fmt;
;;;2285       CPU_INT32S    nbr_fmt;
;;;2286       CPU_BOOLEAN   nbr_neg;
;;;2287   
;;;2288   
;;;2289       if (nbr < 0) {                                              /* If nbr neg, ...                                      */
000010  2c00              CMP      r4,#0
000012  da02              BGE      |L16.26|
;;;2290           nbr_fmt = -nbr;                                         /* ... negate nbr.                                      */
000014  4265              RSBS     r5,r4,#0
;;;2291           nbr_neg =  DEF_YES;
000016  2601              MOVS     r6,#1
000018  e001              B        |L16.30|
                  |L16.26|
;;;2292       } else {
;;;2293           nbr_fmt =  nbr;
00001a  4625              MOV      r5,r4
;;;2294           nbr_neg =  DEF_NO;
00001c  2600              MOVS     r6,#0
                  |L16.30|
;;;2295       }
;;;2296   
;;;2297       pstr_fmt = Str_FmtNbr_Int32((CPU_INT32U)nbr_fmt,            /* Fmt signed int into str.                             */
00001e  9812              LDR      r0,[sp,#0x48]
000020  4633              MOV      r3,r6
000022  e9cdab02          STRD     r10,r11,[sp,#8]
000026  e9cd7000          STRD     r7,r0,[sp,#0]
00002a  4649              MOV      r1,r9
00002c  4628              MOV      r0,r5
00002e  9a07              LDR      r2,[sp,#0x1c]
000030  f7fffffe          BL       Str_FmtNbr_Int32
000034  4680              MOV      r8,r0
;;;2298                                               nbr_dig,
;;;2299                                               nbr_base,
;;;2300                                               nbr_neg,
;;;2301                                               lead_char,
;;;2302                                               lower_case,
;;;2303                                               nul,
;;;2304                                               pstr);
;;;2305   
;;;2306       return (pstr_fmt);
000036  4640              MOV      r0,r8
;;;2307   }
000038  b009              ADD      sp,sp,#0x24
00003a  e8bd8ff0          POP      {r4-r11,pc}
;;;2308   
                          ENDP


                          AREA ||i.Str_FmtNbr_Int32U||, CODE, READONLY, ALIGN=1

                  Str_FmtNbr_Int32U PROC
;;;2058   
;;;2059   CPU_CHAR  *Str_FmtNbr_Int32U (CPU_INT32U    nbr,
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;2060                                 CPU_INT08U    nbr_dig,
;;;2061                                 CPU_INT08U    nbr_base,
;;;2062                                 CPU_CHAR      lead_char,
;;;2063                                 CPU_BOOLEAN   lower_case,
;;;2064                                 CPU_BOOLEAN   nul,
;;;2065                                 CPU_CHAR     *pstr)
;;;2066   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  461c              MOV      r4,r3
00000c  e9dd9a0f          LDRD     r9,r10,[sp,#0x3c]
000010  f8dd8038          LDR      r8,[sp,#0x38]
;;;2067       CPU_CHAR  *pstr_fmt;
;;;2068   
;;;2069   
;;;2070       pstr_fmt = Str_FmtNbr_Int32(nbr,                            /* Fmt unsigned int into str.                           */
000014  2300              MOVS     r3,#0
000016  463a              MOV      r2,r7
000018  4631              MOV      r1,r6
00001a  4628              MOV      r0,r5
00001c  e88d0710          STM      sp,{r4,r8-r10}
000020  f7fffffe          BL       Str_FmtNbr_Int32
000024  4683              MOV      r11,r0
;;;2071                                   nbr_dig,
;;;2072                                   nbr_base,
;;;2073                                   DEF_NO,
;;;2074                                   lead_char,
;;;2075                                   lower_case,
;;;2076                                   nul,
;;;2077                                   pstr);
;;;2078   
;;;2079       return (pstr_fmt);
000026  4658              MOV      r0,r11
;;;2080   }
000028  b004              ADD      sp,sp,#0x10
00002a  e8bd9ff0          POP      {r4-r12,pc}
;;;2081   
                          ENDP


                          AREA ||i.Str_Len||, CODE, READONLY, ALIGN=1

                  Str_Len PROC
;;;218    
;;;219    CPU_SIZE_T  Str_Len (const  CPU_CHAR  *pstr)
000000  b530              PUSH     {r4,r5,lr}
;;;220    {
000002  4604              MOV      r4,r0
;;;221        CPU_SIZE_T  len;
;;;222    
;;;223    
;;;224        len = Str_Len_N(pstr,
000004  f04f31ff          MOV      r1,#0xffffffff
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       Str_Len_N
00000e  4605              MOV      r5,r0
;;;225                        DEF_INT_CPU_U_MAX_VAL);
;;;226    
;;;227        return (len);
000010  4628              MOV      r0,r5
;;;228    }
000012  bd30              POP      {r4,r5,pc}
;;;229    
                          ENDP


                          AREA ||i.Str_Len_N||, CODE, READONLY, ALIGN=1

                  Str_Len_N PROC
;;;278    
;;;279    CPU_SIZE_T  Str_Len_N (const  CPU_CHAR    *pstr,
000000  b510              PUSH     {r4,lr}
;;;280                                  CPU_SIZE_T   len_max)
;;;281    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;282        const  CPU_CHAR    *pstr_len;
;;;283               CPU_SIZE_T   len;
;;;284    
;;;285    
;;;286        pstr_len = pstr;
000006  4611              MOV      r1,r2
;;;287        len      = 0u;
000008  2000              MOVS     r0,#0
;;;288        while (( pstr_len != (const CPU_CHAR *)  0 ) &&             /* Calc str len until NULL ptr (see Note #3a) ...       */
00000a  e001              B        |L19.16|
                  |L19.12|
;;;289               (*pstr_len != (      CPU_CHAR  )'\0') &&             /* ... or NULL char found      (see Note #3b) ...       */
;;;290               ( len      <  (      CPU_SIZE_T)len_max)) {          /* ... or max nbr chars srch'd (see Note #3c).          */
;;;291            pstr_len++;
00000c  1c49              ADDS     r1,r1,#1
;;;292            len++;
00000e  1c40              ADDS     r0,r0,#1
                  |L19.16|
000010  b119              CBZ      r1,|L19.26|
000012  780c              LDRB     r4,[r1,#0]            ;289
000014  b10c              CBZ      r4,|L19.26|
000016  4298              CMP      r0,r3                 ;290
000018  d3f8              BCC      |L19.12|
                  |L19.26|
;;;293        }
;;;294    
;;;295        return (len);                                               /* Rtn str len (see Note #3b1).                         */
;;;296    }
00001a  bd10              POP      {r4,pc}
;;;297    
                          ENDP


                          AREA ||i.Str_ParseNbr_Int32||, CODE, READONLY, ALIGN=2

                  Str_ParseNbr_Int32 PROC
;;;3866   /*$PAGE*/
;;;3867   static  CPU_INT32U  Str_ParseNbr_Int32 (const  CPU_CHAR      *pstr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;3868                                                  CPU_CHAR     **pstr_next,
;;;3869                                                  CPU_INT08U     nbr_base,
;;;3870                                                  CPU_BOOLEAN    nbr_signed,
;;;3871                                                  CPU_BOOLEAN   *pnbr_neg)
;;;3872   {
000004  b08b              SUB      sp,sp,#0x2c
000006  4606              MOV      r6,r0
000008  4689              MOV      r9,r1
00000a  4615              MOV      r5,r2
;;;3873       const  CPU_CHAR     *pstr_parse;
;;;3874       const  CPU_CHAR     *pstr_parse_nbr;
;;;3875              CPU_CHAR     *pstr_parse_unused;
;;;3876              CPU_CHAR      parse_char;
;;;3877              CPU_INT08U    parse_dig;
;;;3878              CPU_INT32U    nbr;
;;;3879              CPU_BOOLEAN   nbr_neg_unused;
;;;3880              CPU_BOOLEAN   nbr_dig;
;;;3881              CPU_BOOLEAN   nbr_alpha;
;;;3882              CPU_BOOLEAN   nbr_hex;
;;;3883              CPU_BOOLEAN   nbr_hex_lower;
;;;3884              CPU_BOOLEAN   whitespace;
;;;3885              CPU_BOOLEAN   neg;
;;;3886              CPU_BOOLEAN   ovf;
;;;3887              CPU_BOOLEAN   done;
;;;3888   
;;;3889                                                                   /* --------------- VALIDATE PARSE ARGS ---------------- */
;;;3890       if (pstr_next == (CPU_CHAR **) 0) {                         /* If NOT avail, ...                                    */
00000c  f1b90f00          CMP      r9,#0
000010  d102              BNE      |L20.24|
;;;3891           pstr_next  = (CPU_CHAR **)&pstr_parse_unused;           /* ... re-cfg NULL rtn ptr to unused local var.         */
000012  f10d0924          ADD      r9,sp,#0x24
;;;3892          (void)&pstr_parse_unused;                                /* Prevent possible 'variable unused' warning.          */
000016  bf00              NOP      
                  |L20.24|
;;;3893       }
;;;3894      *pstr_next = (CPU_CHAR *)pstr;                               /* Init rtn str for err (see Note #5).                  */
000018  f8c96000          STR      r6,[r9,#0]
;;;3895   
;;;3896       if (pnbr_neg == (CPU_BOOLEAN *) 0) {                        /* If NOT avail, ...                                    */
00001c  9818              LDR      r0,[sp,#0x60]
00001e  b910              CBNZ     r0,|L20.38|
;;;3897           pnbr_neg  = (CPU_BOOLEAN *)&nbr_neg_unused;             /* ... re-cfg NULL rtn ptr to unused local var.         */
000020  a807              ADD      r0,sp,#0x1c
000022  9018              STR      r0,[sp,#0x60]
;;;3898          (void)&nbr_neg_unused;                                   /* Prevent possible 'variable unused' warning.          */
000024  bf00              NOP      
                  |L20.38|
;;;3899       }
;;;3900      *pnbr_neg = DEF_NO;                                          /* Init nbr neg for err (see Note #5).                  */
000026  2100              MOVS     r1,#0
000028  9818              LDR      r0,[sp,#0x60]
00002a  7001              STRB     r1,[r0,#0]
;;;3901   
;;;3902   
;;;3903       if (pstr == (CPU_CHAR *)0) {                                /* Rtn zero if str ptr NULL (see Note #4b1).            */
00002c  b91e              CBNZ     r6,|L20.54|
;;;3904           return (0u);
00002e  2000              MOVS     r0,#0
                  |L20.48|
;;;3905       }
;;;3906                                                                   /* Rtn zero if invalid base (see Note #4a).             */
;;;3907       if ((nbr_base == 1u) ||
;;;3908           (nbr_base > 36u)) {
;;;3909           return (0u);
;;;3910       }
;;;3911   
;;;3912   
;;;3913                                                                   /* ------------- IGNORE PRECEDING CHAR(S) ------------- */
;;;3914       pstr_parse = pstr;                                          /* Save ptr to init'l str for err (see Note #2a2A2).    */
;;;3915   
;;;3916       whitespace = ASCII_IsSpace(*pstr_parse);
;;;3917       while (whitespace == DEF_YES) {                             /* Ignore initial white-space char(s) [see Note #2a1A]. */
;;;3918           pstr_parse++;
;;;3919           whitespace = ASCII_IsSpace(*pstr_parse);
;;;3920       }
;;;3921   
;;;3922       switch (*pstr_parse) {
;;;3923           case '+':                                               /* Ignore   pos sign (see Note #2a1B2).                 */
;;;3924                pstr_parse++;
;;;3925                neg = DEF_NO;
;;;3926                break;
;;;3927   
;;;3928   
;;;3929           case '-':                                               /* Validate neg sign (see Note #2a1B2a).                */
;;;3930                if (nbr_signed == DEF_YES) {
;;;3931                    pstr_parse++;
;;;3932                }
;;;3933                neg = DEF_YES;
;;;3934                break;
;;;3935   
;;;3936   
;;;3937           default:
;;;3938                neg = DEF_NO;
;;;3939                break;
;;;3940       }
;;;3941   
;;;3942   
;;;3943   /*$PAGE*/
;;;3944                                                                   /* --------- IGNORE NBR BASE PRECEDING CHAR(S) -------- */
;;;3945       pstr_parse_nbr = pstr_parse;                                /* Save ptr to str's nbr (see Note #2a1A1).             */
;;;3946   
;;;3947       switch (nbr_base) {
;;;3948           case  0u:                                               /* Determine unspecified nbr base (see Notes #2a1B1a).  */
;;;3949                if (*pstr_parse == '0') {                          /* If avail, ...                                        */
;;;3950                     pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2).        */
;;;3951                     switch (*pstr_parse) {
;;;3952                         case 'x':                                 /* For '0x' prefix, ...                                 */
;;;3953                         case 'X':
;;;3954                              nbr_base   = 16u;                    /* ... set nbr base = 16    (see Note #2a1B1a3).        */
;;;3955                              parse_char = (CPU_CHAR)(*(pstr_parse + 1));
;;;3956                              nbr_hex    =  ASCII_IsDigHex(parse_char);
;;;3957                              if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
;;;3958                                  pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
;;;3959                              }
;;;3960                              break;
;;;3961   
;;;3962   
;;;3963                         default:                                  /* For '0'  prefix, ...                                 */
;;;3964                              nbr_base =  8u;                      /* ... set nbr base =  8    (see Note #2a1B1a2).        */
;;;3965                              break;
;;;3966                     }
;;;3967   
;;;3968                } else {                                           /* For non-'0' prefix, ...                              */
;;;3969                    nbr_base = 10u;                                /* ... set nbr base = 10    (see Note #2a1B1a1).        */
;;;3970                }
;;;3971                break;
;;;3972   
;;;3973   
;;;3974           case  8u:                                               /* See Note #2a1B1a2.                                   */
;;;3975                if (*pstr_parse == '0') {                          /* If avail, ...                                        */
;;;3976                     pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2B).       */
;;;3977                }
;;;3978                break;
;;;3979   
;;;3980   
;;;3981           case 16u:                                               /* See Note #2a1B1a3.                                   */
;;;3982                if (*pstr_parse == '0') {                          /* If avail, ...                                        */
;;;3983                     pstr_parse++;                                 /* ... adv past '0'  prefix (see Note #2a1B1b2).        */
;;;3984                     switch (*pstr_parse) {
;;;3985                         case 'x':
;;;3986                         case 'X':
;;;3987                              parse_char = (CPU_CHAR)(*(pstr_parse + 1));
;;;3988                              nbr_hex    =  ASCII_IsDigHex(parse_char);
;;;3989                              if (nbr_hex == DEF_YES) {            /* If next char is valid hex dig, ...                   */
;;;3990                                  pstr_parse++;                    /* ... adv past '0x' prefix (see Note #2a1B1b2A).       */
;;;3991                              }
;;;3992                              break;
;;;3993   
;;;3994   
;;;3995                         default:
;;;3996                              break;
;;;3997                     }
;;;3998                }
;;;3999                break;
;;;4000   
;;;4001   
;;;4002           default:                                                /* See Note #2a1B1b.                                    */
;;;4003                break;
;;;4004       }
;;;4005   
;;;4006   
;;;4007   /*$PAGE*/
;;;4008                                                                   /* ------------------ PARSE INT STR ------------------- */
;;;4009       nbr  = 0u;
;;;4010       ovf  = DEF_NO;
;;;4011       done = DEF_NO;
;;;4012   
;;;4013       while (done == DEF_NO) {                                    /* Parse str for desired nbr base digs (see Note #2a2). */
;;;4014           parse_char = (CPU_CHAR)*pstr_parse;
;;;4015           nbr_alpha  =  ASCII_IsAlphaNum(parse_char);
;;;4016           if (nbr_alpha == DEF_YES) {                             /* If valid alpha num nbr dig avail, ...                */
;;;4017                                                                   /* ... convert parse char into nbr dig.                 */
;;;4018               nbr_dig = ASCII_IsDig(parse_char);
;;;4019               if (nbr_dig == DEF_YES) {
;;;4020                   parse_dig = (CPU_INT08U)(parse_char - '0');
;;;4021               } else {
;;;4022                   nbr_hex_lower = ASCII_IsLower(parse_char);
;;;4023                   if (nbr_hex_lower == DEF_YES) {
;;;4024                       parse_dig = (CPU_INT08U)((parse_char - 'a') + 10u);
;;;4025                   } else {
;;;4026                       parse_dig = (CPU_INT08U)((parse_char - 'A') + 10u);
;;;4027                   }
;;;4028               }
;;;4029   
;;;4030               if (parse_dig < nbr_base) {                         /* If parse char valid for nbr base ...                 */
;;;4031                   if (ovf == DEF_NO) {                            /* ... & nbr NOT yet ovf'd,         ...                 */
;;;4032                       if (nbr <= Str_MultOvfThTbl_Int32U[nbr_base]) {
;;;4033                                                                   /* ... merge parse char dig into nbr.                   */
;;;4034                           nbr *= nbr_base;
;;;4035                           nbr += parse_dig;
;;;4036                           if (nbr < parse_dig) {
;;;4037                               ovf = DEF_YES;
;;;4038                           }
;;;4039                       } else {
;;;4040                           ovf = DEF_YES;
;;;4041                       }
;;;4042                   }
;;;4043                   pstr_parse++;
;;;4044   
;;;4045               } else {                                            /* Invalid         char parsed (see Note #2a1C1a).      */
;;;4046                   done = DEF_YES;
;;;4047               }
;;;4048   
;;;4049           } else {                                                /* Invalid OR NULL char parsed (see Note #2a1C1).       */
;;;4050               done = DEF_YES;
;;;4051           }
;;;4052       }
;;;4053   
;;;4054       if (ovf == DEF_YES) {                                       /* If nbr ovf'd, ...                                    */
;;;4055           nbr  = DEF_INT_32U_MAX_VAL;                             /* ... rtn max int val (see Note #2a3A1).               */
;;;4056       }
;;;4057   
;;;4058   
;;;4059       if (pstr_parse !=             pstr_parse_nbr) {             /* If final parse str != init'l parse nbr str,       .. */
;;;4060          *pstr_next   = (CPU_CHAR *)pstr_parse;                   /* .. rtn   parse str's next char (see Note #2a2B2); .. */
;;;4061       } else {
;;;4062          *pstr_next   = (CPU_CHAR *)pstr;                         /* .. else rtn initial parse str  (see Note #2a2A2).    */
;;;4063       }
;;;4064   
;;;4065      *pnbr_neg = neg;                                             /* Rtn neg nbr status.                                  */
;;;4066   
;;;4067   
;;;4068       return (nbr);
;;;4069   }
000030  b00f              ADD      sp,sp,#0x3c
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L20.54|
000036  2d01              CMP      r5,#1                 ;3907
000038  d001              BEQ      |L20.62|
00003a  2d24              CMP      r5,#0x24              ;3908
00003c  d901              BLS      |L20.66|
                  |L20.62|
00003e  2000              MOVS     r0,#0                 ;3909
000040  e7f6              B        |L20.48|
                  |L20.66|
000042  4634              MOV      r4,r6                 ;3914
000044  7820              LDRB     r0,[r4,#0]            ;3916
000046  f7fffffe          BL       ASCII_IsSpace
00004a  9003              STR      r0,[sp,#0xc]          ;3916
00004c  e004              B        |L20.88|
                  |L20.78|
00004e  1c64              ADDS     r4,r4,#1              ;3918
000050  7820              LDRB     r0,[r4,#0]            ;3919
000052  f7fffffe          BL       ASCII_IsSpace
000056  9003              STR      r0,[sp,#0xc]          ;3919
                  |L20.88|
000058  9803              LDR      r0,[sp,#0xc]          ;3917
00005a  2801              CMP      r0,#1                 ;3917
00005c  d0f7              BEQ      |L20.78|
00005e  7820              LDRB     r0,[r4,#0]            ;3922
000060  282b              CMP      r0,#0x2b              ;3922
000062  d002              BEQ      |L20.106|
000064  282d              CMP      r0,#0x2d              ;3922
000066  d10b              BNE      |L20.128|
000068  e003              B        |L20.114|
                  |L20.106|
00006a  1c64              ADDS     r4,r4,#1              ;3924
00006c  f04f0b00          MOV      r11,#0                ;3925
000070  e009              B        |L20.134|
                  |L20.114|
000072  980e              LDR      r0,[sp,#0x38]         ;3930
000074  2801              CMP      r0,#1                 ;3930
000076  d100              BNE      |L20.122|
000078  1c64              ADDS     r4,r4,#1              ;3931
                  |L20.122|
00007a  f04f0b01          MOV      r11,#1                ;3933
00007e  e002              B        |L20.134|
                  |L20.128|
000080  f04f0b00          MOV      r11,#0                ;3938
000084  bf00              NOP                            ;3939
                  |L20.134|
000086  bf00              NOP                            ;3926
000088  940a              STR      r4,[sp,#0x28]         ;3945
00008a  b125              CBZ      r5,|L20.150|
00008c  2d08              CMP      r5,#8                 ;3947
00008e  d01c              BEQ      |L20.202|
000090  2d10              CMP      r5,#0x10              ;3947
000092  d136              BNE      |L20.258|
000094  e01e              B        |L20.212|
                  |L20.150|
000096  7820              LDRB     r0,[r4,#0]            ;3949
000098  2830              CMP      r0,#0x30              ;3949
00009a  d114              BNE      |L20.198|
00009c  1c64              ADDS     r4,r4,#1              ;3950
00009e  7820              LDRB     r0,[r4,#0]            ;3951
0000a0  2858              CMP      r0,#0x58              ;3951
0000a2  d002              BEQ      |L20.170|
0000a4  2878              CMP      r0,#0x78              ;3951
0000a6  d10b              BNE      |L20.192|
0000a8  bf00              NOP                            ;3953
                  |L20.170|
0000aa  2510              MOVS     r5,#0x10              ;3954
0000ac  7867              LDRB     r7,[r4,#1]            ;3955
0000ae  4638              MOV      r0,r7                 ;3956
0000b0  f7fffffe          BL       ASCII_IsDigHex
0000b4  4682              MOV      r10,r0                ;3956
0000b6  f1ba0f01          CMP      r10,#1                ;3957
0000ba  d100              BNE      |L20.190|
0000bc  1c64              ADDS     r4,r4,#1              ;3958
                  |L20.190|
0000be  e001              B        |L20.196|
                  |L20.192|
0000c0  2508              MOVS     r5,#8                 ;3964
0000c2  bf00              NOP                            ;3965
                  |L20.196|
0000c4  e000              B        |L20.200|
                  |L20.198|
0000c6  250a              MOVS     r5,#0xa               ;3969
                  |L20.200|
0000c8  e01c              B        |L20.260|
                  |L20.202|
0000ca  7820              LDRB     r0,[r4,#0]            ;3975
0000cc  2830              CMP      r0,#0x30              ;3975
0000ce  d100              BNE      |L20.210|
0000d0  1c64              ADDS     r4,r4,#1              ;3976
                  |L20.210|
0000d2  e017              B        |L20.260|
                  |L20.212|
0000d4  7820              LDRB     r0,[r4,#0]            ;3982
0000d6  2830              CMP      r0,#0x30              ;3982
0000d8  d112              BNE      |L20.256|
0000da  1c64              ADDS     r4,r4,#1              ;3983
0000dc  7820              LDRB     r0,[r4,#0]            ;3984
0000de  2858              CMP      r0,#0x58              ;3984
0000e0  d002              BEQ      |L20.232|
0000e2  2878              CMP      r0,#0x78              ;3984
0000e4  d10a              BNE      |L20.252|
0000e6  bf00              NOP                            ;3986
                  |L20.232|
0000e8  7867              LDRB     r7,[r4,#1]            ;3987
0000ea  4638              MOV      r0,r7                 ;3988
0000ec  f7fffffe          BL       ASCII_IsDigHex
0000f0  4682              MOV      r10,r0                ;3988
0000f2  f1ba0f01          CMP      r10,#1                ;3989
0000f6  d100              BNE      |L20.250|
0000f8  1c64              ADDS     r4,r4,#1              ;3990
                  |L20.250|
0000fa  e000              B        |L20.254|
                  |L20.252|
0000fc  bf00              NOP                            ;3996
                  |L20.254|
0000fe  bf00              NOP                            ;3992
                  |L20.256|
000100  e000              B        |L20.260|
                  |L20.258|
000102  bf00              NOP                            ;4003
                  |L20.260|
000104  bf00              NOP                            ;3971
000106  f04f0800          MOV      r8,#0                 ;4009
00010a  2000              MOVS     r0,#0                 ;4010
00010c  9002              STR      r0,[sp,#8]            ;4010
00010e  9001              STR      r0,[sp,#4]            ;4011
000110  e040              B        |L20.404|
                  |L20.274|
000112  7827              LDRB     r7,[r4,#0]            ;4014
000114  4638              MOV      r0,r7                 ;4015
000116  f7fffffe          BL       ASCII_IsAlphaNum
00011a  9005              STR      r0,[sp,#0x14]         ;4015
00011c  9805              LDR      r0,[sp,#0x14]         ;4016
00011e  2801              CMP      r0,#1                 ;4016
000120  d136              BNE      |L20.400|
000122  4638              MOV      r0,r7                 ;4018
000124  f7fffffe          BL       ASCII_IsDig
000128  9006              STR      r0,[sp,#0x18]         ;4018
00012a  9806              LDR      r0,[sp,#0x18]         ;4019
00012c  2801              CMP      r0,#1                 ;4019
00012e  d104              BNE      |L20.314|
000130  f1a70030          SUB      r0,r7,#0x30           ;4020
000134  b2c0              UXTB     r0,r0                 ;4020
000136  9008              STR      r0,[sp,#0x20]         ;4020
000138  e00f              B        |L20.346|
                  |L20.314|
00013a  4638              MOV      r0,r7                 ;4022
00013c  f7fffffe          BL       ASCII_IsLower
000140  9004              STR      r0,[sp,#0x10]         ;4022
000142  9804              LDR      r0,[sp,#0x10]         ;4023
000144  2801              CMP      r0,#1                 ;4023
000146  d104              BNE      |L20.338|
000148  f1a70057          SUB      r0,r7,#0x57           ;4024
00014c  b2c0              UXTB     r0,r0                 ;4024
00014e  9008              STR      r0,[sp,#0x20]         ;4024
000150  e003              B        |L20.346|
                  |L20.338|
000152  f1a70037          SUB      r0,r7,#0x37           ;4026
000156  b2c0              UXTB     r0,r0                 ;4026
000158  9008              STR      r0,[sp,#0x20]         ;4026
                  |L20.346|
00015a  9808              LDR      r0,[sp,#0x20]         ;4030
00015c  42a8              CMP      r0,r5                 ;4030
00015e  da14              BGE      |L20.394|
000160  9802              LDR      r0,[sp,#8]            ;4031
000162  b980              CBNZ     r0,|L20.390|
000164  4816              LDR      r0,|L20.448|
000166  f8500025          LDR      r0,[r0,r5,LSL #2]     ;4032
00016a  4540              CMP      r0,r8                 ;4032
00016c  d309              BCC      |L20.386|
00016e  fb08f805          MUL      r8,r8,r5              ;4034
000172  9808              LDR      r0,[sp,#0x20]         ;4035
000174  4480              ADD      r8,r8,r0              ;4035
000176  9808              LDR      r0,[sp,#0x20]         ;4036
000178  4580              CMP      r8,r0                 ;4036
00017a  d204              BCS      |L20.390|
00017c  2001              MOVS     r0,#1                 ;4037
00017e  9002              STR      r0,[sp,#8]            ;4037
000180  e001              B        |L20.390|
                  |L20.386|
000182  2001              MOVS     r0,#1                 ;4040
000184  9002              STR      r0,[sp,#8]            ;4040
                  |L20.390|
000186  1c64              ADDS     r4,r4,#1              ;4043
000188  e004              B        |L20.404|
                  |L20.394|
00018a  2001              MOVS     r0,#1                 ;4046
00018c  9001              STR      r0,[sp,#4]            ;4046
00018e  e001              B        |L20.404|
                  |L20.400|
000190  2001              MOVS     r0,#1                 ;4050
000192  9001              STR      r0,[sp,#4]            ;4050
                  |L20.404|
000194  9801              LDR      r0,[sp,#4]            ;4013
000196  2800              CMP      r0,#0                 ;4013
000198  d0bb              BEQ      |L20.274|
00019a  9802              LDR      r0,[sp,#8]            ;4054
00019c  2801              CMP      r0,#1                 ;4054
00019e  d101              BNE      |L20.420|
0001a0  f04f38ff          MOV      r8,#0xffffffff        ;4055
                  |L20.420|
0001a4  980a              LDR      r0,[sp,#0x28]         ;4059
0001a6  4284              CMP      r4,r0                 ;4059
0001a8  d002              BEQ      |L20.432|
0001aa  f8c94000          STR      r4,[r9,#0]            ;4060
0001ae  e001              B        |L20.436|
                  |L20.432|
0001b0  f8c96000          STR      r6,[r9,#0]            ;4062
                  |L20.436|
0001b4  9818              LDR      r0,[sp,#0x60]         ;4065
0001b6  f880b000          STRB     r11,[r0,#0]           ;4065
0001ba  4640              MOV      r0,r8                 ;4068
0001bc  e738              B        |L20.48|
;;;4070   
                          ENDP

0001be  0000              DCW      0x0000
                  |L20.448|
                          DCD      Str_MultOvfThTbl_Int32U

                          AREA ||i.Str_ParseNbr_Int32S||, CODE, READONLY, ALIGN=1

                  Str_ParseNbr_Int32S PROC
;;;3215   
;;;3216   CPU_INT32S  Str_ParseNbr_Int32S (const  CPU_CHAR     *pstr,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;3217                                           CPU_CHAR    **pstr_next,
;;;3218                                           CPU_INT08U    nbr_base)
;;;3219   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;3220       CPU_INT32S   nbr;
;;;3221       CPU_INT32U   nbr_abs;
;;;3222       CPU_BOOLEAN  nbr_neg;
;;;3223   
;;;3224   
;;;3225       nbr_abs = Str_ParseNbr_Int32(pstr,                          /* Parse/convert str ...                                */
00000a  a801              ADD      r0,sp,#4
00000c  2301              MOVS     r3,#1
00000e  463a              MOV      r2,r7
000010  4631              MOV      r1,r6
000012  9000              STR      r0,[sp,#0]
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       Str_ParseNbr_Int32
00001a  4604              MOV      r4,r0
;;;3226                                    pstr_next,
;;;3227                                    nbr_base,
;;;3228                                    DEF_YES,                       /* ... as signed int (see Note #2a2).                   */
;;;3229                                   &nbr_neg);
;;;3230   
;;;3231       if (nbr_neg == DEF_NO) {                                    /* Chk for neg nbr & ovf/undf (see Note #2a3A1).        */
00001c  f89d0004          LDRB     r0,[sp,#4]
000020  b940              CBNZ     r0,|L21.52|
;;;3232           nbr = (nbr_abs > (CPU_INT32U) DEF_INT_32S_MAX_VAL)          ?  (CPU_INT32S)DEF_INT_32S_MAX_VAL
000022  f1b44f00          CMP      r4,#0x80000000
000026  d302              BCC      |L21.46|
000028  f06f4000          MVN      r0,#0x80000000
00002c  e000              B        |L21.48|
                  |L21.46|
;;;3233                                                                       :  (CPU_INT32S)nbr_abs;
00002e  4620              MOV      r0,r4
                  |L21.48|
000030  4680              MOV      r8,r0
000032  e007              B        |L21.68|
                  |L21.52|
;;;3234       } else {
;;;3235           nbr = (nbr_abs > (CPU_INT32U)-DEF_INT_32S_MIN_VAL_ONES_CPL) ?  (CPU_INT32S)DEF_INT_32S_MIN_VAL
000034  f1b44f00          CMP      r4,#0x80000000
000038  d302              BCC      |L21.64|
00003a  f04f4000          MOV      r0,#0x80000000
00003e  e000              B        |L21.66|
                  |L21.64|
;;;3236                                                                       : -(CPU_INT32S)nbr_abs;
000040  4260              RSBS     r0,r4,#0
                  |L21.66|
000042  4680              MOV      r8,r0
                  |L21.68|
;;;3237       }
;;;3238   
;;;3239       return (nbr);
000044  4640              MOV      r0,r8
;;;3240   }
000046  e8bd81fc          POP      {r2-r8,pc}
;;;3241   
                          ENDP


                          AREA ||i.Str_ParseNbr_Int32U||, CODE, READONLY, ALIGN=1

                  Str_ParseNbr_Int32U PROC
;;;2998   
;;;2999   CPU_INT32U  Str_ParseNbr_Int32U (const  CPU_CHAR     *pstr,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3000                                           CPU_CHAR    **pstr_next,
;;;3001                                           CPU_INT08U    nbr_base)
;;;3002   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;3003       CPU_INT32U  nbr;
;;;3004   
;;;3005   
;;;3006       nbr = Str_ParseNbr_Int32(               pstr,               /* Parse/convert str ...                                */
000008  2000              MOVS     r0,#0
00000a  4603              MOV      r3,r0
00000c  4632              MOV      r2,r6
00000e  4629              MOV      r1,r5
000010  9000              STR      r0,[sp,#0]
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       Str_ParseNbr_Int32
000018  4607              MOV      r7,r0
;;;3007                                               pstr_next,
;;;3008                                               nbr_base,
;;;3009                                               DEF_NO,             /* ... as unsigned int (see Note #2a2).                 */
;;;3010                                (CPU_BOOLEAN *)0);
;;;3011   
;;;3012       return (nbr);
00001a  4638              MOV      r0,r7
;;;3013   }
00001c  bdf8              POP      {r3-r7,pc}
;;;3014   
                          ENDP


                          AREA ||i.Str_Str||, CODE, READONLY, ALIGN=1

                  Str_Str PROC
;;;1779   
;;;1780   CPU_CHAR  *Str_Str (const  CPU_CHAR  *pstr,
000000  b570              PUSH     {r4-r6,lr}
;;;1781                       const  CPU_CHAR  *pstr_srch)
;;;1782   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1783       CPU_CHAR  *pstr_rtn;
;;;1784   
;;;1785   
;;;1786       pstr_rtn = Str_Str_N(pstr,
000006  f04f32ff          MOV      r2,#0xffffffff
00000a  4629              MOV      r1,r5
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       Str_Str_N
000012  4606              MOV      r6,r0
;;;1787                            pstr_srch,
;;;1788                            DEF_INT_CPU_U_MAX_VAL);
;;;1789   
;;;1790       return (pstr_rtn);
000014  4630              MOV      r0,r6
;;;1791   }
000016  bd70              POP      {r4-r6,pc}
;;;1792   
                          ENDP


                          AREA ||i.Str_Str_N||, CODE, READONLY, ALIGN=1

                  Str_Str_N PROC
;;;1864   /*$PAGE*/
;;;1865   CPU_CHAR  *Str_Str_N (const  CPU_CHAR    *pstr,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1866                         const  CPU_CHAR    *pstr_srch,
;;;1867                                CPU_SIZE_T   len_max)
;;;1868   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;1869              CPU_SIZE_T    str_len;
;;;1870              CPU_SIZE_T    str_len_srch;
;;;1871              CPU_SIZE_T    len_max_srch;
;;;1872              CPU_SIZE_T    srch_len;
;;;1873              CPU_SIZE_T    srch_ix;
;;;1874              CPU_BOOLEAN   srch_done;
;;;1875              CPU_INT16S    srch_cmp;
;;;1876       const  CPU_CHAR     *pstr_str;
;;;1877       const  CPU_CHAR     *pstr_srch_ix;
;;;1878   
;;;1879                                                                   /* Rtn NULL if str ptr(s) NULL (see Note #3a).          */
;;;1880       if (pstr == (const CPU_CHAR *)0) {
00000a  b91e              CBNZ     r6,|L24.20|
;;;1881           return ((CPU_CHAR *)0);
00000c  2000              MOVS     r0,#0
                  |L24.14|
;;;1882       }
;;;1883       if (pstr_srch == (const CPU_CHAR *)0) {
;;;1884           return ((CPU_CHAR *)0);
;;;1885       }
;;;1886   
;;;1887       if (len_max < 1) {                                          /* Rtn NULL if srch len = 0    (see Note #3g).          */
;;;1888           return ((CPU_CHAR *)0);
;;;1889       }
;;;1890   
;;;1891                                                                   /* Lim max srch str len (to chk > str len).             */
;;;1892       len_max_srch = (len_max <       DEF_INT_CPU_U_MAX_VAL)
;;;1893                    ? (len_max + 1u) : DEF_INT_CPU_U_MAX_VAL;
;;;1894   
;;;1895       str_len      = Str_Len_N(pstr,      len_max);
;;;1896       str_len_srch = Str_Len_N(pstr_srch, len_max_srch);
;;;1897       if (str_len_srch < 1) {                                     /* Rtn ptr to str if srch str len = 0 (see Note #2b2).  */
;;;1898           return ((CPU_CHAR *)pstr);
;;;1899       }
;;;1900       if (str_len_srch > str_len) {                               /* Rtn NULL if srch str len > str len (see Note #3d).   */
;;;1901           return ((CPU_CHAR *)0);
;;;1902       }
;;;1903                                                                   /* Rtn NULL if NULL ptr found         (see Note #3b1).  */
;;;1904       pstr_str = pstr      + str_len;
;;;1905       if (pstr_str == (const CPU_CHAR *)0) {
;;;1906           return ((CPU_CHAR *)0);
;;;1907       }
;;;1908       pstr_str = pstr_srch + str_len_srch;
;;;1909       if (pstr_str == (const CPU_CHAR *)0) {
;;;1910           return ((CPU_CHAR *)0);
;;;1911       }
;;;1912   
;;;1913   
;;;1914       srch_len  = str_len - str_len_srch;                         /* Calc srch len (see Note #3e2).                       */
;;;1915       srch_ix   = 0u;
;;;1916       srch_done = DEF_NO;
;;;1917   
;;;1918       do {
;;;1919           pstr_srch_ix = (const CPU_CHAR *)(pstr + srch_ix);
;;;1920           srch_cmp     =  Str_Cmp_N(pstr_srch_ix, pstr_srch, str_len_srch);
;;;1921           srch_done    = (srch_cmp == 0) ? DEF_YES : DEF_NO;
;;;1922           srch_ix++;
;;;1923       } while ((srch_done == DEF_NO) && (srch_ix <= srch_len));
;;;1924   
;;;1925   
;;;1926       if (srch_cmp != 0) {                                        /* Rtn NULL if srch str NOT found (see Note #3e2).      */
;;;1927           return ((CPU_CHAR *)0);
;;;1928       }
;;;1929   
;;;1930       return ((CPU_CHAR *)pstr_srch_ix);                          /* Else rtn ptr to found srch str (see Note #3f1).      */
;;;1931   }
00000e  b004              ADD      sp,sp,#0x10
000010  e8bd8ff0          POP      {r4-r11,pc}
                  |L24.20|
000014  b90f              CBNZ     r7,|L24.26|
000016  2000              MOVS     r0,#0                 ;1884
000018  e7f9              B        |L24.14|
                  |L24.26|
00001a  b90d              CBNZ     r5,|L24.32|
00001c  2000              MOVS     r0,#0                 ;1888
00001e  e7f6              B        |L24.14|
                  |L24.32|
000020  1c68              ADDS     r0,r5,#1              ;1892
000022  b100              CBZ      r0,|L24.38|
000024  e001              B        |L24.42|
                  |L24.38|
000026  f04f30ff          MOV      r0,#0xffffffff        ;1893
                  |L24.42|
00002a  9003              STR      r0,[sp,#0xc]          ;1893
00002c  4629              MOV      r1,r5                 ;1895
00002e  4630              MOV      r0,r6                 ;1895
000030  f7fffffe          BL       Str_Len_N
000034  4680              MOV      r8,r0                 ;1895
000036  4638              MOV      r0,r7                 ;1896
000038  9903              LDR      r1,[sp,#0xc]          ;1896
00003a  f7fffffe          BL       Str_Len_N
00003e  4604              MOV      r4,r0                 ;1896
000040  b90c              CBNZ     r4,|L24.70|
000042  4630              MOV      r0,r6                 ;1898
000044  e7e3              B        |L24.14|
                  |L24.70|
000046  4544              CMP      r4,r8                 ;1900
000048  d901              BLS      |L24.78|
00004a  2000              MOVS     r0,#0                 ;1901
00004c  e7df              B        |L24.14|
                  |L24.78|
00004e  eb060b08          ADD      r11,r6,r8             ;1904
000052  f1bb0f00          CMP      r11,#0                ;1905
000056  d101              BNE      |L24.92|
000058  2000              MOVS     r0,#0                 ;1906
00005a  e7d8              B        |L24.14|
                  |L24.92|
00005c  eb070b04          ADD      r11,r7,r4             ;1908
000060  f1bb0f00          CMP      r11,#0                ;1909
000064  d101              BNE      |L24.106|
000066  2000              MOVS     r0,#0                 ;1910
000068  e7d1              B        |L24.14|
                  |L24.106|
00006a  eba80004          SUB      r0,r8,r4              ;1914
00006e  9002              STR      r0,[sp,#8]            ;1914
000070  f04f0900          MOV      r9,#0                 ;1915
000074  2000              MOVS     r0,#0                 ;1916
000076  9001              STR      r0,[sp,#4]            ;1916
000078  bf00              NOP                            ;1918
                  |L24.122|
00007a  eb060009          ADD      r0,r6,r9              ;1919
00007e  9000              STR      r0,[sp,#0]            ;1919
000080  4622              MOV      r2,r4                 ;1920
000082  4639              MOV      r1,r7                 ;1920
000084  9800              LDR      r0,[sp,#0]            ;1920
000086  f7fffffe          BL       Str_Cmp_N
00008a  4682              MOV      r10,r0                ;1920
00008c  f1ba0f00          CMP      r10,#0                ;1921
000090  d101              BNE      |L24.150|
000092  2001              MOVS     r0,#1                 ;1921
000094  e000              B        |L24.152|
                  |L24.150|
000096  2000              MOVS     r0,#0                 ;1921
                  |L24.152|
000098  9001              STR      r0,[sp,#4]            ;1921
00009a  f1090901          ADD      r9,r9,#1              ;1922
00009e  9801              LDR      r0,[sp,#4]            ;1923
0000a0  b910              CBNZ     r0,|L24.168|
0000a2  9802              LDR      r0,[sp,#8]            ;1923
0000a4  4581              CMP      r9,r0                 ;1923
0000a6  d9e8              BLS      |L24.122|
                  |L24.168|
0000a8  f1ba0f00          CMP      r10,#0                ;1926
0000ac  d001              BEQ      |L24.178|
0000ae  2000              MOVS     r0,#0                 ;1927
0000b0  e7ad              B        |L24.14|
                  |L24.178|
0000b2  9800              LDR      r0,[sp,#0]            ;1930
0000b4  e7ab              B        |L24.14|
;;;1932   
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  Str_MultOvfThTbl_Int32U
                          DCD      0xffffffff
                          DCD      0xffffffff
                          DCD      0x7fffffff
                          DCD      0x55555555
                          DCD      0x3fffffff
                          DCD      0x33333333
                          DCD      0x2aaaaaaa
                          DCD      0x24924924
                          DCD      0x1fffffff
                          DCD      0x1c71c71c
                          DCD      0x19999999
                          DCD      0x1745d174
                          DCD      0x15555555
                          DCD      0x13b13b13
                          DCD      0x12492492
                          DCD      0x11111111
                          DCD      0x0fffffff
                          DCD      0x0f0f0f0f
                          DCD      0x0e38e38e
                          DCD      0x0d79435e
                          DCD      0x0ccccccc
                          DCD      0x0c30c30c
                          DCD      0x0ba2e8ba
                          DCD      0x0b21642c
                          DCD      0x0aaaaaaa
                          DCD      0x0a3d70a3
                          DCD      0x09d89d89
                          DCD      0x097b425e
                          DCD      0x09249249
                          DCD      0x08d3dcb0
                          DCD      0x08888888
                          DCD      0x08421084
                          DCD      0x07ffffff
                          DCD      0x07c1f07c
                          DCD      0x07878787
                          DCD      0x07507507
                          DCD      0x071c71c7
