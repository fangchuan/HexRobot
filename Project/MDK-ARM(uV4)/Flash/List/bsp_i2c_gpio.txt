; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_i2c_gpio.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_i2c_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_i2c_gpio.crf ..\..\User\bsp_stm32f4xx\src\bsp_i2c_gpio.c]
                          THUMB

                          AREA ||i.bsp_InitI2C||, CODE, READONLY, ALIGN=2

                  bsp_InitI2C PROC
;;;54     */
;;;55     void bsp_InitI2C(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;56     {
;;;57     	GPIO_InitTypeDef GPIO_InitStructure;
;;;58     
;;;59     	RCC_AHB1PeriphClockCmd(RCC_I2C_PORT, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2080              MOVS     r0,#0x80
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;60     
;;;61     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00000a  2001              MOVS     r0,#1
00000c  f88d0004          STRB     r0,[sp,#4]
;;;62     	GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;		/* 设为开漏模式 */
000010  f88d0006          STRB     r0,[sp,#6]
;;;63     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000014  2000              MOVS     r0,#0
000016  f88d0007          STRB     r0,[sp,#7]
;;;64     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_25MHz;	/* IO口最大速度 */
00001a  2001              MOVS     r0,#1
00001c  f88d0005          STRB     r0,[sp,#5]
;;;65     
;;;66     	GPIO_InitStructure.GPIO_Pin = I2C_SCL_PIN | I2C_SDA_PIN;
000020  2030              MOVS     r0,#0x30
000022  9000              STR      r0,[sp,#0]
;;;67     	GPIO_Init(GPIO_PORT_I2C, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4803              LDR      r0,|L1.52|
000028  f7fffffe          BL       GPIO_Init
;;;68     
;;;69     	/* 给一个停止信号, 复位I2C总线上的所有设备到待机模式 */
;;;70     	i2c_Stop();
00002c  f7fffffe          BL       i2c_Stop
;;;71     }
000030  bd1c              POP      {r2-r4,pc}
;;;72     
                          ENDP

000032  0000              DCW      0x0000
                  |L1.52|
                          DCD      0x40021c00

                          AREA ||i.i2c_Ack||, CODE, READONLY, ALIGN=2

                  i2c_Ack PROC
;;;239    */
;;;240    void i2c_Ack(void)
000000  b510              PUSH     {r4,lr}
;;;241    {
;;;242    	I2C_SDA_0();	/* CPU驱动SDA = 0 */
000002  2020              MOVS     r0,#0x20
000004  4909              LDR      r1,|L2.44|
000006  8008              STRH     r0,[r1,#0]
;;;243    	i2c_Delay();
000008  f7fffffe          BL       i2c_Delay
;;;244    	I2C_SCL_1();	/* CPU产生1个时钟 */
00000c  2010              MOVS     r0,#0x10
00000e  4907              LDR      r1,|L2.44|
000010  1e89              SUBS     r1,r1,#2
000012  8008              STRH     r0,[r1,#0]
;;;245    	i2c_Delay();
000014  f7fffffe          BL       i2c_Delay
;;;246    	I2C_SCL_0();
000018  2010              MOVS     r0,#0x10
00001a  4904              LDR      r1,|L2.44|
00001c  8008              STRH     r0,[r1,#0]
;;;247    	i2c_Delay();
00001e  f7fffffe          BL       i2c_Delay
;;;248    	I2C_SDA_1();	/* CPU释放SDA总线 */
000022  2020              MOVS     r0,#0x20
000024  4901              LDR      r1,|L2.44|
000026  1e89              SUBS     r1,r1,#2
000028  8008              STRH     r0,[r1,#0]
;;;249    }
00002a  bd10              POP      {r4,pc}
;;;250    
                          ENDP

                  |L2.44|
                          DCD      0x40021c1a

                          AREA ||i.i2c_CheckDevice||, CODE, READONLY, ALIGN=2

                  i2c_CheckDevice PROC
;;;276    */
;;;277    uint8_t i2c_CheckDevice(uint8_t _Address)
000000  b570              PUSH     {r4-r6,lr}
;;;278    {
000002  4604              MOV      r4,r0
;;;279    	uint8_t ucAck;
;;;280    
;;;281    	if (I2C_SDA_READ() && I2C_SCL_READ())
000004  480b              LDR      r0,|L3.52|
000006  6800              LDR      r0,[r0,#0]
000008  f0000020          AND      r0,r0,#0x20
00000c  b180              CBZ      r0,|L3.48|
00000e  4809              LDR      r0,|L3.52|
000010  6800              LDR      r0,[r0,#0]
000012  f0000010          AND      r0,r0,#0x10
000016  b158              CBZ      r0,|L3.48|
;;;282    	{
;;;283    		i2c_Start();		/* 发送启动信号 */
000018  f7fffffe          BL       i2c_Start
;;;284    
;;;285    		/* 发送设备地址+读写控制bit（0 = w， 1 = r) bit7 先传 */
;;;286    		i2c_SendByte(_Address | I2C_WR);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       i2c_SendByte
;;;287    		ucAck = i2c_WaitAck();	/* 检测设备的ACK应答 */
000022  f7fffffe          BL       i2c_WaitAck
000026  4605              MOV      r5,r0
;;;288    
;;;289    		i2c_Stop();			/* 发送停止信号 */
000028  f7fffffe          BL       i2c_Stop
;;;290    
;;;291    		return ucAck;
00002c  4628              MOV      r0,r5
                  |L3.46|
;;;292    	}
;;;293    	return 1;	/* I2C总线异常 */
;;;294    }
00002e  bd70              POP      {r4-r6,pc}
                  |L3.48|
000030  2001              MOVS     r0,#1                 ;293
000032  e7fc              B        |L3.46|
;;;295    
                          ENDP

                  |L3.52|
                          DCD      0x40021c10

                          AREA ||i.i2c_Delay||, CODE, READONLY, ALIGN=1

                  i2c_Delay PROC
;;;80     */
;;;81     static void i2c_Delay(void)
000000  2000              MOVS     r0,#0
;;;82     {
;;;83     	uint8_t i;
;;;84     
;;;85     	/*　
;;;86     		CPU主频168MHz时，在内部Flash运行, MDK工程不优化。用台式示波器观测波形。
;;;87     		循环次数为5时，SCL频率 = 1.78MHz (读耗时: 92ms, 读写正常，但是用示波器探头碰上就读写失败。时序接近临界)
;;;88     		循环次数为10时，SCL频率 = 1.1MHz (读耗时: 138ms, 读速度: 118724B/s)
;;;89     		循环次数为30时，SCL频率 = 440KHz， SCL高电平时间1.0us，SCL低电平时间1.2us
;;;90     
;;;91     		上拉电阻选择2.2K欧时，SCL上升沿时间约0.5us，如果选4.7K欧，则上升沿约1us
;;;92     
;;;93     		实际应用选择400KHz左右的速率即可
;;;94     	*/
;;;95     	for (i = 0; i < 30; i++);
000002  e001              B        |L4.8|
                  |L4.4|
000004  1c41              ADDS     r1,r0,#1
000006  b2c8              UXTB     r0,r1
                  |L4.8|
000008  281e              CMP      r0,#0x1e
00000a  dbfb              BLT      |L4.4|
;;;96     }
00000c  4770              BX       lr
;;;97     
                          ENDP


                          AREA ||i.i2c_NAck||, CODE, READONLY, ALIGN=2

                  i2c_NAck PROC
;;;258    */
;;;259    void i2c_NAck(void)
000000  b510              PUSH     {r4,lr}
;;;260    {
;;;261    	I2C_SDA_1();	/* CPU驱动SDA = 1 */
000002  2020              MOVS     r0,#0x20
000004  4907              LDR      r1,|L5.36|
000006  8008              STRH     r0,[r1,#0]
;;;262    	i2c_Delay();
000008  f7fffffe          BL       i2c_Delay
;;;263    	I2C_SCL_1();	/* CPU产生1个时钟 */
00000c  2010              MOVS     r0,#0x10
00000e  4905              LDR      r1,|L5.36|
000010  8008              STRH     r0,[r1,#0]
;;;264    	i2c_Delay();
000012  f7fffffe          BL       i2c_Delay
;;;265    	I2C_SCL_0();
000016  2010              MOVS     r0,#0x10
000018  4902              LDR      r1,|L5.36|
00001a  1c89              ADDS     r1,r1,#2
00001c  8008              STRH     r0,[r1,#0]
;;;266    	i2c_Delay();
00001e  f7fffffe          BL       i2c_Delay
;;;267    }
000022  bd10              POP      {r4,pc}
;;;268    
                          ENDP

                  |L5.36|
                          DCD      0x40021c18

                          AREA ||i.i2c_ReadByte||, CODE, READONLY, ALIGN=2

                  i2c_ReadByte PROC
;;;180    */
;;;181    uint8_t i2c_ReadByte(void)
000000  b570              PUSH     {r4-r6,lr}
;;;182    {
;;;183    	uint8_t i;
;;;184    	uint8_t value;
;;;185    
;;;186    	/* 读到第1个bit为数据的bit7 */
;;;187    	value = 0;
000002  2400              MOVS     r4,#0
;;;188    	for (i = 0; i < 8; i++)
000004  2500              MOVS     r5,#0
000006  e016              B        |L6.54|
                  |L6.8|
;;;189    	{
;;;190    		value <<= 1;
000008  0660              LSLS     r0,r4,#25
00000a  0e04              LSRS     r4,r0,#24
;;;191    		I2C_SCL_1();
00000c  2010              MOVS     r0,#0x10
00000e  490c              LDR      r1,|L6.64|
000010  8008              STRH     r0,[r1,#0]
;;;192    		i2c_Delay();
000012  f7fffffe          BL       i2c_Delay
;;;193    		if (I2C_SDA_READ())
000016  480a              LDR      r0,|L6.64|
000018  3808              SUBS     r0,r0,#8
00001a  6800              LDR      r0,[r0,#0]
00001c  f0000020          AND      r0,r0,#0x20
000020  b108              CBZ      r0,|L6.38|
;;;194    		{
;;;195    			value++;
000022  1c60              ADDS     r0,r4,#1
000024  b2c4              UXTB     r4,r0
                  |L6.38|
;;;196    		}
;;;197    		I2C_SCL_0();
000026  2010              MOVS     r0,#0x10
000028  4905              LDR      r1,|L6.64|
00002a  1c89              ADDS     r1,r1,#2
00002c  8008              STRH     r0,[r1,#0]
;;;198    		i2c_Delay();
00002e  f7fffffe          BL       i2c_Delay
000032  1c68              ADDS     r0,r5,#1              ;188
000034  b2c5              UXTB     r5,r0                 ;188
                  |L6.54|
000036  2d08              CMP      r5,#8                 ;188
000038  dbe6              BLT      |L6.8|
;;;199    	}
;;;200    	return value;
00003a  4620              MOV      r0,r4
;;;201    }
00003c  bd70              POP      {r4-r6,pc}
;;;202    
                          ENDP

00003e  0000              DCW      0x0000
                  |L6.64|
                          DCD      0x40021c18

                          AREA ||i.i2c_SendByte||, CODE, READONLY, ALIGN=2

                  i2c_SendByte PROC
;;;144    */
;;;145    void i2c_SendByte(uint8_t _ucByte)
000000  b570              PUSH     {r4-r6,lr}
;;;146    {
000002  4604              MOV      r4,r0
;;;147    	uint8_t i;
;;;148    
;;;149    	/* 先发送字节的高位bit7 */
;;;150    	for (i = 0; i < 8; i++)
000004  2500              MOVS     r5,#0
000006  e020              B        |L7.74|
                  |L7.8|
;;;151    	{
;;;152    		if (_ucByte & 0x80)
000008  f0040080          AND      r0,r4,#0x80
00000c  b118              CBZ      r0,|L7.22|
;;;153    		{
;;;154    			I2C_SDA_1();
00000e  2020              MOVS     r0,#0x20
000010  490f              LDR      r1,|L7.80|
000012  8008              STRH     r0,[r1,#0]
000014  e003              B        |L7.30|
                  |L7.22|
;;;155    		}
;;;156    		else
;;;157    		{
;;;158    			I2C_SDA_0();
000016  2020              MOVS     r0,#0x20
000018  490d              LDR      r1,|L7.80|
00001a  1c89              ADDS     r1,r1,#2
00001c  8008              STRH     r0,[r1,#0]
                  |L7.30|
;;;159    		}
;;;160    		i2c_Delay();
00001e  f7fffffe          BL       i2c_Delay
;;;161    		I2C_SCL_1();
000022  2010              MOVS     r0,#0x10
000024  490a              LDR      r1,|L7.80|
000026  8008              STRH     r0,[r1,#0]
;;;162    		i2c_Delay();
000028  f7fffffe          BL       i2c_Delay
;;;163    		I2C_SCL_0();
00002c  2010              MOVS     r0,#0x10
00002e  4908              LDR      r1,|L7.80|
000030  1c89              ADDS     r1,r1,#2
000032  8008              STRH     r0,[r1,#0]
;;;164    		if (i == 7)
000034  2d07              CMP      r5,#7
000036  d102              BNE      |L7.62|
;;;165    		{
;;;166    			 I2C_SDA_1(); // 释放总线
000038  2020              MOVS     r0,#0x20
00003a  1e89              SUBS     r1,r1,#2
00003c  8008              STRH     r0,[r1,#0]
                  |L7.62|
;;;167    		}
;;;168    		_ucByte <<= 1;	/* 左移一个bit */
00003e  0660              LSLS     r0,r4,#25
000040  0e04              LSRS     r4,r0,#24
;;;169    		i2c_Delay();
000042  f7fffffe          BL       i2c_Delay
000046  1c68              ADDS     r0,r5,#1              ;150
000048  b2c5              UXTB     r5,r0                 ;150
                  |L7.74|
00004a  2d08              CMP      r5,#8                 ;150
00004c  dbdc              BLT      |L7.8|
;;;170    	}
;;;171    }
00004e  bd70              POP      {r4-r6,pc}
;;;172    
                          ENDP

                  |L7.80|
                          DCD      0x40021c18

                          AREA ||i.i2c_Start||, CODE, READONLY, ALIGN=2

                  i2c_Start PROC
;;;105    */
;;;106    void i2c_Start(void)
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108    	/* 当SCL高电平时，SDA出现一个下跳沿表示I2C总线启动信号 */
;;;109    	I2C_SDA_1();
000002  2020              MOVS     r0,#0x20
000004  4909              LDR      r1,|L8.44|
000006  8008              STRH     r0,[r1,#0]
;;;110    	I2C_SCL_1();
000008  2010              MOVS     r0,#0x10
00000a  8008              STRH     r0,[r1,#0]
;;;111    	i2c_Delay();
00000c  f7fffffe          BL       i2c_Delay
;;;112    	I2C_SDA_0();
000010  2020              MOVS     r0,#0x20
000012  4906              LDR      r1,|L8.44|
000014  1c89              ADDS     r1,r1,#2
000016  8008              STRH     r0,[r1,#0]
;;;113    	i2c_Delay();
000018  f7fffffe          BL       i2c_Delay
;;;114    	
;;;115    	I2C_SCL_0();
00001c  2010              MOVS     r0,#0x10
00001e  4903              LDR      r1,|L8.44|
000020  1c89              ADDS     r1,r1,#2
000022  8008              STRH     r0,[r1,#0]
;;;116    	i2c_Delay();
000024  f7fffffe          BL       i2c_Delay
;;;117    }
000028  bd10              POP      {r4,pc}
;;;118    
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      0x40021c18

                          AREA ||i.i2c_Stop||, CODE, READONLY, ALIGN=2

                  i2c_Stop PROC
;;;126    */
;;;127    void i2c_Stop(void)
000000  b510              PUSH     {r4,lr}
;;;128    {
;;;129    	/* 当SCL高电平时，SDA出现一个上跳沿表示I2C总线停止信号 */
;;;130    	I2C_SDA_0();
000002  2020              MOVS     r0,#0x20
000004  4906              LDR      r1,|L9.32|
000006  8008              STRH     r0,[r1,#0]
;;;131    	I2C_SCL_1();
000008  2010              MOVS     r0,#0x10
00000a  1e89              SUBS     r1,r1,#2
00000c  8008              STRH     r0,[r1,#0]
;;;132    	i2c_Delay();
00000e  f7fffffe          BL       i2c_Delay
;;;133    	I2C_SDA_1();
000012  2020              MOVS     r0,#0x20
000014  4902              LDR      r1,|L9.32|
000016  1e89              SUBS     r1,r1,#2
000018  8008              STRH     r0,[r1,#0]
;;;134    	i2c_Delay();
00001a  f7fffffe          BL       i2c_Delay
;;;135    }
00001e  bd10              POP      {r4,pc}
;;;136    
                          ENDP

                  |L9.32|
                          DCD      0x40021c1a

                          AREA ||i.i2c_WaitAck||, CODE, READONLY, ALIGN=2

                  i2c_WaitAck PROC
;;;210    */
;;;211    uint8_t i2c_WaitAck(void)
000000  b510              PUSH     {r4,lr}
;;;212    {
;;;213    	uint8_t re;
;;;214    
;;;215    	I2C_SDA_1();	/* CPU释放SDA总线 */
000002  2020              MOVS     r0,#0x20
000004  490c              LDR      r1,|L10.56|
000006  8008              STRH     r0,[r1,#0]
;;;216    	i2c_Delay();
000008  f7fffffe          BL       i2c_Delay
;;;217    	I2C_SCL_1();	/* CPU驱动SCL = 1, 此时器件会返回ACK应答 */
00000c  2010              MOVS     r0,#0x10
00000e  490a              LDR      r1,|L10.56|
000010  8008              STRH     r0,[r1,#0]
;;;218    	i2c_Delay();
000012  f7fffffe          BL       i2c_Delay
;;;219    	if (I2C_SDA_READ())	/* CPU读取SDA口线状态 */
000016  4808              LDR      r0,|L10.56|
000018  3808              SUBS     r0,r0,#8
00001a  6800              LDR      r0,[r0,#0]
00001c  f0000020          AND      r0,r0,#0x20
000020  b108              CBZ      r0,|L10.38|
;;;220    	{
;;;221    		re = 1;
000022  2401              MOVS     r4,#1
000024  e000              B        |L10.40|
                  |L10.38|
;;;222    	}
;;;223    	else
;;;224    	{
;;;225    		re = 0;
000026  2400              MOVS     r4,#0
                  |L10.40|
;;;226    	}
;;;227    	I2C_SCL_0();
000028  2010              MOVS     r0,#0x10
00002a  4903              LDR      r1,|L10.56|
00002c  1c89              ADDS     r1,r1,#2
00002e  8008              STRH     r0,[r1,#0]
;;;228    	i2c_Delay();
000030  f7fffffe          BL       i2c_Delay
;;;229    	return re;
000034  4620              MOV      r0,r4
;;;230    }
000036  bd10              POP      {r4,pc}
;;;231    
                          ENDP

                  |L10.56|
                          DCD      0x40021c18

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_i2c_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_i2c_gpio_c_ec180c52____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_bsp_i2c_gpio_c_ec180c52____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_i2c_gpio_c_ec180c52____REVSH|
#line 144
|__asm___14_bsp_i2c_gpio_c_ec180c52____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_bsp_i2c_gpio_c_ec180c52____RRX|
#line 300
|__asm___14_bsp_i2c_gpio_c_ec180c52____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
