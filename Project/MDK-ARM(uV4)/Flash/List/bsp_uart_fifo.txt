; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_uart_fifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_uart_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_uart_fifo.crf ..\..\User\bsp_stm32f4xx\src\bsp_uart_fifo.c]
                          THUMB

                          AREA ||i.ComToUSARTx||, CODE, READONLY, ALIGN=2

                  ComToUSARTx PROC
;;;165    */
;;;166    USART_TypeDef *ComToUSARTx(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;167    {
;;;168    	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L1.8|
;;;169    	{
;;;170    		#if UART1_FIFO_EN == 1
;;;171    			return USART1;
000004  4809              LDR      r0,|L1.44|
                  |L1.6|
;;;172    		#else
;;;173    			return 0;
;;;174    		#endif
;;;175    	}
;;;176    	else if (_ucPort == COM2)
;;;177    	{
;;;178    		#if UART2_FIFO_EN == 1
;;;179    			return USART2;
;;;180    		#else
;;;181    			return;
;;;182    		#endif
;;;183    	}
;;;184    	else if (_ucPort == COM3)
;;;185    	{
;;;186    		#if UART3_FIFO_EN == 1
;;;187    			return USART3;
;;;188    		#else
;;;189    			return 0;
;;;190    		#endif
;;;191    	}
;;;192    	else if (_ucPort == COM4)
;;;193    	{
;;;194    		#if UART4_FIFO_EN == 1
;;;195    			return USART4;
;;;196    		#else
;;;197    			return 0;
;;;198    		#endif
;;;199    	}
;;;200    	else if (_ucPort == COM5)
;;;201    	{
;;;202    		#if UART5_FIFO_EN == 1
;;;203    			return USART5;
;;;204    		#else
;;;205    			return 0;
;;;206    		#endif
;;;207    	}
;;;208    	else
;;;209    	{
;;;210    		/* 不做任何处理 */
;;;211    		return 0;
;;;212    	}
;;;213    }
000006  4770              BX       lr
                  |L1.8|
000008  2901              CMP      r1,#1                 ;176
00000a  d101              BNE      |L1.16|
00000c  4808              LDR      r0,|L1.48|
00000e  e7fa              B        |L1.6|
                  |L1.16|
000010  2902              CMP      r1,#2                 ;184
000012  d101              BNE      |L1.24|
000014  4807              LDR      r0,|L1.52|
000016  e7f6              B        |L1.6|
                  |L1.24|
000018  2903              CMP      r1,#3                 ;192
00001a  d101              BNE      |L1.32|
00001c  2000              MOVS     r0,#0                 ;197
00001e  e7f2              B        |L1.6|
                  |L1.32|
000020  2904              CMP      r1,#4                 ;200
000022  d101              BNE      |L1.40|
000024  2000              MOVS     r0,#0                 ;205
000026  e7ee              B        |L1.6|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;211
00002a  e7ec              B        |L1.6|
;;;214    
                          ENDP

                  |L1.44|
                          DCD      0x40011000
                  |L1.48|
                          DCD      0x40004400
                  |L1.52|
                          DCD      0x40004800

                          AREA ||i.ComToUart||, CODE, READONLY, ALIGN=2

                  ComToUart PROC
;;;99     */
;;;100    UART_T *ComToUart(COM_PORT_E _ucPort)
000000  4601              MOV      r1,r0
;;;101    {
;;;102    	if (_ucPort == COM1)
000002  b909              CBNZ     r1,|L2.8|
;;;103    	{
;;;104    		#if UART1_FIFO_EN == 1
;;;105    			return &g_tUart1;
000004  480b              LDR      r0,|L2.52|
                  |L2.6|
;;;106    		#else
;;;107    			return 0;
;;;108    		#endif
;;;109    	}
;;;110    	else if (_ucPort == COM2)
;;;111    	{
;;;112    		#if UART2_FIFO_EN == 1
;;;113    			return &g_tUart2;
;;;114    		#else
;;;115    			return;
;;;116    		#endif
;;;117    	}
;;;118    	else if (_ucPort == COM3)
;;;119    	{
;;;120    		#if UART3_FIFO_EN == 1
;;;121    			return &g_tUart3;
;;;122    		#else
;;;123    			return 0;
;;;124    		#endif
;;;125    	}
;;;126    	else if (_ucPort == COM4)
;;;127    	{
;;;128    		#if UART4_FIFO_EN == 1
;;;129    			return &g_tUart4;
;;;130    		#else
;;;131    			return 0;
;;;132    		#endif
;;;133    	}
;;;134    	else if (_ucPort == COM5)
;;;135    	{
;;;136    		#if UART5_FIFO_EN == 1
;;;137    			return &g_tUart5;
;;;138    		#else
;;;139    			return 0;
;;;140    		#endif
;;;141    	}
;;;142    	else if (_ucPort == COM6)
;;;143    	{
;;;144    		#if UART6_FIFO_EN == 1
;;;145    			return &g_tUart6;
;;;146    		#else
;;;147    			return 0;
;;;148    		#endif
;;;149    	}
;;;150    	else
;;;151    	{
;;;152    		/* 不做任何处理 */
;;;153    		return 0;
;;;154    	}
;;;155    }
000006  4770              BX       lr
                  |L2.8|
000008  2901              CMP      r1,#1                 ;110
00000a  d101              BNE      |L2.16|
00000c  480a              LDR      r0,|L2.56|
00000e  e7fa              B        |L2.6|
                  |L2.16|
000010  2902              CMP      r1,#2                 ;118
000012  d101              BNE      |L2.24|
000014  4809              LDR      r0,|L2.60|
000016  e7f6              B        |L2.6|
                  |L2.24|
000018  2903              CMP      r1,#3                 ;126
00001a  d101              BNE      |L2.32|
00001c  2000              MOVS     r0,#0                 ;131
00001e  e7f2              B        |L2.6|
                  |L2.32|
000020  2904              CMP      r1,#4                 ;134
000022  d101              BNE      |L2.40|
000024  2000              MOVS     r0,#0                 ;139
000026  e7ee              B        |L2.6|
                  |L2.40|
000028  2905              CMP      r1,#5                 ;142
00002a  d101              BNE      |L2.48|
00002c  4804              LDR      r0,|L2.64|
00002e  e7ea              B        |L2.6|
                  |L2.48|
000030  2000              MOVS     r0,#0                 ;153
000032  e7e8              B        |L2.6|
;;;156    
                          ENDP

                  |L2.52|
                          DCD      g_tUart1
                  |L2.56|
                          DCD      g_tUart2
                  |L2.60|
                          DCD      g_tUart3
                  |L2.64|
                          DCD      g_tUart6

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;1046   */
;;;1047   static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;1048   {
;;;1049   	NVIC_InitTypeDef NVIC_InitStructure;
;;;1050   
;;;1051   	/* Configure the NVIC Preemption Priority Bits */
;;;1052   	/*	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);  --- 在 bsp.c 中 bsp_Init() 中配置中断优先级组 */
;;;1053   
;;;1054   #if UART1_FIFO_EN == 1
;;;1055   	/* 使能串口1中断 */
;;;1056   	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;1057   	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000008  2002              MOVS     r0,#2
00000a  f88d0001          STRB     r0,[sp,#1]
;;;1058   	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
00000e  2000              MOVS     r0,#0
000010  f88d0002          STRB     r0,[sp,#2]
;;;1059   	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  2001              MOVS     r0,#1
000016  f88d0003          STRB     r0,[sp,#3]
;;;1060   	NVIC_Init(&NVIC_InitStructure);
00001a  4668              MOV      r0,sp
00001c  f7fffffe          BL       NVIC_Init
;;;1061   #endif
;;;1062   
;;;1063   #if UART2_FIFO_EN == 1
;;;1064   	/* 使能串口2中断 */
;;;1065   	NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
000020  2026              MOVS     r0,#0x26
000022  f88d0000          STRB     r0,[sp,#0]
;;;1066   	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
000026  2001              MOVS     r0,#1
000028  f88d0002          STRB     r0,[sp,#2]
;;;1067   	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00002c  f88d0003          STRB     r0,[sp,#3]
;;;1068   	NVIC_Init(&NVIC_InitStructure);
000030  4668              MOV      r0,sp
000032  f7fffffe          BL       NVIC_Init
;;;1069   #endif
;;;1070   
;;;1071   #if UART3_FIFO_EN == 1
;;;1072   	/* 使能串口3中断t */
;;;1073   	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
000036  2027              MOVS     r0,#0x27
000038  f88d0000          STRB     r0,[sp,#0]
;;;1074   	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
00003c  2002              MOVS     r0,#2
00003e  f88d0002          STRB     r0,[sp,#2]
;;;1075   	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000042  2001              MOVS     r0,#1
000044  f88d0003          STRB     r0,[sp,#3]
;;;1076   	NVIC_Init(&NVIC_InitStructure);
000048  4668              MOV      r0,sp
00004a  f7fffffe          BL       NVIC_Init
;;;1077   #endif
;;;1078   
;;;1079   #if UART4_FIFO_EN == 1
;;;1080   	/* 使能串口4中断t */
;;;1081   	NVIC_InitStructure.NVIC_IRQChannel = UART4_IRQn;
;;;1082   	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;
;;;1083   	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;1084   	NVIC_Init(&NVIC_InitStructure);
;;;1085   #endif
;;;1086   
;;;1087   #if UART5_FIFO_EN == 1
;;;1088   	/* 使能串口5中断t */
;;;1089   	NVIC_InitStructure.NVIC_IRQChannel = UART5_IRQn;
;;;1090   	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 4;
;;;1091   	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;1092   	NVIC_Init(&NVIC_InitStructure);
;;;1093   #endif
;;;1094   
;;;1095   #if UART6_FIFO_EN == 1
;;;1096   	/* 使能串口6中断t */
;;;1097   	NVIC_InitStructure.NVIC_IRQChannel = USART6_IRQn;
00004e  2047              MOVS     r0,#0x47
000050  f88d0000          STRB     r0,[sp,#0]
;;;1098   	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 5;
000054  2005              MOVS     r0,#5
000056  f88d0002          STRB     r0,[sp,#2]
;;;1099   	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00005a  2001              MOVS     r0,#1
00005c  f88d0003          STRB     r0,[sp,#3]
;;;1100   	NVIC_Init(&NVIC_InitStructure);
000060  4668              MOV      r0,sp
000062  f7fffffe          BL       NVIC_Init
;;;1101   #endif
;;;1102   }
000066  bd08              POP      {r3,pc}
;;;1103   
                          ENDP


                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;640    */
;;;641    static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;642    {
000002  b087              SUB      sp,sp,#0x1c
;;;643    	GPIO_InitTypeDef GPIO_InitStructure;
;;;644    	USART_InitTypeDef USART_InitStructure;
;;;645    
;;;646    #if UART1_FIFO_EN == 1		/* 串口1 TX = PA9   RX = PA10 或 TX = PB6   RX = PB7*/
;;;647    
;;;648    	/* 第1步： 配置GPIO */
;;;649    	#if 1	/* TX = PA9   RX = PA10 */
;;;650    		/* 打开 GPIO 时钟 */
;;;651    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;652    
;;;653    		/* 打开 UART 时钟 */
;;;654    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;655    
;;;656    		/* 将 PA9 映射为 USART1_TX */
;;;657    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
000014  2207              MOVS     r2,#7
000016  2109              MOVS     r1,#9
000018  48aa              LDR      r0,|L4.708|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;658    
;;;659    		/* 将 PA10 映射为 USART1_RX */
;;;660    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
00001e  2207              MOVS     r2,#7
000020  210a              MOVS     r1,#0xa
000022  48a8              LDR      r0,|L4.708|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;661    
;;;662    		/* 配置 USART Tx 为复用功能 */
;;;663    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000028  2000              MOVS     r0,#0
00002a  f88d001a          STRB     r0,[sp,#0x1a]
;;;664    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
00002e  2001              MOVS     r0,#1
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;665    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
000034  2002              MOVS     r0,#2
000036  f88d0018          STRB     r0,[sp,#0x18]
;;;666    
;;;667    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00003a  0200              LSLS     r0,r0,#8
00003c  9005              STR      r0,[sp,#0x14]
;;;668    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2002              MOVS     r0,#2
000040  f88d0019          STRB     r0,[sp,#0x19]
;;;669    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000044  a905              ADD      r1,sp,#0x14
000046  489f              LDR      r0,|L4.708|
000048  f7fffffe          BL       GPIO_Init
;;;670    
;;;671    		/* 配置 USART Rx 为复用功能 */
;;;672    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00004c  2002              MOVS     r0,#2
00004e  f88d0018          STRB     r0,[sp,#0x18]
;;;673    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000052  0240              LSLS     r0,r0,#9
000054  9005              STR      r0,[sp,#0x14]
;;;674    		GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a905              ADD      r1,sp,#0x14
000058  489a              LDR      r0,|L4.708|
00005a  f7fffffe          BL       GPIO_Init
;;;675    	#else	/* TX = PB6   RX = PB7  */
;;;676    		/* 打开 GPIO 时钟 */
;;;677    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;678    
;;;679    		/* 打开 UART 时钟 */
;;;680    		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
;;;681    
;;;682    		/* 将 PB6 映射为 USART1_TX */
;;;683    		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
;;;684    
;;;685    		/* 将 PB7 映射为 USART1_RX */
;;;686    		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
;;;687    
;;;688    		/* 配置 USART Tx 为复用功能 */
;;;689    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;690    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;691    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;692    
;;;693    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;694    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;695    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;696    
;;;697    		/* 配置 USART Rx 为复用功能 */
;;;698    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;699    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
;;;700    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;701    	#endif
;;;702    
;;;703    	/* 第2步： 配置串口硬件参数 */
;;;704    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
00005e  f44f30e1          MOV      r0,#0x1c200
000062  9001              STR      r0,[sp,#4]
;;;705    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000064  2000              MOVS     r0,#0
000066  f8ad0008          STRH     r0,[sp,#8]
;;;706    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;707    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00006e  f8ad000c          STRH     r0,[sp,#0xc]
;;;708    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000072  f8ad0010          STRH     r0,[sp,#0x10]
;;;709    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000076  200c              MOVS     r0,#0xc
000078  f8ad000e          STRH     r0,[sp,#0xe]
;;;710    	USART_Init(USART1, &USART_InitStructure);
00007c  a901              ADD      r1,sp,#4
00007e  4892              LDR      r0,|L4.712|
000080  f7fffffe          BL       USART_Init
;;;711    
;;;712    	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000084  2201              MOVS     r2,#1
000086  f2405125          MOV      r1,#0x525
00008a  488f              LDR      r0,|L4.712|
00008c  f7fffffe          BL       USART_ITConfig
;;;713    	/*
;;;714    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;715    		注意: 不要在此处打开发送中断
;;;716    		发送中断使能在SendUart()函数打开
;;;717    	*/
;;;718    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000090  2101              MOVS     r1,#1
000092  488d              LDR      r0,|L4.712|
000094  f7fffffe          BL       USART_Cmd
;;;719    
;;;720    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;721    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;722    	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
000098  2140              MOVS     r1,#0x40
00009a  488b              LDR      r0,|L4.712|
00009c  f7fffffe          BL       USART_ClearFlag
;;;723    #endif
;;;724    
;;;725    #if UART2_FIFO_EN == 1		/* 串口2 TX = PD5   RX = PD6 或  TX = PA2， RX = PA3  */
;;;726    	/* 第1步： 配置GPIO */
;;;727    	#if 0	/* 串口2 TX = PD5   RX = PD6 */
;;;728    		/* 打开 GPIO 时钟 */
;;;729    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
;;;730    
;;;731    		/* 打开 UART 时钟 */
;;;732    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
;;;733    
;;;734    		/* 将 PD5 映射为 USART2_TX */
;;;735    		GPIO_PinAFConfig(GPIOD, GPIO_PinSource5, GPIO_AF_USART2);
;;;736    
;;;737    		/* 将 PD6 映射为 USART2_RX */
;;;738    		GPIO_PinAFConfig(GPIOD, GPIO_PinSource6, GPIO_AF_USART2);
;;;739    
;;;740    		/* 配置 USART Tx 为复用功能 */
;;;741    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;742    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;743    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;744    
;;;745    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5;
;;;746    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;747    		GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;748    
;;;749    		/* 配置 USART Rx 为复用功能 */
;;;750    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;751    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;752    		GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;753    
;;;754    	#else	/* 串口2   TX = PA2， RX = PA3 */
;;;755    		/* 打开 GPIO 时钟 */
;;;756    		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
0000a0  2101              MOVS     r1,#1
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;757    
;;;758    		/* 打开 UART 时钟 */
;;;759    		RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
0000a8  2101              MOVS     r1,#1
0000aa  0448              LSLS     r0,r1,#17
0000ac  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;760    
;;;761    		/* 将 PA2 映射为 USART2_TX. 在STM32-V5板中，PA2 管脚用于以太网 */
;;;762    		//GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
;;;763    
;;;764    		/* 将 PA3 映射为 USART2_RX */
;;;765    		GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
0000b0  2207              MOVS     r2,#7
0000b2  2103              MOVS     r1,#3
0000b4  4883              LDR      r0,|L4.708|
0000b6  f7fffffe          BL       GPIO_PinAFConfig
;;;766    
;;;767    		/* 配置 USART Tx 为复用功能 */
;;;768    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
0000ba  2000              MOVS     r0,#0
0000bc  f88d001a          STRB     r0,[sp,#0x1a]
;;;769    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
0000c0  2001              MOVS     r0,#1
0000c2  f88d001b          STRB     r0,[sp,#0x1b]
;;;770    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
0000c6  2002              MOVS     r0,#2
0000c8  f88d0018          STRB     r0,[sp,#0x18]
;;;771    
;;;772    		//GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;773    		//GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;774    		//GPIO_Init(GPIOA, &GPIO_InitStructure);
;;;775    
;;;776    		/* 配置 USART Rx 为复用功能 */
;;;777    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
0000cc  f88d0018          STRB     r0,[sp,#0x18]
;;;778    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
0000d0  2008              MOVS     r0,#8
0000d2  9005              STR      r0,[sp,#0x14]
;;;779    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000d4  2002              MOVS     r0,#2
0000d6  f88d0019          STRB     r0,[sp,#0x19]
;;;780    		GPIO_Init(GPIOA, &GPIO_InitStructure);
0000da  a905              ADD      r1,sp,#0x14
0000dc  4879              LDR      r0,|L4.708|
0000de  f7fffffe          BL       GPIO_Init
;;;781    	#endif
;;;782    
;;;783    	/* 第2步： 配置串口硬件参数 */
;;;784    	USART_InitStructure.USART_BaudRate = UART2_BAUD;	/* 波特率 */
0000e2  f44f5016          MOV      r0,#0x2580
0000e6  9001              STR      r0,[sp,#4]
;;;785    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0000e8  2000              MOVS     r0,#0
0000ea  f8ad0008          STRH     r0,[sp,#8]
;;;786    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0000ee  f8ad000a          STRH     r0,[sp,#0xa]
;;;787    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0000f2  f8ad000c          STRH     r0,[sp,#0xc]
;;;788    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0000f6  f8ad0010          STRH     r0,[sp,#0x10]
;;;789    	USART_InitStructure.USART_Mode = USART_Mode_Rx;		/* 仅选择接收模式 */
0000fa  2004              MOVS     r0,#4
0000fc  f8ad000e          STRH     r0,[sp,#0xe]
;;;790    	USART_Init(USART2, &USART_InitStructure);
000100  a901              ADD      r1,sp,#4
000102  4872              LDR      r0,|L4.716|
000104  f7fffffe          BL       USART_Init
;;;791    
;;;792    	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
000108  2201              MOVS     r2,#1
00010a  f2405125          MOV      r1,#0x525
00010e  486f              LDR      r0,|L4.716|
000110  f7fffffe          BL       USART_ITConfig
;;;793    	/*
;;;794    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;795    		注意: 不要在此处打开发送中断
;;;796    		发送中断使能在SendUart()函数打开
;;;797    	*/
;;;798    	USART_Cmd(USART2, ENABLE);		/* 使能串口 */
000114  2101              MOVS     r1,#1
000116  486d              LDR      r0,|L4.716|
000118  f7fffffe          BL       USART_Cmd
;;;799    
;;;800    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;801    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;802    	USART_ClearFlag(USART2, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
00011c  2140              MOVS     r1,#0x40
00011e  486b              LDR      r0,|L4.716|
000120  f7fffffe          BL       USART_ClearFlag
;;;803    #endif
;;;804    
;;;805    #if UART3_FIFO_EN == 1			/* 串口3 TX = PB10   RX = PB11 */
;;;806    
;;;807    	/* 配置 PB2为推挽输出，用于切换 RS485芯片的收发状态 */
;;;808    	{
;;;809    		RCC_AHB1PeriphClockCmd(RCC_RS485_TXEN, ENABLE);
000124  2101              MOVS     r1,#1
000126  2002              MOVS     r0,#2
000128  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;810    
;;;811    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00012c  2001              MOVS     r0,#1
00012e  f88d0018          STRB     r0,[sp,#0x18]
;;;812    		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽模式 */
000132  2000              MOVS     r0,#0
000134  f88d001a          STRB     r0,[sp,#0x1a]
;;;813    		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 上下拉电阻不使能 */
000138  f88d001b          STRB     r0,[sp,#0x1b]
;;;814    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00013c  2003              MOVS     r0,#3
00013e  f88d0019          STRB     r0,[sp,#0x19]
;;;815    
;;;816    		GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000142  2004              MOVS     r0,#4
000144  9005              STR      r0,[sp,#0x14]
;;;817    		GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
000146  a905              ADD      r1,sp,#0x14
000148  4861              LDR      r0,|L4.720|
00014a  f7fffffe          BL       GPIO_Init
;;;818    	}
;;;819    
;;;820    	/* 打开 GPIO 时钟 */
;;;821    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
00014e  2101              MOVS     r1,#1
000150  2002              MOVS     r0,#2
000152  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;822    
;;;823    	/* 打开 UART 时钟 */
;;;824    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
000156  2101              MOVS     r1,#1
000158  0488              LSLS     r0,r1,#18
00015a  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;825    
;;;826    	/* 将 PB10 映射为 USART3_TX */
;;;827    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource10, GPIO_AF_USART3);
00015e  2207              MOVS     r2,#7
000160  210a              MOVS     r1,#0xa
000162  485b              LDR      r0,|L4.720|
000164  f7fffffe          BL       GPIO_PinAFConfig
;;;828    
;;;829    	/* 将 PB11 映射为 USART3_RX */
;;;830    	GPIO_PinAFConfig(GPIOB, GPIO_PinSource11, GPIO_AF_USART3);
000168  2207              MOVS     r2,#7
00016a  210b              MOVS     r1,#0xb
00016c  4858              LDR      r0,|L4.720|
00016e  f7fffffe          BL       GPIO_PinAFConfig
;;;831    
;;;832    	/* 配置 USART Tx 为复用功能 */
;;;833    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000172  2000              MOVS     r0,#0
000174  f88d001a          STRB     r0,[sp,#0x1a]
;;;834    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000178  2001              MOVS     r0,#1
00017a  f88d001b          STRB     r0,[sp,#0x1b]
;;;835    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00017e  2002              MOVS     r0,#2
000180  f88d0018          STRB     r0,[sp,#0x18]
;;;836    
;;;837    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000184  0240              LSLS     r0,r0,#9
000186  9005              STR      r0,[sp,#0x14]
;;;838    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000188  2002              MOVS     r0,#2
00018a  f88d0019          STRB     r0,[sp,#0x19]
;;;839    	GPIO_Init(GPIOB, &GPIO_InitStructure);
00018e  a905              ADD      r1,sp,#0x14
000190  484f              LDR      r0,|L4.720|
000192  f7fffffe          BL       GPIO_Init
;;;840    
;;;841    	/* 配置 USART Rx 为复用功能 */
;;;842    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000196  2002              MOVS     r0,#2
000198  f88d0018          STRB     r0,[sp,#0x18]
;;;843    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
00019c  0280              LSLS     r0,r0,#10
00019e  9005              STR      r0,[sp,#0x14]
;;;844    	GPIO_Init(GPIOB, &GPIO_InitStructure);
0001a0  a905              ADD      r1,sp,#0x14
0001a2  484b              LDR      r0,|L4.720|
0001a4  f7fffffe          BL       GPIO_Init
;;;845    
;;;846    	/* 第2步： 配置串口硬件参数 */
;;;847    	USART_InitStructure.USART_BaudRate = UART3_BAUD;	/* 波特率 */
0001a8  f44f5016          MOV      r0,#0x2580
0001ac  9001              STR      r0,[sp,#4]
;;;848    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
0001ae  2000              MOVS     r0,#0
0001b0  f8ad0008          STRH     r0,[sp,#8]
;;;849    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
0001b4  f8ad000a          STRH     r0,[sp,#0xa]
;;;850    	USART_InitStructure.USART_Parity = USART_Parity_No ;
0001b8  f8ad000c          STRH     r0,[sp,#0xc]
;;;851    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
0001bc  f8ad0010          STRH     r0,[sp,#0x10]
;;;852    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
0001c0  200c              MOVS     r0,#0xc
0001c2  f8ad000e          STRH     r0,[sp,#0xe]
;;;853    	USART_Init(USART3, &USART_InitStructure);
0001c6  a901              ADD      r1,sp,#4
0001c8  4842              LDR      r0,|L4.724|
0001ca  f7fffffe          BL       USART_Init
;;;854    
;;;855    	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0001ce  2201              MOVS     r2,#1
0001d0  f2405125          MOV      r1,#0x525
0001d4  483f              LDR      r0,|L4.724|
0001d6  f7fffffe          BL       USART_ITConfig
;;;856    	/*
;;;857    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;858    		注意: 不要在此处打开发送中断
;;;859    		发送中断使能在SendUart()函数打开
;;;860    	*/
;;;861    	USART_Cmd(USART3, ENABLE);		/* 使能串口 */
0001da  2101              MOVS     r1,#1
0001dc  483d              LDR      r0,|L4.724|
0001de  f7fffffe          BL       USART_Cmd
;;;862    
;;;863    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;864    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;865    	USART_ClearFlag(USART3, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0001e2  2140              MOVS     r1,#0x40
0001e4  483b              LDR      r0,|L4.724|
0001e6  f7fffffe          BL       USART_ClearFlag
;;;866    #endif
;;;867    
;;;868    #if UART4_FIFO_EN == 1			/* 串口4 TX = PC10   RX = PC11 */
;;;869    	/* 第1步： 配置GPIO */
;;;870    
;;;871    	/* 打开 GPIO 时钟 */
;;;872    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
;;;873    
;;;874    	/* 打开 UART 时钟 */
;;;875    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART4, ENABLE);
;;;876    
;;;877    	/* 将 PC10 映射为 UART4_TX */
;;;878    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource10, GPIO_AF_USART1);
;;;879    
;;;880    	/* 将 PC11 映射为 UART4_RX */
;;;881    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource11, GPIO_AF_USART1);
;;;882    
;;;883    	/* 配置 USART Tx 为复用功能 */
;;;884    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;885    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;886    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;887    
;;;888    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
;;;889    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;890    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;891    
;;;892    	/* 配置 USART Rx 为复用功能 */
;;;893    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;894    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11;
;;;895    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;896    
;;;897    	/* 第2步： 配置串口硬件参数 */
;;;898    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
;;;899    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;900    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;901    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;902    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;903    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;904    	USART_Init(UART4, &USART_InitStructure);
;;;905    
;;;906    	USART_ITConfig(UART4, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;907    	/*
;;;908    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;909    		注意: 不要在此处打开发送中断
;;;910    		发送中断使能在SendUart()函数打开
;;;911    	*/
;;;912    	USART_Cmd(UART4, ENABLE);		/* 使能串口 */
;;;913    
;;;914    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;915    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;916    	USART_ClearFlag(UART4, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;917    #endif
;;;918    
;;;919    #if UART5_FIFO_EN == 1			/* 串口5 TX = PC12   RX = PD2 */
;;;920    	/* 第1步： 配置GPIO */
;;;921    
;;;922    	/* 打开 GPIO 时钟 */
;;;923    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC |RCC_AHB1Periph_GPIOD, ENABLE);
;;;924    
;;;925    	/* 打开 UART 时钟 */
;;;926    	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART5, ENABLE);
;;;927    
;;;928    	/* 将 PC12 映射为 UART5_TX */
;;;929    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource12, GPIO_AF_UART5);
;;;930    
;;;931    	/* 将 PD2 映射为 UART5_RX */
;;;932    	GPIO_PinAFConfig(GPIOD, GPIO_PinSource2, GPIO_AF_UART5);
;;;933    
;;;934    	/* 配置 UART Tx 为复用功能 */
;;;935    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;936    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;937    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;938    
;;;939    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
;;;940    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;941    	GPIO_Init(GPIOC, &GPIO_InitStructure);
;;;942    
;;;943    	/* 配置 UART Rx 为复用功能 */
;;;944    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;945    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
;;;946    	GPIO_Init(GPIOD, &GPIO_InitStructure);
;;;947    
;;;948    	/* 第2步： 配置串口硬件参数 */
;;;949    	USART_InitStructure.USART_BaudRate = UART5_BAUD;	/* 波特率 */
;;;950    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
;;;951    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
;;;952    	USART_InitStructure.USART_Parity = USART_Parity_No ;
;;;953    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
;;;954    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
;;;955    	USART_Init(UART5, &USART_InitStructure);
;;;956    
;;;957    	USART_ITConfig(UART5, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;958    	/*
;;;959    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;960    		注意: 不要在此处打开发送中断
;;;961    		发送中断使能在SendUart()函数打开
;;;962    	*/
;;;963    	USART_Cmd(UART5, ENABLE);		/* 使能串口 */
;;;964    
;;;965    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;966    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;967    	USART_ClearFlag(UART5, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;968    #endif
;;;969    
;;;970    #if UART6_FIFO_EN == 1			/* PG14/USART6_TX , PC7/USART6_RX,PG8/USART6_RTS, PG15/USART6_CTS */
;;;971    	/* 第1步： 配置GPIO */
;;;972    
;;;973    	/* 打开 GPIO 时钟 */
;;;974    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC |RCC_AHB1Periph_GPIOG, ENABLE);
0001ea  2101              MOVS     r1,#1
0001ec  2044              MOVS     r0,#0x44
0001ee  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;975    
;;;976    	/* 打开 UART 时钟 */
;;;977    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);
0001f2  2101              MOVS     r1,#1
0001f4  2020              MOVS     r0,#0x20
0001f6  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;978    
;;;979    	/* 将 PG14 映射为 USART6_TX */
;;;980    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource14, GPIO_AF_USART6);
0001fa  2208              MOVS     r2,#8
0001fc  210e              MOVS     r1,#0xe
0001fe  4836              LDR      r0,|L4.728|
000200  f7fffffe          BL       GPIO_PinAFConfig
;;;981    
;;;982    	/* 将 PC7 映射为 USART6_RX */
;;;983    	GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);
000204  2208              MOVS     r2,#8
000206  2107              MOVS     r1,#7
000208  4834              LDR      r0,|L4.732|
00020a  f7fffffe          BL       GPIO_PinAFConfig
;;;984    
;;;985    	/* 将 PG8 映射为 USART6_RTS */
;;;986    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource8, GPIO_AF_USART6);
00020e  2208              MOVS     r2,#8
000210  4611              MOV      r1,r2
000212  4831              LDR      r0,|L4.728|
000214  f7fffffe          BL       GPIO_PinAFConfig
;;;987    
;;;988    	/* 将 PG15 映射为 USART6_CTS */
;;;989    	GPIO_PinAFConfig(GPIOG, GPIO_PinSource15, GPIO_AF_USART6);
000218  2208              MOVS     r2,#8
00021a  210f              MOVS     r1,#0xf
00021c  482e              LDR      r0,|L4.728|
00021e  f7fffffe          BL       GPIO_PinAFConfig
;;;990    
;;;991    	/* 配置 PG14/USART6_TX 为复用功能 */
;;;992    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000222  2000              MOVS     r0,#0
000224  f88d001a          STRB     r0,[sp,#0x1a]
;;;993    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
000228  2001              MOVS     r0,#1
00022a  f88d001b          STRB     r0,[sp,#0x1b]
;;;994    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
00022e  2002              MOVS     r0,#2
000230  f88d0018          STRB     r0,[sp,#0x18]
;;;995    
;;;996    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;
000234  0340              LSLS     r0,r0,#13
000236  9005              STR      r0,[sp,#0x14]
;;;997    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000238  2002              MOVS     r0,#2
00023a  f88d0019          STRB     r0,[sp,#0x19]
;;;998    	GPIO_Init(GPIOG, &GPIO_InitStructure);
00023e  a905              ADD      r1,sp,#0x14
000240  4825              LDR      r0,|L4.728|
000242  f7fffffe          BL       GPIO_Init
;;;999    
;;;1000   	/* 配置 PC7/USART6_RX 为复用功能 */
;;;1001   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000246  2002              MOVS     r0,#2
000248  f88d0018          STRB     r0,[sp,#0x18]
;;;1002   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
00024c  2080              MOVS     r0,#0x80
00024e  9005              STR      r0,[sp,#0x14]
;;;1003   	GPIO_Init(GPIOC, &GPIO_InitStructure);
000250  a905              ADD      r1,sp,#0x14
000252  4822              LDR      r0,|L4.732|
000254  f7fffffe          BL       GPIO_Init
;;;1004   
;;;1005   	/* 配置 PG8/USART6_RTS 为复用功能 */
;;;1006   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000258  2002              MOVS     r0,#2
00025a  f88d0018          STRB     r0,[sp,#0x18]
;;;1007   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
00025e  01c0              LSLS     r0,r0,#7
000260  9005              STR      r0,[sp,#0x14]
;;;1008   	GPIO_Init(GPIOG, &GPIO_InitStructure);
000262  a905              ADD      r1,sp,#0x14
000264  481c              LDR      r0,|L4.728|
000266  f7fffffe          BL       GPIO_Init
;;;1009   
;;;1010   	/* 配置 PG15/USART6_CTS 为复用功能 */
;;;1011   	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00026a  2002              MOVS     r0,#2
00026c  f88d0018          STRB     r0,[sp,#0x18]
;;;1012   	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_15;
000270  0380              LSLS     r0,r0,#14
000272  9005              STR      r0,[sp,#0x14]
;;;1013   	GPIO_Init(GPIOG, &GPIO_InitStructure);
000274  a905              ADD      r1,sp,#0x14
000276  4818              LDR      r0,|L4.728|
000278  f7fffffe          BL       GPIO_Init
;;;1014   
;;;1015   	/* 第2步： 配置串口硬件参数 */
;;;1016   	USART_InitStructure.USART_BaudRate = UART6_BAUD;	/* 波特率 */
00027c  f44f30e1          MOV      r0,#0x1c200
000280  9001              STR      r0,[sp,#4]
;;;1017   	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000282  2000              MOVS     r0,#0
000284  f8ad0008          STRH     r0,[sp,#8]
;;;1018   	USART_InitStructure.USART_StopBits = USART_StopBits_1;
000288  f8ad000a          STRH     r0,[sp,#0xa]
;;;1019   	USART_InitStructure.USART_Parity = USART_Parity_No ;
00028c  f8ad000c          STRH     r0,[sp,#0xc]
;;;1020   	//USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_RTS_CTS;	/* 选择硬件流控 */
;;;1021   	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;	/* 不要硬件流控 */
000290  f8ad0010          STRH     r0,[sp,#0x10]
;;;1022   	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000294  200c              MOVS     r0,#0xc
000296  f8ad000e          STRH     r0,[sp,#0xe]
;;;1023   	USART_Init(USART6, &USART_InitStructure);
00029a  a901              ADD      r1,sp,#4
00029c  4810              LDR      r0,|L4.736|
00029e  f7fffffe          BL       USART_Init
;;;1024   
;;;1025   	USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
0002a2  2201              MOVS     r2,#1
0002a4  f2405125          MOV      r1,#0x525
0002a8  480d              LDR      r0,|L4.736|
0002aa  f7fffffe          BL       USART_ITConfig
;;;1026   	/*
;;;1027   		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;1028   		注意: 不要在此处打开发送中断
;;;1029   		发送中断使能在SendUart()函数打开
;;;1030   	*/
;;;1031   	USART_Cmd(USART6, ENABLE);		/* 使能串口 */
0002ae  2101              MOVS     r1,#1
0002b0  480b              LDR      r0,|L4.736|
0002b2  f7fffffe          BL       USART_Cmd
;;;1032   
;;;1033   	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;1034   		如下语句解决第1个字节无法正确发送出去的问题 */
;;;1035   	USART_ClearFlag(USART6, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
0002b6  2140              MOVS     r1,#0x40
0002b8  4809              LDR      r0,|L4.736|
0002ba  f7fffffe          BL       USART_ClearFlag
;;;1036   #endif
;;;1037   }
0002be  b007              ADD      sp,sp,#0x1c
0002c0  bd00              POP      {pc}
;;;1038   
                          ENDP

0002c2  0000              DCW      0x0000
                  |L4.708|
                          DCD      0x40020000
                  |L4.712|
                          DCD      0x40011000
                  |L4.716|
                          DCD      0x40004400
                  |L4.720|
                          DCD      0x40020400
                  |L4.724|
                          DCD      0x40004800
                  |L4.728|
                          DCD      0x40021800
                  |L4.732|
                          DCD      0x40020800
                  |L4.736|
                          DCD      0x40011400

                          AREA ||i.RS485_InitTXE||, CODE, READONLY, ALIGN=2

                  RS485_InitTXE PROC
;;;420    */
;;;421    void RS485_InitTXE(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;422    {
;;;423    	GPIO_InitTypeDef GPIO_InitStructure;
;;;424    
;;;425    	RCC_AHB1PeriphClockCmd(RCC_RS485_TXEN, ENABLE);	/* 打开GPIO时钟 */
000002  2101              MOVS     r1,#1
000004  2002              MOVS     r0,#2
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;426    
;;;427    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;		/* 设为输出口 */
00000a  2001              MOVS     r0,#1
00000c  f88d0004          STRB     r0,[sp,#4]
;;;428    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;		/* 设为推挽 */
000010  2000              MOVS     r0,#0
000012  f88d0006          STRB     r0,[sp,#6]
;;;429    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;	/* 无上拉电阻 */
000016  f88d0007          STRB     r0,[sp,#7]
;;;430    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	/* IO口最大速度 */
00001a  2003              MOVS     r0,#3
00001c  f88d0005          STRB     r0,[sp,#5]
;;;431    	GPIO_InitStructure.GPIO_Pin = PIN_RS485_TXEN;
000020  2004              MOVS     r0,#4
000022  9000              STR      r0,[sp,#0]
;;;432    	GPIO_Init(PORT_RS485_TXEN, &GPIO_InitStructure);
000024  4669              MOV      r1,sp
000026  4802              LDR      r0,|L5.48|
000028  f7fffffe          BL       GPIO_Init
;;;433    }
00002c  bd1c              POP      {r2-r4,pc}
;;;434    
                          ENDP

00002e  0000              DCW      0x0000
                  |L5.48|
                          DCD      0x40020400

                          AREA ||i.RS485_ReciveNew||, CODE, READONLY, ALIGN=1

                  RS485_ReciveNew PROC
;;;513    //extern void MODBUS_ReciveNew(uint8_t _byte);
;;;514    void RS485_ReciveNew(uint8_t _byte)
000000  4770              BX       lr
;;;515    {
;;;516    //	MODBUS_ReciveNew(_byte);
;;;517    }
;;;518    
                          ENDP


                          AREA ||i.RS485_SendBefor||, CODE, READONLY, ALIGN=2

                  RS485_SendBefor PROC
;;;456    */
;;;457    void RS485_SendBefor(void)
000000  2004              MOVS     r0,#4
;;;458    {
;;;459    	RS485_TX_EN();	/* 切换RS485收发芯片为发送模式 */
000002  4901              LDR      r1,|L7.8|
000004  8008              STRH     r0,[r1,#0]
;;;460    }
000006  4770              BX       lr
;;;461    
                          ENDP

                  |L7.8|
                          DCD      0x40020418

                          AREA ||i.RS485_SendBuf||, CODE, READONLY, ALIGN=1

                  RS485_SendBuf PROC
;;;485    */
;;;486    void RS485_SendBuf(uint8_t *_ucaBuf, uint16_t _usLen)
000000  b570              PUSH     {r4-r6,lr}
;;;487    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;488    	comSendBuf(COM3, _ucaBuf, _usLen);
000006  462a              MOV      r2,r5
000008  4621              MOV      r1,r4
00000a  2002              MOVS     r0,#2
00000c  f7fffffe          BL       comSendBuf
;;;489    }
000010  bd70              POP      {r4-r6,pc}
;;;490    
                          ENDP


                          AREA ||i.RS485_SendOver||, CODE, READONLY, ALIGN=2

                  RS485_SendOver PROC
;;;470    */
;;;471    void RS485_SendOver(void)
000000  2004              MOVS     r0,#4
;;;472    {
;;;473    	RS485_RX_EN();	/* 切换RS485收发芯片为接收模式 */
000002  4901              LDR      r1,|L9.8|
000004  8008              STRH     r0,[r1,#0]
;;;474    }
000006  4770              BX       lr
;;;475    
                          ENDP

                  |L9.8|
                          DCD      0x4002041a

                          AREA ||i.RS485_SendStr||, CODE, READONLY, ALIGN=1

                  RS485_SendStr PROC
;;;499    */
;;;500    void RS485_SendStr(char *_pBuf)
000000  b570              PUSH     {r4-r6,lr}
;;;501    {
000002  4604              MOV      r4,r0
;;;502    	RS485_SendBuf((uint8_t *)_pBuf, strlen(_pBuf));
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       strlen
00000a  b285              UXTH     r5,r0
00000c  4629              MOV      r1,r5
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       RS485_SendBuf
;;;503    }
000014  bd70              POP      {r4-r6,pc}
;;;504    
                          ENDP


                          AREA ||i.RS485_SetBaud||, CODE, READONLY, ALIGN=1

                  RS485_SetBaud PROC
;;;442    */
;;;443    void RS485_SetBaud(uint32_t _baud)
000000  b510              PUSH     {r4,lr}
;;;444    {
000002  4604              MOV      r4,r0
;;;445    	comSetBaud(COM3, _baud);
000004  4621              MOV      r1,r4
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       comSetBaud
;;;446    }
00000c  bd10              POP      {r4,pc}
;;;447    
                          ENDP


                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;1323   #if UART1_FIFO_EN == 1
;;;1324   void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1325   {
;;;1326   #if uCOS_EN == 1 
;;;1327   	CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;1328   
;;;1329       CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  bf00              NOP      
;;;1330       OSIntEnter();                                          
000012  f7fffffe          BL       OSIntEnter
;;;1331       CPU_CRITICAL_EXIT();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       CPU_SR_Restore
000020  bf00              NOP      
000022  bf00              NOP      
;;;1332   #endif
;;;1333   	
;;;1334   	UartIRQ(&g_tUart1);
000024  4802              LDR      r0,|L12.48|
000026  f7fffffe          BL       UartIRQ
;;;1335   	
;;;1336   #if uCOS_EN == 1 
;;;1337   	OSIntExit(); 
00002a  f7fffffe          BL       OSIntExit
;;;1338   #endif
;;;1339   }
00002e  bd10              POP      {r4,pc}
;;;1340   #endif
                          ENDP

                  |L12.48|
                          DCD      g_tUart1

                          AREA ||i.USART2_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART2_IRQHandler PROC
;;;1342   #if UART2_FIFO_EN == 1
;;;1343   void USART2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1344   {
;;;1345   #if uCOS_EN == 1 
;;;1346   	CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;1347   
;;;1348       CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  bf00              NOP      
;;;1349       OSIntEnter();                                          
000012  f7fffffe          BL       OSIntEnter
;;;1350       CPU_CRITICAL_EXIT();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       CPU_SR_Restore
000020  bf00              NOP      
000022  bf00              NOP      
;;;1351   #endif
;;;1352   	
;;;1353   	UartIRQ(&g_tUart2);
000024  4802              LDR      r0,|L13.48|
000026  f7fffffe          BL       UartIRQ
;;;1354   	
;;;1355   #if uCOS_EN == 1 
;;;1356   	OSIntExit(); 
00002a  f7fffffe          BL       OSIntExit
;;;1357   #endif
;;;1358   }
00002e  bd10              POP      {r4,pc}
;;;1359   #endif
                          ENDP

                  |L13.48|
                          DCD      g_tUart2

                          AREA ||i.USART3_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART3_IRQHandler PROC
;;;1361   #if UART3_FIFO_EN == 1
;;;1362   void USART3_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1363   {
;;;1364   #if uCOS_EN == 1 
;;;1365   	CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;1366   
;;;1367       CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  bf00              NOP      
;;;1368       OSIntEnter();                                          
000012  f7fffffe          BL       OSIntEnter
;;;1369       CPU_CRITICAL_EXIT();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       CPU_SR_Restore
000020  bf00              NOP      
000022  bf00              NOP      
;;;1370   #endif
;;;1371   	
;;;1372   	UartIRQ(&g_tUart3);
000024  4802              LDR      r0,|L14.48|
000026  f7fffffe          BL       UartIRQ
;;;1373   
;;;1374   #if uCOS_EN == 1 
;;;1375   	OSIntExit(); 
00002a  f7fffffe          BL       OSIntExit
;;;1376   #endif
;;;1377   }
00002e  bd10              POP      {r4,pc}
;;;1378   #endif
                          ENDP

                  |L14.48|
                          DCD      g_tUart3

                          AREA ||i.USART6_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART6_IRQHandler PROC
;;;1418   #if UART6_FIFO_EN == 1
;;;1419   void USART6_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1420   {
;;;1421   #if uCOS_EN == 1 
;;;1422   	CPU_SR_ALLOC();
000002  2400              MOVS     r4,#0
;;;1423   
;;;1424       CPU_CRITICAL_ENTER();
000004  bf00              NOP      
000006  bf00              NOP      
000008  f7fffffe          BL       CPU_SR_Save
00000c  4604              MOV      r4,r0
00000e  bf00              NOP      
000010  bf00              NOP      
;;;1425       OSIntEnter();                                          
000012  f7fffffe          BL       OSIntEnter
;;;1426       CPU_CRITICAL_EXIT();
000016  bf00              NOP      
000018  bf00              NOP      
00001a  4620              MOV      r0,r4
00001c  f7fffffe          BL       CPU_SR_Restore
000020  bf00              NOP      
000022  bf00              NOP      
;;;1427   #endif
;;;1428   	
;;;1429   	UartIRQ(&g_tUart6);
000024  4802              LDR      r0,|L15.48|
000026  f7fffffe          BL       UartIRQ
;;;1430   	
;;;1431   #if uCOS_EN == 1 
;;;1432   	OSIntExit(); 
00002a  f7fffffe          BL       OSIntExit
;;;1433   #endif
;;;1434   }
00002e  bd10              POP      {r4,pc}
;;;1435   #endif
                          ENDP

                  |L15.48|
                          DCD      g_tUart6

                          AREA ||i.USART_SetBaudRate||, CODE, READONLY, ALIGN=2

                  USART_SetBaudRate PROC
;;;356    */
;;;357    void USART_SetBaudRate(USART_TypeDef* USARTx, uint32_t BaudRate)
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;358    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;359    	uint32_t tmpreg = 0x00, apbclock = 0x00;
000008  2500              MOVS     r5,#0
00000a  46a9              MOV      r9,r5
;;;360    	uint32_t integerdivider = 0x00;
00000c  bf00              NOP      
;;;361    	uint32_t fractionaldivider = 0x00;
00000e  2700              MOVS     r7,#0
;;;362    	RCC_ClocksTypeDef RCC_ClocksStatus;
;;;363    
;;;364    	/* Check the parameters */
;;;365    	assert_param(IS_USART_ALL_PERIPH(USARTx));
;;;366    	assert_param(IS_USART_BAUDRATE(BaudRate));  
;;;367    
;;;368    	/*---------------------------- USART BRR Configuration -----------------------*/
;;;369    	/* Configure the USART Baud Rate */
;;;370    	RCC_GetClocksFreq(&RCC_ClocksStatus);
000010  4668              MOV      r0,sp
000012  f7fffffe          BL       RCC_GetClocksFreq
;;;371    
;;;372    	if ((USARTx == USART1) || (USARTx == USART6))
000016  4820              LDR      r0,|L16.152|
000018  4284              CMP      r4,r0
00001a  d002              BEQ      |L16.34|
00001c  481f              LDR      r0,|L16.156|
00001e  4284              CMP      r4,r0
000020  d102              BNE      |L16.40|
                  |L16.34|
;;;373    	{
;;;374    		apbclock = RCC_ClocksStatus.PCLK2_Frequency;
000022  f8dd900c          LDR      r9,[sp,#0xc]
000026  e001              B        |L16.44|
                  |L16.40|
;;;375    	}
;;;376    	else
;;;377    	{
;;;378    		apbclock = RCC_ClocksStatus.PCLK1_Frequency;
000028  f8dd9008          LDR      r9,[sp,#8]
                  |L16.44|
;;;379    	}
;;;380    
;;;381    	/* Determine the integer part */
;;;382    	if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
00002c  89a0              LDRH     r0,[r4,#0xc]
00002e  f4004000          AND      r0,r0,#0x8000
000032  b140              CBZ      r0,|L16.70|
;;;383    	{
;;;384    		/* Integer part computing in case Oversampling mode is 8 Samples */
;;;385    		integerdivider = ((25 * apbclock) / (2 * (BaudRate)));    
000034  eb0900c9          ADD      r0,r9,r9,LSL #3
000038  eb001009          ADD      r0,r0,r9,LSL #4
00003c  ea4f0148          LSL      r1,r8,#1
000040  fbb0f6f1          UDIV     r6,r0,r1
000044  e007              B        |L16.86|
                  |L16.70|
;;;386    	}
;;;387    	else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;388    	{
;;;389    		/* Integer part computing in case Oversampling mode is 16 Samples */
;;;390    		integerdivider = ((25 * apbclock) / (4 * (BaudRate)));    
000046  eb0900c9          ADD      r0,r9,r9,LSL #3
00004a  eb001009          ADD      r0,r0,r9,LSL #4
00004e  ea4f0188          LSL      r1,r8,#2
000052  fbb0f6f1          UDIV     r6,r0,r1
                  |L16.86|
;;;391    	}
;;;392    	tmpreg = (integerdivider / 100) << 4;
000056  2064              MOVS     r0,#0x64
000058  fbb6f0f0          UDIV     r0,r6,r0
00005c  0105              LSLS     r5,r0,#4
;;;393    
;;;394    	/* Determine the fractional part */
;;;395    	fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
00005e  0928              LSRS     r0,r5,#4
000060  2164              MOVS     r1,#0x64
000062  fb016710          MLS      r7,r1,r0,r6
;;;396    
;;;397    	/* Implement the fractional part in the register */
;;;398    	if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
000066  89a0              LDRH     r0,[r4,#0xc]
000068  f4004000          AND      r0,r0,#0x8000
00006c  b140              CBZ      r0,|L16.128|
;;;399    	{
;;;400    		tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
00006e  2032              MOVS     r0,#0x32
000070  eb0000c7          ADD      r0,r0,r7,LSL #3
000074  fbb0f0f1          UDIV     r0,r0,r1
000078  f0000007          AND      r0,r0,#7
00007c  4305              ORRS     r5,r5,r0
00007e  e008              B        |L16.146|
                  |L16.128|
;;;401    	}
;;;402    	else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
;;;403    	{
;;;404    		tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
000080  2032              MOVS     r0,#0x32
000082  eb001007          ADD      r0,r0,r7,LSL #4
000086  2164              MOVS     r1,#0x64
000088  fbb0f0f1          UDIV     r0,r0,r1
00008c  f000000f          AND      r0,r0,#0xf
000090  4305              ORRS     r5,r5,r0
                  |L16.146|
;;;405    	}
;;;406    
;;;407    	/* Write to USART BRR register */
;;;408    	USARTx->BRR = (uint16_t)tmpreg;
000092  8125              STRH     r5,[r4,#8]
;;;409    }
000094  e8bd87ff          POP      {r0-r10,pc}
;;;410    
                          ENDP

                  |L16.152|
                          DCD      0x40011000
                  |L16.156|
                          DCD      0x40011400

                          AREA ||i.UartGetChar||, CODE, READONLY, ALIGN=1

                  UartGetChar PROC
;;;1187   */
;;;1188   static uint8_t UartGetChar(UART_T *_pUart, uint8_t *_pByte)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1189   {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;1190   	uint16_t usCount;
;;;1191   	
;;;1192   #if uCOS_EN == 1 
;;;1193   	CPU_SR_ALLOC();
000008  2700              MOVS     r7,#0
;;;1194   #endif
;;;1195   
;;;1196   	/* usRxWrite 变量在中断函数中被改写，主程序读取该变量时，必须进行临界区保护 */
;;;1197   	DISABLE_INT();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SR_Save
000012  4607              MOV      r7,r0
000014  bf00              NOP      
000016  bf00              NOP      
;;;1198   	usCount = _pUart->usRxCount;
000018  8b66              LDRH     r6,[r4,#0x1a]
;;;1199   	ENABLE_INT();
00001a  bf00              NOP      
00001c  bf00              NOP      
00001e  4638              MOV      r0,r7
000020  f7fffffe          BL       CPU_SR_Restore
000024  bf00              NOP      
000026  bf00              NOP      
;;;1200   
;;;1201   	/* 如果读和写索引相同，则返回0 */
;;;1202   	//if (_pUart->usRxRead == usRxWrite)
;;;1203   	if (usCount == 0)	/* 已经没有数据 */
000028  b916              CBNZ     r6,|L17.48|
;;;1204   	{
;;;1205   		return 0;
00002a  2000              MOVS     r0,#0
                  |L17.44|
;;;1206   	}
;;;1207   	else
;;;1208   	{
;;;1209   		*_pByte = _pUart->pRxBuf[_pUart->usRxRead];		/* 从串口接收FIFO取1个数据 */
;;;1210   
;;;1211   		/* 改写FIFO读索引 */
;;;1212   		DISABLE_INT();
;;;1213   		if (++_pUart->usRxRead >= _pUart->usRxBufSize)
;;;1214   		{
;;;1215   			_pUart->usRxRead = 0;
;;;1216   		}
;;;1217   		_pUart->usRxCount--;
;;;1218   		ENABLE_INT();
;;;1219   		return 1;
;;;1220   	}
;;;1221   }
00002c  e8bd81f0          POP      {r4-r8,pc}
                  |L17.48|
000030  8b21              LDRH     r1,[r4,#0x18]         ;1209
000032  68a0              LDR      r0,[r4,#8]            ;1209
000034  5c40              LDRB     r0,[r0,r1]            ;1209
000036  7028              STRB     r0,[r5,#0]            ;1209
000038  bf00              NOP                            ;1212
00003a  bf00              NOP                            ;1212
00003c  f7fffffe          BL       CPU_SR_Save
000040  4607              MOV      r7,r0                 ;1212
000042  bf00              NOP                            ;1212
000044  bf00              NOP                            ;1212
000046  8b20              LDRH     r0,[r4,#0x18]         ;1213
000048  1c40              ADDS     r0,r0,#1              ;1213
00004a  b280              UXTH     r0,r0                 ;1213
00004c  8320              STRH     r0,[r4,#0x18]         ;1213
00004e  89e1              LDRH     r1,[r4,#0xe]          ;1213
000050  4288              CMP      r0,r1                 ;1213
000052  db01              BLT      |L17.88|
000054  2000              MOVS     r0,#0                 ;1215
000056  8320              STRH     r0,[r4,#0x18]         ;1215
                  |L17.88|
000058  8b60              LDRH     r0,[r4,#0x1a]         ;1217
00005a  1e40              SUBS     r0,r0,#1              ;1217
00005c  8360              STRH     r0,[r4,#0x1a]         ;1217
00005e  bf00              NOP                            ;1218
000060  bf00              NOP                            ;1218
000062  4638              MOV      r0,r7                 ;1218
000064  f7fffffe          BL       CPU_SR_Restore
000068  bf00              NOP                            ;1218
00006a  bf00              NOP                            ;1218
00006c  2001              MOVS     r0,#1                 ;1219
00006e  e7dd              B        |L17.44|
;;;1222   
                          ENDP


                          AREA ||i.UartIRQ||, CODE, READONLY, ALIGN=1

                  UartIRQ PROC
;;;1230   */
;;;1231   static void UartIRQ(UART_T *_pUart)
000000  b570              PUSH     {r4-r6,lr}
;;;1232   {
000002  4604              MOV      r4,r0
;;;1233   	/* 处理接收中断  */
;;;1234   	if (USART_GetITStatus(_pUart->uart, USART_IT_RXNE) != RESET)
000004  f2405125          MOV      r1,#0x525
000008  6820              LDR      r0,[r4,#0]
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1e0              CBZ      r0,|L18.74|
;;;1235   	{
;;;1236   		/* 从串口接收数据寄存器读取数据存放到接收FIFO */
;;;1237   		uint8_t ch;
;;;1238   
;;;1239   		ch = USART_ReceiveData(_pUart->uart);
000010  6820              LDR      r0,[r4,#0]
000012  f7fffffe          BL       USART_ReceiveData
000016  b2c5              UXTB     r5,r0
;;;1240   		_pUart->pRxBuf[_pUart->usRxWrite] = ch;
000018  8ae1              LDRH     r1,[r4,#0x16]
00001a  68a0              LDR      r0,[r4,#8]
00001c  5445              STRB     r5,[r0,r1]
;;;1241   		if (++_pUart->usRxWrite >= _pUart->usRxBufSize)
00001e  8ae0              LDRH     r0,[r4,#0x16]
000020  1c40              ADDS     r0,r0,#1
000022  b280              UXTH     r0,r0
000024  82e0              STRH     r0,[r4,#0x16]
000026  89e1              LDRH     r1,[r4,#0xe]
000028  4288              CMP      r0,r1
00002a  db01              BLT      |L18.48|
;;;1242   		{
;;;1243   			_pUart->usRxWrite = 0;
00002c  2000              MOVS     r0,#0
00002e  82e0              STRH     r0,[r4,#0x16]
                  |L18.48|
;;;1244   		}
;;;1245   		if (_pUart->usRxCount < _pUart->usRxBufSize)
000030  8b60              LDRH     r0,[r4,#0x1a]
000032  89e1              LDRH     r1,[r4,#0xe]
000034  4288              CMP      r0,r1
000036  da02              BGE      |L18.62|
;;;1246   		{
;;;1247   			_pUart->usRxCount++;
000038  8b60              LDRH     r0,[r4,#0x1a]
00003a  1c40              ADDS     r0,r0,#1
00003c  8360              STRH     r0,[r4,#0x1a]
                  |L18.62|
;;;1248   		}
;;;1249   
;;;1250   		/* 回调函数,通知应用程序收到新数据,一般是发送1个消息或者设置一个标记 */
;;;1251   		//if (_pUart->usRxWrite == _pUart->usRxRead)
;;;1252   		//if (_pUart->usRxCount == 1)
;;;1253   		{
;;;1254   			if (_pUart->ReciveNew)
00003e  6a60              LDR      r0,[r4,#0x24]
000040  b110              CBZ      r0,|L18.72|
;;;1255   			{
;;;1256   				_pUart->ReciveNew(ch);
000042  4628              MOV      r0,r5
000044  6a61              LDR      r1,[r4,#0x24]
000046  4788              BLX      r1
                  |L18.72|
;;;1257   			}
;;;1258   		}
;;;1259   	}
000048  bf00              NOP      
                  |L18.74|
;;;1260   
;;;1261   	/* 处理发送缓冲区空中断 */
;;;1262   	if (USART_GetITStatus(_pUart->uart, USART_IT_TXE) != RESET)
00004a  f2407127          MOV      r1,#0x727
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       USART_GetITStatus
000054  b308              CBZ      r0,|L18.154|
;;;1263   	{
;;;1264   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1265   		if (_pUart->usTxCount == 0)
000056  8aa0              LDRH     r0,[r4,#0x14]
000058  b960              CBNZ     r0,|L18.116|
;;;1266   		{
;;;1267   			/* 发送缓冲区的数据已取完时， 禁止发送缓冲区空中断 （注意：此时最后1个数据还未真正发送完毕）*/
;;;1268   			USART_ITConfig(_pUart->uart, USART_IT_TXE, DISABLE);
00005a  2200              MOVS     r2,#0
00005c  f2407127          MOV      r1,#0x727
000060  6820              LDR      r0,[r4,#0]
000062  f7fffffe          BL       USART_ITConfig
;;;1269   
;;;1270   			/* 使能数据发送完毕中断 */
;;;1271   			USART_ITConfig(_pUart->uart, USART_IT_TC, ENABLE);
000066  2201              MOVS     r2,#1
000068  f2406126          MOV      r1,#0x626
00006c  6820              LDR      r0,[r4,#0]
00006e  f7fffffe          BL       USART_ITConfig
000072  e037              B        |L18.228|
                  |L18.116|
;;;1272   		}
;;;1273   		else
;;;1274   		{
;;;1275   			/* 从发送FIFO取1个字节写入串口发送数据寄存器 */
;;;1276   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
000074  8a63              LDRH     r3,[r4,#0x12]
000076  6862              LDR      r2,[r4,#4]
000078  5cd1              LDRB     r1,[r2,r3]
00007a  6820              LDR      r0,[r4,#0]
00007c  f7fffffe          BL       USART_SendData
;;;1277   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
000080  8a60              LDRH     r0,[r4,#0x12]
000082  1c40              ADDS     r0,r0,#1
000084  b280              UXTH     r0,r0
000086  8260              STRH     r0,[r4,#0x12]
000088  89a1              LDRH     r1,[r4,#0xc]
00008a  4288              CMP      r0,r1
00008c  db01              BLT      |L18.146|
;;;1278   			{
;;;1279   				_pUart->usTxRead = 0;
00008e  2000              MOVS     r0,#0
000090  8260              STRH     r0,[r4,#0x12]
                  |L18.146|
;;;1280   			}
;;;1281   			_pUart->usTxCount--;
000092  8aa0              LDRH     r0,[r4,#0x14]
000094  1e40              SUBS     r0,r0,#1
000096  82a0              STRH     r0,[r4,#0x14]
000098  e024              B        |L18.228|
                  |L18.154|
;;;1282   		}
;;;1283   
;;;1284   	}
;;;1285   	/* 数据bit位全部发送完毕的中断 */
;;;1286   	else if (USART_GetITStatus(_pUart->uart, USART_IT_TC) != RESET)
00009a  f2406126          MOV      r1,#0x626
00009e  6820              LDR      r0,[r4,#0]
0000a0  f7fffffe          BL       USART_GetITStatus
0000a4  b1f0              CBZ      r0,|L18.228|
;;;1287   	{
;;;1288   		//if (_pUart->usTxRead == _pUart->usTxWrite)
;;;1289   		if (_pUart->usTxCount == 0)
0000a6  8aa0              LDRH     r0,[r4,#0x14]
0000a8  b950              CBNZ     r0,|L18.192|
;;;1290   		{
;;;1291   			/* 如果发送FIFO的数据全部发送完毕，禁止数据发送完毕中断 */
;;;1292   			USART_ITConfig(_pUart->uart, USART_IT_TC, DISABLE);
0000aa  2200              MOVS     r2,#0
0000ac  f2406126          MOV      r1,#0x626
0000b0  6820              LDR      r0,[r4,#0]
0000b2  f7fffffe          BL       USART_ITConfig
;;;1293   
;;;1294   			/* 回调函数, 一般用来处理RS485通信，将RS485芯片设置为接收模式，避免抢占总线 */
;;;1295   			if (_pUart->SendOver)
0000b6  6a20              LDR      r0,[r4,#0x20]
0000b8  b1a0              CBZ      r0,|L18.228|
;;;1296   			{
;;;1297   				_pUart->SendOver();
0000ba  6a20              LDR      r0,[r4,#0x20]
0000bc  4780              BLX      r0
0000be  e011              B        |L18.228|
                  |L18.192|
;;;1298   			}
;;;1299   		}
;;;1300   		else
;;;1301   		{
;;;1302   			/* 正常情况下，不会进入此分支 */
;;;1303   
;;;1304   			/* 如果发送FIFO的数据还未完毕，则从发送FIFO取1个数据写入发送数据寄存器 */
;;;1305   			USART_SendData(_pUart->uart, _pUart->pTxBuf[_pUart->usTxRead]);
0000c0  8a63              LDRH     r3,[r4,#0x12]
0000c2  6862              LDR      r2,[r4,#4]
0000c4  5cd1              LDRB     r1,[r2,r3]
0000c6  6820              LDR      r0,[r4,#0]
0000c8  f7fffffe          BL       USART_SendData
;;;1306   			if (++_pUart->usTxRead >= _pUart->usTxBufSize)
0000cc  8a60              LDRH     r0,[r4,#0x12]
0000ce  1c40              ADDS     r0,r0,#1
0000d0  b280              UXTH     r0,r0
0000d2  8260              STRH     r0,[r4,#0x12]
0000d4  89a1              LDRH     r1,[r4,#0xc]
0000d6  4288              CMP      r0,r1
0000d8  db01              BLT      |L18.222|
;;;1307   			{
;;;1308   				_pUart->usTxRead = 0;
0000da  2000              MOVS     r0,#0
0000dc  8260              STRH     r0,[r4,#0x12]
                  |L18.222|
;;;1309   			}
;;;1310   			_pUart->usTxCount--;
0000de  8aa0              LDRH     r0,[r4,#0x14]
0000e0  1e40              SUBS     r0,r0,#1
0000e2  82a0              STRH     r0,[r4,#0x14]
                  |L18.228|
;;;1311   		}
;;;1312   	}
;;;1313   }
0000e4  bd70              POP      {r4-r6,pc}
;;;1314   
                          ENDP


                          AREA ||i.UartSend||, CODE, READONLY, ALIGN=1

                  UartSend PROC
;;;1111   */
;;;1112   static void UartSend(UART_T *_pUart, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d43f8          PUSH     {r3-r9,lr}
;;;1113   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;1114   	uint16_t i;
;;;1115   
;;;1116   #if uCOS_EN == 1 
;;;1117   	CPU_SR_ALLOC();
00000a  f04f0800          MOV      r8,#0
;;;1118   #endif
;;;1119   	
;;;1120   	for (i = 0; i < _usLen; i++)
00000e  2500              MOVS     r5,#0
000010  e039              B        |L19.134|
                  |L19.18|
;;;1121   	{
;;;1122   		/* 如果发送缓冲区已经满了，则等待缓冲区空 */
;;;1123   	#if 0
;;;1124   		/*
;;;1125   			在调试GPRS例程时，下面的代码出现死机，while 死循环
;;;1126   			原因： 发送第1个字节时 _pUart->usTxWrite = 1；_pUart->usTxRead = 0;
;;;1127   			将导致while(1) 无法退出
;;;1128   		*/
;;;1129   		while (1)
;;;1130   		{
;;;1131   			uint16_t usRead;
;;;1132   
;;;1133   			DISABLE_INT();
;;;1134   			usRead = _pUart->usTxRead;
;;;1135   			ENABLE_INT();
;;;1136   
;;;1137   			if (++usRead >= _pUart->usTxBufSize)
;;;1138   			{
;;;1139   				usRead = 0;
;;;1140   			}
;;;1141   
;;;1142   			if (usRead != _pUart->usTxWrite)
;;;1143   			{
;;;1144   				break;
;;;1145   			}
;;;1146   		}
;;;1147   	#else
;;;1148   		/* 当 _pUart->usTxBufSize == 1 时, 下面的函数会死掉(待完善) */
;;;1149   		while (1)
000012  e016              B        |L19.66|
                  |L19.20|
;;;1150   		{
;;;1151   			__IO uint16_t usCount;
;;;1152   
;;;1153   			DISABLE_INT();
000014  bf00              NOP      
000016  bf00              NOP      
000018  f7fffffe          BL       CPU_SR_Save
00001c  4680              MOV      r8,r0
00001e  bf00              NOP      
000020  bf00              NOP      
;;;1154   			usCount = _pUart->usTxCount;
000022  8aa0              LDRH     r0,[r4,#0x14]
000024  9000              STR      r0,[sp,#0]
;;;1155   			ENABLE_INT();
000026  bf00              NOP      
000028  bf00              NOP      
00002a  4640              MOV      r0,r8
00002c  f7fffffe          BL       CPU_SR_Restore
000030  bf00              NOP      
000032  bf00              NOP      
;;;1156   
;;;1157   			if (usCount < _pUart->usTxBufSize)
000034  89a0              LDRH     r0,[r4,#0xc]
000036  f8bd1000          LDRH     r1,[sp,#0]
00003a  4288              CMP      r0,r1
00003c  dd00              BLE      |L19.64|
;;;1158   			{
;;;1159   				break;
00003e  e001              B        |L19.68|
                  |L19.64|
;;;1160   			}
;;;1161   		}
000040  bf00              NOP      
                  |L19.66|
000042  e7e7              B        |L19.20|
                  |L19.68|
000044  bf00              NOP                            ;1159
;;;1162   	#endif
;;;1163   
;;;1164   		/* 将新数据填入发送缓冲区 */
;;;1165   		_pUart->pTxBuf[_pUart->usTxWrite] = _ucaBuf[i];
000046  5d70              LDRB     r0,[r6,r5]
000048  8a22              LDRH     r2,[r4,#0x10]
00004a  6861              LDR      r1,[r4,#4]
00004c  5488              STRB     r0,[r1,r2]
;;;1166   
;;;1167   		DISABLE_INT();
00004e  bf00              NOP      
000050  bf00              NOP      
000052  f7fffffe          BL       CPU_SR_Save
000056  4680              MOV      r8,r0
000058  bf00              NOP      
00005a  bf00              NOP      
;;;1168   		if (++_pUart->usTxWrite >= _pUart->usTxBufSize)
00005c  8a20              LDRH     r0,[r4,#0x10]
00005e  1c40              ADDS     r0,r0,#1
000060  b280              UXTH     r0,r0
000062  8220              STRH     r0,[r4,#0x10]
000064  89a1              LDRH     r1,[r4,#0xc]
000066  4288              CMP      r0,r1
000068  db01              BLT      |L19.110|
;;;1169   		{
;;;1170   			_pUart->usTxWrite = 0;
00006a  2000              MOVS     r0,#0
00006c  8220              STRH     r0,[r4,#0x10]
                  |L19.110|
;;;1171   		}
;;;1172   		_pUart->usTxCount++;
00006e  8aa0              LDRH     r0,[r4,#0x14]
000070  1c40              ADDS     r0,r0,#1
000072  82a0              STRH     r0,[r4,#0x14]
;;;1173   		ENABLE_INT();
000074  bf00              NOP      
000076  bf00              NOP      
000078  4640              MOV      r0,r8
00007a  f7fffffe          BL       CPU_SR_Restore
00007e  bf00              NOP      
000080  bf00              NOP      
000082  1c68              ADDS     r0,r5,#1              ;1120
000084  b285              UXTH     r5,r0                 ;1120
                  |L19.134|
000086  42bd              CMP      r5,r7                 ;1120
000088  dbc3              BLT      |L19.18|
;;;1174   	}
;;;1175   
;;;1176   	USART_ITConfig(_pUart->uart, USART_IT_TXE, ENABLE);
00008a  2201              MOVS     r2,#1
00008c  f2407127          MOV      r1,#0x727
000090  6820              LDR      r0,[r4,#0]
000092  f7fffffe          BL       USART_ITConfig
;;;1177   }
000096  e8bd83f8          POP      {r3-r9,pc}
;;;1178   
                          ENDP


                          AREA ||i.UartVarInit||, CODE, READONLY, ALIGN=2

                  UartVarInit PROC
;;;526    */
;;;527    static void UartVarInit(void)
000000  482b              LDR      r0,|L20.176|
;;;528    {
;;;529    #if UART1_FIFO_EN == 1
;;;530    	g_tUart1.uart = USART1;						/* STM32 串口设备 */
000002  492c              LDR      r1,|L20.180|
000004  6008              STR      r0,[r1,#0]  ; g_tUart1
;;;531    	g_tUart1.pTxBuf = g_TxBuf1;					/* 发送缓冲区指针 */
000006  482c              LDR      r0,|L20.184|
000008  6048              STR      r0,[r1,#4]  ; g_tUart1
;;;532    	g_tUart1.pRxBuf = g_RxBuf1;					/* 接收缓冲区指针 */
00000a  482c              LDR      r0,|L20.188|
00000c  6088              STR      r0,[r1,#8]  ; g_tUart1
;;;533    	g_tUart1.usTxBufSize = UART1_TX_BUF_SIZE;	/* 发送缓冲区大小 */
00000e  f44f6080          MOV      r0,#0x400
000012  8188              STRH     r0,[r1,#0xc]
;;;534    	g_tUart1.usRxBufSize = UART1_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000014  81c8              STRH     r0,[r1,#0xe]
;;;535    	g_tUart1.usTxWrite = 0;						/* 发送FIFO写索引 */
000016  2000              MOVS     r0,#0
000018  8208              STRH     r0,[r1,#0x10]
;;;536    	g_tUart1.usTxRead = 0;						/* 发送FIFO读索引 */
00001a  8248              STRH     r0,[r1,#0x12]
;;;537    	g_tUart1.usRxWrite = 0;						/* 接收FIFO写索引 */
00001c  82c8              STRH     r0,[r1,#0x16]
;;;538    	g_tUart1.usRxRead = 0;						/* 接收FIFO读索引 */
00001e  8308              STRH     r0,[r1,#0x18]
;;;539    	g_tUart1.usRxCount = 0;						/* 接收到的新数据个数 */
000020  8348              STRH     r0,[r1,#0x1a]
;;;540    	g_tUart1.usTxCount = 0;						/* 待发送的数据个数 */
000022  8288              STRH     r0,[r1,#0x14]
;;;541    	g_tUart1.SendBefor = 0;						/* 发送数据前的回调函数 */
000024  61c8              STR      r0,[r1,#0x1c]  ; g_tUart1
;;;542    	g_tUart1.SendOver = 0;						/* 发送完毕后的回调函数 */
000026  6208              STR      r0,[r1,#0x20]  ; g_tUart1
;;;543    	g_tUart1.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000028  6248              STR      r0,[r1,#0x24]  ; g_tUart1
;;;544    #endif
;;;545    
;;;546    #if UART2_FIFO_EN == 1
;;;547    	g_tUart2.uart = USART2;						/* STM32 串口设备 */
00002a  4825              LDR      r0,|L20.192|
00002c  4925              LDR      r1,|L20.196|
00002e  6008              STR      r0,[r1,#0]  ; g_tUart2
;;;548    	g_tUart2.pTxBuf = g_TxBuf2;					/* 发送缓冲区指针 */
000030  4825              LDR      r0,|L20.200|
000032  6048              STR      r0,[r1,#4]  ; g_tUart2
;;;549    	g_tUart2.pRxBuf = g_RxBuf2;					/* 接收缓冲区指针 */
000034  4825              LDR      r0,|L20.204|
000036  6088              STR      r0,[r1,#8]  ; g_tUart2
;;;550    	g_tUart2.usTxBufSize = UART2_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000038  2001              MOVS     r0,#1
00003a  8188              STRH     r0,[r1,#0xc]
;;;551    	g_tUart2.usRxBufSize = UART2_RX_BUF_SIZE;	/* 接收缓冲区大小 */
00003c  02c0              LSLS     r0,r0,#11
00003e  81c8              STRH     r0,[r1,#0xe]
;;;552    	g_tUart2.usTxWrite = 0;						/* 发送FIFO写索引 */
000040  2000              MOVS     r0,#0
000042  8208              STRH     r0,[r1,#0x10]
;;;553    	g_tUart2.usTxRead = 0;						/* 发送FIFO读索引 */
000044  8248              STRH     r0,[r1,#0x12]
;;;554    	g_tUart2.usRxWrite = 0;						/* 接收FIFO写索引 */
000046  82c8              STRH     r0,[r1,#0x16]
;;;555    	g_tUart2.usRxRead = 0;						/* 接收FIFO读索引 */
000048  8308              STRH     r0,[r1,#0x18]
;;;556    	g_tUart2.usRxCount = 0;						/* 接收到的新数据个数 */
00004a  8348              STRH     r0,[r1,#0x1a]
;;;557    	g_tUart2.usTxCount = 0;						/* 待发送的数据个数 */
00004c  8288              STRH     r0,[r1,#0x14]
;;;558    	g_tUart2.SendBefor = 0;						/* 发送数据前的回调函数 */
00004e  61c8              STR      r0,[r1,#0x1c]  ; g_tUart2
;;;559    	g_tUart2.SendOver = 0;						/* 发送完毕后的回调函数 */
000050  6208              STR      r0,[r1,#0x20]  ; g_tUart2
;;;560    	g_tUart2.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
000052  6248              STR      r0,[r1,#0x24]  ; g_tUart2
;;;561    #endif
;;;562    
;;;563    #if UART3_FIFO_EN == 1
;;;564    	g_tUart3.uart = USART3;						/* STM32 串口设备 */
000054  481e              LDR      r0,|L20.208|
000056  491f              LDR      r1,|L20.212|
000058  6008              STR      r0,[r1,#0]  ; g_tUart3
;;;565    	g_tUart3.pTxBuf = g_TxBuf3;					/* 发送缓冲区指针 */
00005a  481f              LDR      r0,|L20.216|
00005c  6048              STR      r0,[r1,#4]  ; g_tUart3
;;;566    	g_tUart3.pRxBuf = g_RxBuf3;					/* 接收缓冲区指针 */
00005e  481f              LDR      r0,|L20.220|
000060  6088              STR      r0,[r1,#8]  ; g_tUart3
;;;567    	g_tUart3.usTxBufSize = UART3_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000062  f44f6080          MOV      r0,#0x400
000066  8188              STRH     r0,[r1,#0xc]
;;;568    	g_tUart3.usRxBufSize = UART3_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000068  81c8              STRH     r0,[r1,#0xe]
;;;569    	g_tUart3.usTxWrite = 0;						/* 发送FIFO写索引 */
00006a  2000              MOVS     r0,#0
00006c  8208              STRH     r0,[r1,#0x10]
;;;570    	g_tUart3.usTxRead = 0;						/* 发送FIFO读索引 */
00006e  8248              STRH     r0,[r1,#0x12]
;;;571    	g_tUart3.usRxWrite = 0;						/* 接收FIFO写索引 */
000070  82c8              STRH     r0,[r1,#0x16]
;;;572    	g_tUart3.usRxRead = 0;						/* 接收FIFO读索引 */
000072  8308              STRH     r0,[r1,#0x18]
;;;573    	g_tUart3.usRxCount = 0;						/* 接收到的新数据个数 */
000074  8348              STRH     r0,[r1,#0x1a]
;;;574    	g_tUart3.usTxCount = 0;						/* 待发送的数据个数 */
000076  8288              STRH     r0,[r1,#0x14]
;;;575    	g_tUart3.SendBefor = RS485_SendBefor;		/* 发送数据前的回调函数 */
000078  4819              LDR      r0,|L20.224|
00007a  61c8              STR      r0,[r1,#0x1c]  ; g_tUart3
;;;576    	g_tUart3.SendOver = RS485_SendOver;			/* 发送完毕后的回调函数 */
00007c  4819              LDR      r0,|L20.228|
00007e  6208              STR      r0,[r1,#0x20]  ; g_tUart3
;;;577    	g_tUart3.ReciveNew = RS485_ReciveNew;		/* 接收到新数据后的回调函数 */
000080  4819              LDR      r0,|L20.232|
000082  6248              STR      r0,[r1,#0x24]  ; g_tUart3
;;;578    #endif
;;;579    
;;;580    #if UART4_FIFO_EN == 1
;;;581    	g_tUart4.uart = UART4;						/* STM32 串口设备 */
;;;582    	g_tUart4.pTxBuf = g_TxBuf4;					/* 发送缓冲区指针 */
;;;583    	g_tUart4.pRxBuf = g_RxBuf4;					/* 接收缓冲区指针 */
;;;584    	g_tUart4.usTxBufSize = UART4_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;585    	g_tUart4.usRxBufSize = UART4_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;586    	g_tUart4.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;587    	g_tUart4.usTxRead = 0;						/* 发送FIFO读索引 */
;;;588    	g_tUart4.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;589    	g_tUart4.usRxRead = 0;						/* 接收FIFO读索引 */
;;;590    	g_tUart4.usRxCount = 0;						/* 接收到的新数据个数 */
;;;591    	g_tUart4.usTxCount = 0;						/* 待发送的数据个数 */
;;;592    	g_tUart4.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;593    	g_tUart4.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;594    	g_tUart4.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;595    #endif
;;;596    
;;;597    #if UART5_FIFO_EN == 1
;;;598    	g_tUart5.uart = UART5;						/* STM32 串口设备 */
;;;599    	g_tUart5.pTxBuf = g_TxBuf5;					/* 发送缓冲区指针 */
;;;600    	g_tUart5.pRxBuf = g_RxBuf5;					/* 接收缓冲区指针 */
;;;601    	g_tUart5.usTxBufSize = UART5_TX_BUF_SIZE;	/* 发送缓冲区大小 */
;;;602    	g_tUart5.usRxBufSize = UART5_RX_BUF_SIZE;	/* 接收缓冲区大小 */
;;;603    	g_tUart5.usTxWrite = 0;						/* 发送FIFO写索引 */
;;;604    	g_tUart5.usTxRead = 0;						/* 发送FIFO读索引 */
;;;605    	g_tUart5.usRxWrite = 0;						/* 接收FIFO写索引 */
;;;606    	g_tUart5.usRxRead = 0;						/* 接收FIFO读索引 */
;;;607    	g_tUart5.usRxCount = 0;						/* 接收到的新数据个数 */
;;;608    	g_tUart5.usTxCount = 0;						/* 待发送的数据个数 */
;;;609    	g_tUart5.SendBefor = 0;						/* 发送数据前的回调函数 */
;;;610    	g_tUart5.SendOver = 0;						/* 发送完毕后的回调函数 */
;;;611    	g_tUart5.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
;;;612    #endif
;;;613    
;;;614    
;;;615    #if UART6_FIFO_EN == 1
;;;616    	g_tUart6.uart = USART6;						/* STM32 串口设备 */
000084  4819              LDR      r0,|L20.236|
000086  491a              LDR      r1,|L20.240|
000088  6008              STR      r0,[r1,#0]  ; g_tUart6
;;;617    	g_tUart6.pTxBuf = g_TxBuf6;					/* 发送缓冲区指针 */
00008a  481a              LDR      r0,|L20.244|
00008c  6048              STR      r0,[r1,#4]  ; g_tUart6
;;;618    	g_tUart6.pRxBuf = g_RxBuf6;					/* 接收缓冲区指针 */
00008e  481a              LDR      r0,|L20.248|
000090  6088              STR      r0,[r1,#8]  ; g_tUart6
;;;619    	g_tUart6.usTxBufSize = UART6_TX_BUF_SIZE;	/* 发送缓冲区大小 */
000092  f44f6080          MOV      r0,#0x400
000096  8188              STRH     r0,[r1,#0xc]
;;;620    	g_tUart6.usRxBufSize = UART6_RX_BUF_SIZE;	/* 接收缓冲区大小 */
000098  81c8              STRH     r0,[r1,#0xe]
;;;621    	g_tUart6.usTxWrite = 0;						/* 发送FIFO写索引 */
00009a  2000              MOVS     r0,#0
00009c  8208              STRH     r0,[r1,#0x10]
;;;622    	g_tUart6.usTxRead = 0;						/* 发送FIFO读索引 */
00009e  8248              STRH     r0,[r1,#0x12]
;;;623    	g_tUart6.usRxWrite = 0;						/* 接收FIFO写索引 */
0000a0  82c8              STRH     r0,[r1,#0x16]
;;;624    	g_tUart6.usRxRead = 0;						/* 接收FIFO读索引 */
0000a2  8308              STRH     r0,[r1,#0x18]
;;;625    	g_tUart6.usRxCount = 0;						/* 接收到的新数据个数 */
0000a4  8348              STRH     r0,[r1,#0x1a]
;;;626    	g_tUart6.usTxCount = 0;						/* 待发送的数据个数 */
0000a6  8288              STRH     r0,[r1,#0x14]
;;;627    	g_tUart6.SendBefor = 0;						/* 发送数据前的回调函数 */
0000a8  61c8              STR      r0,[r1,#0x1c]  ; g_tUart6
;;;628    	g_tUart6.SendOver = 0;						/* 发送完毕后的回调函数 */
0000aa  6208              STR      r0,[r1,#0x20]  ; g_tUart6
;;;629    	g_tUart6.ReciveNew = 0;						/* 接收到新数据后的回调函数 */
0000ac  6248              STR      r0,[r1,#0x24]  ; g_tUart6
;;;630    #endif
;;;631    }
0000ae  4770              BX       lr
;;;632    
                          ENDP

                  |L20.176|
                          DCD      0x40011000
                  |L20.180|
                          DCD      g_tUart1
                  |L20.184|
                          DCD      g_TxBuf1
                  |L20.188|
                          DCD      g_RxBuf1
                  |L20.192|
                          DCD      0x40004400
                  |L20.196|
                          DCD      g_tUart2
                  |L20.200|
                          DCD      g_TxBuf2
                  |L20.204|
                          DCD      g_RxBuf2
                  |L20.208|
                          DCD      0x40004800
                  |L20.212|
                          DCD      g_tUart3
                  |L20.216|
                          DCD      g_TxBuf3
                  |L20.220|
                          DCD      g_RxBuf3
                  |L20.224|
                          DCD      RS485_SendBefor
                  |L20.228|
                          DCD      RS485_SendOver
                  |L20.232|
                          DCD      RS485_ReciveNew
                  |L20.236|
                          DCD      0x40011400
                  |L20.240|
                          DCD      g_tUart6
                  |L20.244|
                          DCD      g_TxBuf6
                  |L20.248|
                          DCD      g_RxBuf6

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;80     */
;;;81     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;82     {
;;;83     	UartVarInit();		/* 必须先初始化全局变量,再配置硬件 */
000002  f7fffffe          BL       UartVarInit
;;;84     
;;;85     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000006  f7fffffe          BL       InitHardUart
;;;86     
;;;87     	RS485_InitTXE();	/* 配置RS485芯片的发送使能硬件，配置为推挽输出 */
00000a  f7fffffe          BL       RS485_InitTXE
;;;88     
;;;89     	ConfigUartNVIC();	/* 配置串口中断 */
00000e  f7fffffe          BL       ConfigUartNVIC
;;;90     }
000012  bd10              POP      {r4,pc}
;;;91     
                          ENDP


                          AREA ||i.comClearRxFifo||, CODE, READONLY, ALIGN=1

                  comClearRxFifo PROC
;;;309    */
;;;310    void comClearRxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;311    {
000002  4603              MOV      r3,r0
;;;312    	UART_T *pUart;
;;;313    
;;;314    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;315    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L22.16|
                  |L22.14|
;;;316    	{
;;;317    		return;
;;;318    	}
;;;319    
;;;320    	pUart->usRxWrite = 0;
;;;321    	pUart->usRxRead = 0;
;;;322    	pUart->usRxCount = 0;
;;;323    }
00000e  bd00              POP      {pc}
                  |L22.16|
000010  2000              MOVS     r0,#0                 ;320
000012  82d0              STRH     r0,[r2,#0x16]         ;320
000014  8310              STRH     r0,[r2,#0x18]         ;321
000016  8350              STRH     r0,[r2,#0x1a]         ;322
000018  bf00              NOP      
00001a  e7f8              B        |L22.14|
;;;324    
                          ENDP


                          AREA ||i.comClearTxFifo||, CODE, READONLY, ALIGN=1

                  comClearTxFifo PROC
;;;286    */
;;;287    void comClearTxFifo(COM_PORT_E _ucPort)
000000  b500              PUSH     {lr}
;;;288    {
000002  4603              MOV      r3,r0
;;;289    	UART_T *pUart;
;;;290    
;;;291    	pUart = ComToUart(_ucPort);
000004  4618              MOV      r0,r3
000006  f7fffffe          BL       ComToUart
00000a  4602              MOV      r2,r0
;;;292    	if (pUart == 0)
00000c  b902              CBNZ     r2,|L23.16|
                  |L23.14|
;;;293    	{
;;;294    		return;
;;;295    	}
;;;296    
;;;297    	pUart->usTxWrite = 0;
;;;298    	pUart->usTxRead = 0;
;;;299    	pUart->usTxCount = 0;
;;;300    }
00000e  bd00              POP      {pc}
                  |L23.16|
000010  2000              MOVS     r0,#0                 ;297
000012  8210              STRH     r0,[r2,#0x10]         ;297
000014  8250              STRH     r0,[r2,#0x12]         ;298
000016  8290              STRH     r0,[r2,#0x14]         ;299
000018  bf00              NOP      
00001a  e7f8              B        |L23.14|
;;;301    
                          ENDP


                          AREA ||i.comGetChar||, CODE, READONLY, ALIGN=1

                  comGetChar PROC
;;;265    */
;;;266    uint8_t comGetChar(COM_PORT_E _ucPort, uint8_t *_pByte)
000000  b570              PUSH     {r4-r6,lr}
;;;267    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;268    	UART_T *pUart;
;;;269    
;;;270    	pUart = ComToUart(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUart
00000c  4604              MOV      r4,r0
;;;271    	if (pUart == 0)
00000e  b90c              CBNZ     r4,|L24.20|
;;;272    	{
;;;273    		return 0;
000010  2000              MOVS     r0,#0
                  |L24.18|
;;;274    	}
;;;275    
;;;276    	return UartGetChar(pUart, _pByte);
;;;277    }
000012  bd70              POP      {r4-r6,pc}
                  |L24.20|
000014  4631              MOV      r1,r6                 ;276
000016  4620              MOV      r0,r4                 ;276
000018  f7fffffe          BL       UartGetChar
00001c  e7f9              B        |L24.18|
;;;278    
                          ENDP


                          AREA ||i.comSendBuf||, CODE, READONLY, ALIGN=1

                  comSendBuf PROC
;;;224    */
;;;225    void comSendBuf(COM_PORT_E _ucPort, uint8_t *_ucaBuf, uint16_t _usLen)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;226    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;227    	UART_T *pUart;
;;;228    
;;;229    	pUart = ComToUart(_ucPort);
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       ComToUart
000010  4604              MOV      r4,r0
;;;230    	if (pUart == 0)
000012  b90c              CBNZ     r4,|L25.24|
                  |L25.20|
;;;231    	{
;;;232    		return;
;;;233    	}
;;;234    
;;;235    	if (pUart->SendBefor != 0)
;;;236    	{
;;;237    		pUart->SendBefor();		/* 如果是RS485通信，可以在这个函数中将RS485设置为发送模式 */
;;;238    	}
;;;239    
;;;240    	UartSend(pUart, _ucaBuf, _usLen);
;;;241    }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L25.24|
000018  69e0              LDR      r0,[r4,#0x1c]         ;235
00001a  b108              CBZ      r0,|L25.32|
00001c  69e0              LDR      r0,[r4,#0x1c]         ;237
00001e  4780              BLX      r0                    ;237
                  |L25.32|
000020  463a              MOV      r2,r7                 ;240
000022  4631              MOV      r1,r6                 ;240
000024  4620              MOV      r0,r4                 ;240
000026  f7fffffe          BL       UartSend
00002a  bf00              NOP      
00002c  e7f2              B        |L25.20|
;;;242    
                          ENDP


                          AREA ||i.comSendChar||, CODE, READONLY, ALIGN=1

                  comSendChar PROC
;;;251    */
;;;252    void comSendChar(COM_PORT_E _ucPort, uint8_t _ucByte)
000000  b513              PUSH     {r0,r1,r4,lr}
;;;253    {
000002  4604              MOV      r4,r0
;;;254    	comSendBuf(_ucPort, &_ucByte, 1);
000004  2201              MOVS     r2,#1
000006  a901              ADD      r1,sp,#4
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       comSendBuf
;;;255    }
00000e  bd1c              POP      {r2-r4,pc}
;;;256    
                          ENDP


                          AREA ||i.comSetBaud||, CODE, READONLY, ALIGN=1

                  comSetBaud PROC
;;;333    */
;;;334    void comSetBaud(COM_PORT_E _ucPort, uint32_t _BaudRate)
000000  b570              PUSH     {r4-r6,lr}
;;;335    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;336    	USART_TypeDef* USARTx;
;;;337    	
;;;338    	USARTx = ComToUSARTx(_ucPort);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       ComToUSARTx
00000c  4604              MOV      r4,r0
;;;339    	if (USARTx == 0)
00000e  b904              CBNZ     r4,|L27.18|
                  |L27.16|
;;;340    	{
;;;341    		return;
;;;342    	}
;;;343    	
;;;344    	USART_SetBaudRate(USARTx, _BaudRate);
;;;345    }
000010  bd70              POP      {r4-r6,pc}
                  |L27.18|
000012  4631              MOV      r1,r6                 ;344
000014  4620              MOV      r0,r4                 ;344
000016  f7fffffe          BL       USART_SetBaudRate
00001a  bf00              NOP      
00001c  e7f8              B        |L27.16|
;;;346    
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=1

                  fgetc PROC
;;;1470   */
;;;1471   int fgetc(FILE *f)
000000  b538              PUSH     {r3-r5,lr}
;;;1472   {
000002  4604              MOV      r4,r0
;;;1473   
;;;1474   #if 1	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;1475   	uint8_t ucData;
;;;1476   
;;;1477   	while(comGetChar(COM1, &ucData) == 0);
000004  bf00              NOP      
                  |L28.6|
000006  4669              MOV      r1,sp
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comGetChar
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L28.6|
;;;1478   
;;;1479   	return ucData;
000012  f89d0000          LDRB     r0,[sp,#0]
;;;1480   #else
;;;1481   	/* 等待串口1输入数据 */
;;;1482   	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
;;;1483   
;;;1484   	return (int)USART_ReceiveData(USART1);
;;;1485   #endif
;;;1486   }
000016  bd38              POP      {r3-r5,pc}
;;;1487   
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=1

                  fputc PROC
;;;1444   */
;;;1445   int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;1446   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1447   #if 1	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;1448   	comSendChar(COM1, ch);
000006  b2e1              UXTB     r1,r4
000008  2000              MOVS     r0,#0
00000a  f7fffffe          BL       comSendChar
;;;1449   
;;;1450   	return ch;
00000e  4620              MOV      r0,r4
;;;1451   #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;1452   	/* 写一个字节到USART1 */
;;;1453   	USART_SendData(USART1, (uint8_t) ch);
;;;1454   
;;;1455   	/* 等待发送结束 */
;;;1456   	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
;;;1457   	{}
;;;1458   
;;;1459   	return ch;
;;;1460   #endif
;;;1461   }
000010  bd70              POP      {r4-r6,pc}
;;;1462   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  g_tUart1
                          %        40
                  g_TxBuf1
                          %        1024
                  g_RxBuf1
                          %        1024
                  g_tUart2
                          %        40
                  g_RxBuf2
                          %        2048
                  g_tUart3
                          %        40
                  g_TxBuf3
                          %        1024
                  g_RxBuf3
                          %        1024
                  g_tUart6
                          %        40
                  g_TxBuf6
                          %        1024
                  g_RxBuf6
                          %        1024

                          AREA ||.data||, DATA, ALIGN=0

                  g_TxBuf2
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_uart_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_bsp_uart_fifo_c_b28b0d00____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH|
#line 144
|__asm___15_bsp_uart_fifo_c_b28b0d00____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_bsp_uart_fifo_c_b28b0d00____RRX|
#line 300
|__asm___15_bsp_uart_fifo_c_b28b0d00____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
