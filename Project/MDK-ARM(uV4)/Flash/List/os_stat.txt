; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_stat.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_stat.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_stat.crf ..\..\uCOS-III\uCOS-III\Source\os_stat.c]
                          THUMB

                          AREA ||i.OSStatReset||, CODE, READONLY, ALIGN=2

                  OSStatReset PROC
;;;56     
;;;57     void  OSStatReset (OS_ERR  *p_err)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;58     {
000004  4607              MOV      r7,r0
;;;59     #if (OS_CFG_DBG_EN > 0u)
;;;60         OS_TCB      *p_tcb;
;;;61     #if (OS_MSG_EN > 0u)
;;;62         OS_MSG_Q    *p_msg_q;
;;;63     #endif
;;;64     #if (OS_CFG_Q_EN > 0u)
;;;65         OS_Q        *p_q;
;;;66     #endif
;;;67     #endif
;;;68         CPU_SR_ALLOC();
000006  f04f0800          MOV      r8,#0
;;;69     
;;;70     
;;;71     
;;;72     #ifdef OS_SAFETY_CRITICAL
;;;73         if (p_err == (OS_ERR *)0) {
;;;74             OS_SAFETY_CRITICAL_EXCEPTION();
;;;75             return;
;;;76         }
;;;77     #endif
;;;78     
;;;79         CPU_CRITICAL_ENTER();
00000a  bf00              NOP      
00000c  bf00              NOP      
00000e  f7fffffe          BL       CPU_SR_Save
000012  4680              MOV      r8,r0
000014  bf00              NOP      
000016  bf00              NOP      
;;;80     #if OS_CFG_ISR_POST_DEFERRED_EN > 0u
;;;81         OSIntQTaskTimeMax     = (CPU_TS    )0;                  /* Reset the task execution times                         */
;;;82         OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
;;;83     #endif
;;;84     
;;;85     #if OS_CFG_STAT_TASK_EN > 0u
;;;86         OSStatTaskCPUUsageMax = 0u;
000018  2000              MOVS     r0,#0
00001a  4939              LDR      r1,|L1.256|
00001c  8008              STRH     r0,[r1,#0]
;;;87         OSStatTaskTimeMax     = (CPU_TS)0;
00001e  4939              LDR      r1,|L1.260|
000020  6008              STR      r0,[r1,#0]  ; OSStatTaskTimeMax
;;;88     #endif
;;;89     
;;;90         OSTickTaskTimeMax     = (CPU_TS)0;
000022  4939              LDR      r1,|L1.264|
000024  6008              STR      r0,[r1,#0]  ; OSTickTaskTimeMax
;;;91     
;;;92     #if OS_CFG_TMR_EN > 0u
;;;93         OSTmrTaskTimeMax      = (CPU_TS)0;
000026  4939              LDR      r1,|L1.268|
000028  6008              STR      r0,[r1,#0]  ; OSTmrTaskTimeMax
;;;94     #endif
;;;95     
;;;96     #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;97         OSIntDisTimeMax       = (CPU_TS)0;                      /* Reset the maximum interrupt disable time               */
;;;98     #endif
;;;99     
;;;100    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;101        OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
;;;102    #endif
;;;103    
;;;104    #if OS_MSG_EN > 0u
;;;105        OSMsgPool.NbrUsedMax  = 0u;
00002a  4939              LDR      r1,|L1.272|
00002c  8108              STRH     r0,[r1,#8]
;;;106    #endif
;;;107        CPU_CRITICAL_EXIT();
00002e  bf00              NOP      
000030  bf00              NOP      
000032  4640              MOV      r0,r8
000034  f7fffffe          BL       CPU_SR_Restore
000038  bf00              NOP      
00003a  bf00              NOP      
;;;108    
;;;109    #if OS_CFG_DBG_EN > 0u
;;;110        CPU_CRITICAL_ENTER();
00003c  bf00              NOP      
00003e  bf00              NOP      
000040  f7fffffe          BL       CPU_SR_Save
000044  4680              MOV      r8,r0
000046  bf00              NOP      
000048  bf00              NOP      
;;;111        p_tcb = OSTaskDbgListPtr;
00004a  4832              LDR      r0,|L1.276|
00004c  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;112        CPU_CRITICAL_EXIT();
00004e  bf00              NOP      
000050  bf00              NOP      
000052  4640              MOV      r0,r8
000054  f7fffffe          BL       CPU_SR_Restore
000058  bf00              NOP      
00005a  bf00              NOP      
;;;113        while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
00005c  e020              B        |L1.160|
                  |L1.94|
;;;114            CPU_CRITICAL_ENTER();
00005e  bf00              NOP      
000060  bf00              NOP      
000062  f7fffffe          BL       CPU_SR_Save
000066  4680              MOV      r8,r0
000068  bf00              NOP      
00006a  bf00              NOP      
;;;115    
;;;116    #ifdef CPU_CFG_INT_DIS_MEAS_EN
;;;117            p_tcb->IntDisTimeMax    = (CPU_TS      )0;
;;;118    #endif
;;;119    
;;;120    #if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
;;;121            p_tcb->SchedLockTimeMax = (CPU_TS      )0;
;;;122    #endif
;;;123    
;;;124    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;125    #if OS_CFG_TASK_Q_EN > 0u
;;;126            p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
00006c  2000              MOVS     r0,#0
00006e  f8440f78          STR      r0,[r4,#0x78]!
;;;127    #endif
;;;128            p_tcb->SemPendTimeMax   = (CPU_TS      )0;
000072  6320              STR      r0,[r4,#0x30]
;;;129            p_tcb->CtxSwCtr         = (OS_CTR      )0;
000074  61a0              STR      r0,[r4,#0x18]
;;;130            p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
000076  82a0              STRH     r0,[r4,#0x14]
;;;131            p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
000078  82e0              STRH     r0,[r4,#0x16]
;;;132            p_tcb->CyclesTotal      = (OS_CYCLES   )0;
00007a  6260              STR      r0,[r4,#0x24]
;;;133            p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
00007c  62a0              STR      r0,[r4,#0x28]
;;;134            p_tcb->CyclesStart      =  OS_TS_GET();
00007e  f7fffffe          BL       CPU_TS_TmrRd
000082  6220              STR      r0,[r4,#0x20]
000084  3c78              SUBS     r4,r4,#0x78
;;;135    #endif
;;;136    
;;;137    #if OS_CFG_TASK_Q_EN > 0u
;;;138            p_msg_q                 = &p_tcb->MsgQ;
000086  f1040664          ADD      r6,r4,#0x64
;;;139            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
00008a  2000              MOVS     r0,#0
00008c  81b0              STRH     r0,[r6,#0xc]
;;;140    #endif
;;;141            p_tcb                   = p_tcb->DbgNextPtr;
00008e  f8d440b8          LDR      r4,[r4,#0xb8]
;;;142            CPU_CRITICAL_EXIT();
000092  bf00              NOP      
000094  bf00              NOP      
000096  4640              MOV      r0,r8
000098  f7fffffe          BL       CPU_SR_Restore
00009c  bf00              NOP      
00009e  bf00              NOP      
                  |L1.160|
0000a0  2c00              CMP      r4,#0                 ;113
0000a2  d1dc              BNE      |L1.94|
;;;143        }
;;;144    #endif
;;;145    
;;;146    #if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
;;;147        CPU_CRITICAL_ENTER();
0000a4  bf00              NOP      
0000a6  bf00              NOP      
0000a8  f7fffffe          BL       CPU_SR_Save
0000ac  4680              MOV      r8,r0
0000ae  bf00              NOP      
0000b0  bf00              NOP      
;;;148        p_q = OSQDbgListPtr;
0000b2  4819              LDR      r0,|L1.280|
0000b4  6805              LDR      r5,[r0,#0]  ; OSQDbgListPtr
;;;149        CPU_CRITICAL_EXIT();
0000b6  bf00              NOP      
0000b8  bf00              NOP      
0000ba  4640              MOV      r0,r8
0000bc  f7fffffe          BL       CPU_SR_Restore
0000c0  bf00              NOP      
0000c2  bf00              NOP      
;;;150        while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
0000c4  e012              B        |L1.236|
                  |L1.198|
;;;151            CPU_CRITICAL_ENTER();
0000c6  bf00              NOP      
0000c8  bf00              NOP      
0000ca  f7fffffe          BL       CPU_SR_Save
0000ce  4680              MOV      r8,r0
0000d0  bf00              NOP      
0000d2  bf00              NOP      
;;;152            p_msg_q                = &p_q->MsgQ;
0000d4  f1050620          ADD      r6,r5,#0x20
;;;153            p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
0000d8  2000              MOVS     r0,#0
0000da  81b0              STRH     r0,[r6,#0xc]
;;;154            p_q                    = p_q->DbgNextPtr;
0000dc  69ad              LDR      r5,[r5,#0x18]
;;;155            CPU_CRITICAL_EXIT();
0000de  bf00              NOP      
0000e0  bf00              NOP      
0000e2  4640              MOV      r0,r8
0000e4  f7fffffe          BL       CPU_SR_Restore
0000e8  bf00              NOP      
0000ea  bf00              NOP      
                  |L1.236|
0000ec  2d00              CMP      r5,#0                 ;150
0000ee  d1ea              BNE      |L1.198|
;;;156        }
;;;157    #endif
;;;158    
;;;159        OS_TickListResetPeak();                                 /* Reset tick wheel statistics                            */
0000f0  f7fffffe          BL       OS_TickListResetPeak
;;;160    
;;;161    #if OS_CFG_TMR_EN > 0u
;;;162        OS_TmrResetPeak();
0000f4  f7fffffe          BL       OS_TmrResetPeak
;;;163    #endif
;;;164    
;;;165    
;;;166       *p_err = OS_ERR_NONE;
0000f8  2000              MOVS     r0,#0
0000fa  8038              STRH     r0,[r7,#0]
;;;167    }
0000fc  e8bd81f0          POP      {r4-r8,pc}
;;;168    
                          ENDP

                  |L1.256|
                          DCD      OSStatTaskCPUUsageMax
                  |L1.260|
                          DCD      OSStatTaskTimeMax
                  |L1.264|
                          DCD      OSTickTaskTimeMax
                  |L1.268|
                          DCD      OSTmrTaskTimeMax
                  |L1.272|
                          DCD      OSMsgPool
                  |L1.276|
                          DCD      OSTaskDbgListPtr
                  |L1.280|
                          DCD      OSQDbgListPtr

                          AREA ||i.OSStatTaskCPUUsageInit||, CODE, READONLY, ALIGN=2

                  OSStatTaskCPUUsageInit PROC
;;;190    
;;;191    void  OSStatTaskCPUUsageInit (OS_ERR  *p_err)
000000  b5f8              PUSH     {r3-r7,lr}
;;;192    {
000002  4604              MOV      r4,r0
;;;193        OS_ERR   err;
;;;194        OS_TICK  dly;
;;;195        CPU_SR_ALLOC();
000004  2600              MOVS     r6,#0
;;;196    
;;;197    
;;;198    
;;;199    #ifdef OS_SAFETY_CRITICAL
;;;200        if (p_err == (OS_ERR *)0) {
;;;201            OS_SAFETY_CRITICAL_EXCEPTION();
;;;202            return;
;;;203        }
;;;204    #endif
;;;205    
;;;206    #if (OS_CFG_TMR_EN > 0u)
;;;207        OSTaskSuspend(&OSTmrTaskTCB, &err);
000006  4669              MOV      r1,sp
000008  4832              LDR      r0,|L2.212|
00000a  f7fffffe          BL       OSTaskSuspend
;;;208        if (err != OS_ERR_NONE) {
00000e  f8bd0000          LDRH     r0,[sp,#0]
000012  b118              CBZ      r0,|L2.28|
;;;209           *p_err = err;
000014  f8bd0000          LDRH     r0,[sp,#0]
000018  8020              STRH     r0,[r4,#0]
                  |L2.26|
;;;210            return;
;;;211        }
;;;212    #endif
;;;213    
;;;214        OSTimeDly((OS_TICK )2,                                  /* Synchronize with clock tick                            */
;;;215                  (OS_OPT  )OS_OPT_TIME_DLY,
;;;216                  (OS_ERR *)&err);
;;;217        if (err != OS_ERR_NONE) {
;;;218           *p_err = err;
;;;219            return;
;;;220        }
;;;221        CPU_CRITICAL_ENTER();
;;;222        OSStatTaskCtr = (OS_TICK)0;                             /* Clear idle counter                                     */
;;;223        CPU_CRITICAL_EXIT();
;;;224    
;;;225        dly = (OS_TICK)0;
;;;226        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
;;;227            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
;;;228        }
;;;229        if (dly == (OS_TICK)0) {
;;;230            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
;;;231        }
;;;232    
;;;233        OSTimeDly(dly,                                          /* Determine MAX. idle counter value                      */
;;;234                  OS_OPT_TIME_DLY,
;;;235                  &err);
;;;236    
;;;237    #if (OS_CFG_TMR_EN > 0u)
;;;238        OSTaskResume(&OSTmrTaskTCB, &err);
;;;239        if (err != OS_ERR_NONE) {
;;;240           *p_err = err;
;;;241            return;
;;;242        }
;;;243    #endif
;;;244    
;;;245        CPU_CRITICAL_ENTER();
;;;246        OSStatTaskTimeMax = (CPU_TS)0;
;;;247    
;;;248        OSStatTaskCtrMax  = OSStatTaskCtr;                      /* Store maximum idle counter count                       */
;;;249        OSStatTaskRdy     = OS_STATE_RDY;
;;;250        CPU_CRITICAL_EXIT();
;;;251       *p_err             = OS_ERR_NONE;
;;;252    }
00001a  bdf8              POP      {r3-r7,pc}
                  |L2.28|
00001c  466a              MOV      r2,sp                 ;214
00001e  2100              MOVS     r1,#0                 ;214
000020  2002              MOVS     r0,#2                 ;214
000022  f7fffffe          BL       OSTimeDly
000026  f8bd0000          LDRH     r0,[sp,#0]            ;217
00002a  b118              CBZ      r0,|L2.52|
00002c  f8bd0000          LDRH     r0,[sp,#0]            ;218
000030  8020              STRH     r0,[r4,#0]            ;218
000032  e7f2              B        |L2.26|
                  |L2.52|
000034  bf00              NOP                            ;221
000036  bf00              NOP                            ;221
000038  f7fffffe          BL       CPU_SR_Save
00003c  4606              MOV      r6,r0                 ;221
00003e  bf00              NOP                            ;221
000040  bf00              NOP                            ;221
000042  2000              MOVS     r0,#0                 ;222
000044  4924              LDR      r1,|L2.216|
000046  6008              STR      r0,[r1,#0]            ;222  ; OSStatTaskCtr
000048  bf00              NOP                            ;223
00004a  bf00              NOP                            ;223
00004c  4630              MOV      r0,r6                 ;223
00004e  f7fffffe          BL       CPU_SR_Restore
000052  bf00              NOP                            ;223
000054  bf00              NOP                            ;223
000056  2500              MOVS     r5,#0                 ;225
000058  4820              LDR      r0,|L2.220|
00005a  6800              LDR      r0,[r0,#0]            ;226  ; OSCfg_TickRate_Hz
00005c  4920              LDR      r1,|L2.224|
00005e  6809              LDR      r1,[r1,#0]            ;226  ; OSCfg_StatTaskRate_Hz
000060  4288              CMP      r0,r1                 ;226
000062  d905              BLS      |L2.112|
000064  481d              LDR      r0,|L2.220|
000066  6800              LDR      r0,[r0,#0]            ;227  ; OSCfg_TickRate_Hz
000068  491d              LDR      r1,|L2.224|
00006a  6809              LDR      r1,[r1,#0]            ;227  ; OSCfg_StatTaskRate_Hz
00006c  fbb0f5f1          UDIV     r5,r0,r1              ;227
                  |L2.112|
000070  b925              CBNZ     r5,|L2.124|
000072  481a              LDR      r0,|L2.220|
000074  6800              LDR      r0,[r0,#0]            ;230  ; OSCfg_TickRate_Hz
000076  210a              MOVS     r1,#0xa               ;230
000078  fbb0f5f1          UDIV     r5,r0,r1              ;230
                  |L2.124|
00007c  466a              MOV      r2,sp                 ;233
00007e  2100              MOVS     r1,#0                 ;233
000080  4628              MOV      r0,r5                 ;233
000082  f7fffffe          BL       OSTimeDly
000086  4669              MOV      r1,sp                 ;238
000088  4812              LDR      r0,|L2.212|
00008a  f7fffffe          BL       OSTaskResume
00008e  f8bd0000          LDRH     r0,[sp,#0]            ;239
000092  b118              CBZ      r0,|L2.156|
000094  f8bd0000          LDRH     r0,[sp,#0]            ;240
000098  8020              STRH     r0,[r4,#0]            ;240
00009a  e7be              B        |L2.26|
                  |L2.156|
00009c  bf00              NOP                            ;245
00009e  bf00              NOP                            ;245
0000a0  f7fffffe          BL       CPU_SR_Save
0000a4  4606              MOV      r6,r0                 ;245
0000a6  bf00              NOP                            ;245
0000a8  bf00              NOP                            ;245
0000aa  2000              MOVS     r0,#0                 ;246
0000ac  490d              LDR      r1,|L2.228|
0000ae  6008              STR      r0,[r1,#0]            ;246  ; OSStatTaskTimeMax
0000b0  4809              LDR      r0,|L2.216|
0000b2  6800              LDR      r0,[r0,#0]            ;248  ; OSStatTaskCtr
0000b4  490c              LDR      r1,|L2.232|
0000b6  6008              STR      r0,[r1,#0]            ;248  ; OSStatTaskCtrMax
0000b8  2001              MOVS     r0,#1                 ;249
0000ba  490c              LDR      r1,|L2.236|
0000bc  7008              STRB     r0,[r1,#0]            ;249
0000be  bf00              NOP                            ;250
0000c0  bf00              NOP                            ;250
0000c2  4630              MOV      r0,r6                 ;250
0000c4  f7fffffe          BL       CPU_SR_Restore
0000c8  bf00              NOP                            ;250
0000ca  bf00              NOP                            ;250
0000cc  2000              MOVS     r0,#0                 ;251
0000ce  8020              STRH     r0,[r4,#0]            ;251
0000d0  bf00              NOP      
0000d2  e7a2              B        |L2.26|
;;;253    
                          ENDP

                  |L2.212|
                          DCD      OSTmrTaskTCB
                  |L2.216|
                          DCD      OSStatTaskCtr
                  |L2.220|
                          DCD      OSCfg_TickRate_Hz
                  |L2.224|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L2.228|
                          DCD      OSStatTaskTimeMax
                  |L2.232|
                          DCD      OSStatTaskCtrMax
                  |L2.236|
                          DCD      OSStatTaskRdy

                          AREA ||i.OS_StatTask||, CODE, READONLY, ALIGN=2

                  OS_StatTask PROC
;;;280    
;;;281    void  OS_StatTask (void  *p_arg)
000000  b086              SUB      sp,sp,#0x18
;;;282    {
;;;283    #if OS_CFG_DBG_EN > 0u
;;;284    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;285        OS_CPU_USAGE usage;
;;;286        OS_CYCLES    cycles_total;
;;;287        OS_CYCLES    cycles_div;
;;;288        OS_CYCLES    cycles_mult;
;;;289        OS_CYCLES    cycles_max;
;;;290    #endif
;;;291        OS_TCB      *p_tcb;
;;;292    #endif
;;;293        OS_TICK      ctr_max;
;;;294        OS_TICK      ctr_mult;
;;;295        OS_TICK      ctr_div;
;;;296        OS_ERR       err;
;;;297        OS_TICK      dly;
;;;298        CPU_TS       ts_start;
;;;299        CPU_TS       ts_end;
;;;300        CPU_SR_ALLOC();
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
;;;301    
;;;302    
;;;303    
;;;304        p_arg = p_arg;                                          /* Prevent compiler warning for not using 'p_arg'         */
000006  bf00              NOP      
;;;305        while (OSStatTaskRdy != DEF_TRUE) {
000008  e006              B        |L3.24|
                  |L3.10|
;;;306            OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
00000a  49a9              LDR      r1,|L3.688|
00000c  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00000e  0048              LSLS     r0,r1,#1
000010  aa01              ADD      r2,sp,#4
000012  2100              MOVS     r1,#0
000014  f7fffffe          BL       OSTimeDly
                  |L3.24|
000018  48a6              LDR      r0,|L3.692|
00001a  7800              LDRB     r0,[r0,#0]            ;305  ; OSStatTaskRdy
00001c  2801              CMP      r0,#1                 ;305
00001e  d1f4              BNE      |L3.10|
;;;307                      OS_OPT_TIME_DLY,
;;;308                      &err);
;;;309        }
;;;310        OSStatReset(&err);                                      /* Reset statistics                                       */
000020  a801              ADD      r0,sp,#4
000022  f7fffffe          BL       OSStatReset
;;;311    
;;;312        dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
000026  2700              MOVS     r7,#0
;;;313        if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
000028  48a3              LDR      r0,|L3.696|
00002a  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
00002c  49a0              LDR      r1,|L3.688|
00002e  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
000030  4288              CMP      r0,r1
000032  d905              BLS      |L3.64|
;;;314            dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
000034  48a0              LDR      r0,|L3.696|
000036  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
000038  499d              LDR      r1,|L3.688|
00003a  6809              LDR      r1,[r1,#0]  ; OSCfg_StatTaskRate_Hz
00003c  fbb0f7f1          UDIV     r7,r0,r1
                  |L3.64|
;;;315        }
;;;316        if (dly == (OS_TICK)0) {
000040  b927              CBNZ     r7,|L3.76|
;;;317            dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
000042  489d              LDR      r0,|L3.696|
000044  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
000046  210a              MOVS     r1,#0xa
000048  fbb0f7f1          UDIV     r7,r0,r1
                  |L3.76|
;;;318        }
;;;319    
;;;320        while (DEF_ON) {
00004c  e12e              B        |L3.684|
                  |L3.78|
;;;321            ts_start        = OS_TS_GET();
00004e  f7fffffe          BL       CPU_TS_TmrRd
000052  4680              MOV      r8,r0
;;;322    #ifdef  CPU_CFG_INT_DIS_MEAS_EN
;;;323            OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
;;;324    #endif
;;;325    
;;;326            CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
000054  bf00              NOP      
000056  bf00              NOP      
000058  f7fffffe          BL       CPU_SR_Save
00005c  9000              STR      r0,[sp,#0]
00005e  bf00              NOP      
000060  bf00              NOP      
;;;327            OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
000062  4896              LDR      r0,|L3.700|
000064  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtr
000066  4996              LDR      r1,|L3.704|
000068  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrRun
;;;328            OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
00006a  2000              MOVS     r0,#0
00006c  4993              LDR      r1,|L3.700|
00006e  6008              STR      r0,[r1,#0]  ; OSStatTaskCtr
;;;329            CPU_CRITICAL_EXIT();
000070  bf00              NOP      
000072  bf00              NOP      
000074  9800              LDR      r0,[sp,#0]
000076  f7fffffe          BL       CPU_SR_Restore
00007a  bf00              NOP      
00007c  bf00              NOP      
;;;330    
;;;331            if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
00007e  4891              LDR      r0,|L3.708|
000080  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
000082  498f              LDR      r1,|L3.704|
000084  6809              LDR      r1,[r1,#0]  ; OSStatTaskCtrRun
000086  4288              CMP      r0,r1
000088  d948              BLS      |L3.284|
;;;332                if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
00008a  488e              LDR      r0,|L3.708|
00008c  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
00008e  498e              LDR      r1,|L3.712|
000090  4288              CMP      r0,r1
000092  d205              BCS      |L3.160|
;;;333                    ctr_mult = 10000u;
000094  f2427010          MOV      r0,#0x2710
000098  9003              STR      r0,[sp,#0xc]
;;;334                    ctr_div  =     1u;
00009a  2001              MOVS     r0,#1
00009c  9002              STR      r0,[sp,#8]
00009e  e023              B        |L3.232|
                  |L3.160|
;;;335                } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
0000a0  4888              LDR      r0,|L3.708|
0000a2  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000a4  4989              LDR      r1,|L3.716|
0000a6  4288              CMP      r0,r1
0000a8  d205              BCS      |L3.182|
;;;336                    ctr_mult =  1000u;
0000aa  f44f707a          MOV      r0,#0x3e8
0000ae  9003              STR      r0,[sp,#0xc]
;;;337                    ctr_div  =    10u;
0000b0  200a              MOVS     r0,#0xa
0000b2  9002              STR      r0,[sp,#8]
0000b4  e018              B        |L3.232|
                  |L3.182|
;;;338                } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
0000b6  4883              LDR      r0,|L3.708|
0000b8  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000ba  4985              LDR      r1,|L3.720|
0000bc  4288              CMP      r0,r1
0000be  d203              BCS      |L3.200|
;;;339                    ctr_mult =   100u;
0000c0  2064              MOVS     r0,#0x64
0000c2  9003              STR      r0,[sp,#0xc]
;;;340                    ctr_div  =   100u;
0000c4  9002              STR      r0,[sp,#8]
0000c6  e00f              B        |L3.232|
                  |L3.200|
;;;341                } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
0000c8  487e              LDR      r0,|L3.708|
0000ca  6800              LDR      r0,[r0,#0]  ; OSStatTaskCtrMax
0000cc  4981              LDR      r1,|L3.724|
0000ce  4288              CMP      r0,r1
0000d0  d205              BCS      |L3.222|
;;;342                    ctr_mult =    10u;
0000d2  200a              MOVS     r0,#0xa
0000d4  9003              STR      r0,[sp,#0xc]
;;;343                    ctr_div  =  1000u;
0000d6  f44f707a          MOV      r0,#0x3e8
0000da  9002              STR      r0,[sp,#8]
0000dc  e004              B        |L3.232|
                  |L3.222|
;;;344                } else {                                                                 /*  400,000,000 and up           */
;;;345                    ctr_mult =     1u;
0000de  2001              MOVS     r0,#1
0000e0  9003              STR      r0,[sp,#0xc]
;;;346                    ctr_div  = 10000u;
0000e2  f2427010          MOV      r0,#0x2710
0000e6  9002              STR      r0,[sp,#8]
                  |L3.232|
;;;347                }
;;;348                ctr_max            = OSStatTaskCtrMax / ctr_div;
0000e8  4876              LDR      r0,|L3.708|
0000ea  6801              LDR      r1,[r0,#0]  ; OSStatTaskCtrMax
0000ec  9802              LDR      r0,[sp,#8]
0000ee  fbb1faf0          UDIV     r10,r1,r0
;;;349                OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
0000f2  4973              LDR      r1,|L3.704|
0000f4  9803              LDR      r0,[sp,#0xc]
0000f6  6809              LDR      r1,[r1,#0]  ; OSStatTaskCtrRun
0000f8  4348              MULS     r0,r1,r0
0000fa  fbb0f0fa          UDIV     r0,r0,r10
0000fe  f2427110          MOV      r1,#0x2710
000102  1a08              SUBS     r0,r1,r0
000104  4974              LDR      r1,|L3.728|
000106  8008              STRH     r0,[r1,#0]
;;;350                if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
000108  4874              LDR      r0,|L3.732|
00010a  8800              LDRH     r0,[r0,#0]  ; OSStatTaskCPUUsageMax
00010c  8809              LDRH     r1,[r1,#0]  ; OSStatTaskCPUUsage
00010e  4288              CMP      r0,r1
000110  da08              BGE      |L3.292|
;;;351                    OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
000112  4871              LDR      r0,|L3.728|
000114  8800              LDRH     r0,[r0,#0]  ; OSStatTaskCPUUsage
000116  4971              LDR      r1,|L3.732|
000118  8008              STRH     r0,[r1,#0]
00011a  e003              B        |L3.292|
                  |L3.284|
;;;352                }
;;;353            } else {
;;;354                OSStatTaskCPUUsage = (OS_CPU_USAGE)10000u;
00011c  f2427010          MOV      r0,#0x2710
000120  496d              LDR      r1,|L3.728|
000122  8008              STRH     r0,[r1,#0]
                  |L3.292|
;;;355            }
;;;356    
;;;357            OSStatTaskHook();                                   /* Invoke user definable hook                             */
000124  f7fffffe          BL       OSStatTaskHook
;;;358    
;;;359    
;;;360    #if OS_CFG_DBG_EN > 0u
;;;361    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;362            cycles_total = (OS_CYCLES)0;
000128  2500              MOVS     r5,#0
;;;363    
;;;364            CPU_CRITICAL_ENTER();
00012a  bf00              NOP      
00012c  bf00              NOP      
00012e  f7fffffe          BL       CPU_SR_Save
000132  9000              STR      r0,[sp,#0]
000134  bf00              NOP      
000136  bf00              NOP      
;;;365            p_tcb = OSTaskDbgListPtr;
000138  4869              LDR      r0,|L3.736|
00013a  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;366            CPU_CRITICAL_EXIT();
00013c  bf00              NOP      
00013e  bf00              NOP      
000140  9800              LDR      r0,[sp,#0]
000142  f7fffffe          BL       CPU_SR_Restore
000146  bf00              NOP      
000148  bf00              NOP      
;;;367            while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
00014a  e026              B        |L3.410|
                  |L3.332|
;;;368                OS_CRITICAL_ENTER();
00014c  bf00              NOP      
00014e  bf00              NOP      
000150  f7fffffe          BL       CPU_SR_Save
000154  9000              STR      r0,[sp,#0]
000156  bf00              NOP      
000158  bf00              NOP      
;;;369                p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
00015a  f8540f9c          LDR      r0,[r4,#0x9c]!
00015e  6060              STR      r0,[r4,#4]
;;;370                p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
000160  2000              MOVS     r0,#0
000162  f844099c          STR      r0,[r4],#-0x9c
;;;371                OS_CRITICAL_EXIT();
000166  bf00              NOP      
000168  bf00              NOP      
00016a  9800              LDR      r0,[sp,#0]
00016c  f7fffffe          BL       CPU_SR_Restore
000170  bf00              NOP      
000172  bf00              NOP      
;;;372    
;;;373                cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
000174  f8d400a0          LDR      r0,[r4,#0xa0]
000178  4405              ADD      r5,r5,r0
;;;374    
;;;375                CPU_CRITICAL_ENTER();
00017a  bf00              NOP      
00017c  bf00              NOP      
00017e  f7fffffe          BL       CPU_SR_Save
000182  9000              STR      r0,[sp,#0]
000184  bf00              NOP      
000186  bf00              NOP      
;;;376                p_tcb                  = p_tcb->DbgNextPtr;
000188  f8d440b8          LDR      r4,[r4,#0xb8]
;;;377                CPU_CRITICAL_EXIT();
00018c  bf00              NOP      
00018e  bf00              NOP      
000190  9800              LDR      r0,[sp,#0]
000192  f7fffffe          BL       CPU_SR_Restore
000196  bf00              NOP      
000198  bf00              NOP      
                  |L3.410|
00019a  2c00              CMP      r4,#0                 ;367
00019c  d1d6              BNE      |L3.332|
;;;378            }
;;;379    #endif
;;;380    
;;;381    
;;;382    #if OS_CFG_TASK_PROFILE_EN > 0u
;;;383                                                                /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
;;;384            if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
00019e  b345              CBZ      r5,|L3.498|
;;;385                if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
0001a0  4849              LDR      r0,|L3.712|
0001a2  4285              CMP      r5,r0
0001a4  d205              BCS      |L3.434|
;;;386                    cycles_mult = 10000u;
0001a6  f2427010          MOV      r0,#0x2710
0001aa  9005              STR      r0,[sp,#0x14]
;;;387                    cycles_div  =     1u;
0001ac  f04f0b01          MOV      r11,#1
0001b0  e01b              B        |L3.490|
                  |L3.434|
;;;388                } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
0001b2  4846              LDR      r0,|L3.716|
0001b4  4285              CMP      r5,r0
0001b6  d205              BCS      |L3.452|
;;;389                    cycles_mult =  1000u;
0001b8  f44f707a          MOV      r0,#0x3e8
0001bc  9005              STR      r0,[sp,#0x14]
;;;390                    cycles_div  =    10u;
0001be  f04f0b0a          MOV      r11,#0xa
0001c2  e012              B        |L3.490|
                  |L3.452|
;;;391                } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
0001c4  4842              LDR      r0,|L3.720|
0001c6  4285              CMP      r5,r0
0001c8  d203              BCS      |L3.466|
;;;392                    cycles_mult =   100u;
0001ca  2064              MOVS     r0,#0x64
0001cc  9005              STR      r0,[sp,#0x14]
;;;393                    cycles_div  =   100u;
0001ce  4683              MOV      r11,r0
0001d0  e00b              B        |L3.490|
                  |L3.466|
;;;394                } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
0001d2  4840              LDR      r0,|L3.724|
0001d4  4285              CMP      r5,r0
0001d6  d204              BCS      |L3.482|
;;;395                    cycles_mult =    10u;
0001d8  200a              MOVS     r0,#0xa
0001da  9005              STR      r0,[sp,#0x14]
;;;396                    cycles_div  =  1000u;
0001dc  f44f7b7a          MOV      r11,#0x3e8
0001e0  e003              B        |L3.490|
                  |L3.482|
;;;397                } else {                                                                 /*  400,000,000 and up           */
;;;398                    cycles_mult =     1u;
0001e2  2001              MOVS     r0,#1
0001e4  9005              STR      r0,[sp,#0x14]
;;;399                    cycles_div  = 10000u;
0001e6  f2427b10          MOV      r11,#0x2710
                  |L3.490|
;;;400                }
;;;401                cycles_max  = cycles_total / cycles_div;
0001ea  fbb5f0fb          UDIV     r0,r5,r11
0001ee  9004              STR      r0,[sp,#0x10]
0001f0  e003              B        |L3.506|
                  |L3.498|
;;;402            } else {
;;;403                cycles_mult = 0u;
0001f2  2000              MOVS     r0,#0
0001f4  9005              STR      r0,[sp,#0x14]
;;;404                cycles_max  = 1u;
0001f6  2001              MOVS     r0,#1
0001f8  9004              STR      r0,[sp,#0x10]
                  |L3.506|
;;;405            }
;;;406    #endif
;;;407            CPU_CRITICAL_ENTER();
0001fa  bf00              NOP      
0001fc  bf00              NOP      
0001fe  f7fffffe          BL       CPU_SR_Save
000202  9000              STR      r0,[sp,#0]
000204  bf00              NOP      
000206  bf00              NOP      
;;;408            p_tcb = OSTaskDbgListPtr;
000208  4835              LDR      r0,|L3.736|
00020a  6804              LDR      r4,[r0,#0]  ; OSTaskDbgListPtr
;;;409            CPU_CRITICAL_EXIT();
00020c  bf00              NOP      
00020e  bf00              NOP      
000210  9800              LDR      r0,[sp,#0]
000212  f7fffffe          BL       CPU_SR_Restore
000216  bf00              NOP      
000218  bf00              NOP      
;;;410            while (p_tcb != (OS_TCB *)0) {
00021a  e02b              B        |L3.628|
                  |L3.540|
;;;411    #if OS_CFG_TASK_PROFILE_EN > 0u                             /* Compute execution time of each task                    */
;;;412                usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
00021c  f8d400a0          LDR      r0,[r4,#0xa0]
000220  9905              LDR      r1,[sp,#0x14]
000222  4348              MULS     r0,r1,r0
000224  9904              LDR      r1,[sp,#0x10]
000226  fbb0f0f1          UDIV     r0,r0,r1
00022a  b286              UXTH     r6,r0
;;;413                if (usage > 10000u) {
00022c  f2427010          MOV      r0,#0x2710
000230  4286              CMP      r6,r0
000232  d900              BLS      |L3.566|
;;;414                    usage = 10000u;
000234  4606              MOV      r6,r0
                  |L3.566|
;;;415                }
;;;416                p_tcb->CPUUsage = usage;
000236  f8a4608c          STRH     r6,[r4,#0x8c]
;;;417                if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
00023a  f8b4008e          LDRH     r0,[r4,#0x8e]
00023e  42b0              CMP      r0,r6
000240  da01              BGE      |L3.582|
;;;418                    p_tcb->CPUUsageMax = usage;
000242  f8a4608e          STRH     r6,[r4,#0x8e]
                  |L3.582|
;;;419                }
;;;420    #endif
;;;421    
;;;422    #if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
;;;423                OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
000246  ab01              ADD      r3,sp,#4
000248  f10402ac          ADD      r2,r4,#0xac
00024c  1d11              ADDS     r1,r2,#4
00024e  4620              MOV      r0,r4
000250  f7fffffe          BL       OSTaskStkChk
;;;424                             &p_tcb->StkFree,
;;;425                             &p_tcb->StkUsed,
;;;426                             &err);
;;;427    #endif
;;;428    
;;;429                CPU_CRITICAL_ENTER();
000254  bf00              NOP      
000256  bf00              NOP      
000258  f7fffffe          BL       CPU_SR_Save
00025c  9000              STR      r0,[sp,#0]
00025e  bf00              NOP      
000260  bf00              NOP      
;;;430                p_tcb = p_tcb->DbgNextPtr;
000262  f8d440b8          LDR      r4,[r4,#0xb8]
;;;431                CPU_CRITICAL_EXIT();
000266  bf00              NOP      
000268  bf00              NOP      
00026a  9800              LDR      r0,[sp,#0]
00026c  f7fffffe          BL       CPU_SR_Restore
000270  bf00              NOP      
000272  bf00              NOP      
                  |L3.628|
000274  2c00              CMP      r4,#0                 ;410
000276  d1d1              BNE      |L3.540|
;;;432            }
;;;433    #endif
;;;434    
;;;435            if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
000278  481a              LDR      r0,|L3.740|
00027a  7800              LDRB     r0,[r0,#0]  ; OSStatResetFlag
00027c  2801              CMP      r0,#1
00027e  d105              BNE      |L3.652|
;;;436                OSStatResetFlag  = DEF_FALSE;
000280  2000              MOVS     r0,#0
000282  4918              LDR      r1,|L3.740|
000284  7008              STRB     r0,[r1,#0]
;;;437                OSStatReset(&err);
000286  a801              ADD      r0,sp,#4
000288  f7fffffe          BL       OSStatReset
                  |L3.652|
;;;438            }
;;;439    
;;;440            ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
00028c  f7fffffe          BL       CPU_TS_TmrRd
000290  eba00908          SUB      r9,r0,r8
;;;441            if (OSStatTaskTimeMax < ts_end) {
000294  4814              LDR      r0,|L3.744|
000296  6800              LDR      r0,[r0,#0]  ; OSStatTaskTimeMax
000298  4548              CMP      r0,r9
00029a  d202              BCS      |L3.674|
;;;442                OSStatTaskTimeMax = ts_end;
00029c  4812              LDR      r0,|L3.744|
00029e  f8c09000          STR      r9,[r0,#0]  ; OSStatTaskTimeMax
                  |L3.674|
;;;443            }
;;;444    
;;;445            OSTimeDly(dly,
0002a2  aa01              ADD      r2,sp,#4
0002a4  2100              MOVS     r1,#0
0002a6  4638              MOV      r0,r7
0002a8  f7fffffe          BL       OSTimeDly
                  |L3.684|
0002ac  e6cf              B        |L3.78|
;;;446                      OS_OPT_TIME_DLY,
;;;447                      &err);
;;;448        }
;;;449    }
;;;450    
                          ENDP

0002ae  0000              DCW      0x0000
                  |L3.688|
                          DCD      OSCfg_StatTaskRate_Hz
                  |L3.692|
                          DCD      OSStatTaskRdy
                  |L3.696|
                          DCD      OSCfg_TickRate_Hz
                  |L3.700|
                          DCD      OSStatTaskCtr
                  |L3.704|
                          DCD      OSStatTaskCtrRun
                  |L3.708|
                          DCD      OSStatTaskCtrMax
                  |L3.712|
                          DCD      0x00061a80
                  |L3.716|
                          DCD      0x003d0900
                  |L3.720|
                          DCD      0x02625a00
                  |L3.724|
                          DCD      0x17d78400
                  |L3.728|
                          DCD      OSStatTaskCPUUsage
                  |L3.732|
                          DCD      OSStatTaskCPUUsageMax
                  |L3.736|
                          DCD      OSTaskDbgListPtr
                  |L3.740|
                          DCD      OSStatResetFlag
                  |L3.744|
                          DCD      OSStatTaskTimeMax

                          AREA ||i.OS_StatTaskInit||, CODE, READONLY, ALIGN=2

                  OS_StatTaskInit PROC
;;;471    
;;;472    void  OS_StatTaskInit (OS_ERR  *p_err)
000000  b510              PUSH     {r4,lr}
;;;473    {
000002  b08a              SUB      sp,sp,#0x28
000004  4604              MOV      r4,r0
;;;474    #ifdef OS_SAFETY_CRITICAL
;;;475        if (p_err == (OS_ERR *)0) {
;;;476            OS_SAFETY_CRITICAL_EXCEPTION();
;;;477            return;
;;;478        }
;;;479    #endif
;;;480    
;;;481        OSStatTaskCtr    = (OS_TICK)0;
000006  2000              MOVS     r0,#0
000008  491f              LDR      r1,|L4.136|
00000a  6008              STR      r0,[r1,#0]  ; OSStatTaskCtr
;;;482        OSStatTaskCtrRun = (OS_TICK)0;
00000c  491f              LDR      r1,|L4.140|
00000e  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrRun
;;;483        OSStatTaskCtrMax = (OS_TICK)0;
000010  491f              LDR      r1,|L4.144|
000012  6008              STR      r0,[r1,#0]  ; OSStatTaskCtrMax
;;;484        OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
000014  491f              LDR      r1,|L4.148|
000016  7008              STRB     r0,[r1,#0]
;;;485        OSStatResetFlag  = DEF_FALSE;
000018  491f              LDR      r1,|L4.152|
00001a  7008              STRB     r0,[r1,#0]
;;;486    
;;;487                                                                /* ---------------- CREATE THE STAT TASK ---------------- */
;;;488        if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
00001c  481f              LDR      r0,|L4.156|
00001e  6800              LDR      r0,[r0,#0]  ; OSCfg_StatTaskStkBasePtr
000020  b920              CBNZ     r0,|L4.44|
;;;489           *p_err = OS_ERR_STAT_STK_INVALID;
000022  f646602b          MOV      r0,#0x6e2b
000026  8020              STRH     r0,[r4,#0]
                  |L4.40|
;;;490            return;
;;;491        }
;;;492    
;;;493        if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
;;;494           *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
;;;495            return;
;;;496        }
;;;497    
;;;498        if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
;;;499           *p_err = OS_ERR_STAT_PRIO_INVALID;
;;;500            return;
;;;501        }
;;;502    
;;;503        OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
;;;504                     (CPU_CHAR   *)((void *)"uC/OS-III Stat Task"),
;;;505                     (OS_TASK_PTR )OS_StatTask,
;;;506                     (void       *)0,
;;;507                     (OS_PRIO     )OSCfg_StatTaskPrio,
;;;508                     (CPU_STK    *)OSCfg_StatTaskStkBasePtr,
;;;509                     (CPU_STK_SIZE)OSCfg_StatTaskStkLimit,
;;;510                     (CPU_STK_SIZE)OSCfg_StatTaskStkSize,
;;;511                     (OS_MSG_QTY  )0,
;;;512                     (OS_TICK     )0,
;;;513                     (void       *)0,
;;;514                     (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
;;;515                     (OS_ERR     *)p_err);
;;;516    }
000028  b00a              ADD      sp,sp,#0x28
00002a  bd10              POP      {r4,pc}
                  |L4.44|
00002c  481c              LDR      r0,|L4.160|
00002e  6800              LDR      r0,[r0,#0]            ;493  ; OSCfg_StatTaskStkSize
000030  491c              LDR      r1,|L4.164|
000032  6809              LDR      r1,[r1,#0]            ;493  ; OSCfg_StkSizeMin
000034  4288              CMP      r0,r1                 ;493
000036  d203              BCS      |L4.64|
000038  f646602c          MOV      r0,#0x6e2c            ;494
00003c  8020              STRH     r0,[r4,#0]            ;494
00003e  e7f3              B        |L4.40|
                  |L4.64|
000040  4819              LDR      r0,|L4.168|
000042  7800              LDRB     r0,[r0,#0]            ;498  ; OSCfg_StatTaskPrio
000044  283f              CMP      r0,#0x3f              ;498
000046  d303              BCC      |L4.80|
000048  f646602a          MOV      r0,#0x6e2a            ;499
00004c  8020              STRH     r0,[r4,#0]            ;499
00004e  e7eb              B        |L4.40|
                  |L4.80|
000050  2003              MOVS     r0,#3                 ;503
000052  2100              MOVS     r1,#0                 ;503
000054  9105              STR      r1,[sp,#0x14]         ;503
000056  e9cd0407          STRD     r0,r4,[sp,#0x1c]      ;503
00005a  9106              STR      r1,[sp,#0x18]         ;503
00005c  4608              MOV      r0,r1                 ;503
00005e  4910              LDR      r1,|L4.160|
000060  6809              LDR      r1,[r1,#0]            ;503  ; OSCfg_StatTaskStkSize
000062  4a12              LDR      r2,|L4.172|
000064  6812              LDR      r2,[r2,#0]            ;503  ; OSCfg_StatTaskStkLimit
000066  4b0d              LDR      r3,|L4.156|
000068  681b              LDR      r3,[r3,#0]            ;503  ; OSCfg_StatTaskStkBasePtr
00006a  e9cd3201          STRD     r3,r2,[sp,#4]         ;503
00006e  e9cd1003          STRD     r1,r0,[sp,#0xc]       ;503
000072  480d              LDR      r0,|L4.168|
000074  7800              LDRB     r0,[r0,#0]            ;503  ; OSCfg_StatTaskPrio
000076  2300              MOVS     r3,#0                 ;503
000078  4a0d              LDR      r2,|L4.176|
00007a  a10e              ADR      r1,|L4.180|
00007c  9000              STR      r0,[sp,#0]            ;503
00007e  4812              LDR      r0,|L4.200|
000080  f7fffffe          BL       OSTaskCreate
000084  bf00              NOP      
000086  e7cf              B        |L4.40|
;;;517    
                          ENDP

                  |L4.136|
                          DCD      OSStatTaskCtr
                  |L4.140|
                          DCD      OSStatTaskCtrRun
                  |L4.144|
                          DCD      OSStatTaskCtrMax
                  |L4.148|
                          DCD      OSStatTaskRdy
                  |L4.152|
                          DCD      OSStatResetFlag
                  |L4.156|
                          DCD      OSCfg_StatTaskStkBasePtr
                  |L4.160|
                          DCD      OSCfg_StatTaskStkSize
                  |L4.164|
                          DCD      OSCfg_StkSizeMin
                  |L4.168|
                          DCD      OSCfg_StatTaskPrio
                  |L4.172|
                          DCD      OSCfg_StatTaskStkLimit
                  |L4.176|
                          DCD      OS_StatTask
                  |L4.180|
0000b4  75432f4f          DCB      "uC/OS-III Stat Task",0
0000b8  532d4949
0000bc  49205374
0000c0  61742054
0000c4  61736b00
                  |L4.200|
                          DCD      OSStatTaskTCB
