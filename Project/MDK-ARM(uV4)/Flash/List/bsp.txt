; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp.crf ..\..\User\bsp_stm32f4xx\bsp.c]
                          THUMB

                          AREA ||i.BSP_CPU_ClkFreq||, CODE, READONLY, ALIGN=1

                  BSP_CPU_ClkFreq PROC
;;;169    */
;;;170    CPU_INT32U  BSP_CPU_ClkFreq (void)
000000  b51f              PUSH     {r0-r4,lr}
;;;171    {
;;;172        RCC_ClocksTypeDef  rcc_clocks;
;;;173    
;;;174        RCC_GetClocksFreq(&rcc_clocks);
000002  4668              MOV      r0,sp
000004  f7fffffe          BL       RCC_GetClocksFreq
;;;175        return ((CPU_INT32U)rcc_clocks.HCLK_Frequency);
000008  9801              LDR      r0,[sp,#4]
;;;176    }
00000a  b004              ADD      sp,sp,#0x10
00000c  bd10              POP      {r4,pc}
;;;177    
                          ENDP


                          AREA ||i.BSP_Tick_Init||, CODE, READONLY, ALIGN=2

                  BSP_Tick_Init PROC
;;;192    */
;;;193    void BSP_Tick_Init (void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;194    {
;;;195        CPU_INT32U  cpu_clk_freq;
;;;196        CPU_INT32U  cnts;
;;;197        
;;;198        cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine SysTick reference freq.                    */
000004  f7fffffe          BL       BSP_CPU_ClkFreq
000008  4605              MOV      r5,r0
;;;199        
;;;200    #if (OS_VERSION >= 30000u)
;;;201        cnts  = cpu_clk_freq / (CPU_INT32U)OSCfg_TickRate_Hz;       /* Determine nbr SysTick increments.                    */
00000a  4814              LDR      r0,|L2.92|
00000c  6800              LDR      r0,[r0,#0]  ; OSCfg_TickRate_Hz
00000e  fbb5f4f0          UDIV     r4,r5,r0
;;;202    #else
;;;203        cnts  = cpu_clk_freq / (CPU_INT32U)OS_TICKS_PER_SEC;        /* Determine nbr SysTick increments.                    */
;;;204    #endif
;;;205        
;;;206    //   OS_CPU_SysTickInit(cnts);                                 /* 这里默认的是最高优先级，根据实际情况修改             */
;;;207    	SysTick_Config(cnts);                                      /* 这里默认的是最低优先级                               */
000012  4621              MOV      r1,r4
000014  1e48              SUBS     r0,r1,#1
000016  f1b07f80          CMP      r0,#0x1000000
00001a  d300              BCC      |L2.30|
00001c  e01b              B        |L2.86|
                  |L2.30|
00001e  1e48              SUBS     r0,r1,#1
000020  f04f22e0          MOV      r2,#0xe000e000
000024  6150              STR      r0,[r2,#0x14]
000026  1750              ASRS     r0,r2,#29
000028  220f              MOVS     r2,#0xf
00002a  2800              CMP      r0,#0
00002c  da07              BGE      |L2.62|
00002e  0713              LSLS     r3,r2,#28
000030  0e1f              LSRS     r7,r3,#24
000032  4b0b              LDR      r3,|L2.96|
000034  f000060f          AND      r6,r0,#0xf
000038  1f36              SUBS     r6,r6,#4
00003a  559f              STRB     r7,[r3,r6]
00003c  e003              B        |L2.70|
                  |L2.62|
00003e  0713              LSLS     r3,r2,#28
000040  0e1e              LSRS     r6,r3,#24
000042  4b08              LDR      r3,|L2.100|
000044  541e              STRB     r6,[r3,r0]
                  |L2.70|
000046  bf00              NOP      
000048  2000              MOVS     r0,#0
00004a  f04f22e0          MOV      r2,#0xe000e000
00004e  6190              STR      r0,[r2,#0x18]
000050  2007              MOVS     r0,#7
000052  6110              STR      r0,[r2,#0x10]
000054  bf00              NOP      
                  |L2.86|
;;;208    }
000056  e8bd81f0          POP      {r4-r8,pc}
;;;209    
                          ENDP

00005a  0000              DCW      0x0000
                  |L2.92|
                          DCD      OSCfg_TickRate_Hz
                  |L2.96|
                          DCD      0xe000ed18
                  |L2.100|
                          DCD      0xe000e400

                          AREA ||i.CPU_TS32_to_uSec||, CODE, READONLY, ALIGN=2

                  CPU_TS32_to_uSec PROC
;;;433    #if (CPU_CFG_TS_32_EN == DEF_ENABLED)
;;;434    CPU_INT64U  CPU_TS32_to_uSec (CPU_TS32  ts_cnts)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;435    {
000004  4682              MOV      r10,r0
;;;436        CPU_INT64U  ts_us;
;;;437        CPU_INT64U  fclk_freq;
;;;438    
;;;439        
;;;440        fclk_freq = BSP_CPU_ClkFreq();    
000006  f7fffffe          BL       BSP_CPU_ClkFreq
00000a  f04f0900          MOV      r9,#0
00000e  4680              MOV      r8,r0
;;;441        ts_us     = ts_cnts / (fclk_freq / DEF_TIME_NBR_uS_PER_SEC);
000010  4a09              LDR      r2,|L3.56|
000012  2300              MOVS     r3,#0
000014  4640              MOV      r0,r8
000016  4649              MOV      r1,r9
000018  f7fffffe          BL       __aeabi_uldivmod
00001c  4606              MOV      r6,r0
00001e  4632              MOV      r2,r6
000020  460b              MOV      r3,r1
000022  4650              MOV      r0,r10
000024  2100              MOVS     r1,#0
000026  f7fffffe          BL       __aeabi_uldivmod
00002a  4604              MOV      r4,r0
00002c  460d              MOV      r5,r1
;;;442    
;;;443        return (ts_us);
00002e  4620              MOV      r0,r4
000030  4629              MOV      r1,r5
;;;444    }
000032  e8bd87f0          POP      {r4-r10,pc}
;;;445    #endif
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x000f4240

                          AREA ||i.CPU_TS_TmrInit||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrInit PROC
;;;263    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;264    void  CPU_TS_TmrInit (void)
000000  b510              PUSH     {r4,lr}
;;;265    {
;;;266        CPU_INT32U  fclk_freq;
;;;267    
;;;268    
;;;269        fclk_freq = BSP_CPU_ClkFreq();
000002  f7fffffe          BL       BSP_CPU_ClkFreq
000006  4604              MOV      r4,r0
;;;270    
;;;271        BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
000008  4808              LDR      r0,|L4.44|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0407080          ORR      r0,r0,#0x1000000
000010  4906              LDR      r1,|L4.44|
000012  6008              STR      r0,[r1,#0]
;;;272        BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
000014  2000              MOVS     r0,#0
000016  4906              LDR      r1,|L4.48|
000018  6048              STR      r0,[r1,#4]
;;;273        BSP_REG_DWT_CR     |= (CPU_INT32U)BSP_BIT_DWT_CR_CYCCNTENA;
00001a  4608              MOV      r0,r1
00001c  6800              LDR      r0,[r0,#0]
00001e  f0400001          ORR      r0,r0,#1
000022  6008              STR      r0,[r1,#0]
;;;274    
;;;275        CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
000024  4620              MOV      r0,r4
000026  f7fffffe          BL       CPU_TS_TmrFreqSet
;;;276    }
00002a  bd10              POP      {r4,pc}
;;;277    #endif
                          ENDP

                  |L4.44|
                          DCD      0xe000edfc
                  |L4.48|
                          DCD      0xe0001000

                          AREA ||i.CPU_TS_TmrRd||, CODE, READONLY, ALIGN=2

                  CPU_TS_TmrRd PROC
;;;363    #if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
;;;364    CPU_TS_TMR  CPU_TS_TmrRd (void)
000000  4901              LDR      r1,|L5.8|
;;;365    {
;;;366        CPU_TS_TMR  ts_tmr_cnts;
;;;367    
;;;368                                                                    
;;;369        ts_tmr_cnts = (CPU_TS_TMR)BSP_REG_DWT_CYCCNT;
000002  6848              LDR      r0,[r1,#4]
;;;370    
;;;371        return (ts_tmr_cnts);
;;;372    }
000004  4770              BX       lr
;;;373    #endif
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0xe0001000

                          AREA ||i.bsp_DelayMS||, CODE, READONLY, ALIGN=1

                  bsp_DelayMS PROC
;;;97     */
;;;98     void bsp_DelayMS(uint32_t _ulDelayTime)
000000  b510              PUSH     {r4,lr}
;;;99     {
000002  4604              MOV      r4,r0
;;;100    	bsp_DelayUS(1000*_ulDelayTime);
000004  f44f717a          MOV      r1,#0x3e8
000008  fb04f001          MUL      r0,r4,r1
00000c  f7fffffe          BL       bsp_DelayUS
;;;101    }
000010  bd10              POP      {r4,pc}
;;;102    
                          ENDP


                          AREA ||i.bsp_DelayUS||, CODE, READONLY, ALIGN=2

                  bsp_DelayUS PROC
;;;139    */
;;;140    void bsp_DelayUS(uint32_t _ulDelayTime)
000000  b530              PUSH     {r4,r5,lr}
;;;141    {
000002  4602              MOV      r2,r0
;;;142        uint32_t tCnt, tDelayCnt;
;;;143    	uint32_t tStart;
;;;144    		
;;;145    	tStart = (uint32_t)CPU_TS_TmrRd();                       /* 刚进入时的计数器值 */
000004  f7fffffe          BL       CPU_TS_TmrRd
000008  4605              MOV      r5,r0
;;;146    	tCnt = 0;
00000a  2300              MOVS     r3,#0
;;;147    	tDelayCnt = _ulDelayTime * (SystemCoreClock / 1000000);	 /* 需要的节拍数 */ 		      
00000c  4806              LDR      r0,|L7.40|
00000e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000010  4906              LDR      r1,|L7.44|
000012  fbb0f0f1          UDIV     r0,r0,r1
000016  fb00f402          MUL      r4,r0,r2
;;;148    
;;;149    	while(tCnt < tDelayCnt)
00001a  e002              B        |L7.34|
                  |L7.28|
;;;150    	{
;;;151    		tCnt = (uint32_t)CPU_TS_TmrRd() - tStart; /* 求减过程中，如果发生第一次32位计数器重新计数，依然可以正确计算 */	
00001c  f7fffffe          BL       CPU_TS_TmrRd
000020  1b43              SUBS     r3,r0,r5
                  |L7.34|
000022  42a3              CMP      r3,r4                 ;149
000024  d3fa              BCC      |L7.28|
;;;152    	}
;;;153    }
000026  bd30              POP      {r4,r5,pc}
;;;154    
                          ENDP

                  |L7.40|
                          DCD      SystemCoreClock
                  |L7.44|
                          DCD      0x000f4240

                          AREA ||i.bsp_Init||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;63     */
;;;64     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;65     {
;;;66     	
;;;67     	/* 设置NVIC优先级分组为Group4：可配置0-15级抢占式优先级，0级子优先级 */
;;;68     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
000002  f44f7040          MOV      r0,#0x300
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;69     	
;;;70     	bsp_InitUart(); 	   /* 初始化串口 */
00000a  f7fffffe          BL       bsp_InitUart
;;;71     	bsp_InitLed(); 		   /* 初始LED指示灯端口 */
00000e  f7fffffe          BL       bsp_InitLed
;;;72     	bsp_InitKey(); 	       /* 按键初始化 */	
000012  f7fffffe          BL       bsp_InitKey
;;;73     	bsp_InitI2C();
000016  f7fffffe          BL       bsp_InitI2C
;;;74     	bsp_InitSPIBus();	   /* 配置SPI总线 */
00001a  f7fffffe          BL       bsp_InitSPIBus
;;;75       bsp_InitNRF();      /*初始化NRF24L01*/
00001e  f7fffffe          BL       bsp_InitNRF
;;;76     //	bsp_FlashInit();    /*初始化串行FLASH芯片*/
;;;77     	bsp_ServoInit();    /*舵机初始化*/
000022  f7fffffe          BL       bsp_ServoInit
;;;78     	
;;;79     	/* 挂载文件系统 */
;;;80     	result = f_mount(&fs, "0:/", 0);
000026  2200              MOVS     r2,#0
000028  a110              ADR      r1,|L8.108|
00002a  4811              LDR      r0,|L8.112|
00002c  f7fffffe          BL       f_mount
000030  4910              LDR      r1,|L8.116|
000032  7008              STRB     r0,[r1,#0]
;;;81       if( result == FR_NO_FILESYSTEM )//如果该磁盘没有被格式化为FatFS，则格式化它
000034  4608              MOV      r0,r1
000036  7800              LDRB     r0,[r0,#0]  ; result
000038  280d              CMP      r0,#0xd
00003a  d115              BNE      |L8.104|
;;;82       {
;;;83           result = f_mkfs("0:/",0,4096); //格式化方式为FDISK,建立分区表，4096为每个簇的大小
00003c  f44f5280          MOV      r2,#0x1000
000040  2100              MOVS     r1,#0
000042  a00a              ADR      r0,|L8.108|
000044  f7fffffe          BL       f_mkfs
000048  490a              LDR      r1,|L8.116|
00004a  7008              STRB     r0,[r1,#0]
;;;84           result = f_mount(&fs,"0:/",0);
00004c  2200              MOVS     r2,#0
00004e  a107              ADR      r1,|L8.108|
000050  4807              LDR      r0,|L8.112|
000052  f7fffffe          BL       f_mount
000056  4907              LDR      r1,|L8.116|
000058  7008              STRB     r0,[r1,#0]
;;;85           result = f_mount(&fs,"0:/",1);
00005a  2201              MOVS     r2,#1
00005c  a103              ADR      r1,|L8.108|
00005e  4804              LDR      r0,|L8.112|
000060  f7fffffe          BL       f_mount
000064  4903              LDR      r1,|L8.116|
000066  7008              STRB     r0,[r1,#0]
                  |L8.104|
;;;86       }
;;;87     }
000068  bd10              POP      {r4,pc}
;;;88     
                          ENDP

00006a  0000              DCW      0x0000
                  |L8.108|
00006c  303a2f00          DCB      "0:/",0
                  |L8.112|
                          DCD      ||fs||
                  |L8.116|
                          DCD      result

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  ||fs||
                          %        560
                  file
                          %        548

                          AREA ||.data||, DATA, ALIGN=2

                  result
000000  00000000          DCB      0x00,0x00,0x00,0x00
                  ||bw||
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_bsp_c_bsp_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REVSH|
#line 144
|__asm___5_bsp_c_bsp_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____RRX|
#line 300
|__asm___5_bsp_c_bsp_Init____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
