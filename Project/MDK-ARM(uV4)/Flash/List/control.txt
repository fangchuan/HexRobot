; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\control.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\control.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\control.crf ..\..\User\control\control.c]
                          THUMB

                          AREA ||i.Go_back||, CODE, READONLY, ALIGN=1

                  Go_back PROC
;;;316    //
;;;317    void Go_back(u8 Com_Num,u8 * Input_num)
000000  b570              PUSH     {r4-r6,lr}
;;;318    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;319    	Pace_135_Motor2(0,100,ACTION_DELAY);		//UP
000006  220a              MOVS     r2,#0xa
000008  2164              MOVS     r1,#0x64
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       Pace_135_Motor2
;;;320    	while(Com_Num == *Input_num)
000010  e02b              B        |L1.106|
                  |L1.18|
;;;321    	{
;;;322    		Pace_246_Motor3(0,-80,ACTION_DELAY);	//BACK
000012  220a              MOVS     r2,#0xa
000014  f06f014f          MVN      r1,#0x4f
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       Pace_246_Motor3
;;;323    	   	Pace_135_Motor2(100,-100,ACTION_DELAY);	//DOWM
00001e  220a              MOVS     r2,#0xa
000020  f06f0163          MVN      r1,#0x63
000024  2064              MOVS     r0,#0x64
000026  f7fffffe          BL       Pace_135_Motor2
;;;324    		Pace_246_Motor2(0,100,ACTION_DELAY);	//UP
00002a  220a              MOVS     r2,#0xa
00002c  2164              MOVS     r1,#0x64
00002e  2000              MOVS     r0,#0
000030  f7fffffe          BL       Pace_246_Motor2
;;;325    		Pace_246_Motor3(-80,80,ACTION_DELAY);	//RETURN
000034  220a              MOVS     r2,#0xa
000036  2150              MOVS     r1,#0x50
000038  4248              RSBS     r0,r1,#0
00003a  f7fffffe          BL       Pace_246_Motor3
;;;326    		Pace_135_Motor3(0,-80,ACTION_DELAY);	//BACK
00003e  220a              MOVS     r2,#0xa
000040  f06f014f          MVN      r1,#0x4f
000044  2000              MOVS     r0,#0
000046  f7fffffe          BL       Pace_135_Motor3
;;;327    		Pace_246_Motor2(100,-100,ACTION_DELAY);	//DOWM
00004a  220a              MOVS     r2,#0xa
00004c  f06f0163          MVN      r1,#0x63
000050  2064              MOVS     r0,#0x64
000052  f7fffffe          BL       Pace_246_Motor2
;;;328    		Pace_135_Motor2(0,100,ACTION_DELAY);	//UP
000056  220a              MOVS     r2,#0xa
000058  2164              MOVS     r1,#0x64
00005a  2000              MOVS     r0,#0
00005c  f7fffffe          BL       Pace_135_Motor2
;;;329    		Pace_135_Motor3(-80,80,ACTION_DELAY);	//RETURN
000060  220a              MOVS     r2,#0xa
000062  2150              MOVS     r1,#0x50
000064  4248              RSBS     r0,r1,#0
000066  f7fffffe          BL       Pace_135_Motor3
                  |L1.106|
00006a  7820              LDRB     r0,[r4,#0]            ;320
00006c  42a8              CMP      r0,r5                 ;320
00006e  d0d0              BEQ      |L1.18|
;;;330    	}
;;;331    	Pace_135_Motor2(100,-100,ACTION_DELAY);	//DOWM
000070  220a              MOVS     r2,#0xa
000072  f06f0163          MVN      r1,#0x63
000076  2064              MOVS     r0,#0x64
000078  f7fffffe          BL       Pace_135_Motor2
;;;332    }
00007c  bd70              POP      {r4-r6,pc}
;;;333    //
                          ENDP


                          AREA ||i.Go_straight||, CODE, READONLY, ALIGN=1

                  Go_straight PROC
;;;295    /*1组腿提起，2组向前平移，然后1组落下；2组提起，1组向前平移，然后2组落下；周而复始*/
;;;296    void Go_straight(u8 Com_Num,u8 * Input_num)
000000  b570              PUSH     {r4-r6,lr}
;;;297    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;298    	Pace_135_Motor2(0,100,STRAIGHT_DELAY);		//UP
000006  2203              MOVS     r2,#3
000008  2164              MOVS     r1,#0x64
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       Pace_135_Motor2
;;;299    	while(Com_Num == *Input_num)
000010  e02b              B        |L2.106|
                  |L2.18|
;;;300    	{
;;;301    		  Pace_246_Motor3(0,80,STRAIGHT_DELAY);		//FRONT
000012  2203              MOVS     r2,#3
000014  2150              MOVS     r1,#0x50
000016  2000              MOVS     r0,#0
000018  f7fffffe          BL       Pace_246_Motor3
;;;302    	   	Pace_135_Motor2(100,-100,STRAIGHT_DELAY);	//DOWM
00001c  2203              MOVS     r2,#3
00001e  f06f0163          MVN      r1,#0x63
000022  2064              MOVS     r0,#0x64
000024  f7fffffe          BL       Pace_135_Motor2
;;;303    		  Pace_246_Motor2(0,100,STRAIGHT_DELAY);		//UP
000028  2203              MOVS     r2,#3
00002a  2164              MOVS     r1,#0x64
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       Pace_246_Motor2
;;;304    		  Pace_246_Motor3(80,-80,STRAIGHT_DELAY);		//RETURN
000032  2203              MOVS     r2,#3
000034  f06f014f          MVN      r1,#0x4f
000038  2050              MOVS     r0,#0x50
00003a  f7fffffe          BL       Pace_246_Motor3
;;;305    		  Pace_135_Motor3(0,80,STRAIGHT_DELAY);		//FRONT
00003e  2203              MOVS     r2,#3
000040  2150              MOVS     r1,#0x50
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       Pace_135_Motor3
;;;306    		  Pace_246_Motor2(100,-100,STRAIGHT_DELAY);	//DOWM
000048  2203              MOVS     r2,#3
00004a  f06f0163          MVN      r1,#0x63
00004e  2064              MOVS     r0,#0x64
000050  f7fffffe          BL       Pace_246_Motor2
;;;307    		  Pace_135_Motor2(0,100,STRAIGHT_DELAY);		//UP
000054  2203              MOVS     r2,#3
000056  2164              MOVS     r1,#0x64
000058  2000              MOVS     r0,#0
00005a  f7fffffe          BL       Pace_135_Motor2
;;;308    		  Pace_135_Motor3(80,-80,STRAIGHT_DELAY);		//RETURN
00005e  2203              MOVS     r2,#3
000060  f06f014f          MVN      r1,#0x4f
000064  2050              MOVS     r0,#0x50
000066  f7fffffe          BL       Pace_135_Motor3
                  |L2.106|
00006a  7820              LDRB     r0,[r4,#0]            ;299
00006c  42a8              CMP      r0,r5                 ;299
00006e  d0d0              BEQ      |L2.18|
;;;309    	}
;;;310    	
;;;311    	Pace_135_Motor2(100,-100,STRAIGHT_DELAY);		//DOWM
000070  2203              MOVS     r2,#3
000072  f06f0163          MVN      r1,#0x63
000076  2064              MOVS     r0,#0x64
000078  f7fffffe          BL       Pace_135_Motor2
;;;312    	
;;;313    }
00007c  bd70              POP      {r4-r6,pc}
;;;314    //
                          ENDP


                          AREA ||i.Pace_135_246_Motor3||, CODE, READONLY, ALIGN=2

                  Pace_135_246_Motor3 PROC
;;;268    //
;;;269    void Pace_135_246_Motor3(int pwm_def1,int pwm_def2,int amplitude,int delay_time)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;270    {	   
000004  ed2d8b06          VPUSH    {d8-d10}
000008  b084              SUB      sp,sp,#0x10
00000a  4605              MOV      r5,r0
00000c  460e              MOV      r6,r1
00000e  4617              MOV      r7,r2
000010  4698              MOV      r8,r3
;;;271    	int pwm_tmp = 0;
000012  2400              MOVS     r4,#0
;;;272    	OS_ERR      err;
;;;273    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000014  e035              B        |L3.130|
                  |L3.22|
;;;274    	{
;;;275    		OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000016  a803              ADD      r0,sp,#0xc
000018  2100              MOVS     r1,#0
00001a  4643              MOV      r3,r8
00001c  460a              MOV      r2,r1
00001e  e9cd1000          STRD     r1,r0,[sp,#0]
000022  4608              MOV      r0,r1
000024  f7fffffe          BL       OSTimeDlyHMSM
;;;276    
;;;277    		ANKLE_1_OUT = pwm_init[19] + pwm_def1 + pwm_tmp;	 //1-3-19
000028  482b              LDR      r0,|L3.216|
00002a  6cc0              LDR      r0,[r0,#0x4c]  ; pwm_init
00002c  4428              ADD      r0,r0,r5
00002e  4420              ADD      r0,r0,r4
000030  492a              LDR      r1,|L3.220|
000032  6008              STR      r0,[r1,#0]
;;;278    		ANKLE_3_OUT = pwm_init[16] + pwm_def1 + pwm_tmp;	 //3-3-16  	   
000034  4828              LDR      r0,|L3.216|
000036  6c00              LDR      r0,[r0,#0x40]  ; pwm_init
000038  4428              ADD      r0,r0,r5
00003a  4420              ADD      r0,r0,r4
00003c  4927              LDR      r1,|L3.220|
00003e  3108              ADDS     r1,r1,#8
000040  6008              STR      r0,[r1,#0]
;;;279    		ANKLE_5_OUT = pwm_init[22] + pwm_def1 + pwm_tmp;	 //5-3-22  	   
000042  4825              LDR      r0,|L3.216|
000044  6d80              LDR      r0,[r0,#0x58]  ; pwm_init
000046  4428              ADD      r0,r0,r5
000048  4420              ADD      r0,r0,r4
00004a  4925              LDR      r1,|L3.224|
00004c  6008              STR      r0,[r1,#0]
;;;280    
;;;281    		ANKLE_2_OUT = pwm_init[2]  + pwm_def2 + pwm_tmp;	 //2-3-2  
00004e  4822              LDR      r0,|L3.216|
000050  6880              LDR      r0,[r0,#8]  ; pwm_init
000052  4430              ADD      r0,r0,r6
000054  4420              ADD      r0,r0,r4
000056  4921              LDR      r1,|L3.220|
000058  1d09              ADDS     r1,r1,#4
00005a  6008              STR      r0,[r1,#0]
;;;282    		ANKLE_4_OUT = pwm_init[18] + pwm_def2 + pwm_tmp;	 //4-3-18
00005c  481e              LDR      r0,|L3.216|
00005e  6c80              LDR      r0,[r0,#0x48]  ; pwm_init
000060  4430              ADD      r0,r0,r6
000062  4420              ADD      r0,r0,r4
000064  491d              LDR      r1,|L3.220|
000066  310c              ADDS     r1,r1,#0xc
000068  6008              STR      r0,[r1,#0]
;;;283    		ANKLE_6_OUT = pwm_init[23] + pwm_def2 + pwm_tmp;	 //6-3-23  
00006a  481b              LDR      r0,|L3.216|
00006c  6dc0              LDR      r0,[r0,#0x5c]  ; pwm_init
00006e  4430              ADD      r0,r0,r6
000070  4420              ADD      r0,r0,r4
000072  491b              LDR      r1,|L3.224|
000074  1d09              ADDS     r1,r1,#4
000076  6008              STR      r0,[r1,#0]
;;;284    		
;;;285    		if(amplitude > 0)
000078  2f00              CMP      r7,#0
00007a  dd01              BLE      |L3.128|
;;;286    			pwm_tmp += ACTION_SPEED;
00007c  3408              ADDS     r4,r4,#8
00007e  e000              B        |L3.130|
                  |L3.128|
;;;287    		else 
;;;288    			pwm_tmp -= ACTION_SPEED;
000080  3c08              SUBS     r4,r4,#8
                  |L3.130|
000082  4638              MOV      r0,r7                 ;273
000084  f7fffffe          BL       __aeabi_i2d
000088  ec410b1a          VMOV     d10,r0,r1             ;273
00008c  eeb00a4a          VMOV.F32 s0,s20                ;273
000090  eef00a6a          VMOV.F32 s1,s21                ;273
000094  f7fffffe          BL       __hardfp_fabs
000098  eeb08a40          VMOV.F32 s16,s0                ;273
00009c  eef08a60          VMOV.F32 s17,s1                ;273
0000a0  4620              MOV      r0,r4                 ;273
0000a2  f7fffffe          BL       __aeabi_i2d
0000a6  ec410b1a          VMOV     d10,r0,r1             ;273
0000aa  eeb00a4a          VMOV.F32 s0,s20                ;273
0000ae  eef00a6a          VMOV.F32 s1,s21                ;273
0000b2  f7fffffe          BL       __hardfp_fabs
0000b6  eeb09a40          VMOV.F32 s18,s0                ;273
0000ba  eef09a60          VMOV.F32 s19,s1                ;273
0000be  ec532b18          VMOV     r2,r3,d8              ;273
0000c2  ec510b19          VMOV     r0,r1,d9              ;273
0000c6  f7fffffe          BL       __aeabi_cdcmple
0000ca  d9a4              BLS      |L3.22|
;;;289    	}
;;;290    }
0000cc  b004              ADD      sp,sp,#0x10
0000ce  ecbd8b06          VPOP     {d8-d10}
0000d2  e8bd81f0          POP      {r4-r8,pc}
;;;291    
                          ENDP

0000d6  0000              DCW      0x0000
                  |L3.216|
                          DCD      pwm_init
                  |L3.220|
                          DCD      0x40000434
                  |L3.224|
                          DCD      0x40000834

                          AREA ||i.Pace_135_Motor1||, CODE, READONLY, ALIGN=2

                  Pace_135_Motor1 PROC
;;;127    //
;;;128    void Pace_135_Motor1(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;129    {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;130    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;131    	OS_ERR      err;
;;;132    	for( ; fabs(pwm_tmp)<=fabs(amplitude); )
000010  e020              B        |L4.84|
                  |L4.18|
;;;133    	{
;;;134    		OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err); 
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;135    		HIP_1_OUT = pwm_init[1] - pwm_default - pwm_tmp;	 //1-1-1  	   
000024  4820              LDR      r0,|L4.168|
000026  6840              LDR      r0,[r0,#4]  ; pwm_init
000028  1b40              SUBS     r0,r0,r5
00002a  1b00              SUBS     r0,r0,r4
00002c  491f              LDR      r1,|L4.172|
00002e  6008              STR      r0,[r1,#0]
;;;136    	  HIP_3_OUT = pwm_init[9] - pwm_default - pwm_tmp;	 //3-1-9  	   
000030  481d              LDR      r0,|L4.168|
000032  6a40              LDR      r0,[r0,#0x24]  ; pwm_init
000034  1b40              SUBS     r0,r0,r5
000036  1b00              SUBS     r0,r0,r4
000038  491c              LDR      r1,|L4.172|
00003a  3108              ADDS     r1,r1,#8
00003c  6008              STR      r0,[r1,#0]
;;;137    		HIP_5_OUT = pwm_init[8] + pwm_default + pwm_tmp;	 //5-1-8 
00003e  481a              LDR      r0,|L4.168|
000040  6a00              LDR      r0,[r0,#0x20]  ; pwm_init
000042  4428              ADD      r0,r0,r5
000044  4420              ADD      r0,r0,r4
000046  491a              LDR      r1,|L4.176|
000048  6008              STR      r0,[r1,#0]
;;;138    		
;;;139    		if(amplitude > 0)
00004a  2e00              CMP      r6,#0
00004c  dd01              BLE      |L4.82|
;;;140    			pwm_tmp += ACTION_SPEED;
00004e  3408              ADDS     r4,r4,#8
000050  e000              B        |L4.84|
                  |L4.82|
;;;141    		else 
;;;142    			pwm_tmp -= ACTION_SPEED;
000052  3c08              SUBS     r4,r4,#8
                  |L4.84|
000054  4630              MOV      r0,r6                 ;132
000056  f7fffffe          BL       __aeabi_i2d
00005a  ec410b1a          VMOV     d10,r0,r1             ;132
00005e  eeb00a4a          VMOV.F32 s0,s20                ;132
000062  eef00a6a          VMOV.F32 s1,s21                ;132
000066  f7fffffe          BL       __hardfp_fabs
00006a  eeb08a40          VMOV.F32 s16,s0                ;132
00006e  eef08a60          VMOV.F32 s17,s1                ;132
000072  4620              MOV      r0,r4                 ;132
000074  f7fffffe          BL       __aeabi_i2d
000078  ec410b1a          VMOV     d10,r0,r1             ;132
00007c  eeb00a4a          VMOV.F32 s0,s20                ;132
000080  eef00a6a          VMOV.F32 s1,s21                ;132
000084  f7fffffe          BL       __hardfp_fabs
000088  eeb09a40          VMOV.F32 s18,s0                ;132
00008c  eef09a60          VMOV.F32 s19,s1                ;132
000090  ec532b18          VMOV     r2,r3,d8              ;132
000094  ec510b19          VMOV     r0,r1,d9              ;132
000098  f7fffffe          BL       __aeabi_cdcmple
00009c  d9b9              BLS      |L4.18|
;;;143    	}
;;;144    }
00009e  b003              ADD      sp,sp,#0xc
0000a0  ecbd8b06          VPOP     {d8-d10}
0000a4  bdf0              POP      {r4-r7,pc}
;;;145    //
                          ENDP

0000a6  0000              DCW      0x0000
                  |L4.168|
                          DCD      pwm_init
                  |L4.172|
                          DCD      0x40000c34
                  |L4.176|
                          DCD      0x4000083c

                          AREA ||i.Pace_135_Motor2||, CODE, READONLY, ALIGN=2

                  Pace_135_Motor2 PROC
;;;147    //
;;;148    void Pace_135_Motor2(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;149    {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;150    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;151    	OS_ERR      err;
;;;152    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000010  e01f              B        |L5.82|
                  |L5.18|
;;;153    	{
;;;154    			OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);				 
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;155    			KNEE_1_OUT = pwm_init[20] - pwm_default - pwm_tmp;	 //1-2-20 
000024  481f              LDR      r0,|L5.164|
000026  6d00              LDR      r0,[r0,#0x50]  ; pwm_init
000028  1b40              SUBS     r0,r0,r5
00002a  1b00              SUBS     r0,r0,r4
00002c  491e              LDR      r1,|L5.168|
00002e  63c8              STR      r0,[r1,#0x3c]
;;;156    			KNEE_3_OUT = pwm_init[15] - pwm_default - pwm_tmp;	 //3-2-15 
000030  481c              LDR      r0,|L5.164|
000032  6bc0              LDR      r0,[r0,#0x3c]  ; pwm_init
000034  1b40              SUBS     r0,r0,r5
000036  1b00              SUBS     r0,r0,r4
000038  491c              LDR      r1,|L5.172|
00003a  6348              STR      r0,[r1,#0x34]
;;;157    			KNEE_5_OUT = pwm_init[21] + pwm_default + pwm_tmp;	 //5-2-21
00003c  4819              LDR      r0,|L5.164|
00003e  6d40              LDR      r0,[r0,#0x54]  ; pwm_init
000040  4428              ADD      r0,r0,r5
000042  4420              ADD      r0,r0,r4
000044  4918              LDR      r1,|L5.168|
000046  6348              STR      r0,[r1,#0x34]
;;;158    		
;;;159    			if(amplitude > 0)
000048  2e00              CMP      r6,#0
00004a  dd01              BLE      |L5.80|
;;;160    				pwm_tmp += ACTION_SPEED;
00004c  3408              ADDS     r4,r4,#8
00004e  e000              B        |L5.82|
                  |L5.80|
;;;161    			else 
;;;162    				pwm_tmp -= ACTION_SPEED;
000050  3c08              SUBS     r4,r4,#8
                  |L5.82|
000052  4630              MOV      r0,r6                 ;152
000054  f7fffffe          BL       __aeabi_i2d
000058  ec410b1a          VMOV     d10,r0,r1             ;152
00005c  eeb00a4a          VMOV.F32 s0,s20                ;152
000060  eef00a6a          VMOV.F32 s1,s21                ;152
000064  f7fffffe          BL       __hardfp_fabs
000068  eeb08a40          VMOV.F32 s16,s0                ;152
00006c  eef08a60          VMOV.F32 s17,s1                ;152
000070  4620              MOV      r0,r4                 ;152
000072  f7fffffe          BL       __aeabi_i2d
000076  ec410b1a          VMOV     d10,r0,r1             ;152
00007a  eeb00a4a          VMOV.F32 s0,s20                ;152
00007e  eef00a6a          VMOV.F32 s1,s21                ;152
000082  f7fffffe          BL       __hardfp_fabs
000086  eeb09a40          VMOV.F32 s18,s0                ;152
00008a  eef09a60          VMOV.F32 s19,s1                ;152
00008e  ec532b18          VMOV     r2,r3,d8              ;152
000092  ec510b19          VMOV     r0,r1,d9              ;152
000096  f7fffffe          BL       __aeabi_cdcmple
00009a  d9ba              BLS      |L5.18|
;;;163    	}
;;;164    }
00009c  b003              ADD      sp,sp,#0xc
00009e  ecbd8b06          VPOP     {d8-d10}
0000a2  bdf0              POP      {r4-r7,pc}
;;;165    //
                          ENDP

                  |L5.164|
                          DCD      pwm_init
                  |L5.168|
                          DCD      0x40010000
                  |L5.172|
                          DCD      0x40014000

                          AREA ||i.Pace_135_Motor3||, CODE, READONLY, ALIGN=2

                  Pace_135_Motor3 PROC
;;;167    //
;;;168    void Pace_135_Motor3(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;169    {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;170    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;171    	OS_ERR      err;
;;;172    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000010  e020              B        |L6.84|
                  |L6.18|
;;;173    	{
;;;174    			OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;175    			ANKLE_1_OUT = pwm_init[19] + pwm_default + pwm_tmp;	 //1-3-19
000024  4820              LDR      r0,|L6.168|
000026  6cc0              LDR      r0,[r0,#0x4c]  ; pwm_init
000028  4428              ADD      r0,r0,r5
00002a  4420              ADD      r0,r0,r4
00002c  491f              LDR      r1,|L6.172|
00002e  6008              STR      r0,[r1,#0]
;;;176    			ANKLE_3_OUT = pwm_init[16] + pwm_default + pwm_tmp;	 //3-3-16  	   
000030  481d              LDR      r0,|L6.168|
000032  6c00              LDR      r0,[r0,#0x40]  ; pwm_init
000034  4428              ADD      r0,r0,r5
000036  4420              ADD      r0,r0,r4
000038  491c              LDR      r1,|L6.172|
00003a  3108              ADDS     r1,r1,#8
00003c  6008              STR      r0,[r1,#0]
;;;177    			ANKLE_5_OUT = pwm_init[22] - pwm_default - pwm_tmp;	 //5-3-22 
00003e  481a              LDR      r0,|L6.168|
000040  6d80              LDR      r0,[r0,#0x58]  ; pwm_init
000042  1b40              SUBS     r0,r0,r5
000044  1b00              SUBS     r0,r0,r4
000046  491a              LDR      r1,|L6.176|
000048  6008              STR      r0,[r1,#0]
;;;178    		
;;;179    			if(amplitude > 0)
00004a  2e00              CMP      r6,#0
00004c  dd01              BLE      |L6.82|
;;;180    				pwm_tmp += ACTION_SPEED;
00004e  3408              ADDS     r4,r4,#8
000050  e000              B        |L6.84|
                  |L6.82|
;;;181    			else 
;;;182    				pwm_tmp -= ACTION_SPEED;
000052  3c08              SUBS     r4,r4,#8
                  |L6.84|
000054  4630              MOV      r0,r6                 ;172
000056  f7fffffe          BL       __aeabi_i2d
00005a  ec410b1a          VMOV     d10,r0,r1             ;172
00005e  eeb00a4a          VMOV.F32 s0,s20                ;172
000062  eef00a6a          VMOV.F32 s1,s21                ;172
000066  f7fffffe          BL       __hardfp_fabs
00006a  eeb08a40          VMOV.F32 s16,s0                ;172
00006e  eef08a60          VMOV.F32 s17,s1                ;172
000072  4620              MOV      r0,r4                 ;172
000074  f7fffffe          BL       __aeabi_i2d
000078  ec410b1a          VMOV     d10,r0,r1             ;172
00007c  eeb00a4a          VMOV.F32 s0,s20                ;172
000080  eef00a6a          VMOV.F32 s1,s21                ;172
000084  f7fffffe          BL       __hardfp_fabs
000088  eeb09a40          VMOV.F32 s18,s0                ;172
00008c  eef09a60          VMOV.F32 s19,s1                ;172
000090  ec532b18          VMOV     r2,r3,d8              ;172
000094  ec510b19          VMOV     r0,r1,d9              ;172
000098  f7fffffe          BL       __aeabi_cdcmple
00009c  d9b9              BLS      |L6.18|
;;;183    	}
;;;184    }
00009e  b003              ADD      sp,sp,#0xc
0000a0  ecbd8b06          VPOP     {d8-d10}
0000a4  bdf0              POP      {r4-r7,pc}
;;;185    //
                          ENDP

0000a6  0000              DCW      0x0000
                  |L6.168|
                          DCD      pwm_init
                  |L6.172|
                          DCD      0x40000434
                  |L6.176|
                          DCD      0x40000834

                          AREA ||i.Pace_135_Motor3_Different||, CODE, READONLY, ALIGN=2

                  Pace_135_Motor3_Different PROC
;;;187    //
;;;188    void Pace_135_Motor3_Different(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;189    {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;190    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;191    	OS_ERR      err;
;;;192    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000010  e020              B        |L7.84|
                  |L7.18|
;;;193    	{
;;;194    			OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;195    			ANKLE_1_OUT = pwm_init[19] + pwm_default + pwm_tmp;	 //1-3-19
000024  4820              LDR      r0,|L7.168|
000026  6cc0              LDR      r0,[r0,#0x4c]  ; pwm_init
000028  4428              ADD      r0,r0,r5
00002a  4420              ADD      r0,r0,r4
00002c  491f              LDR      r1,|L7.172|
00002e  6008              STR      r0,[r1,#0]
;;;196    			ANKLE_3_OUT = pwm_init[16] + pwm_default + pwm_tmp;	 //3-3-16  	   
000030  481d              LDR      r0,|L7.168|
000032  6c00              LDR      r0,[r0,#0x40]  ; pwm_init
000034  4428              ADD      r0,r0,r5
000036  4420              ADD      r0,r0,r4
000038  491c              LDR      r1,|L7.172|
00003a  3108              ADDS     r1,r1,#8
00003c  6008              STR      r0,[r1,#0]
;;;197    			ANKLE_5_OUT = pwm_init[22] + pwm_default + pwm_tmp;	 //5-3-22 
00003e  481a              LDR      r0,|L7.168|
000040  6d80              LDR      r0,[r0,#0x58]  ; pwm_init
000042  4428              ADD      r0,r0,r5
000044  4420              ADD      r0,r0,r4
000046  491a              LDR      r1,|L7.176|
000048  6008              STR      r0,[r1,#0]
;;;198    		
;;;199    			if(amplitude > 0)
00004a  2e00              CMP      r6,#0
00004c  dd01              BLE      |L7.82|
;;;200    				pwm_tmp += ACTION_SPEED;
00004e  3408              ADDS     r4,r4,#8
000050  e000              B        |L7.84|
                  |L7.82|
;;;201    			else 
;;;202    				pwm_tmp -= ACTION_SPEED;
000052  3c08              SUBS     r4,r4,#8
                  |L7.84|
000054  4630              MOV      r0,r6                 ;192
000056  f7fffffe          BL       __aeabi_i2d
00005a  ec410b1a          VMOV     d10,r0,r1             ;192
00005e  eeb00a4a          VMOV.F32 s0,s20                ;192
000062  eef00a6a          VMOV.F32 s1,s21                ;192
000066  f7fffffe          BL       __hardfp_fabs
00006a  eeb08a40          VMOV.F32 s16,s0                ;192
00006e  eef08a60          VMOV.F32 s17,s1                ;192
000072  4620              MOV      r0,r4                 ;192
000074  f7fffffe          BL       __aeabi_i2d
000078  ec410b1a          VMOV     d10,r0,r1             ;192
00007c  eeb00a4a          VMOV.F32 s0,s20                ;192
000080  eef00a6a          VMOV.F32 s1,s21                ;192
000084  f7fffffe          BL       __hardfp_fabs
000088  eeb09a40          VMOV.F32 s18,s0                ;192
00008c  eef09a60          VMOV.F32 s19,s1                ;192
000090  ec532b18          VMOV     r2,r3,d8              ;192
000094  ec510b19          VMOV     r0,r1,d9              ;192
000098  f7fffffe          BL       __aeabi_cdcmple
00009c  d9b9              BLS      |L7.18|
;;;203    	}
;;;204    }
00009e  b003              ADD      sp,sp,#0xc
0000a0  ecbd8b06          VPOP     {d8-d10}
0000a4  bdf0              POP      {r4-r7,pc}
;;;205    //
                          ENDP

0000a6  0000              DCW      0x0000
                  |L7.168|
                          DCD      pwm_init
                  |L7.172|
                          DCD      0x40000434
                  |L7.176|
                          DCD      0x40000834

                          AREA ||i.Pace_246_Motor2||, CODE, READONLY, ALIGN=2

                  Pace_246_Motor2 PROC
;;;207    //
;;;208    void Pace_246_Motor2(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;209    {
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;210    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;211    	OS_ERR      err;
;;;212    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000010  e01f              B        |L8.82|
                  |L8.18|
;;;213    	{
;;;214    			OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;215    		  KNEE_2_OUT = pwm_init[6] - pwm_default - pwm_tmp;	 //2-2-6 
000024  481f              LDR      r0,|L8.164|
000026  6980              LDR      r0,[r0,#0x18]  ; pwm_init
000028  1b40              SUBS     r0,r0,r5
00002a  1b00              SUBS     r0,r0,r4
00002c  491e              LDR      r1,|L8.168|
00002e  6408              STR      r0,[r1,#0x40]
;;;216    			KNEE_4_OUT = pwm_init[7]  + pwm_default + pwm_tmp;	 //4-2-7
000030  481c              LDR      r0,|L8.164|
000032  69c0              LDR      r0,[r0,#0x1c]  ; pwm_init
000034  4428              ADD      r0,r0,r5
000036  4420              ADD      r0,r0,r4
000038  491c              LDR      r1,|L8.172|
00003a  6388              STR      r0,[r1,#0x38]
;;;217    			KNEE_6_OUT = pwm_init[24] + pwm_default + pwm_tmp;	 //6-2-24  	 
00003c  4819              LDR      r0,|L8.164|
00003e  6e00              LDR      r0,[r0,#0x60]  ; pwm_init
000040  4428              ADD      r0,r0,r5
000042  4420              ADD      r0,r0,r4
000044  4918              LDR      r1,|L8.168|
000046  6388              STR      r0,[r1,#0x38]
;;;218    			 	 
;;;219    			if(amplitude > 0)
000048  2e00              CMP      r6,#0
00004a  dd01              BLE      |L8.80|
;;;220    				pwm_tmp += ACTION_SPEED;
00004c  3408              ADDS     r4,r4,#8
00004e  e000              B        |L8.82|
                  |L8.80|
;;;221    			else 
;;;222    				pwm_tmp -= ACTION_SPEED;
000050  3c08              SUBS     r4,r4,#8
                  |L8.82|
000052  4630              MOV      r0,r6                 ;212
000054  f7fffffe          BL       __aeabi_i2d
000058  ec410b1a          VMOV     d10,r0,r1             ;212
00005c  eeb00a4a          VMOV.F32 s0,s20                ;212
000060  eef00a6a          VMOV.F32 s1,s21                ;212
000064  f7fffffe          BL       __hardfp_fabs
000068  eeb08a40          VMOV.F32 s16,s0                ;212
00006c  eef08a60          VMOV.F32 s17,s1                ;212
000070  4620              MOV      r0,r4                 ;212
000072  f7fffffe          BL       __aeabi_i2d
000076  ec410b1a          VMOV     d10,r0,r1             ;212
00007a  eeb00a4a          VMOV.F32 s0,s20                ;212
00007e  eef00a6a          VMOV.F32 s1,s21                ;212
000082  f7fffffe          BL       __hardfp_fabs
000086  eeb09a40          VMOV.F32 s18,s0                ;212
00008a  eef09a60          VMOV.F32 s19,s1                ;212
00008e  ec532b18          VMOV     r2,r3,d8              ;212
000092  ec510b19          VMOV     r0,r1,d9              ;212
000096  f7fffffe          BL       __aeabi_cdcmple
00009a  d9ba              BLS      |L8.18|
;;;223    	}
;;;224    }
00009c  b003              ADD      sp,sp,#0xc
00009e  ecbd8b06          VPOP     {d8-d10}
0000a2  bdf0              POP      {r4-r7,pc}
;;;225    //
                          ENDP

                  |L8.164|
                          DCD      pwm_init
                  |L8.168|
                          DCD      0x40010000
                  |L8.172|
                          DCD      0x40014000

                          AREA ||i.Pace_246_Motor3||, CODE, READONLY, ALIGN=2

                  Pace_246_Motor3 PROC
;;;227    //
;;;228    void Pace_246_Motor3(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;229    {	   
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;230    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;231    	OS_ERR      err;
;;;232    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000010  e020              B        |L9.84|
                  |L9.18|
;;;233    	{
;;;234    			OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;235    			ANKLE_2_OUT = pwm_init[2]  + pwm_default + pwm_tmp;	 //2-3-2  
000024  4820              LDR      r0,|L9.168|
000026  6880              LDR      r0,[r0,#8]  ; pwm_init
000028  4428              ADD      r0,r0,r5
00002a  4420              ADD      r0,r0,r4
00002c  491f              LDR      r1,|L9.172|
00002e  6008              STR      r0,[r1,#0]
;;;236    			ANKLE_4_OUT = pwm_init[18] - pwm_default - pwm_tmp;	 //4-3-18
000030  481d              LDR      r0,|L9.168|
000032  6c80              LDR      r0,[r0,#0x48]  ; pwm_init
000034  1b40              SUBS     r0,r0,r5
000036  1b00              SUBS     r0,r0,r4
000038  491c              LDR      r1,|L9.172|
00003a  3108              ADDS     r1,r1,#8
00003c  6008              STR      r0,[r1,#0]
;;;237    			ANKLE_6_OUT = pwm_init[23] - pwm_default - pwm_tmp;	 //6-3-23  	   
00003e  481a              LDR      r0,|L9.168|
000040  6dc0              LDR      r0,[r0,#0x5c]  ; pwm_init
000042  1b40              SUBS     r0,r0,r5
000044  1b00              SUBS     r0,r0,r4
000046  491a              LDR      r1,|L9.176|
000048  6008              STR      r0,[r1,#0]
;;;238    		
;;;239    			if(amplitude > 0)
00004a  2e00              CMP      r6,#0
00004c  dd01              BLE      |L9.82|
;;;240    				pwm_tmp += ACTION_SPEED;
00004e  3408              ADDS     r4,r4,#8
000050  e000              B        |L9.84|
                  |L9.82|
;;;241    			else 
;;;242    				pwm_tmp -= ACTION_SPEED;
000052  3c08              SUBS     r4,r4,#8
                  |L9.84|
000054  4630              MOV      r0,r6                 ;232
000056  f7fffffe          BL       __aeabi_i2d
00005a  ec410b1a          VMOV     d10,r0,r1             ;232
00005e  eeb00a4a          VMOV.F32 s0,s20                ;232
000062  eef00a6a          VMOV.F32 s1,s21                ;232
000066  f7fffffe          BL       __hardfp_fabs
00006a  eeb08a40          VMOV.F32 s16,s0                ;232
00006e  eef08a60          VMOV.F32 s17,s1                ;232
000072  4620              MOV      r0,r4                 ;232
000074  f7fffffe          BL       __aeabi_i2d
000078  ec410b1a          VMOV     d10,r0,r1             ;232
00007c  eeb00a4a          VMOV.F32 s0,s20                ;232
000080  eef00a6a          VMOV.F32 s1,s21                ;232
000084  f7fffffe          BL       __hardfp_fabs
000088  eeb09a40          VMOV.F32 s18,s0                ;232
00008c  eef09a60          VMOV.F32 s19,s1                ;232
000090  ec532b18          VMOV     r2,r3,d8              ;232
000094  ec510b19          VMOV     r0,r1,d9              ;232
000098  f7fffffe          BL       __aeabi_cdcmple
00009c  d9b9              BLS      |L9.18|
;;;243    	}
;;;244    }
00009e  b003              ADD      sp,sp,#0xc
0000a0  ecbd8b06          VPOP     {d8-d10}
0000a4  bdf0              POP      {r4-r7,pc}
;;;245    //
                          ENDP

0000a6  0000              DCW      0x0000
                  |L9.168|
                          DCD      pwm_init
                  |L9.172|
                          DCD      0x40000438
                  |L9.176|
                          DCD      0x40000838

                          AREA ||i.Pace_246_Motor3_Different||, CODE, READONLY, ALIGN=2

                  Pace_246_Motor3_Different PROC
;;;247    //
;;;248    void Pace_246_Motor3_Different(int pwm_default,int amplitude,int delay_time)
000000  b5f0              PUSH     {r4-r7,lr}
;;;249    {	   
000002  ed2d8b06          VPUSH    {d8-d10}
000006  b083              SUB      sp,sp,#0xc
000008  4605              MOV      r5,r0
00000a  460e              MOV      r6,r1
00000c  4617              MOV      r7,r2
;;;250    	int pwm_tmp = 0;
00000e  2400              MOVS     r4,#0
;;;251    	OS_ERR      err;
;;;252    	for(;fabs(pwm_tmp)<=fabs(amplitude);)
000010  e020              B        |L10.84|
                  |L10.18|
;;;253    	{
;;;254    
;;;255    			OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000012  a802              ADD      r0,sp,#8
000014  2100              MOVS     r1,#0
000016  463b              MOV      r3,r7
000018  460a              MOV      r2,r1
00001a  e9cd1000          STRD     r1,r0,[sp,#0]
00001e  4608              MOV      r0,r1
000020  f7fffffe          BL       OSTimeDlyHMSM
;;;256    			ANKLE_2_OUT = pwm_init[2]  + pwm_default + pwm_tmp;	 //2-3-2  
000024  4820              LDR      r0,|L10.168|
000026  6880              LDR      r0,[r0,#8]  ; pwm_init
000028  4428              ADD      r0,r0,r5
00002a  4420              ADD      r0,r0,r4
00002c  491f              LDR      r1,|L10.172|
00002e  6008              STR      r0,[r1,#0]
;;;257    			ANKLE_4_OUT = pwm_init[18] + pwm_default + pwm_tmp;	 //4-3-18
000030  481d              LDR      r0,|L10.168|
000032  6c80              LDR      r0,[r0,#0x48]  ; pwm_init
000034  4428              ADD      r0,r0,r5
000036  4420              ADD      r0,r0,r4
000038  491c              LDR      r1,|L10.172|
00003a  3108              ADDS     r1,r1,#8
00003c  6008              STR      r0,[r1,#0]
;;;258    			ANKLE_6_OUT = pwm_init[23] + pwm_default + pwm_tmp;	 //6-3-23  	   
00003e  481a              LDR      r0,|L10.168|
000040  6dc0              LDR      r0,[r0,#0x5c]  ; pwm_init
000042  4428              ADD      r0,r0,r5
000044  4420              ADD      r0,r0,r4
000046  491a              LDR      r1,|L10.176|
000048  6008              STR      r0,[r1,#0]
;;;259    		
;;;260    			if(amplitude > 0)
00004a  2e00              CMP      r6,#0
00004c  dd01              BLE      |L10.82|
;;;261    				pwm_tmp += ACTION_SPEED;
00004e  3408              ADDS     r4,r4,#8
000050  e000              B        |L10.84|
                  |L10.82|
;;;262    			else 
;;;263    				pwm_tmp -= ACTION_SPEED;
000052  3c08              SUBS     r4,r4,#8
                  |L10.84|
000054  4630              MOV      r0,r6                 ;252
000056  f7fffffe          BL       __aeabi_i2d
00005a  ec410b1a          VMOV     d10,r0,r1             ;252
00005e  eeb00a4a          VMOV.F32 s0,s20                ;252
000062  eef00a6a          VMOV.F32 s1,s21                ;252
000066  f7fffffe          BL       __hardfp_fabs
00006a  eeb08a40          VMOV.F32 s16,s0                ;252
00006e  eef08a60          VMOV.F32 s17,s1                ;252
000072  4620              MOV      r0,r4                 ;252
000074  f7fffffe          BL       __aeabi_i2d
000078  ec410b1a          VMOV     d10,r0,r1             ;252
00007c  eeb00a4a          VMOV.F32 s0,s20                ;252
000080  eef00a6a          VMOV.F32 s1,s21                ;252
000084  f7fffffe          BL       __hardfp_fabs
000088  eeb09a40          VMOV.F32 s18,s0                ;252
00008c  eef09a60          VMOV.F32 s19,s1                ;252
000090  ec532b18          VMOV     r2,r3,d8              ;252
000094  ec510b19          VMOV     r0,r1,d9              ;252
000098  f7fffffe          BL       __aeabi_cdcmple
00009c  d9b9              BLS      |L10.18|
;;;264    	}
;;;265    }
00009e  b003              ADD      sp,sp,#0xc
0000a0  ecbd8b06          VPOP     {d8-d10}
0000a4  bdf0              POP      {r4-r7,pc}
;;;266    //
                          ENDP

0000a6  0000              DCW      0x0000
                  |L10.168|
                          DCD      pwm_init
                  |L10.172|
                          DCD      0x40000438
                  |L10.176|
                          DCD      0x40000838

                          AREA ||i.Position_Reset||, CODE, READONLY, ALIGN=2

                  Position_Reset PROC
;;;29     //
;;;30     void Position_Reset(void)
000000  4823              LDR      r0,|L11.144|
;;;31     {
;;;32     		HIP_1_OUT = pwm_init[1];	 //1-1-1  	   
000002  6840              LDR      r0,[r0,#4]  ; pwm_init
000004  4923              LDR      r1,|L11.148|
000006  6008              STR      r0,[r1,#0]
;;;33     		HIP_2_OUT = pwm_init[5];	 //2-1-5  	   
000008  4821              LDR      r0,|L11.144|
00000a  6940              LDR      r0,[r0,#0x14]  ; pwm_init
00000c  1d09              ADDS     r1,r1,#4
00000e  6008              STR      r0,[r1,#0]
;;;34     		HIP_3_OUT = pwm_init[9];	 //3-1-9  	   
000010  481f              LDR      r0,|L11.144|
000012  6a40              LDR      r0,[r0,#0x24]  ; pwm_init
000014  1d09              ADDS     r1,r1,#4
000016  6008              STR      r0,[r1,#0]
;;;35     		HIP_4_OUT = pwm_init[12];  //4-1-12
000018  481d              LDR      r0,|L11.144|
00001a  6b00              LDR      r0,[r0,#0x30]  ; pwm_init
00001c  1d09              ADDS     r1,r1,#4
00001e  6008              STR      r0,[r1,#0]
;;;36         HIP_5_OUT = pwm_init[8];   //5-1-8  	
000020  481b              LDR      r0,|L11.144|
000022  6a00              LDR      r0,[r0,#0x20]  ; pwm_init
000024  491c              LDR      r1,|L11.152|
000026  6008              STR      r0,[r1,#0]
;;;37     	  HIP_6_OUT = pwm_init[4];	 //6-1-4  
000028  4819              LDR      r0,|L11.144|
00002a  6900              LDR      r0,[r0,#0x10]  ; pwm_init
00002c  1d09              ADDS     r1,r1,#4
00002e  6008              STR      r0,[r1,#0]
;;;38     	
;;;39     	  KNEE_1_OUT = pwm_init[20];	 //1-2-20
000030  4817              LDR      r0,|L11.144|
000032  6d00              LDR      r0,[r0,#0x50]  ; pwm_init
000034  4919              LDR      r1,|L11.156|
000036  63c8              STR      r0,[r1,#0x3c]
;;;40     	  KNEE_2_OUT = pwm_init[6];	   //2-2-6 
000038  4815              LDR      r0,|L11.144|
00003a  6980              LDR      r0,[r0,#0x18]  ; pwm_init
00003c  6408              STR      r0,[r1,#0x40]
;;;41     	  KNEE_3_OUT = pwm_init[15];	 //3-2-15
00003e  4814              LDR      r0,|L11.144|
000040  6bc0              LDR      r0,[r0,#0x3c]  ; pwm_init
000042  4917              LDR      r1,|L11.160|
000044  6348              STR      r0,[r1,#0x34]
;;;42     	  KNEE_4_OUT = pwm_init[7];	   //4-2-7
000046  4812              LDR      r0,|L11.144|
000048  69c0              LDR      r0,[r0,#0x1c]  ; pwm_init
00004a  6388              STR      r0,[r1,#0x38]
;;;43     	  KNEE_5_OUT = pwm_init[21];	 //5-2-21
00004c  4810              LDR      r0,|L11.144|
00004e  6d40              LDR      r0,[r0,#0x54]  ; pwm_init
000050  4912              LDR      r1,|L11.156|
000052  6348              STR      r0,[r1,#0x34]
;;;44     	  KNEE_6_OUT = pwm_init[24];	 //6-2-24
000054  480e              LDR      r0,|L11.144|
000056  6e00              LDR      r0,[r0,#0x60]  ; pwm_init
000058  6388              STR      r0,[r1,#0x38]
;;;45     	
;;;46     	  ANKLE_1_OUT = pwm_init[19];	 //1-3-19
00005a  480d              LDR      r0,|L11.144|
00005c  6cc0              LDR      r0,[r0,#0x4c]  ; pwm_init
00005e  4911              LDR      r1,|L11.164|
000060  6008              STR      r0,[r1,#0]
;;;47     	  ANKLE_2_OUT = pwm_init[2];	 //2-3-2
000062  480b              LDR      r0,|L11.144|
000064  6880              LDR      r0,[r0,#8]  ; pwm_init
000066  1d09              ADDS     r1,r1,#4
000068  6008              STR      r0,[r1,#0]
;;;48         ANKLE_3_OUT = pwm_init[16];	 //3-3-16 
00006a  4809              LDR      r0,|L11.144|
00006c  6c00              LDR      r0,[r0,#0x40]  ; pwm_init
00006e  1d09              ADDS     r1,r1,#4
000070  6008              STR      r0,[r1,#0]
;;;49     		ANKLE_4_OUT = pwm_init[18];	 //4-3-18
000072  4807              LDR      r0,|L11.144|
000074  6c80              LDR      r0,[r0,#0x48]  ; pwm_init
000076  1d09              ADDS     r1,r1,#4
000078  6008              STR      r0,[r1,#0]
;;;50     		ANKLE_5_OUT = pwm_init[22];	 //5-3-22 
00007a  4805              LDR      r0,|L11.144|
00007c  6d80              LDR      r0,[r0,#0x58]  ; pwm_init
00007e  4906              LDR      r1,|L11.152|
000080  3908              SUBS     r1,r1,#8
000082  6008              STR      r0,[r1,#0]
;;;51     		ANKLE_6_OUT = pwm_init[23];	 //6-3-23  	   
000084  4802              LDR      r0,|L11.144|
000086  6dc0              LDR      r0,[r0,#0x5c]  ; pwm_init
000088  1d09              ADDS     r1,r1,#4
00008a  6008              STR      r0,[r1,#0]
;;;52     		 	   
;;;53     }
00008c  4770              BX       lr
;;;54     //
                          ENDP

00008e  0000              DCW      0x0000
                  |L11.144|
                          DCD      pwm_init
                  |L11.148|
                          DCD      0x40000c34
                  |L11.152|
                          DCD      0x4000083c
                  |L11.156|
                          DCD      0x40010000
                  |L11.160|
                          DCD      0x40014000
                  |L11.164|
                          DCD      0x40000434

                          AREA ||i.Sit_Down||, CODE, READONLY, ALIGN=2

                  Sit_Down PROC
;;;56     //
;;;57     void Sit_Down(int delay_time)
000000  b5fe              PUSH     {r1-r7,lr}
;;;58     {
000002  4606              MOV      r6,r0
;;;59     		int pwm_tmp = 0;						//motor 2
000004  2400              MOVS     r4,#0
;;;60     		int pwm_tmp2 = 0;						//motor 1
000006  2500              MOVS     r5,#0
;;;61     	  OS_ERR       err;
;;;62     		for ( ; pwm_tmp<=STAND_HIGHT; )				 //150 efect the height of stand
000008  e043              B        |L12.146|
                  |L12.10|
;;;63     		{
;;;64     				OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
00000a  a802              ADD      r0,sp,#8
00000c  2100              MOVS     r1,#0
00000e  4633              MOV      r3,r6
000010  460a              MOV      r2,r1
000012  e9cd1000          STRD     r1,r0,[sp,#0]
000016  4608              MOV      r0,r1
000018  f7fffffe          BL       OSTimeDlyHMSM
;;;65     				
;;;66     				KNEE_1_OUT = pwm_init[20] - pwm_tmp;	 //1-2-20
00001c  4823              LDR      r0,|L12.172|
00001e  6d00              LDR      r0,[r0,#0x50]  ; pwm_init
000020  1b00              SUBS     r0,r0,r4
000022  4923              LDR      r1,|L12.176|
000024  63c8              STR      r0,[r1,#0x3c]
;;;67     				KNEE_2_OUT = pwm_init[6]  - pwm_tmp;	 //2-2-6	   	   
000026  4821              LDR      r0,|L12.172|
000028  6980              LDR      r0,[r0,#0x18]  ; pwm_init
00002a  1b00              SUBS     r0,r0,r4
00002c  6408              STR      r0,[r1,#0x40]
;;;68     				KNEE_3_OUT = pwm_init[15] - pwm_tmp;	 //3-2-15	
00002e  481f              LDR      r0,|L12.172|
000030  6bc0              LDR      r0,[r0,#0x3c]  ; pwm_init
000032  1b00              SUBS     r0,r0,r4
000034  491f              LDR      r1,|L12.180|
000036  6348              STR      r0,[r1,#0x34]
;;;69     				KNEE_4_OUT = pwm_init[7]  + pwm_tmp;	 //4-2-7	
000038  481c              LDR      r0,|L12.172|
00003a  69c0              LDR      r0,[r0,#0x1c]  ; pwm_init
00003c  4420              ADD      r0,r0,r4
00003e  6388              STR      r0,[r1,#0x38]
;;;70     			  KNEE_5_OUT = pwm_init[21] + pwm_tmp;	 //5-2-21
000040  481a              LDR      r0,|L12.172|
000042  6d40              LDR      r0,[r0,#0x54]  ; pwm_init
000044  4420              ADD      r0,r0,r4
000046  491a              LDR      r1,|L12.176|
000048  6348              STR      r0,[r1,#0x34]
;;;71     				KNEE_6_OUT = pwm_init[24] + pwm_tmp;	 //6-2-24 
00004a  4818              LDR      r0,|L12.172|
00004c  6e00              LDR      r0,[r0,#0x60]  ; pwm_init
00004e  4420              ADD      r0,r0,r4
000050  6388              STR      r0,[r1,#0x38]
;;;72     				
;;;73     				HIP_1_OUT = pwm_init[1] - pwm_tmp2;	   //1-1-1  	   
000052  4816              LDR      r0,|L12.172|
000054  6840              LDR      r0,[r0,#4]  ; pwm_init
000056  1b40              SUBS     r0,r0,r5
000058  4917              LDR      r1,|L12.184|
00005a  6008              STR      r0,[r1,#0]
;;;74     				HIP_2_OUT = pwm_init[5] - pwm_tmp2;	   //2-1-5  	 
00005c  4813              LDR      r0,|L12.172|
00005e  6940              LDR      r0,[r0,#0x14]  ; pwm_init
000060  1b40              SUBS     r0,r0,r5
000062  1d09              ADDS     r1,r1,#4
000064  6008              STR      r0,[r1,#0]
;;;75     				HIP_3_OUT = pwm_init[9] - pwm_tmp2;	   //3-1-9  
000066  4811              LDR      r0,|L12.172|
000068  6a40              LDR      r0,[r0,#0x24]  ; pwm_init
00006a  1b40              SUBS     r0,r0,r5
00006c  1d09              ADDS     r1,r1,#4
00006e  6008              STR      r0,[r1,#0]
;;;76     				HIP_4_OUT = pwm_init[12] + pwm_tmp2;	 //4-1-12  	   
000070  480e              LDR      r0,|L12.172|
000072  6b00              LDR      r0,[r0,#0x30]  ; pwm_init
000074  4428              ADD      r0,r0,r5
000076  1d09              ADDS     r1,r1,#4
000078  6008              STR      r0,[r1,#0]
;;;77     				HIP_5_OUT = pwm_init[8] + pwm_tmp2;	   //5-1-8  	   
00007a  480c              LDR      r0,|L12.172|
00007c  6a00              LDR      r0,[r0,#0x20]  ; pwm_init
00007e  4428              ADD      r0,r0,r5
000080  490e              LDR      r1,|L12.188|
000082  6008              STR      r0,[r1,#0]
;;;78     				HIP_6_OUT = pwm_init[4] + pwm_tmp2;	   //6-1-4  	   
000084  4809              LDR      r0,|L12.172|
000086  6900              LDR      r0,[r0,#0x10]  ; pwm_init
000088  4428              ADD      r0,r0,r5
00008a  1d09              ADDS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;79     						 
;;;80     				pwm_tmp += ACTION_SPEED;	
00008e  3408              ADDS     r4,r4,#8
;;;81     				pwm_tmp2 += SHRINK_SPEED;	
000090  1d2d              ADDS     r5,r5,#4
                  |L12.146|
000092  2cc8              CMP      r4,#0xc8              ;62
000094  ddb9              BLE      |L12.10|
;;;82     			}
;;;83     			OSTimeDlyHMSM(0,0,0,100,OS_OPT_TIME_DLY, &err);
000096  a802              ADD      r0,sp,#8
000098  2100              MOVS     r1,#0
00009a  2364              MOVS     r3,#0x64
00009c  460a              MOV      r2,r1
00009e  e9cd1000          STRD     r1,r0,[sp,#0]
0000a2  4608              MOV      r0,r1
0000a4  f7fffffe          BL       OSTimeDlyHMSM
;;;84     //			Close_All_TIM();		//close all timer
;;;85     }
0000a8  bdfe              POP      {r1-r7,pc}
;;;86     //
                          ENDP

0000aa  0000              DCW      0x0000
                  |L12.172|
                          DCD      pwm_init
                  |L12.176|
                          DCD      0x40010000
                  |L12.180|
                          DCD      0x40014000
                  |L12.184|
                          DCD      0x40000c34
                  |L12.188|
                          DCD      0x4000083c

                          AREA ||i.Stamp||, CODE, READONLY, ALIGN=1

                  Stamp PROC
;;;336    /*跺脚动作*/
;;;337    void Stamp(u8 Com_Num,u8 * Input_num)
000000  b570              PUSH     {r4-r6,lr}
;;;338    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;339    	Pace_135_Motor2(0,150,STAMP_DELAY);		//UP
000006  2203              MOVS     r2,#3
000008  2196              MOVS     r1,#0x96
00000a  2000              MOVS     r0,#0
00000c  f7fffffe          BL       Pace_135_Motor2
;;;340    	while(Com_Num == *Input_num)
000010  e015              B        |L13.62|
                  |L13.18|
;;;341    	{
;;;342    	   	Pace_135_Motor2(150,-150,STAMP_DELAY);	//DOWM
000012  2203              MOVS     r2,#3
000014  f06f0195          MVN      r1,#0x95
000018  2096              MOVS     r0,#0x96
00001a  f7fffffe          BL       Pace_135_Motor2
;;;343    		  Pace_246_Motor2(0,150,STAMP_DELAY);	//UP
00001e  2203              MOVS     r2,#3
000020  2196              MOVS     r1,#0x96
000022  2000              MOVS     r0,#0
000024  f7fffffe          BL       Pace_246_Motor2
;;;344    		  Pace_246_Motor2(150,-150,STAMP_DELAY);	//DOWM
000028  2203              MOVS     r2,#3
00002a  f06f0195          MVN      r1,#0x95
00002e  2096              MOVS     r0,#0x96
000030  f7fffffe          BL       Pace_246_Motor2
;;;345    		  Pace_135_Motor2(0,150,STAMP_DELAY);	//UP
000034  2203              MOVS     r2,#3
000036  2196              MOVS     r1,#0x96
000038  2000              MOVS     r0,#0
00003a  f7fffffe          BL       Pace_135_Motor2
                  |L13.62|
00003e  7820              LDRB     r0,[r4,#0]            ;340
000040  42a8              CMP      r0,r5                 ;340
000042  d0e6              BEQ      |L13.18|
;;;346    	}
;;;347    	Pace_135_Motor2(150,-150,STAMP_DELAY);	//DOWM
000044  2203              MOVS     r2,#3
000046  f06f0195          MVN      r1,#0x95
00004a  2096              MOVS     r0,#0x96
00004c  f7fffffe          BL       Pace_135_Motor2
;;;348    }
000050  bd70              POP      {r4-r6,pc}
;;;349    //
                          ENDP


                          AREA ||i.Stand_Up||, CODE, READONLY, ALIGN=2

                  Stand_Up PROC
;;;88     //
;;;89     void Stand_Up(int delay_time)
000000  b5fe              PUSH     {r1-r7,lr}
;;;90     {
000002  4606              MOV      r6,r0
;;;91     		int pwm_tmp = 0;
000004  2400              MOVS     r4,#0
;;;92     		int pwm_tmp2 = 0;
000006  2500              MOVS     r5,#0
;;;93     	  OS_ERR       err;
;;;94     //		Open_All_TIM();			//Open all timer
;;;95     	  /*设置所有腿的Ankle关节*/
;;;96     		ANKLE_2_OUT = pwm_init[2];	 //2-3-2
000008  4838              LDR      r0,|L14.236|
00000a  6880              LDR      r0,[r0,#8]  ; pwm_init
00000c  4938              LDR      r1,|L14.240|
00000e  6008              STR      r0,[r1,#0]
;;;97     		ANKLE_4_OUT = pwm_init[18];	 //4-3-18
000010  4836              LDR      r0,|L14.236|
000012  6c80              LDR      r0,[r0,#0x48]  ; pwm_init
000014  4936              LDR      r1,|L14.240|
000016  3108              ADDS     r1,r1,#8
000018  6008              STR      r0,[r1,#0]
;;;98     		ANKLE_6_OUT = pwm_init[23];	 //6-3-23  	   
00001a  4834              LDR      r0,|L14.236|
00001c  6dc0              LDR      r0,[r0,#0x5c]  ; pwm_init
00001e  4935              LDR      r1,|L14.244|
000020  6008              STR      r0,[r1,#0]
;;;99     		ANKLE_1_OUT = pwm_init[19];	 //1-3-19
000022  4832              LDR      r0,|L14.236|
000024  6cc0              LDR      r0,[r0,#0x4c]  ; pwm_init
000026  4932              LDR      r1,|L14.240|
000028  1f09              SUBS     r1,r1,#4
00002a  6008              STR      r0,[r1,#0]
;;;100    		ANKLE_3_OUT = pwm_init[16];	 //3-3-16  	   
00002c  482f              LDR      r0,|L14.236|
00002e  6c00              LDR      r0,[r0,#0x40]  ; pwm_init
000030  492f              LDR      r1,|L14.240|
000032  1d09              ADDS     r1,r1,#4
000034  6008              STR      r0,[r1,#0]
;;;101    	  ANKLE_5_OUT = pwm_init[22];	 //5-3-22  	   
000036  482d              LDR      r0,|L14.236|
000038  6d80              LDR      r0,[r0,#0x58]  ; pwm_init
00003a  492e              LDR      r1,|L14.244|
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;102    		for (;pwm_tmp<=STAND_HIGHT;)				 //150 efect the height of stand
000040  e051              B        |L14.230|
                  |L14.66|
;;;103    		{
;;;104    				OSTimeDlyHMSM(0,0,0,delay_time,OS_OPT_TIME_DLY, &err);
000042  a802              ADD      r0,sp,#8
000044  2100              MOVS     r1,#0
000046  4633              MOV      r3,r6
000048  460a              MOV      r2,r1
00004a  e9cd1000          STRD     r1,r0,[sp,#0]
00004e  4608              MOV      r0,r1
000050  f7fffffe          BL       OSTimeDlyHMSM
;;;105    				/*设置所有退的Knee关节*/
;;;106    				KNEE_3_OUT = pwm_init[15] - STAND_HIGHT + pwm_tmp;	 //3-2-15	   
000054  4825              LDR      r0,|L14.236|
000056  6bc0              LDR      r0,[r0,#0x3c]  ; pwm_init
000058  38c8              SUBS     r0,r0,#0xc8
00005a  4420              ADD      r0,r0,r4
00005c  4926              LDR      r1,|L14.248|
00005e  6348              STR      r0,[r1,#0x34]
;;;107    				KNEE_1_OUT = pwm_init[20] - STAND_HIGHT + pwm_tmp;	 //1-2-20
000060  4822              LDR      r0,|L14.236|
000062  6d00              LDR      r0,[r0,#0x50]  ; pwm_init
000064  38c8              SUBS     r0,r0,#0xc8
000066  4420              ADD      r0,r0,r4
000068  4924              LDR      r1,|L14.252|
00006a  63c8              STR      r0,[r1,#0x3c]
;;;108    				KNEE_2_OUT = pwm_init[6]  - STAND_HIGHT + pwm_tmp;	 //2-2-6	   	   
00006c  481f              LDR      r0,|L14.236|
00006e  6980              LDR      r0,[r0,#0x18]  ; pwm_init
000070  38c8              SUBS     r0,r0,#0xc8
000072  4420              ADD      r0,r0,r4
000074  6408              STR      r0,[r1,#0x40]
;;;109    				KNEE_4_OUT = pwm_init[7]  + STAND_HIGHT - pwm_tmp;	 //4-2-7	
000076  481d              LDR      r0,|L14.236|
000078  69c0              LDR      r0,[r0,#0x1c]  ; pwm_init
00007a  30c8              ADDS     r0,r0,#0xc8
00007c  1b00              SUBS     r0,r0,r4
00007e  491e              LDR      r1,|L14.248|
000080  6388              STR      r0,[r1,#0x38]
;;;110    				KNEE_6_OUT = pwm_init[24] + STAND_HIGHT - pwm_tmp;   //6-2-24 
000082  481a              LDR      r0,|L14.236|
000084  6e00              LDR      r0,[r0,#0x60]  ; pwm_init
000086  30c8              ADDS     r0,r0,#0xc8
000088  1b00              SUBS     r0,r0,r4
00008a  491c              LDR      r1,|L14.252|
00008c  6388              STR      r0,[r1,#0x38]
;;;111    				KNEE_5_OUT = pwm_init[21] + STAND_HIGHT - pwm_tmp;	 //5-2-21
00008e  4817              LDR      r0,|L14.236|
000090  6d40              LDR      r0,[r0,#0x54]  ; pwm_init
000092  30c8              ADDS     r0,r0,#0xc8
000094  1b00              SUBS     r0,r0,r4
000096  6348              STR      r0,[r1,#0x34]
;;;112    				
;;;113    				/*设置所有腿的Hip关节*/
;;;114    				HIP_1_OUT = pwm_init[1] - SHRINK_DEGREE + pwm_tmp2;	 //1-1-1  	   
000098  4814              LDR      r0,|L14.236|
00009a  6840              LDR      r0,[r0,#4]  ; pwm_init
00009c  3878              SUBS     r0,r0,#0x78
00009e  4428              ADD      r0,r0,r5
0000a0  4917              LDR      r1,|L14.256|
0000a2  6008              STR      r0,[r1,#0]
;;;115    				HIP_2_OUT = pwm_init[5] - SHRINK_DEGREE + pwm_tmp2;	 //2-1-5  	   
0000a4  4811              LDR      r0,|L14.236|
0000a6  6940              LDR      r0,[r0,#0x14]  ; pwm_init
0000a8  3878              SUBS     r0,r0,#0x78
0000aa  4428              ADD      r0,r0,r5
0000ac  1d09              ADDS     r1,r1,#4
0000ae  6008              STR      r0,[r1,#0]
;;;116    				HIP_3_OUT = pwm_init[9] - SHRINK_DEGREE + pwm_tmp2;	 //3-1-9  
0000b0  480e              LDR      r0,|L14.236|
0000b2  6a40              LDR      r0,[r0,#0x24]  ; pwm_init
0000b4  3878              SUBS     r0,r0,#0x78
0000b6  4428              ADD      r0,r0,r5
0000b8  1d09              ADDS     r1,r1,#4
0000ba  6008              STR      r0,[r1,#0]
;;;117    				HIP_4_OUT = pwm_init[12] + SHRINK_DEGREE - pwm_tmp2; //4-1-12  	   
0000bc  480b              LDR      r0,|L14.236|
0000be  6b00              LDR      r0,[r0,#0x30]  ; pwm_init
0000c0  3078              ADDS     r0,r0,#0x78
0000c2  1b40              SUBS     r0,r0,r5
0000c4  1d09              ADDS     r1,r1,#4
0000c6  6008              STR      r0,[r1,#0]
;;;118    				HIP_5_OUT = pwm_init[8]  + SHRINK_DEGREE - pwm_tmp2; //5-1-8  	   
0000c8  4808              LDR      r0,|L14.236|
0000ca  6a00              LDR      r0,[r0,#0x20]  ; pwm_init
0000cc  3078              ADDS     r0,r0,#0x78
0000ce  1b40              SUBS     r0,r0,r5
0000d0  4908              LDR      r1,|L14.244|
0000d2  1d09              ADDS     r1,r1,#4
0000d4  6008              STR      r0,[r1,#0]
;;;119    				HIP_6_OUT = pwm_init[4]  + SHRINK_DEGREE - pwm_tmp2; //6-1-4  	   
0000d6  4805              LDR      r0,|L14.236|
0000d8  6900              LDR      r0,[r0,#0x10]  ; pwm_init
0000da  3078              ADDS     r0,r0,#0x78
0000dc  1b40              SUBS     r0,r0,r5
0000de  1d09              ADDS     r1,r1,#4
0000e0  6008              STR      r0,[r1,#0]
;;;120    				
;;;121    				pwm_tmp += ACTION_SPEED;	
0000e2  3408              ADDS     r4,r4,#8
;;;122    				pwm_tmp2 += SHRINK_SPEED;	
0000e4  1d2d              ADDS     r5,r5,#4
                  |L14.230|
0000e6  2cc8              CMP      r4,#0xc8              ;102
0000e8  ddab              BLE      |L14.66|
;;;123    		}
;;;124    }
0000ea  bdfe              POP      {r1-r7,pc}
;;;125    //
                          ENDP

                  |L14.236|
                          DCD      pwm_init
                  |L14.240|
                          DCD      0x40000438
                  |L14.244|
                          DCD      0x40000838
                  |L14.248|
                          DCD      0x40014000
                  |L14.252|
                          DCD      0x40010000
                  |L14.256|
                          DCD      0x40000c34

                          AREA ||i.Turn||, CODE, READONLY, ALIGN=1

                  Turn PROC
;;;351    //
;;;352    void Turn(u8 Com_Num,u8 * Input_num)
000000  b570              PUSH     {r4-r6,lr}
;;;353    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;354    	while(Com_Num == *Input_num)
000006  e027              B        |L15.88|
                  |L15.8|
;;;355    	{
;;;356    		Pace_135_246_Motor3(0,0,70,TURN_DELAY);     //turn body left
000008  2303              MOVS     r3,#3
00000a  2246              MOVS     r2,#0x46
00000c  2100              MOVS     r1,#0
00000e  4608              MOV      r0,r1
000010  f7fffffe          BL       Pace_135_246_Motor3
;;;357    
;;;358    		Pace_246_Motor2(0,100,TURN_DELAY);			  //UP
000014  2203              MOVS     r2,#3
000016  2164              MOVS     r1,#0x64
000018  2000              MOVS     r0,#0
00001a  f7fffffe          BL       Pace_246_Motor2
;;;359    		Pace_246_Motor3_Different(70,-70,TURN_DELAY);	  //2,4,6 leg return
00001e  2203              MOVS     r2,#3
000020  f06f0145          MVN      r1,#0x45
000024  2046              MOVS     r0,#0x46
000026  f7fffffe          BL       Pace_246_Motor3_Different
;;;360    		Pace_246_Motor2(100,-100,TURN_DELAY);		      //DOWM
00002a  2203              MOVS     r2,#3
00002c  f06f0163          MVN      r1,#0x63
000030  2064              MOVS     r0,#0x64
000032  f7fffffe          BL       Pace_246_Motor2
;;;361    		
;;;362    		Pace_135_Motor2(0,100,TURN_DELAY);			  //UP
000036  2203              MOVS     r2,#3
000038  2164              MOVS     r1,#0x64
00003a  2000              MOVS     r0,#0
00003c  f7fffffe          BL       Pace_135_Motor2
;;;363    		Pace_135_Motor3_Different(70,-70,TURN_DELAY);	  //1,3,5 leg return
000040  2203              MOVS     r2,#3
000042  f06f0145          MVN      r1,#0x45
000046  2046              MOVS     r0,#0x46
000048  f7fffffe          BL       Pace_135_Motor3_Different
;;;364    		Pace_135_Motor2(100,-100,TURN_DELAY);		      //DOWM
00004c  2203              MOVS     r2,#3
00004e  f06f0163          MVN      r1,#0x63
000052  2064              MOVS     r0,#0x64
000054  f7fffffe          BL       Pace_135_Motor2
                  |L15.88|
000058  7820              LDRB     r0,[r4,#0]            ;354
00005a  42a8              CMP      r0,r5                 ;354
00005c  d0d4              BEQ      |L15.8|
;;;365    		
;;;366    	}
;;;367    }
00005e  bd70              POP      {r4-r6,pc}
;;;368    /***************************** 阿波罗科技 www.apollorobot.com (END OF FILE) *********************************/
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  pwm_init
                          DCD      0x00000000
                          DCD      0x0000024e
                          DCD      0x00000217
                          DCD      0x00000000
                          DCD      0x000001db
                          DCD      0x0000025d
                          DCD      0x00000316
                          DCD      0x00000163
                          DCD      0x00000212
                          DCD      0x0000025d
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x000001db
                          DCD      0x00000000
                          DCD      0x00000000
                          DCD      0x00000319
                          DCD      0x0000023f
                          DCD      0x00000000
                          DCD      0x00000217
                          DCD      0x00000217
                          DCD      0x00000319
                          DCD      0x00000177
                          DCD      0x0000023f
                          DCD      0x0000023f
                          DCD      0x00000181
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\control\\control.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_control_c_d0f80c4c____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_control_c_d0f80c4c____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_control_c_d0f80c4c____REVSH|
#line 144
|__asm___9_control_c_d0f80c4c____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_control_c_d0f80c4c____RRX|
#line 300
|__asm___9_control_c_d0f80c4c____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
