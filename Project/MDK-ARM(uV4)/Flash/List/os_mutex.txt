; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_mutex.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_mutex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_mutex.crf ..\..\uCOS-III\uCOS-III\Source\os_mutex.c]
                          THUMB

                          AREA ||i.OSMutexCreate||, CODE, READONLY, ALIGN=2

                  OSMutexCreate PROC
;;;66     
;;;67     void  OSMutexCreate (OS_MUTEX  *p_mutex,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;68                          CPU_CHAR  *p_name,
;;;69                          OS_ERR    *p_err)
;;;70     {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;71         CPU_SR_ALLOC();
00000a  2700              MOVS     r7,#0
;;;72     
;;;73     
;;;74     
;;;75     #ifdef OS_SAFETY_CRITICAL
;;;76         if (p_err == (OS_ERR *)0) {
;;;77             OS_SAFETY_CRITICAL_EXCEPTION();
;;;78             return;
;;;79         }
;;;80     #endif
;;;81     
;;;82     #ifdef OS_SAFETY_CRITICAL_IEC61508
;;;83         if (OSSafetyCriticalStartFlag == DEF_TRUE) {
;;;84            *p_err = OS_ERR_ILLEGAL_CREATE_RUN_TIME;
;;;85             return;
;;;86         }
;;;87     #endif
;;;88     
;;;89     #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;90         if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
00000c  481b              LDR      r0,|L1.124|
00000e  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000010  2800              CMP      r0,#0
000012  dd04              BLE      |L1.30|
;;;91            *p_err = OS_ERR_CREATE_ISR;
000014  f64260e1          MOV      r0,#0x2ee1
000018  8028              STRH     r0,[r5,#0]
                  |L1.26|
;;;92             return;
;;;93         }
;;;94     #endif
;;;95     
;;;96     #if OS_CFG_ARG_CHK_EN > 0u
;;;97         if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
;;;98            *p_err = OS_ERR_OBJ_PTR_NULL;
;;;99             return;
;;;100        }
;;;101    #endif
;;;102    
;;;103        OS_CRITICAL_ENTER();
;;;104        p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
;;;105        p_mutex->NamePtr           =  p_name;
;;;106        p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
;;;107        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
;;;108        p_mutex->TS                = (CPU_TS        )0;
;;;109        p_mutex->OwnerOriginalPrio =  OS_CFG_PRIO_MAX;
;;;110        OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
;;;111    
;;;112    #if OS_CFG_DBG_EN > 0u
;;;113        OS_MutexDbgListAdd(p_mutex);
;;;114    #endif
;;;115        OSMutexQty++;
;;;116    
;;;117        OS_CRITICAL_EXIT_NO_SCHED();
;;;118       *p_err = OS_ERR_NONE;
;;;119    }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L1.30|
00001e  b91c              CBNZ     r4,|L1.40|
000020  f64550c3          MOV      r0,#0x5dc3            ;98
000024  8028              STRH     r0,[r5,#0]            ;98
000026  e7f8              B        |L1.26|
                  |L1.40|
000028  bf00              NOP                            ;103
00002a  bf00              NOP                            ;103
00002c  f7fffffe          BL       CPU_SR_Save
000030  4607              MOV      r7,r0                 ;103
000032  bf00              NOP                            ;103
000034  bf00              NOP                            ;103
000036  4812              LDR      r0,|L1.128|
000038  6020              STR      r0,[r4,#0]            ;104
00003a  6066              STR      r6,[r4,#4]            ;105
00003c  2000              MOVS     r0,#0                 ;106
00003e  6220              STR      r0,[r4,#0x20]         ;106
000040  f8840025          STRB     r0,[r4,#0x25]         ;107
000044  62a0              STR      r0,[r4,#0x28]         ;108
000046  2040              MOVS     r0,#0x40              ;109
000048  f8840024          STRB     r0,[r4,#0x24]         ;109
00004c  f1040008          ADD      r0,r4,#8              ;110
000050  f7fffffe          BL       OS_PendListInit
000054  4620              MOV      r0,r4                 ;113
000056  f7fffffe          BL       OS_MutexDbgListAdd
00005a  480a              LDR      r0,|L1.132|
00005c  8800              LDRH     r0,[r0,#0]            ;115  ; OSMutexQty
00005e  1c40              ADDS     r0,r0,#1              ;115
000060  4908              LDR      r1,|L1.132|
000062  8008              STRH     r0,[r1,#0]            ;115
000064  bf00              NOP                            ;117
000066  bf00              NOP                            ;117
000068  4638              MOV      r0,r7                 ;117
00006a  f7fffffe          BL       CPU_SR_Restore
00006e  bf00              NOP                            ;117
000070  bf00              NOP                            ;117
000072  2000              MOVS     r0,#0                 ;118
000074  8028              STRH     r0,[r5,#0]            ;118
000076  bf00              NOP      
000078  e7cf              B        |L1.26|
;;;120    
                          ENDP

00007a  0000              DCW      0x0000
                  |L1.124|
                          DCD      OSIntNestingCtr
                  |L1.128|
                          DCD      0x5854554d
                  |L1.132|
                          DCD      OSMutexQty

                          AREA ||i.OSMutexDel||, CODE, READONLY, ALIGN=2

                  OSMutexDel PROC
;;;159    #if OS_CFG_MUTEX_DEL_EN > 0u
;;;160    OS_OBJ_QTY  OSMutexDel (OS_MUTEX  *p_mutex,
000000  e92d4ffe          PUSH     {r1-r11,lr}
;;;161                            OS_OPT     opt,
;;;162                            OS_ERR    *p_err)
;;;163    {
000004  4605              MOV      r5,r0
000006  4689              MOV      r9,r1
000008  4614              MOV      r4,r2
;;;164        OS_OBJ_QTY     cnt;
;;;165        OS_OBJ_QTY     nbr_tasks;
;;;166        OS_PEND_DATA  *p_pend_data;
;;;167        OS_PEND_LIST  *p_pend_list;
;;;168        OS_TCB        *p_tcb;
;;;169        OS_TCB        *p_tcb_owner;
;;;170        CPU_TS         ts;
;;;171        CPU_SR_ALLOC();
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;172    
;;;173    
;;;174    
;;;175    #ifdef OS_SAFETY_CRITICAL
;;;176        if (p_err == (OS_ERR *)0) {
;;;177            OS_SAFETY_CRITICAL_EXCEPTION();
;;;178            return ((OS_OBJ_QTY)0);
;;;179        }
;;;180    #endif
;;;181    
;;;182    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;183        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {                  /* Not allowed to delete a mutex from an ISR          */
00000e  486b              LDR      r0,|L2.444|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L2.34|
;;;184           *p_err = OS_ERR_DEL_ISR;
000016  f24320c9          MOV      r0,#0x32c9
00001a  8020              STRH     r0,[r4,#0]
;;;185            return ((OS_OBJ_QTY)0);
00001c  2000              MOVS     r0,#0
                  |L2.30|
;;;186        }
;;;187    #endif
;;;188    
;;;189    #if OS_CFG_ARG_CHK_EN > 0u
;;;190        if (p_mutex == (OS_MUTEX *)0) {                             /* Validate 'p_mutex'                                 */
;;;191           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;192            return ((OS_OBJ_QTY)0);
;;;193        }
;;;194        switch (opt) {                                              /* Validate 'opt'                                     */
;;;195            case OS_OPT_DEL_NO_PEND:
;;;196            case OS_OPT_DEL_ALWAYS:
;;;197                 break;
;;;198    
;;;199            default:
;;;200                *p_err =  OS_ERR_OPT_INVALID;
;;;201                 return ((OS_OBJ_QTY)0);
;;;202        }
;;;203    #endif
;;;204    
;;;205    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;206        if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {                   /* Make sure mutex was created                        */
;;;207           *p_err = OS_ERR_OBJ_TYPE;
;;;208            return ((OS_OBJ_QTY)0);
;;;209        }
;;;210    #endif
;;;211    
;;;212        OS_CRITICAL_ENTER();
;;;213        p_pend_list = &p_mutex->PendList;
;;;214        cnt         = p_pend_list->NbrEntries;
;;;215        nbr_tasks   = cnt;
;;;216        switch (opt) {
;;;217            case OS_OPT_DEL_NO_PEND:                                /* Delete mutex only if no task waiting               */
;;;218                 if (nbr_tasks == (OS_OBJ_QTY)0) {
;;;219    #if OS_CFG_DBG_EN > 0u
;;;220                     OS_MutexDbgListRemove(p_mutex);
;;;221    #endif
;;;222                     OSMutexQty--;
;;;223                     OS_MutexClr(p_mutex);
;;;224                     OS_CRITICAL_EXIT();
;;;225                    *p_err = OS_ERR_NONE;
;;;226                 } else {
;;;227                     OS_CRITICAL_EXIT();
;;;228                    *p_err = OS_ERR_TASK_WAITING;
;;;229                 }
;;;230                 break;
;;;231    
;;;232            case OS_OPT_DEL_ALWAYS:                                            /* Always delete the mutex                 */
;;;233                 p_tcb_owner = p_mutex->OwnerTCBPtr;                           /* Did we had to change the prio of owner? */
;;;234                 if ((p_tcb_owner       != (OS_TCB *)0) &&
;;;235                     (p_tcb_owner->Prio !=  p_mutex->OwnerOriginalPrio)) {
;;;236                     switch (p_tcb_owner->TaskState) {                         /* yes                                     */
;;;237                         case OS_TASK_STATE_RDY:
;;;238                              OS_RdyListRemove(p_tcb_owner);
;;;239                              p_tcb_owner->Prio = p_mutex->OwnerOriginalPrio;  /* Lower owner's prio back                 */
;;;240                              OS_PrioInsert(p_tcb_owner->Prio);
;;;241                              OS_RdyListInsertTail(p_tcb_owner);               /* Insert owner in ready list at new prio  */
;;;242                              break;
;;;243    
;;;244                         case OS_TASK_STATE_DLY:
;;;245                         case OS_TASK_STATE_SUSPENDED:
;;;246                         case OS_TASK_STATE_DLY_SUSPENDED:
;;;247                              p_tcb_owner->Prio = p_mutex->OwnerOriginalPrio;  /* Not in any pend list, change the prio   */
;;;248                              break;
;;;249    
;;;250                         case OS_TASK_STATE_PEND:
;;;251                         case OS_TASK_STATE_PEND_TIMEOUT:
;;;252                         case OS_TASK_STATE_PEND_SUSPENDED:
;;;253                         case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
;;;254                              OS_PendListChangePrio(p_tcb_owner,               /* Owner is pending on another object      */
;;;255                                                    p_mutex->OwnerOriginalPrio);
;;;256                              break;
;;;257    
;;;258                         default:
;;;259                              OS_CRITICAL_EXIT();
;;;260                             *p_err = OS_ERR_STATE_INVALID;
;;;261                              return ((OS_OBJ_QTY)0);
;;;262                     }
;;;263                 }
;;;264    
;;;265                 ts = OS_TS_GET();                                             /* Get timestamp                           */
;;;266                 while (cnt > 0u) {                                            /* Remove all tasks from the pend list     */
;;;267                     p_pend_data = p_pend_list->HeadPtr;
;;;268                     p_tcb       = p_pend_data->TCBPtr;
;;;269                     OS_PendObjDel((OS_PEND_OBJ *)((void *)p_mutex),
;;;270                                   p_tcb,
;;;271                                   ts);
;;;272                     cnt--;
;;;273                 }
;;;274    #if OS_CFG_DBG_EN > 0u
;;;275                 OS_MutexDbgListRemove(p_mutex);
;;;276    #endif
;;;277                 OSMutexQty--;
;;;278                 OS_MutexClr(p_mutex);
;;;279                 OS_CRITICAL_EXIT_NO_SCHED();
;;;280                 OSSched();                                                    /* Find highest priority task ready to run */
;;;281                *p_err = OS_ERR_NONE;
;;;282                 break;
;;;283    
;;;284            default:
;;;285                 OS_CRITICAL_EXIT();
;;;286                *p_err = OS_ERR_OPT_INVALID;
;;;287                 break;
;;;288        }
;;;289        return (nbr_tasks);
;;;290    }
00001e  e8bd8ffe          POP      {r1-r11,pc}
                  |L2.34|
000022  b925              CBNZ     r5,|L2.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;191
000028  8020              STRH     r0,[r4,#0]            ;191
00002a  2000              MOVS     r0,#0                 ;192
00002c  e7f7              B        |L2.30|
                  |L2.46|
00002e  f1b90f00          CMP      r9,#0                 ;194
000032  d003              BEQ      |L2.60|
000034  f1b90f01          CMP      r9,#1                 ;194
000038  d102              BNE      |L2.64|
00003a  e000              B        |L2.62|
                  |L2.60|
00003c  bf00              NOP                            ;196
                  |L2.62|
00003e  e004              B        |L2.74|
                  |L2.64|
000040  f6456025          MOV      r0,#0x5e25            ;200
000044  8020              STRH     r0,[r4,#0]            ;200
000046  2000              MOVS     r0,#0                 ;201
000048  e7e9              B        |L2.30|
                  |L2.74|
00004a  bf00              NOP                            ;197
00004c  495c              LDR      r1,|L2.448|
00004e  6828              LDR      r0,[r5,#0]            ;206
000050  4288              CMP      r0,r1                 ;206
000052  d004              BEQ      |L2.94|
000054  f64550c4          MOV      r0,#0x5dc4            ;207
000058  8020              STRH     r0,[r4,#0]            ;207
00005a  2000              MOVS     r0,#0                 ;208
00005c  e7df              B        |L2.30|
                  |L2.94|
00005e  bf00              NOP                            ;212
000060  bf00              NOP                            ;212
000062  f7fffffe          BL       CPU_SR_Save
000066  9000              STR      r0,[sp,#0]            ;212
000068  bf00              NOP                            ;212
00006a  bf00              NOP                            ;212
00006c  f1050a08          ADD      r10,r5,#8             ;213
000070  f8ba7008          LDRH     r7,[r10,#8]           ;214
000074  46b8              MOV      r8,r7                 ;215
000076  f1b90f00          CMP      r9,#0                 ;216
00007a  d003              BEQ      |L2.132|
00007c  f1b90f01          CMP      r9,#1                 ;216
000080  d17e              BNE      |L2.384|
000082  e022              B        |L2.202|
                  |L2.132|
000084  f1b80f00          CMP      r8,#0                 ;218
000088  d114              BNE      |L2.180|
00008a  4628              MOV      r0,r5                 ;220
00008c  f7fffffe          BL       OS_MutexDbgListRemove
000090  484c              LDR      r0,|L2.452|
000092  8800              LDRH     r0,[r0,#0]            ;222  ; OSMutexQty
000094  1e40              SUBS     r0,r0,#1              ;222
000096  494b              LDR      r1,|L2.452|
000098  8008              STRH     r0,[r1,#0]            ;222
00009a  4628              MOV      r0,r5                 ;223
00009c  f7fffffe          BL       OS_MutexClr
0000a0  bf00              NOP                            ;224
0000a2  bf00              NOP                            ;224
0000a4  9800              LDR      r0,[sp,#0]            ;224
0000a6  f7fffffe          BL       CPU_SR_Restore
0000aa  bf00              NOP                            ;224
0000ac  bf00              NOP                            ;224
0000ae  2000              MOVS     r0,#0                 ;225
0000b0  8020              STRH     r0,[r4,#0]            ;225
0000b2  e009              B        |L2.200|
                  |L2.180|
0000b4  bf00              NOP                            ;227
0000b6  bf00              NOP                            ;227
0000b8  9800              LDR      r0,[sp,#0]            ;227
0000ba  f7fffffe          BL       CPU_SR_Restore
0000be  bf00              NOP                            ;227
0000c0  bf00              NOP                            ;227
0000c2  f247105f          MOV      r0,#0x715f            ;228
0000c6  8020              STRH     r0,[r4,#0]            ;228
                  |L2.200|
0000c8  e074              B        |L2.436|
                  |L2.202|
0000ca  6a2e              LDR      r6,[r5,#0x20]         ;233
0000cc  b3d6              CBZ      r6,|L2.324|
0000ce  f8960037          LDRB     r0,[r6,#0x37]         ;235
0000d2  f8951024          LDRB     r1,[r5,#0x24]         ;235
0000d6  4288              CMP      r0,r1                 ;235
0000d8  d036              BEQ      |L2.328|
0000da  f8960036          LDRB     r0,[r6,#0x36]         ;236
0000de  2808              CMP      r0,#8                 ;236
0000e0  d224              BCS      |L2.300|
0000e2  e8dff000          TBB      [pc,r0]               ;236
0000e6  0413              DCB      0x04,0x13
0000e8  1a1b1415          DCB      0x1a,0x1b,0x14,0x15
0000ec  1c1d              DCB      0x1c,0x1d
0000ee  4630              MOV      r0,r6                 ;238
0000f0  f7fffffe          BL       OS_RdyListRemove
0000f4  f8950024          LDRB     r0,[r5,#0x24]         ;239
0000f8  f8860037          STRB     r0,[r6,#0x37]         ;239
0000fc  f8960037          LDRB     r0,[r6,#0x37]         ;240
000100  f7fffffe          BL       OS_PrioInsert
000104  4630              MOV      r0,r6                 ;241
000106  f7fffffe          BL       OS_RdyListInsertTail
00010a  e01c              B        |L2.326|
00010c  bf00              NOP                            ;245
00010e  bf00              NOP                            ;246
000110  f8950024          LDRB     r0,[r5,#0x24]         ;247
000114  f8860037          STRB     r0,[r6,#0x37]         ;247
000118  e015              B        |L2.326|
00011a  bf00              NOP                            ;251
00011c  bf00              NOP                            ;252
00011e  bf00              NOP                            ;253
000120  f8951024          LDRB     r1,[r5,#0x24]         ;254
000124  4630              MOV      r0,r6                 ;254
000126  f7fffffe          BL       OS_PendListChangePrio
00012a  e00c              B        |L2.326|
                  |L2.300|
00012c  bf00              NOP                            ;259
00012e  bf00              NOP                            ;259
000130  9800              LDR      r0,[sp,#0]            ;259
000132  f7fffffe          BL       CPU_SR_Restore
000136  bf00              NOP                            ;259
000138  bf00              NOP                            ;259
00013a  f646602d          MOV      r0,#0x6e2d            ;260
00013e  8020              STRH     r0,[r4,#0]            ;260
000140  2000              MOVS     r0,#0                 ;261
000142  e76c              B        |L2.30|
                  |L2.324|
000144  e000              B        |L2.328|
                  |L2.326|
000146  bf00              NOP                            ;242
                  |L2.328|
000148  f7fffffe          BL       CPU_TS_TmrRd
00014c  9001              STR      r0,[sp,#4]            ;265
00014e  e00b              B        |L2.360|
                  |L2.336|
000150  f8dab000          LDR      r11,[r10,#0]          ;267
000154  f8db0008          LDR      r0,[r11,#8]           ;268
000158  9002              STR      r0,[sp,#8]            ;268
00015a  4628              MOV      r0,r5                 ;269
00015c  e9dd2101          LDRD     r2,r1,[sp,#4]         ;269
000160  f7fffffe          BL       OS_PendObjDel
000164  1e78              SUBS     r0,r7,#1              ;272
000166  b287              UXTH     r7,r0                 ;272
                  |L2.360|
000168  2f00              CMP      r7,#0                 ;266
00016a  d1f1              BNE      |L2.336|
00016c  4628              MOV      r0,r5                 ;275
00016e  f7fffffe          BL       OS_MutexDbgListRemove
000172  4814              LDR      r0,|L2.452|
000174  8800              LDRH     r0,[r0,#0]            ;277  ; OSMutexQty
000176  1e40              SUBS     r0,r0,#1              ;277
000178  4912              LDR      r1,|L2.452|
00017a  8008              STRH     r0,[r1,#0]            ;277
00017c  4628              MOV      r0,r5                 ;278
00017e  e000              B        |L2.386|
                  |L2.384|
000180  e00d              B        |L2.414|
                  |L2.386|
000182  f7fffffe          BL       OS_MutexClr
000186  bf00              NOP                            ;279
000188  bf00              NOP                            ;279
00018a  9800              LDR      r0,[sp,#0]            ;279
00018c  f7fffffe          BL       CPU_SR_Restore
000190  bf00              NOP                            ;279
000192  bf00              NOP                            ;279
000194  f7fffffe          BL       OSSched
000198  2000              MOVS     r0,#0                 ;281
00019a  8020              STRH     r0,[r4,#0]            ;281
00019c  e00a              B        |L2.436|
                  |L2.414|
00019e  bf00              NOP                            ;285
0001a0  bf00              NOP                            ;285
0001a2  9800              LDR      r0,[sp,#0]            ;285
0001a4  f7fffffe          BL       CPU_SR_Restore
0001a8  bf00              NOP                            ;285
0001aa  bf00              NOP                            ;285
0001ac  f6456025          MOV      r0,#0x5e25            ;286
0001b0  8020              STRH     r0,[r4,#0]            ;286
0001b2  bf00              NOP                            ;287
                  |L2.436|
0001b4  bf00              NOP                            ;230
0001b6  4640              MOV      r0,r8                 ;289
0001b8  e731              B        |L2.30|
;;;291    #endif
                          ENDP

0001ba  0000              DCW      0x0000
                  |L2.444|
                          DCD      OSIntNestingCtr
                  |L2.448|
                          DCD      0x5854554d
                  |L2.452|
                          DCD      OSMutexQty

                          AREA ||i.OSMutexPend||, CODE, READONLY, ALIGN=2

                  OSMutexPend PROC
;;;338    
;;;339    void  OSMutexPend (OS_MUTEX  *p_mutex,
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;340                       OS_TICK    timeout,
;;;341                       OS_OPT     opt,
;;;342                       CPU_TS    *p_ts,
;;;343                       OS_ERR    *p_err)
;;;344    {
000004  b088              SUB      sp,sp,#0x20
000006  4605              MOV      r5,r0
000008  4689              MOV      r9,r1
00000a  4690              MOV      r8,r2
00000c  461c              MOV      r4,r3
00000e  9e10              LDR      r6,[sp,#0x40]
;;;345        OS_PEND_DATA  pend_data;
;;;346        OS_TCB       *p_tcb;
;;;347        CPU_SR_ALLOC();
000010  f04f0a00          MOV      r10,#0
;;;348    
;;;349    
;;;350    
;;;351    #ifdef OS_SAFETY_CRITICAL
;;;352        if (p_err == (OS_ERR *)0) {
;;;353            OS_SAFETY_CRITICAL_EXCEPTION();
;;;354            return;
;;;355        }
;;;356    #endif
;;;357    
;;;358    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;359        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
000014  488a              LDR      r0,|L3.576|
000016  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000018  2800              CMP      r0,#0
00001a  dd05              BLE      |L3.40|
;;;360           *p_err = OS_ERR_PEND_ISR;
00001c  f24610ae          MOV      r0,#0x61ae
000020  8030              STRH     r0,[r6,#0]
                  |L3.34|
;;;361            return;
;;;362        }
;;;363    #endif
;;;364    
;;;365    #if OS_CFG_ARG_CHK_EN > 0u
;;;366        if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
;;;367           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;368            return;
;;;369        }
;;;370        switch (opt) {                                          /* Validate 'opt'                                         */
;;;371            case OS_OPT_PEND_BLOCKING:
;;;372            case OS_OPT_PEND_NON_BLOCKING:
;;;373                 break;
;;;374    
;;;375            default:
;;;376                *p_err = OS_ERR_OPT_INVALID;
;;;377                 return;
;;;378        }
;;;379    #endif
;;;380    
;;;381    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;382        if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
;;;383           *p_err = OS_ERR_OBJ_TYPE;
;;;384            return;
;;;385        }
;;;386    #endif
;;;387    
;;;388        if (p_ts != (CPU_TS *)0) {
;;;389           *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
;;;390        }
;;;391    
;;;392        CPU_CRITICAL_ENTER();
;;;393        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
;;;394            p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
;;;395            p_mutex->OwnerOriginalPrio =  OSTCBCurPtr->Prio;
;;;396            p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
;;;397            if (p_ts != (CPU_TS *)0) {
;;;398               *p_ts  = p_mutex->TS;
;;;399            }
;;;400            CPU_CRITICAL_EXIT();
;;;401           *p_err = OS_ERR_NONE;
;;;402            return;
;;;403        }
;;;404    
;;;405        if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
;;;406            p_mutex->OwnerNestingCtr++;
;;;407            if (p_ts != (CPU_TS *)0) {
;;;408               *p_ts  = p_mutex->TS;
;;;409            }
;;;410            CPU_CRITICAL_EXIT();
;;;411           *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
;;;412            return;
;;;413        }
;;;414    
;;;415        if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
;;;416            CPU_CRITICAL_EXIT();
;;;417           *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
;;;418            return;
;;;419        } else {
;;;420            if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
;;;421                CPU_CRITICAL_EXIT();
;;;422               *p_err = OS_ERR_SCHED_LOCKED;
;;;423                return;
;;;424            }
;;;425        }
;;;426                                                                /* Lock the scheduler/re-enable interrupts                */
;;;427        OS_CRITICAL_ENTER_CPU_EXIT();
;;;428        p_tcb = p_mutex->OwnerTCBPtr;                           /* Point to the TCB of the Mutex owner                    */
;;;429        if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
;;;430            switch (p_tcb->TaskState) {
;;;431                case OS_TASK_STATE_RDY:
;;;432                     OS_RdyListRemove(p_tcb);                   /* Remove from ready list at current priority             */
;;;433                     p_tcb->Prio = OSTCBCurPtr->Prio;           /* Raise owner's priority                                 */
;;;434                     OS_PrioInsert(p_tcb->Prio);
;;;435                     OS_RdyListInsertHead(p_tcb);               /* Insert in ready list at new priority                   */
;;;436                     break;
;;;437    
;;;438                case OS_TASK_STATE_DLY:
;;;439                case OS_TASK_STATE_DLY_SUSPENDED:
;;;440                case OS_TASK_STATE_SUSPENDED:
;;;441                     p_tcb->Prio = OSTCBCurPtr->Prio;           /* Only need to raise the owner's priority                */
;;;442                     break;
;;;443    
;;;444                case OS_TASK_STATE_PEND:                        /* Change the position of the task in the wait list       */
;;;445                case OS_TASK_STATE_PEND_TIMEOUT:
;;;446                case OS_TASK_STATE_PEND_SUSPENDED:
;;;447                case OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED:
;;;448                     OS_PendListChangePrio(p_tcb,
;;;449                                           OSTCBCurPtr->Prio);
;;;450                     break;
;;;451    
;;;452                default:
;;;453                     OS_CRITICAL_EXIT();
;;;454                    *p_err = OS_ERR_STATE_INVALID;
;;;455                     return;
;;;456            }
;;;457        }
;;;458    
;;;459        OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
;;;460                (OS_PEND_OBJ *)((void *)p_mutex),
;;;461                 OS_TASK_PEND_ON_MUTEX,
;;;462                 timeout);
;;;463    
;;;464        OS_CRITICAL_EXIT_NO_SCHED();
;;;465    
;;;466        OSSched();                                              /* Find the next highest priority task ready to run       */
;;;467    
;;;468        CPU_CRITICAL_ENTER();
;;;469        switch (OSTCBCurPtr->PendStatus) {
;;;470            case OS_STATUS_PEND_OK:                             /* We got the mutex                                       */
;;;471                 if (p_ts != (CPU_TS *)0) {
;;;472                    *p_ts  = OSTCBCurPtr->TS;
;;;473                 }
;;;474                *p_err = OS_ERR_NONE;
;;;475                 break;
;;;476    
;;;477            case OS_STATUS_PEND_ABORT:                          /* Indicate that we aborted                               */
;;;478                 if (p_ts != (CPU_TS *)0) {
;;;479                    *p_ts  = OSTCBCurPtr->TS;
;;;480                 }
;;;481                *p_err = OS_ERR_PEND_ABORT;
;;;482                 break;
;;;483    
;;;484            case OS_STATUS_PEND_TIMEOUT:                        /* Indicate that we didn't get mutex within timeout       */
;;;485                 if (p_ts != (CPU_TS *)0) {
;;;486                    *p_ts  = (CPU_TS  )0;
;;;487                 }
;;;488                *p_err = OS_ERR_TIMEOUT;
;;;489                 break;
;;;490    
;;;491            case OS_STATUS_PEND_DEL:                            /* Indicate that object pended on has been deleted        */
;;;492                 if (p_ts != (CPU_TS *)0) {
;;;493                    *p_ts  = OSTCBCurPtr->TS;
;;;494                 }
;;;495                *p_err = OS_ERR_OBJ_DEL;
;;;496                 break;
;;;497    
;;;498            default:
;;;499                *p_err = OS_ERR_STATUS_INVALID;
;;;500                 break;
;;;501        }
;;;502        CPU_CRITICAL_EXIT();
;;;503    }
000022  b008              ADD      sp,sp,#0x20
000024  e8bd87f0          POP      {r4-r10,pc}
                  |L3.40|
000028  b91d              CBNZ     r5,|L3.50|
00002a  f64550c3          MOV      r0,#0x5dc3            ;367
00002e  8030              STRH     r0,[r6,#0]            ;367
000030  e7f7              B        |L3.34|
                  |L3.50|
000032  f1b80f00          CMP      r8,#0                 ;370
000036  d003              BEQ      |L3.64|
000038  f5b84f00          CMP      r8,#0x8000            ;370
00003c  d102              BNE      |L3.68|
00003e  e000              B        |L3.66|
                  |L3.64|
000040  bf00              NOP                            ;372
                  |L3.66|
000042  e003              B        |L3.76|
                  |L3.68|
000044  f6456025          MOV      r0,#0x5e25            ;376
000048  8030              STRH     r0,[r6,#0]            ;376
00004a  e7ea              B        |L3.34|
                  |L3.76|
00004c  bf00              NOP                            ;373
00004e  497d              LDR      r1,|L3.580|
000050  6828              LDR      r0,[r5,#0]            ;382
000052  4288              CMP      r0,r1                 ;382
000054  d003              BEQ      |L3.94|
000056  f64550c4          MOV      r0,#0x5dc4            ;383
00005a  8030              STRH     r0,[r6,#0]            ;383
00005c  e7e1              B        |L3.34|
                  |L3.94|
00005e  b10c              CBZ      r4,|L3.100|
000060  2000              MOVS     r0,#0                 ;389
000062  6020              STR      r0,[r4,#0]            ;389
                  |L3.100|
000064  bf00              NOP                            ;392
000066  bf00              NOP                            ;392
000068  f7fffffe          BL       CPU_SR_Save
00006c  4682              MOV      r10,r0                ;392
00006e  bf00              NOP                            ;392
000070  bf00              NOP                            ;392
000072  f8950025          LDRB     r0,[r5,#0x25]         ;393
000076  b9c0              CBNZ     r0,|L3.170|
000078  4873              LDR      r0,|L3.584|
00007a  6800              LDR      r0,[r0,#0]            ;394  ; OSTCBCurPtr
00007c  6228              STR      r0,[r5,#0x20]         ;394
00007e  4872              LDR      r0,|L3.584|
000080  6800              LDR      r0,[r0,#0]            ;395  ; OSTCBCurPtr
000082  f8900037          LDRB     r0,[r0,#0x37]         ;395
000086  f8850024          STRB     r0,[r5,#0x24]         ;395
00008a  2001              MOVS     r0,#1                 ;396
00008c  f8850025          STRB     r0,[r5,#0x25]         ;396
000090  b10c              CBZ      r4,|L3.150|
000092  6aa8              LDR      r0,[r5,#0x28]         ;398
000094  6020              STR      r0,[r4,#0]            ;398
                  |L3.150|
000096  bf00              NOP                            ;400
000098  bf00              NOP                            ;400
00009a  4650              MOV      r0,r10                ;400
00009c  f7fffffe          BL       CPU_SR_Restore
0000a0  bf00              NOP                            ;400
0000a2  bf00              NOP                            ;400
0000a4  2000              MOVS     r0,#0                 ;401
0000a6  8030              STRH     r0,[r6,#0]            ;401
0000a8  e7bb              B        |L3.34|
                  |L3.170|
0000aa  4967              LDR      r1,|L3.584|
0000ac  6a28              LDR      r0,[r5,#0x20]         ;405
0000ae  6809              LDR      r1,[r1,#0]            ;405  ; OSTCBCurPtr
0000b0  4288              CMP      r0,r1                 ;405
0000b2  d112              BNE      |L3.218|
0000b4  f8950025          LDRB     r0,[r5,#0x25]         ;406
0000b8  1c40              ADDS     r0,r0,#1              ;406
0000ba  f8850025          STRB     r0,[r5,#0x25]         ;406
0000be  b10c              CBZ      r4,|L3.196|
0000c0  6aa8              LDR      r0,[r5,#0x28]         ;408
0000c2  6020              STR      r0,[r4,#0]            ;408
                  |L3.196|
0000c4  bf00              NOP                            ;410
0000c6  bf00              NOP                            ;410
0000c8  4650              MOV      r0,r10                ;410
0000ca  f7fffffe          BL       CPU_SR_Restore
0000ce  bf00              NOP                            ;410
0000d0  bf00              NOP                            ;410
0000d2  f2457082          MOV      r0,#0x5782            ;411
0000d6  8030              STRH     r0,[r6,#0]            ;411
0000d8  e7a3              B        |L3.34|
                  |L3.218|
0000da  f4084000          AND      r0,r8,#0x8000         ;415
0000de  b150              CBZ      r0,|L3.246|
0000e0  bf00              NOP                            ;416
0000e2  bf00              NOP                            ;416
0000e4  4650              MOV      r0,r10                ;416
0000e6  f7fffffe          BL       CPU_SR_Restore
0000ea  bf00              NOP                            ;416
0000ec  bf00              NOP                            ;416
0000ee  f24610b0          MOV      r0,#0x61b0            ;417
0000f2  8030              STRH     r0,[r6,#0]            ;417
0000f4  e795              B        |L3.34|
                  |L3.246|
0000f6  4855              LDR      r0,|L3.588|
0000f8  7800              LDRB     r0,[r0,#0]            ;420  ; OSSchedLockNestingCtr
0000fa  2800              CMP      r0,#0                 ;420
0000fc  dd0a              BLE      |L3.276|
0000fe  bf00              NOP                            ;421
000100  bf00              NOP                            ;421
000102  4650              MOV      r0,r10                ;421
000104  f7fffffe          BL       CPU_SR_Restore
000108  bf00              NOP                            ;421
00010a  bf00              NOP                            ;421
00010c  f6465063          MOV      r0,#0x6d63            ;422
000110  8030              STRH     r0,[r6,#0]            ;422
000112  e786              B        |L3.34|
                  |L3.276|
000114  6a2f              LDR      r7,[r5,#0x20]         ;428
000116  f8970037          LDRB     r0,[r7,#0x37]         ;429
00011a  494b              LDR      r1,|L3.584|
00011c  6809              LDR      r1,[r1,#0]            ;429  ; OSTCBCurPtr
00011e  f8911037          LDRB     r1,[r1,#0x37]         ;429
000122  4288              CMP      r0,r1                 ;429
000124  dd3a              BLE      |L3.412|
000126  f8970036          LDRB     r0,[r7,#0x36]         ;430
00012a  2808              CMP      r0,#8                 ;430
00012c  d22a              BCS      |L3.388|
00012e  e8dff000          TBB      [pc,r0]               ;430
000132  0415              DCB      0x04,0x15
000134  1e1f1716          DCB      0x1e,0x1f,0x17,0x16
000138  2021              DCB      0x20,0x21
00013a  4638              MOV      r0,r7                 ;432
00013c  f7fffffe          BL       OS_RdyListRemove
000140  4841              LDR      r0,|L3.584|
000142  6800              LDR      r0,[r0,#0]            ;433  ; OSTCBCurPtr
000144  f8900037          LDRB     r0,[r0,#0x37]         ;433
000148  f8870037          STRB     r0,[r7,#0x37]         ;433
00014c  f8970037          LDRB     r0,[r7,#0x37]         ;434
000150  f7fffffe          BL       OS_PrioInsert
000154  4638              MOV      r0,r7                 ;435
000156  f7fffffe          BL       OS_RdyListInsertHead
00015a  e01e              B        |L3.410|
00015c  bf00              NOP                            ;439
00015e  bf00              NOP                            ;440
000160  4839              LDR      r0,|L3.584|
000162  6800              LDR      r0,[r0,#0]            ;441  ; OSTCBCurPtr
000164  f8900037          LDRB     r0,[r0,#0x37]         ;441
000168  f8870037          STRB     r0,[r7,#0x37]         ;441
00016c  e015              B        |L3.410|
00016e  bf00              NOP                            ;445
000170  bf00              NOP                            ;446
000172  bf00              NOP                            ;447
000174  4834              LDR      r0,|L3.584|
000176  6800              LDR      r0,[r0,#0]            ;448  ; OSTCBCurPtr
000178  f8901037          LDRB     r1,[r0,#0x37]         ;448
00017c  4638              MOV      r0,r7                 ;448
00017e  f7fffffe          BL       OS_PendListChangePrio
000182  e00a              B        |L3.410|
                  |L3.388|
000184  bf00              NOP                            ;453
000186  bf00              NOP                            ;453
000188  4650              MOV      r0,r10                ;453
00018a  f7fffffe          BL       CPU_SR_Restore
00018e  bf00              NOP                            ;453
000190  bf00              NOP                            ;453
000192  f646602d          MOV      r0,#0x6e2d            ;454
000196  8030              STRH     r0,[r6,#0]            ;454
000198  e743              B        |L3.34|
                  |L3.410|
00019a  bf00              NOP                            ;436
                  |L3.412|
00019c  464b              MOV      r3,r9                 ;459
00019e  2204              MOVS     r2,#4                 ;459
0001a0  4629              MOV      r1,r5                 ;459
0001a2  4668              MOV      r0,sp                 ;459
0001a4  f7fffffe          BL       OS_Pend
0001a8  bf00              NOP                            ;464
0001aa  bf00              NOP                            ;464
0001ac  4650              MOV      r0,r10                ;464
0001ae  f7fffffe          BL       CPU_SR_Restore
0001b2  bf00              NOP                            ;464
0001b4  bf00              NOP                            ;464
0001b6  f7fffffe          BL       OSSched
0001ba  bf00              NOP                            ;468
0001bc  bf00              NOP                            ;468
0001be  f7fffffe          BL       CPU_SR_Save
0001c2  4682              MOV      r10,r0                ;468
0001c4  bf00              NOP                            ;468
0001c6  bf00              NOP                            ;468
0001c8  481f              LDR      r0,|L3.584|
0001ca  6800              LDR      r0,[r0,#0]            ;469  ; OSTCBCurPtr
0001cc  f8900035          LDRB     r0,[r0,#0x35]         ;469
0001d0  b130              CBZ      r0,|L3.480|
0001d2  2801              CMP      r0,#1                 ;469
0001d4  d00c              BEQ      |L3.496|
0001d6  2802              CMP      r0,#2                 ;469
0001d8  d01a              BEQ      |L3.528|
0001da  2803              CMP      r0,#3                 ;469
0001dc  d121              BNE      |L3.546|
0001de  e010              B        |L3.514|
                  |L3.480|
0001e0  b11c              CBZ      r4,|L3.490|
0001e2  4819              LDR      r0,|L3.584|
0001e4  6800              LDR      r0,[r0,#0]            ;472  ; OSTCBCurPtr
0001e6  6c00              LDR      r0,[r0,#0x40]         ;472
0001e8  6020              STR      r0,[r4,#0]            ;472
                  |L3.490|
0001ea  2000              MOVS     r0,#0                 ;474
0001ec  8030              STRH     r0,[r6,#0]            ;474
0001ee  e01c              B        |L3.554|
                  |L3.496|
0001f0  b11c              CBZ      r4,|L3.506|
0001f2  4815              LDR      r0,|L3.584|
0001f4  6800              LDR      r0,[r0,#0]            ;479  ; OSTCBCurPtr
0001f6  6c00              LDR      r0,[r0,#0x40]         ;479
0001f8  6020              STR      r0,[r4,#0]            ;479
                  |L3.506|
0001fa  f24610a9          MOV      r0,#0x61a9            ;481
0001fe  8030              STRH     r0,[r6,#0]            ;481
000200  e013              B        |L3.554|
                  |L3.514|
000202  b10c              CBZ      r4,|L3.520|
000204  2000              MOVS     r0,#0                 ;486
000206  6020              STR      r0,[r4,#0]            ;486
                  |L3.520|
000208  f24720d9          MOV      r0,#0x72d9            ;488
00020c  8030              STRH     r0,[r6,#0]            ;488
00020e  e00c              B        |L3.554|
                  |L3.528|
000210  b11c              CBZ      r4,|L3.538|
000212  480d              LDR      r0,|L3.584|
000214  6800              LDR      r0,[r0,#0]            ;493  ; OSTCBCurPtr
000216  6c00              LDR      r0,[r0,#0x40]         ;493
000218  6020              STR      r0,[r4,#0]            ;493
                  |L3.538|
00021a  f64550c2          MOV      r0,#0x5dc2            ;495
00021e  8030              STRH     r0,[r6,#0]            ;495
000220  e003              B        |L3.554|
                  |L3.546|
000222  f646602e          MOV      r0,#0x6e2e            ;499
000226  8030              STRH     r0,[r6,#0]            ;499
000228  bf00              NOP                            ;500
                  |L3.554|
00022a  bf00              NOP                            ;475
00022c  bf00              NOP                            ;502
00022e  bf00              NOP                            ;502
000230  4650              MOV      r0,r10                ;502
000232  f7fffffe          BL       CPU_SR_Restore
000236  bf00              NOP                            ;502
000238  bf00              NOP                            ;502
00023a  bf00              NOP      
00023c  e6f1              B        |L3.34|
;;;504    
                          ENDP

00023e  0000              DCW      0x0000
                  |L3.576|
                          DCD      OSIntNestingCtr
                  |L3.580|
                          DCD      0x5854554d
                  |L3.584|
                          DCD      OSTCBCurPtr
                  |L3.588|
                          DCD      OSSchedLockNestingCtr

                          AREA ||i.OSMutexPendAbort||, CODE, READONLY, ALIGN=2

                  OSMutexPendAbort PROC
;;;537    #if OS_CFG_MUTEX_PEND_ABORT_EN > 0u
;;;538    OS_OBJ_QTY  OSMutexPendAbort (OS_MUTEX  *p_mutex,
000000  e92d5ff0          PUSH     {r4-r12,lr}
;;;539                                  OS_OPT     opt,
;;;540                                  OS_ERR    *p_err)
;;;541    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;542        OS_PEND_LIST  *p_pend_list;
;;;543        OS_TCB        *p_tcb;
;;;544        CPU_TS         ts;
;;;545        OS_OBJ_QTY     nbr_tasks;
;;;546        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;547    
;;;548    
;;;549    
;;;550    #ifdef OS_SAFETY_CRITICAL
;;;551        if (p_err == (OS_ERR *)0) {
;;;552            OS_SAFETY_CRITICAL_EXCEPTION();
;;;553            return ((OS_OBJ_QTY)0u);
;;;554        }
;;;555    #endif
;;;556    
;;;557    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;558        if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to Pend Abort from an ISR                  */
00000e  4837              LDR      r0,|L4.236|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd05              BLE      |L4.34|
;;;559           *p_err =  OS_ERR_PEND_ABORT_ISR;
000016  f24610aa          MOV      r0,#0x61aa
00001a  8020              STRH     r0,[r4,#0]
;;;560            return ((OS_OBJ_QTY)0u);
00001c  2000              MOVS     r0,#0
                  |L4.30|
;;;561        }
;;;562    #endif
;;;563    
;;;564    #if OS_CFG_ARG_CHK_EN > 0u
;;;565        if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
;;;566           *p_err =  OS_ERR_OBJ_PTR_NULL;
;;;567            return ((OS_OBJ_QTY)0u);
;;;568        }
;;;569        switch (opt) {                                          /* Validate 'opt'                                         */
;;;570            case OS_OPT_PEND_ABORT_1:
;;;571            case OS_OPT_PEND_ABORT_ALL:
;;;572            case OS_OPT_PEND_ABORT_1   | OS_OPT_POST_NO_SCHED:
;;;573            case OS_OPT_PEND_ABORT_ALL | OS_OPT_POST_NO_SCHED:
;;;574                 break;
;;;575    
;;;576            default:
;;;577                *p_err =  OS_ERR_OPT_INVALID;
;;;578                 return ((OS_OBJ_QTY)0u);
;;;579        }
;;;580    #endif
;;;581    
;;;582    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;583        if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
;;;584           *p_err =  OS_ERR_OBJ_TYPE;
;;;585            return ((OS_OBJ_QTY)0u);
;;;586        }
;;;587    #endif
;;;588    
;;;589        CPU_CRITICAL_ENTER();
;;;590        p_pend_list = &p_mutex->PendList;
;;;591        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0u) {        /* Any task waiting on mutex?                             */
;;;592            CPU_CRITICAL_EXIT();                                /* No                                                     */
;;;593           *p_err =  OS_ERR_PEND_ABORT_NONE;
;;;594            return ((OS_OBJ_QTY)0u);
;;;595        }
;;;596    
;;;597        OS_CRITICAL_ENTER_CPU_EXIT();
;;;598        nbr_tasks = 0u;
;;;599        ts        = OS_TS_GET();                                /* Get local time stamp so all tasks get the same time    */
;;;600        while (p_pend_list->NbrEntries > (OS_OBJ_QTY)0u) {
;;;601            p_tcb = p_pend_list->HeadPtr->TCBPtr;
;;;602            OS_PendAbort((OS_PEND_OBJ *)((void *)p_mutex),
;;;603                         p_tcb,
;;;604                         ts);
;;;605            nbr_tasks++;
;;;606            if (opt != OS_OPT_PEND_ABORT_ALL) {                 /* Pend abort all tasks waiting?                          */
;;;607                break;                                          /* No                                                     */
;;;608            }
;;;609        }
;;;610        OS_CRITICAL_EXIT_NO_SCHED();
;;;611    
;;;612        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0u) {
;;;613            OSSched();                                          /* Run the scheduler                                      */
;;;614        }
;;;615    
;;;616       *p_err = OS_ERR_NONE;
;;;617        return (nbr_tasks);
;;;618    }
00001e  e8bd9ff0          POP      {r4-r12,pc}
                  |L4.34|
000022  b925              CBNZ     r5,|L4.46|
000024  f64550c3          MOV      r0,#0x5dc3            ;566
000028  8020              STRH     r0,[r4,#0]            ;566
00002a  2000              MOVS     r0,#0                 ;567
00002c  e7f7              B        |L4.30|
                  |L4.46|
00002e  b14e              CBZ      r6,|L4.68|
000030  f5b67f80          CMP      r6,#0x100             ;569
000034  d007              BEQ      |L4.70|
000036  f5b64f00          CMP      r6,#0x8000            ;569
00003a  d005              BEQ      |L4.72|
00003c  f5b64f01          CMP      r6,#0x8100            ;569
000040  d104              BNE      |L4.76|
000042  e002              B        |L4.74|
                  |L4.68|
000044  bf00              NOP                            ;571
                  |L4.70|
000046  bf00              NOP                            ;572
                  |L4.72|
000048  bf00              NOP                            ;573
                  |L4.74|
00004a  e004              B        |L4.86|
                  |L4.76|
00004c  f6456025          MOV      r0,#0x5e25            ;577
000050  8020              STRH     r0,[r4,#0]            ;577
000052  2000              MOVS     r0,#0                 ;578
000054  e7e3              B        |L4.30|
                  |L4.86|
000056  bf00              NOP                            ;574
000058  4925              LDR      r1,|L4.240|
00005a  6828              LDR      r0,[r5,#0]            ;583
00005c  4288              CMP      r0,r1                 ;583
00005e  d004              BEQ      |L4.106|
000060  f64550c4          MOV      r0,#0x5dc4            ;584
000064  8020              STRH     r0,[r4,#0]            ;584
000066  2000              MOVS     r0,#0                 ;585
000068  e7d9              B        |L4.30|
                  |L4.106|
00006a  bf00              NOP                            ;589
00006c  bf00              NOP                            ;589
00006e  f7fffffe          BL       CPU_SR_Save
000072  4682              MOV      r10,r0                ;589
000074  bf00              NOP                            ;589
000076  bf00              NOP                            ;589
000078  f1050708          ADD      r7,r5,#8              ;590
00007c  8938              LDRH     r0,[r7,#8]            ;591
00007e  b958              CBNZ     r0,|L4.152|
000080  bf00              NOP                            ;592
000082  bf00              NOP                            ;592
000084  4650              MOV      r0,r10                ;592
000086  f7fffffe          BL       CPU_SR_Restore
00008a  bf00              NOP                            ;592
00008c  bf00              NOP                            ;592
00008e  f24610ab          MOV      r0,#0x61ab            ;593
000092  8020              STRH     r0,[r4,#0]            ;593
000094  2000              MOVS     r0,#0                 ;594
000096  e7c2              B        |L4.30|
                  |L4.152|
000098  f04f0800          MOV      r8,#0                 ;598
00009c  f7fffffe          BL       CPU_TS_TmrRd
0000a0  4683              MOV      r11,r0                ;599
0000a2  e00f              B        |L4.196|
                  |L4.164|
0000a4  6838              LDR      r0,[r7,#0]            ;601
0000a6  f8d09008          LDR      r9,[r0,#8]            ;601
0000aa  465a              MOV      r2,r11                ;602
0000ac  4649              MOV      r1,r9                 ;602
0000ae  4628              MOV      r0,r5                 ;602
0000b0  f7fffffe          BL       OS_PendAbort
0000b4  f1080001          ADD      r0,r8,#1              ;605
0000b8  fa1ff880          UXTH     r8,r0                 ;605
0000bc  f5b67f80          CMP      r6,#0x100             ;606
0000c0  d000              BEQ      |L4.196|
0000c2  e002              B        |L4.202|
                  |L4.196|
0000c4  8938              LDRH     r0,[r7,#8]            ;600
0000c6  2800              CMP      r0,#0                 ;600
0000c8  dcec              BGT      |L4.164|
                  |L4.202|
0000ca  bf00              NOP                            ;607
0000cc  bf00              NOP                            ;610
0000ce  bf00              NOP                            ;610
0000d0  4650              MOV      r0,r10                ;610
0000d2  f7fffffe          BL       CPU_SR_Restore
0000d6  bf00              NOP                            ;610
0000d8  bf00              NOP                            ;610
0000da  f4064000          AND      r0,r6,#0x8000         ;612
0000de  b908              CBNZ     r0,|L4.228|
0000e0  f7fffffe          BL       OSSched
                  |L4.228|
0000e4  2000              MOVS     r0,#0                 ;616
0000e6  8020              STRH     r0,[r4,#0]            ;616
0000e8  4640              MOV      r0,r8                 ;617
0000ea  e798              B        |L4.30|
;;;619    #endif
                          ENDP

                  |L4.236|
                          DCD      OSIntNestingCtr
                  |L4.240|
                          DCD      0x5854554d

                          AREA ||i.OSMutexPost||, CODE, READONLY, ALIGN=2

                  OSMutexPost PROC
;;;647    
;;;648    void  OSMutexPost (OS_MUTEX  *p_mutex,
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;649                       OS_OPT     opt,
;;;650                       OS_ERR    *p_err)
;;;651    {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
000008  4615              MOV      r5,r2
;;;652        OS_PEND_LIST  *p_pend_list;
;;;653        OS_TCB        *p_tcb;
;;;654        CPU_TS         ts;
;;;655        CPU_SR_ALLOC();
00000a  f04f0a00          MOV      r10,#0
;;;656    
;;;657    
;;;658    
;;;659    #ifdef OS_SAFETY_CRITICAL
;;;660        if (p_err == (OS_ERR *)0) {
;;;661            OS_SAFETY_CRITICAL_EXCEPTION();
;;;662            return;
;;;663        }
;;;664    #endif
;;;665    
;;;666    #if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
;;;667        if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
00000e  4855              LDR      r0,|L5.356|
000010  7800              LDRB     r0,[r0,#0]  ; OSIntNestingCtr
000012  2800              CMP      r0,#0
000014  dd04              BLE      |L5.32|
;;;668           *p_err = OS_ERR_POST_ISR;
000016  f246200e          MOV      r0,#0x620e
00001a  8028              STRH     r0,[r5,#0]
                  |L5.28|
;;;669            return;
;;;670        }
;;;671    #endif
;;;672    
;;;673    #if OS_CFG_ARG_CHK_EN > 0u
;;;674        if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
;;;675           *p_err = OS_ERR_OBJ_PTR_NULL;
;;;676            return;
;;;677        }
;;;678        switch (opt) {                                          /* Validate 'opt'                                         */
;;;679            case OS_OPT_POST_NONE:
;;;680            case OS_OPT_POST_NO_SCHED:
;;;681                 break;
;;;682    
;;;683            default:
;;;684                *p_err =  OS_ERR_OPT_INVALID;
;;;685                 return;
;;;686        }
;;;687    #endif
;;;688    
;;;689    #if OS_CFG_OBJ_TYPE_CHK_EN > 0u
;;;690        if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
;;;691           *p_err = OS_ERR_OBJ_TYPE;
;;;692            return;
;;;693        }
;;;694    #endif
;;;695    
;;;696        CPU_CRITICAL_ENTER();
;;;697        if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
;;;698            CPU_CRITICAL_EXIT();
;;;699           *p_err = OS_ERR_MUTEX_NOT_OWNER;
;;;700            return;
;;;701        }
;;;702    
;;;703        OS_CRITICAL_ENTER_CPU_EXIT();
;;;704        ts          = OS_TS_GET();                              /* Get timestamp                                          */
;;;705        p_mutex->TS = ts;
;;;706        p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
;;;707        if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
;;;708            OS_CRITICAL_EXIT();                                 /* No                                                     */
;;;709           *p_err = OS_ERR_MUTEX_NESTING;
;;;710            return;
;;;711        }
;;;712    
;;;713        p_pend_list = &p_mutex->PendList;
;;;714        if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
;;;715            p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
;;;716            p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
;;;717            OS_CRITICAL_EXIT();
;;;718           *p_err = OS_ERR_NONE;
;;;719            return;
;;;720        }
;;;721                                                                /* Yes                                                    */
;;;722        if (OSTCBCurPtr->Prio != p_mutex->OwnerOriginalPrio) {
;;;723            OS_RdyListRemove(OSTCBCurPtr);
;;;724            OSTCBCurPtr->Prio = p_mutex->OwnerOriginalPrio;     /* Lower owner's priority back to its original one        */
;;;725            OS_PrioInsert(OSTCBCurPtr->Prio);
;;;726            OS_RdyListInsertTail(OSTCBCurPtr);                  /* Insert owner in ready list at new priority             */
;;;727            OSPrioCur         = OSTCBCurPtr->Prio;
;;;728        }
;;;729                                                                /* Get TCB from head of pend list                         */
;;;730        p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
;;;731        p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
;;;732        p_mutex->OwnerOriginalPrio = p_tcb->Prio;
;;;733        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
;;;734                                                                /* Post to mutex                                          */
;;;735        OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
;;;736                (OS_TCB      *)p_tcb,
;;;737                (void        *)0,
;;;738                (OS_MSG_SIZE  )0,
;;;739                (CPU_TS       )ts);
;;;740    
;;;741        OS_CRITICAL_EXIT_NO_SCHED();
;;;742    
;;;743        if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
;;;744            OSSched();                                          /* Run the scheduler                                      */
;;;745        }
;;;746    
;;;747       *p_err = OS_ERR_NONE;
;;;748    }
00001c  e8bd8ff8          POP      {r3-r11,pc}
                  |L5.32|
000020  b91c              CBNZ     r4,|L5.42|
000022  f64550c3          MOV      r0,#0x5dc3            ;675
000026  8028              STRH     r0,[r5,#0]            ;675
000028  e7f8              B        |L5.28|
                  |L5.42|
00002a  f1b80f00          CMP      r8,#0                 ;678
00002e  d003              BEQ      |L5.56|
000030  f5b84f00          CMP      r8,#0x8000            ;678
000034  d102              BNE      |L5.60|
000036  e000              B        |L5.58|
                  |L5.56|
000038  bf00              NOP                            ;680
                  |L5.58|
00003a  e003              B        |L5.68|
                  |L5.60|
00003c  f6456025          MOV      r0,#0x5e25            ;684
000040  8028              STRH     r0,[r5,#0]            ;684
000042  e7eb              B        |L5.28|
                  |L5.68|
000044  bf00              NOP                            ;681
000046  4948              LDR      r1,|L5.360|
000048  6820              LDR      r0,[r4,#0]            ;690
00004a  4288              CMP      r0,r1                 ;690
00004c  d003              BEQ      |L5.86|
00004e  f64550c4          MOV      r0,#0x5dc4            ;691
000052  8028              STRH     r0,[r5,#0]            ;691
000054  e7e2              B        |L5.28|
                  |L5.86|
000056  bf00              NOP                            ;696
000058  bf00              NOP                            ;696
00005a  f7fffffe          BL       CPU_SR_Save
00005e  4682              MOV      r10,r0                ;696
000060  bf00              NOP                            ;696
000062  bf00              NOP                            ;696
000064  4941              LDR      r1,|L5.364|
000066  6a20              LDR      r0,[r4,#0x20]         ;697
000068  6809              LDR      r1,[r1,#0]            ;697  ; OSTCBCurPtr
00006a  4288              CMP      r0,r1                 ;697
00006c  d00a              BEQ      |L5.132|
00006e  bf00              NOP                            ;698
000070  bf00              NOP                            ;698
000072  4650              MOV      r0,r10                ;698
000074  f7fffffe          BL       CPU_SR_Restore
000078  bf00              NOP                            ;698
00007a  bf00              NOP                            ;698
00007c  f2457081          MOV      r0,#0x5781            ;699
000080  8028              STRH     r0,[r5,#0]            ;699
000082  e7cb              B        |L5.28|
                  |L5.132|
000084  f7fffffe          BL       CPU_TS_TmrRd
000088  4607              MOV      r7,r0                 ;704
00008a  62a7              STR      r7,[r4,#0x28]         ;705
00008c  f8940025          LDRB     r0,[r4,#0x25]         ;706
000090  1e40              SUBS     r0,r0,#1              ;706
000092  f8840025          STRB     r0,[r4,#0x25]         ;706
000096  f8940025          LDRB     r0,[r4,#0x25]         ;707
00009a  2800              CMP      r0,#0                 ;707
00009c  dd0a              BLE      |L5.180|
00009e  bf00              NOP                            ;708
0000a0  bf00              NOP                            ;708
0000a2  4650              MOV      r0,r10                ;708
0000a4  f7fffffe          BL       CPU_SR_Restore
0000a8  bf00              NOP                            ;708
0000aa  bf00              NOP                            ;708
0000ac  f2457083          MOV      r0,#0x5783            ;709
0000b0  8028              STRH     r0,[r5,#0]            ;709
0000b2  e7b3              B        |L5.28|
                  |L5.180|
0000b4  f1040908          ADD      r9,r4,#8              ;713
0000b8  f8b90008          LDRH     r0,[r9,#8]            ;714
0000bc  b968              CBNZ     r0,|L5.218|
0000be  2000              MOVS     r0,#0                 ;715
0000c0  6220              STR      r0,[r4,#0x20]         ;715
0000c2  f8840025          STRB     r0,[r4,#0x25]         ;716
0000c6  bf00              NOP                            ;717
0000c8  bf00              NOP                            ;717
0000ca  4650              MOV      r0,r10                ;717
0000cc  f7fffffe          BL       CPU_SR_Restore
0000d0  bf00              NOP                            ;717
0000d2  bf00              NOP                            ;717
0000d4  2000              MOVS     r0,#0                 ;718
0000d6  8028              STRH     r0,[r5,#0]            ;718
0000d8  e7a0              B        |L5.28|
                  |L5.218|
0000da  4824              LDR      r0,|L5.364|
0000dc  6800              LDR      r0,[r0,#0]            ;722  ; OSTCBCurPtr
0000de  f8900037          LDRB     r0,[r0,#0x37]         ;722
0000e2  f8941024          LDRB     r1,[r4,#0x24]         ;722
0000e6  4288              CMP      r0,r1                 ;722
0000e8  d019              BEQ      |L5.286|
0000ea  4820              LDR      r0,|L5.364|
0000ec  6800              LDR      r0,[r0,#0]            ;723  ; OSTCBCurPtr
0000ee  f7fffffe          BL       OS_RdyListRemove
0000f2  f8940024          LDRB     r0,[r4,#0x24]         ;724
0000f6  491d              LDR      r1,|L5.364|
0000f8  6809              LDR      r1,[r1,#0]            ;724  ; OSTCBCurPtr
0000fa  f8810037          STRB     r0,[r1,#0x37]         ;724
0000fe  491b              LDR      r1,|L5.364|
000100  6809              LDR      r1,[r1,#0]            ;725  ; OSTCBCurPtr
000102  f8910037          LDRB     r0,[r1,#0x37]         ;725
000106  f7fffffe          BL       OS_PrioInsert
00010a  4818              LDR      r0,|L5.364|
00010c  6800              LDR      r0,[r0,#0]            ;726  ; OSTCBCurPtr
00010e  f7fffffe          BL       OS_RdyListInsertTail
000112  4816              LDR      r0,|L5.364|
000114  6800              LDR      r0,[r0,#0]            ;727  ; OSTCBCurPtr
000116  f8900037          LDRB     r0,[r0,#0x37]         ;727
00011a  4915              LDR      r1,|L5.368|
00011c  7008              STRB     r0,[r1,#0]            ;727
                  |L5.286|
00011e  f8d90000          LDR      r0,[r9,#0]            ;730
000122  6886              LDR      r6,[r0,#8]            ;730
000124  6226              STR      r6,[r4,#0x20]         ;731
000126  f8960037          LDRB     r0,[r6,#0x37]         ;732
00012a  f8840024          STRB     r0,[r4,#0x24]         ;732
00012e  2001              MOVS     r0,#1                 ;733
000130  f8840025          STRB     r0,[r4,#0x25]         ;733
000134  2300              MOVS     r3,#0                 ;735
000136  461a              MOV      r2,r3                 ;735
000138  4631              MOV      r1,r6                 ;735
00013a  4620              MOV      r0,r4                 ;735
00013c  9700              STR      r7,[sp,#0]            ;735
00013e  f7fffffe          BL       OS_Post
000142  bf00              NOP                            ;741
000144  bf00              NOP                            ;741
000146  4650              MOV      r0,r10                ;741
000148  f7fffffe          BL       CPU_SR_Restore
00014c  bf00              NOP                            ;741
00014e  bf00              NOP                            ;741
000150  f4084000          AND      r0,r8,#0x8000         ;743
000154  b908              CBNZ     r0,|L5.346|
000156  f7fffffe          BL       OSSched
                  |L5.346|
00015a  2000              MOVS     r0,#0                 ;747
00015c  8028              STRH     r0,[r5,#0]            ;747
00015e  bf00              NOP      
000160  e75c              B        |L5.28|
;;;749    
                          ENDP

000162  0000              DCW      0x0000
                  |L5.356|
                          DCD      OSIntNestingCtr
                  |L5.360|
                          DCD      0x5854554d
                  |L5.364|
                          DCD      OSTCBCurPtr
                  |L5.368|
                          DCD      OSPrioCur

                          AREA ||i.OS_MutexClr||, CODE, READONLY, ALIGN=2

                  OS_MutexClr PROC
;;;766    
;;;767    void  OS_MutexClr (OS_MUTEX  *p_mutex)
000000  b510              PUSH     {r4,lr}
;;;768    {
000002  4604              MOV      r4,r0
;;;769        p_mutex->Type              =  OS_OBJ_TYPE_NONE;         /* Mark the data structure as a NONE                      */
000004  4808              LDR      r0,|L6.40|
000006  6020              STR      r0,[r4,#0]
;;;770        p_mutex->NamePtr           = (CPU_CHAR     *)((void *)"?MUTEX");
000008  a008              ADR      r0,|L6.44|
00000a  6060              STR      r0,[r4,#4]
;;;771        p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
00000c  2000              MOVS     r0,#0
00000e  6220              STR      r0,[r4,#0x20]
;;;772        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;
000010  f8840025          STRB     r0,[r4,#0x25]
;;;773        p_mutex->TS                = (CPU_TS        )0;
000014  62a0              STR      r0,[r4,#0x28]
;;;774        p_mutex->OwnerOriginalPrio =  OS_CFG_PRIO_MAX;
000016  2040              MOVS     r0,#0x40
000018  f8840024          STRB     r0,[r4,#0x24]
;;;775        OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
00001c  f1040008          ADD      r0,r4,#8
000020  f7fffffe          BL       OS_PendListInit
;;;776    }
000024  bd10              POP      {r4,pc}
;;;777    
                          ENDP

000026  0000              DCW      0x0000
                  |L6.40|
                          DCD      0x454e4f4e
                  |L6.44|
00002c  3f4d5554          DCB      "?MUTEX",0
000030  455800  
000033  00                DCB      0

                          AREA ||i.OS_MutexDbgListAdd||, CODE, READONLY, ALIGN=2

                  OS_MutexDbgListAdd PROC
;;;794    #if OS_CFG_DBG_EN > 0u
;;;795    void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
000000  a109              ADR      r1,|L7.40|
;;;796    {
;;;797        p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
000002  61c1              STR      r1,[r0,#0x1c]
;;;798        p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
000004  2100              MOVS     r1,#0
000006  6141              STR      r1,[r0,#0x14]
;;;799        if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
000008  4908              LDR      r1,|L7.44|
00000a  6809              LDR      r1,[r1,#0]  ; OSMutexDbgListPtr
00000c  b911              CBNZ     r1,|L7.20|
;;;800            p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
00000e  2100              MOVS     r1,#0
000010  6181              STR      r1,[r0,#0x18]
000012  e005              B        |L7.32|
                  |L7.20|
;;;801        } else {
;;;802            p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
000014  4905              LDR      r1,|L7.44|
000016  6809              LDR      r1,[r1,#0]  ; OSMutexDbgListPtr
000018  6181              STR      r1,[r0,#0x18]
;;;803            OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
00001a  4904              LDR      r1,|L7.44|
00001c  6809              LDR      r1,[r1,#0]  ; OSMutexDbgListPtr
00001e  6148              STR      r0,[r1,#0x14]
                  |L7.32|
;;;804        }
;;;805        OSMutexDbgListPtr                 =  p_mutex;
000020  4902              LDR      r1,|L7.44|
000022  6008              STR      r0,[r1,#0]  ; OSMutexDbgListPtr
;;;806    }
000024  4770              BX       lr
;;;807    
                          ENDP

000026  0000              DCW      0x0000
                  |L7.40|
000028  2000              DCB      " ",0
00002a  00                DCB      0
00002b  00                DCB      0
                  |L7.44|
                          DCD      OSMutexDbgListPtr

                          AREA ||i.OS_MutexDbgListRemove||, CODE, READONLY, ALIGN=2

                  OS_MutexDbgListRemove PROC
;;;809    
;;;810    void  OS_MutexDbgListRemove (OS_MUTEX  *p_mutex)
000000  6942              LDR      r2,[r0,#0x14]
;;;811    {
;;;812        OS_MUTEX  *p_mutex_next;
;;;813        OS_MUTEX  *p_mutex_prev;
;;;814    
;;;815    
;;;816        p_mutex_prev = p_mutex->DbgPrevPtr;
;;;817        p_mutex_next = p_mutex->DbgNextPtr;
000002  6981              LDR      r1,[r0,#0x18]
;;;818    
;;;819        if (p_mutex_prev == (OS_MUTEX *)0) {
000004  b93a              CBNZ     r2,|L8.22|
;;;820            OSMutexDbgListPtr = p_mutex_next;
000006  4b09              LDR      r3,|L8.44|
000008  6019              STR      r1,[r3,#0]  ; OSMutexDbgListPtr
;;;821            if (p_mutex_next != (OS_MUTEX *)0) {
00000a  b109              CBZ      r1,|L8.16|
;;;822                p_mutex_next->DbgPrevPtr = (OS_MUTEX *)0;
00000c  2300              MOVS     r3,#0
00000e  614b              STR      r3,[r1,#0x14]
                  |L8.16|
;;;823            }
;;;824            p_mutex->DbgNextPtr = (OS_MUTEX *)0;
000010  2300              MOVS     r3,#0
000012  6183              STR      r3,[r0,#0x18]
000014  e009              B        |L8.42|
                  |L8.22|
;;;825    
;;;826        } else if (p_mutex_next == (OS_MUTEX *)0) {
000016  b919              CBNZ     r1,|L8.32|
;;;827            p_mutex_prev->DbgNextPtr = (OS_MUTEX *)0;
000018  2300              MOVS     r3,#0
00001a  6193              STR      r3,[r2,#0x18]
;;;828            p_mutex->DbgPrevPtr      = (OS_MUTEX *)0;
00001c  6143              STR      r3,[r0,#0x14]
00001e  e004              B        |L8.42|
                  |L8.32|
;;;829    
;;;830        } else {
;;;831            p_mutex_prev->DbgNextPtr =  p_mutex_next;
000020  6191              STR      r1,[r2,#0x18]
;;;832            p_mutex_next->DbgPrevPtr =  p_mutex_prev;
000022  614a              STR      r2,[r1,#0x14]
;;;833            p_mutex->DbgNextPtr      = (OS_MUTEX *)0;
000024  2300              MOVS     r3,#0
000026  6183              STR      r3,[r0,#0x18]
;;;834            p_mutex->DbgPrevPtr      = (OS_MUTEX *)0;
000028  6143              STR      r3,[r0,#0x14]
                  |L8.42|
;;;835        }
;;;836    }
00002a  4770              BX       lr
;;;837    #endif
                          ENDP

                  |L8.44|
                          DCD      OSMutexDbgListPtr

                          AREA ||i.OS_MutexInit||, CODE, READONLY, ALIGN=2

                  OS_MutexInit PROC
;;;856    
;;;857    void  OS_MutexInit (OS_ERR  *p_err)
000000  2100              MOVS     r1,#0
;;;858    {
;;;859    #ifdef OS_SAFETY_CRITICAL
;;;860        if (p_err == (OS_ERR *)0) {
;;;861            OS_SAFETY_CRITICAL_EXCEPTION();
;;;862            return;
;;;863        }
;;;864    #endif
;;;865    
;;;866    #if OS_CFG_DBG_EN > 0u
;;;867        OSMutexDbgListPtr = (OS_MUTEX *)0;
000002  4a03              LDR      r2,|L9.16|
000004  6011              STR      r1,[r2,#0]  ; OSMutexDbgListPtr
;;;868    #endif
;;;869    
;;;870        OSMutexQty        = (OS_OBJ_QTY)0;
000006  4a03              LDR      r2,|L9.20|
000008  8011              STRH     r1,[r2,#0]
;;;871       *p_err             =  OS_ERR_NONE;
00000a  8001              STRH     r1,[r0,#0]
;;;872    }
00000c  4770              BX       lr
;;;873    
                          ENDP

00000e  0000              DCW      0x0000
                  |L9.16|
                          DCD      OSMutexDbgListPtr
                  |L9.20|
                          DCD      OSMutexQty
