; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\os_msg.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\os_msg.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\os_msg.crf ..\..\uCOS-III\uCOS-III\Source\os_msg.c]
                          THUMB

                          AREA ||i.OS_MsgPoolInit||, CODE, READONLY, ALIGN=2

                  OS_MsgPoolInit PROC
;;;60     
;;;61     void  OS_MsgPoolInit (OS_ERR  *p_err)
000000  b570              PUSH     {r4-r6,lr}
;;;62     {
000002  4601              MOV      r1,r0
;;;63         OS_MSG      *p_msg1;
;;;64         OS_MSG      *p_msg2;
;;;65         OS_MSG_QTY   i;
;;;66         OS_MSG_QTY   loops;
;;;67     
;;;68     
;;;69     
;;;70     #ifdef OS_SAFETY_CRITICAL
;;;71         if (p_err == (OS_ERR *)0) {
;;;72             OS_SAFETY_CRITICAL_EXCEPTION();
;;;73             return;
;;;74         }
;;;75     #endif
;;;76     
;;;77     #if OS_CFG_ARG_CHK_EN > 0u
;;;78         if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
000004  4d1a              LDR      r5,|L1.112|
000006  682d              LDR      r5,[r5,#0]  ; OSCfg_MsgPoolBasePtr
000008  b91d              CBNZ     r5,|L1.18|
;;;79            *p_err = OS_ERR_MSG_POOL_NULL_PTR;
00000a  f245751e          MOV      r5,#0x571e
00000e  800d              STRH     r5,[r1,#0]
                  |L1.16|
;;;80             return;
;;;81         }
;;;82         if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
;;;83            *p_err = OS_ERR_MSG_POOL_EMPTY;
;;;84             return;
;;;85         }
;;;86     #endif
;;;87     
;;;88         p_msg1 = OSCfg_MsgPoolBasePtr;
;;;89         p_msg2 = OSCfg_MsgPoolBasePtr;
;;;90         p_msg2++;
;;;91         loops  = OSCfg_MsgPoolSize - 1u;
;;;92         for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
;;;93             p_msg1->NextPtr = p_msg2;
;;;94             p_msg1->MsgPtr  = (void      *)0;
;;;95             p_msg1->MsgSize = (OS_MSG_SIZE)0u;
;;;96             p_msg1->MsgTS   = (CPU_TS     )0u;
;;;97             p_msg1++;
;;;98             p_msg2++;
;;;99         }
;;;100        p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
;;;101        p_msg1->MsgPtr  = (void      *)0;
;;;102        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
;;;103        p_msg1->MsgTS   = (CPU_TS     )0u;
;;;104    
;;;105        OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
;;;106        OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
;;;107        OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
;;;108        OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
;;;109       *p_err                =  OS_ERR_NONE;
;;;110    }
000010  bd70              POP      {r4-r6,pc}
                  |L1.18|
000012  4d18              LDR      r5,|L1.116|
000014  882d              LDRH     r5,[r5,#0]            ;82  ; OSCfg_MsgPoolSize
000016  b91d              CBNZ     r5,|L1.32|
000018  f245751d          MOV      r5,#0x571d            ;83
00001c  800d              STRH     r5,[r1,#0]            ;83
00001e  e7f7              B        |L1.16|
                  |L1.32|
000020  4d13              LDR      r5,|L1.112|
000022  6828              LDR      r0,[r5,#0]            ;88  ; OSCfg_MsgPoolBasePtr
000024  682a              LDR      r2,[r5,#0]            ;89  ; OSCfg_MsgPoolBasePtr
000026  3210              ADDS     r2,r2,#0x10           ;90
000028  4d12              LDR      r5,|L1.116|
00002a  882d              LDRH     r5,[r5,#0]            ;91  ; OSCfg_MsgPoolSize
00002c  1e6d              SUBS     r5,r5,#1              ;91
00002e  b2ac              UXTH     r4,r5                 ;91
000030  2300              MOVS     r3,#0                 ;92
000032  e008              B        |L1.70|
                  |L1.52|
000034  6002              STR      r2,[r0,#0]            ;93
000036  2500              MOVS     r5,#0                 ;94
000038  6045              STR      r5,[r0,#4]            ;94
00003a  8105              STRH     r5,[r0,#8]            ;95
00003c  60c5              STR      r5,[r0,#0xc]          ;96
00003e  3010              ADDS     r0,r0,#0x10           ;97
000040  3210              ADDS     r2,r2,#0x10           ;98
000042  1c5d              ADDS     r5,r3,#1              ;92
000044  b2ab              UXTH     r3,r5                 ;92
                  |L1.70|
000046  42a3              CMP      r3,r4                 ;92
000048  dbf4              BLT      |L1.52|
00004a  2500              MOVS     r5,#0                 ;100
00004c  6005              STR      r5,[r0,#0]            ;100
00004e  6045              STR      r5,[r0,#4]            ;101
000050  8105              STRH     r5,[r0,#8]            ;102
000052  60c5              STR      r5,[r0,#0xc]          ;103
000054  4d06              LDR      r5,|L1.112|
000056  682d              LDR      r5,[r5,#0]            ;105  ; OSCfg_MsgPoolBasePtr
000058  4e07              LDR      r6,|L1.120|
00005a  6035              STR      r5,[r6,#0]            ;105  ; OSMsgPool
00005c  4d05              LDR      r5,|L1.116|
00005e  882d              LDRH     r5,[r5,#0]            ;106  ; OSCfg_MsgPoolSize
000060  80b5              STRH     r5,[r6,#4]            ;106
000062  2500              MOVS     r5,#0                 ;107
000064  80f5              STRH     r5,[r6,#6]            ;107
000066  8135              STRH     r5,[r6,#8]            ;108
000068  800d              STRH     r5,[r1,#0]            ;109
00006a  bf00              NOP      
00006c  e7d0              B        |L1.16|
;;;111    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      OSCfg_MsgPoolBasePtr
                  |L1.116|
                          DCD      OSCfg_MsgPoolSize
                  |L1.120|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQFreeAll||, CODE, READONLY, ALIGN=2

                  OS_MsgQFreeAll PROC
;;;127    
;;;128    OS_MSG_QTY  OS_MsgQFreeAll (OS_MSG_Q  *p_msg_q)
000000  b510              PUSH     {r4,lr}
;;;129    {
000002  4601              MOV      r1,r0
;;;130        OS_MSG      *p_msg;
;;;131        OS_MSG_QTY   qty;
;;;132    
;;;133    
;;;134    
;;;135        qty = p_msg_q->NbrEntries;                              /* Get the number of OS_MSGs being freed                  */
000004  8948              LDRH     r0,[r1,#0xa]
;;;136        if (p_msg_q->NbrEntries > (OS_MSG_QTY)0) {
000006  894b              LDRH     r3,[r1,#0xa]
000008  2b00              CMP      r3,#0
00000a  dd17              BLE      |L2.60|
;;;137            p_msg                   = p_msg_q->InPtr;           /* Point to end of message chain                          */
00000c  680a              LDR      r2,[r1,#0]
;;;138            p_msg->NextPtr          = OSMsgPool.NextPtr;
00000e  4b0c              LDR      r3,|L2.64|
000010  681b              LDR      r3,[r3,#0]  ; OSMsgPool
000012  6013              STR      r3,[r2,#0]
;;;139            OSMsgPool.NextPtr       = p_msg_q->OutPtr;          /* Point to beginning of message chain                    */
000014  4c0a              LDR      r4,|L2.64|
000016  684b              LDR      r3,[r1,#4]
000018  6023              STR      r3,[r4,#0]  ; OSMsgPool
;;;140            OSMsgPool.NbrUsed      -= p_msg_q->NbrEntries;      /* Update statistics for free list of messages            */
00001a  4623              MOV      r3,r4
00001c  88db              LDRH     r3,[r3,#6]  ; OSMsgPool
00001e  894c              LDRH     r4,[r1,#0xa]
000020  1b1b              SUBS     r3,r3,r4
000022  4c07              LDR      r4,|L2.64|
000024  80e3              STRH     r3,[r4,#6]
;;;141            OSMsgPool.NbrFree      += p_msg_q->NbrEntries;
000026  4623              MOV      r3,r4
000028  889b              LDRH     r3,[r3,#4]  ; OSMsgPool
00002a  894c              LDRH     r4,[r1,#0xa]
00002c  4423              ADD      r3,r3,r4
00002e  4c04              LDR      r4,|L2.64|
000030  80a3              STRH     r3,[r4,#4]
;;;142            p_msg_q->NbrEntries     = (OS_MSG_QTY)0;            /* Flush the message queue                                */
000032  2300              MOVS     r3,#0
000034  814b              STRH     r3,[r1,#0xa]
;;;143            p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
000036  818b              STRH     r3,[r1,#0xc]
;;;144            p_msg_q->InPtr          = (OS_MSG   *)0;
000038  600b              STR      r3,[r1,#0]
;;;145            p_msg_q->OutPtr         = (OS_MSG   *)0;
00003a  604b              STR      r3,[r1,#4]
                  |L2.60|
;;;146        }
;;;147        return (qty);
;;;148    }
00003c  bd10              POP      {r4,pc}
;;;149    
                          ENDP

00003e  0000              DCW      0x0000
                  |L2.64|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQGet||, CODE, READONLY, ALIGN=2

                  OS_MsgQGet PROC
;;;202    
;;;203    void  *OS_MsgQGet (OS_MSG_Q     *p_msg_q,
000000  b5f0              PUSH     {r4-r7,lr}
;;;204                       OS_MSG_SIZE  *p_msg_size,
;;;205                       CPU_TS       *p_ts,
;;;206                       OS_ERR       *p_err)
;;;207    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;208        OS_MSG  *p_msg;
;;;209        void    *p_void;
;;;210    
;;;211    
;;;212    
;;;213    #ifdef OS_SAFETY_CRITICAL
;;;214        if (p_err == (OS_ERR *)0) {
;;;215            OS_SAFETY_CRITICAL_EXCEPTION();
;;;216            return ((void *)0);
;;;217        }
;;;218    #endif
;;;219    
;;;220        if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is the queue empty?                                    */
000006  8960              LDRH     r0,[r4,#0xa]
000008  b940              CBNZ     r0,|L3.28|
;;;221           *p_msg_size = (OS_MSG_SIZE)0;                        /* Yes                                                    */
00000a  2000              MOVS     r0,#0
00000c  8028              STRH     r0,[r5,#0]
;;;222            if (p_ts != (CPU_TS *)0) {
00000e  b102              CBZ      r2,|L3.18|
;;;223               *p_ts  = (CPU_TS  )0;
000010  6010              STR      r0,[r2,#0]
                  |L3.18|
;;;224            }
;;;225           *p_err = OS_ERR_Q_EMPTY;
000012  f2465092          MOV      r0,#0x6592
000016  8018              STRH     r0,[r3,#0]
;;;226            return ((void *)0);
000018  2000              MOVS     r0,#0
                  |L3.26|
;;;227        }
;;;228    
;;;229        p_msg           = p_msg_q->OutPtr;                      /* No, get the next message to extract from the queue     */
;;;230        p_void          = p_msg->MsgPtr;
;;;231       *p_msg_size      = p_msg->MsgSize;
;;;232        if (p_ts != (CPU_TS *)0) {
;;;233           *p_ts  = p_msg->MsgTS;
;;;234        }
;;;235    
;;;236        p_msg_q->OutPtr = p_msg->NextPtr;                       /* Point to next message to extract                       */
;;;237    
;;;238        if (p_msg_q->OutPtr == (OS_MSG *)0) {                   /* Are there any more messages in the queue?              */
;;;239            p_msg_q->InPtr      = (OS_MSG   *)0;                /* No                                                     */
;;;240            p_msg_q->NbrEntries = (OS_MSG_QTY)0;
;;;241        } else {
;;;242            p_msg_q->NbrEntries--;                              /* Yes, One less message in the queue                     */
;;;243        }
;;;244    
;;;245        p_msg->NextPtr    = OSMsgPool.NextPtr;                  /* Return message control block to free list              */
;;;246        OSMsgPool.NextPtr = p_msg;
;;;247        OSMsgPool.NbrFree++;
;;;248        OSMsgPool.NbrUsed--;
;;;249    
;;;250       *p_err             = OS_ERR_NONE;
;;;251        return (p_void);
;;;252    }
00001a  bdf0              POP      {r4-r7,pc}
                  |L3.28|
00001c  6861              LDR      r1,[r4,#4]            ;229
00001e  684e              LDR      r6,[r1,#4]            ;230
000020  8908              LDRH     r0,[r1,#8]            ;231
000022  8028              STRH     r0,[r5,#0]            ;231
000024  b10a              CBZ      r2,|L3.42|
000026  68c8              LDR      r0,[r1,#0xc]          ;233
000028  6010              STR      r0,[r2,#0]            ;233
                  |L3.42|
00002a  6808              LDR      r0,[r1,#0]            ;236
00002c  6060              STR      r0,[r4,#4]            ;236
00002e  6860              LDR      r0,[r4,#4]            ;238
000030  b918              CBNZ     r0,|L3.58|
000032  2000              MOVS     r0,#0                 ;239
000034  6020              STR      r0,[r4,#0]            ;239
000036  8160              STRH     r0,[r4,#0xa]          ;240
000038  e002              B        |L3.64|
                  |L3.58|
00003a  8960              LDRH     r0,[r4,#0xa]          ;242
00003c  1e40              SUBS     r0,r0,#1              ;242
00003e  8160              STRH     r0,[r4,#0xa]          ;242
                  |L3.64|
000040  4808              LDR      r0,|L3.100|
000042  6800              LDR      r0,[r0,#0]            ;245  ; OSMsgPool
000044  6008              STR      r0,[r1,#0]            ;245
000046  4807              LDR      r0,|L3.100|
000048  6001              STR      r1,[r0,#0]            ;246  ; OSMsgPool
00004a  8880              LDRH     r0,[r0,#4]            ;247  ; OSMsgPool
00004c  1c40              ADDS     r0,r0,#1              ;247
00004e  4f05              LDR      r7,|L3.100|
000050  80b8              STRH     r0,[r7,#4]            ;247
000052  4638              MOV      r0,r7                 ;248
000054  88c0              LDRH     r0,[r0,#6]            ;248  ; OSMsgPool
000056  1e40              SUBS     r0,r0,#1              ;248
000058  80f8              STRH     r0,[r7,#6]            ;248
00005a  2000              MOVS     r0,#0                 ;250
00005c  8018              STRH     r0,[r3,#0]            ;250
00005e  4630              MOV      r0,r6                 ;251
000060  e7db              B        |L3.26|
;;;253    
                          ENDP

000062  0000              DCW      0x0000
                  |L3.100|
                          DCD      OSMsgPool

                          AREA ||i.OS_MsgQInit||, CODE, READONLY, ALIGN=1

                  OS_MsgQInit PROC
;;;167    
;;;168    void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
000000  8101              STRH     r1,[r0,#8]
;;;169                       OS_MSG_QTY   size)
;;;170    {
;;;171        p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
;;;172        p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
000002  2200              MOVS     r2,#0
000004  8142              STRH     r2,[r0,#0xa]
;;;173        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
000006  8182              STRH     r2,[r0,#0xc]
;;;174        p_msg_q->InPtr          = (OS_MSG   *)0;
000008  6002              STR      r2,[r0,#0]
;;;175        p_msg_q->OutPtr         = (OS_MSG   *)0;
00000a  6042              STR      r2,[r0,#4]
;;;176    }
00000c  4770              BX       lr
;;;177    
                          ENDP


                          AREA ||i.OS_MsgQPut||, CODE, READONLY, ALIGN=2

                  OS_MsgQPut PROC
;;;286    
;;;287    void  OS_MsgQPut (OS_MSG_Q     *p_msg_q,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;288                      void         *p_void,
;;;289                      OS_MSG_SIZE   msg_size,
;;;290                      OS_OPT        opt,
;;;291                      CPU_TS        ts,
;;;292                      OS_ERR       *p_err)
;;;293    {
000004  460d              MOV      r5,r1
000006  e9dd7406          LDRD     r7,r4,[sp,#0x18]
;;;294        OS_MSG  *p_msg;
;;;295        OS_MSG  *p_msg_in;
;;;296    
;;;297    
;;;298    
;;;299    #ifdef OS_SAFETY_CRITICAL
;;;300        if (p_err == (OS_ERR *)0) {
;;;301            OS_SAFETY_CRITICAL_EXCEPTION();
;;;302            return;
;;;303        }
;;;304    #endif
;;;305    
;;;306        if (p_msg_q->NbrEntries >= p_msg_q->NbrEntriesSize) {
00000a  f8b0c00a          LDRH     r12,[r0,#0xa]
00000e  f8b08008          LDRH     r8,[r0,#8]
000012  45c4              CMP      r12,r8
000014  db05              BLT      |L5.34|
;;;307           *p_err = OS_ERR_Q_MAX;                               /* Message queue cannot accept any more messages          */
000016  f2465c93          MOV      r12,#0x6593
00001a  f8a4c000          STRH     r12,[r4,#0]
                  |L5.30|
;;;308            return;
;;;309        }
;;;310    
;;;311        if (OSMsgPool.NbrFree == (OS_MSG_QTY)0) {
;;;312           *p_err = OS_ERR_MSG_POOL_EMPTY;                      /* No more OS_MSG to use                                  */
;;;313            return;
;;;314        }
;;;315    
;;;316        p_msg             = OSMsgPool.NextPtr;                  /* Remove message control block from free list            */
;;;317        OSMsgPool.NextPtr = p_msg->NextPtr;
;;;318        OSMsgPool.NbrFree--;
;;;319        OSMsgPool.NbrUsed++;
;;;320        if (OSMsgPool.NbrUsedMax < OSMsgPool.NbrUsed) {
;;;321            OSMsgPool.NbrUsedMax = OSMsgPool.NbrUsed;
;;;322        }
;;;323    
;;;324        if (p_msg_q->NbrEntries == (OS_MSG_QTY)0) {             /* Is this first message placed in the queue?             */
;;;325            p_msg_q->InPtr         = p_msg;                     /* Yes                                                    */
;;;326            p_msg_q->OutPtr        = p_msg;
;;;327            p_msg_q->NbrEntries    = (OS_MSG_QTY)1;
;;;328            p_msg->NextPtr         = (OS_MSG *)0;
;;;329        } else {                                                /* No                                                     */
;;;330            if ((opt & OS_OPT_POST_LIFO) == OS_OPT_POST_FIFO) { /* Is it FIFO or LIFO?                                    */
;;;331                p_msg_in           = p_msg_q->InPtr;            /* FIFO, add to the head                                  */
;;;332                p_msg_in->NextPtr  = p_msg;
;;;333                p_msg_q->InPtr     = p_msg;
;;;334                p_msg->NextPtr     = (OS_MSG *)0;
;;;335            } else {
;;;336                p_msg->NextPtr     = p_msg_q->OutPtr;           /* LIFO, add to the tail                                  */
;;;337                p_msg_q->OutPtr    = p_msg;
;;;338            }
;;;339            p_msg_q->NbrEntries++;
;;;340        }
;;;341        if (p_msg_q->NbrEntriesMax < p_msg_q->NbrEntries) {
;;;342            p_msg_q->NbrEntriesMax = p_msg_q->NbrEntries;
;;;343        }
;;;344        p_msg->MsgPtr  = p_void;                                /* Deposit message in the message queue entry             */
;;;345        p_msg->MsgSize = msg_size;
;;;346        p_msg->MsgTS   = ts;
;;;347       *p_err          = OS_ERR_NONE;
;;;348    }
00001e  e8bd81f0          POP      {r4-r8,pc}
                  |L5.34|
000022  f8dfc0dc          LDR      r12,|L5.256|
000026  f8bcc004          LDRH     r12,[r12,#4]          ;311  ; OSMsgPool
00002a  f1bc0f00          CMP      r12,#0                ;311
00002e  d104              BNE      |L5.58|
000030  f2457c1d          MOV      r12,#0x571d           ;312
000034  f8a4c000          STRH     r12,[r4,#0]           ;312
000038  e7f1              B        |L5.30|
                  |L5.58|
00003a  f8dfc0c4          LDR      r12,|L5.256|
00003e  f8dc1000          LDR      r1,[r12,#0]           ;316  ; OSMsgPool
000042  f8df80bc          LDR      r8,|L5.256|
000046  f8d1c000          LDR      r12,[r1,#0]           ;317
00004a  f8c8c000          STR      r12,[r8,#0]           ;317  ; OSMsgPool
00004e  46c4              MOV      r12,r8                ;318
000050  f8bcc004          LDRH     r12,[r12,#4]          ;318  ; OSMsgPool
000054  f1ac0c01          SUB      r12,r12,#1            ;318
000058  f8a8c004          STRH     r12,[r8,#4]           ;318
00005c  46c4              MOV      r12,r8                ;319
00005e  f8bcc006          LDRH     r12,[r12,#6]          ;319  ; OSMsgPool
000062  f10c0c01          ADD      r12,r12,#1            ;319
000066  f8a8c006          STRH     r12,[r8,#6]           ;319
00006a  46c4              MOV      r12,r8                ;320
00006c  f8bcc008          LDRH     r12,[r12,#8]          ;320  ; OSMsgPool
000070  f8b88006          LDRH     r8,[r8,#6]            ;320  ; OSMsgPool
000074  45c4              CMP      r12,r8                ;320
000076  da07              BGE      |L5.136|
000078  f8dfc084          LDR      r12,|L5.256|
00007c  f8bcc006          LDRH     r12,[r12,#6]          ;321  ; OSMsgPool
000080  f8df807c          LDR      r8,|L5.256|
000084  f8a8c008          STRH     r12,[r8,#8]           ;321
                  |L5.136|
000088  f8b0c00a          LDRH     r12,[r0,#0xa]         ;324
00008c  f1bc0f00          CMP      r12,#0                ;324
000090  d10a              BNE      |L5.168|
000092  6001              STR      r1,[r0,#0]            ;325
000094  6041              STR      r1,[r0,#4]            ;326
000096  f04f0c01          MOV      r12,#1                ;327
00009a  f8a0c00a          STRH     r12,[r0,#0xa]         ;327
00009e  f04f0c00          MOV      r12,#0                ;328
0000a2  f8c1c000          STR      r12,[r1,#0]           ;328
0000a6  e017              B        |L5.216|
                  |L5.168|
0000a8  f0030c10          AND      r12,r3,#0x10          ;330
0000ac  f1bc0f00          CMP      r12,#0                ;330
0000b0  d107              BNE      |L5.194|
0000b2  6806              LDR      r6,[r0,#0]            ;331
0000b4  6031              STR      r1,[r6,#0]            ;332
0000b6  6001              STR      r1,[r0,#0]            ;333
0000b8  f04f0c00          MOV      r12,#0                ;334
0000bc  f8c1c000          STR      r12,[r1,#0]           ;334
0000c0  e004              B        |L5.204|
                  |L5.194|
0000c2  f8d0c004          LDR      r12,[r0,#4]           ;336
0000c6  f8c1c000          STR      r12,[r1,#0]           ;336
0000ca  6041              STR      r1,[r0,#4]            ;337
                  |L5.204|
0000cc  f8b0c00a          LDRH     r12,[r0,#0xa]         ;339
0000d0  f10c0c01          ADD      r12,r12,#1            ;339
0000d4  f8a0c00a          STRH     r12,[r0,#0xa]         ;339
                  |L5.216|
0000d8  f8b0c00c          LDRH     r12,[r0,#0xc]         ;341
0000dc  f8b0800a          LDRH     r8,[r0,#0xa]          ;341
0000e0  45c4              CMP      r12,r8                ;341
0000e2  da03              BGE      |L5.236|
0000e4  f8b0c00a          LDRH     r12,[r0,#0xa]         ;342
0000e8  f8a0c00c          STRH     r12,[r0,#0xc]         ;342
                  |L5.236|
0000ec  604d              STR      r5,[r1,#4]            ;344
0000ee  810a              STRH     r2,[r1,#8]            ;345
0000f0  60cf              STR      r7,[r1,#0xc]          ;346
0000f2  f04f0c00          MOV      r12,#0                ;347
0000f6  f8a4c000          STRH     r12,[r4,#0]           ;347
0000fa  bf00              NOP      
0000fc  e78f              B        |L5.30|
;;;349    #endif
                          ENDP

0000fe  0000              DCW      0x0000
                  |L5.256|
                          DCD      OSMsgPool
