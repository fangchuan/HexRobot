; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_tim_pwm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_tim_pwm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_tim_pwm.crf ..\..\User\bsp_stm32f4xx\src\bsp_tim_pwm.c]
                          THUMB

                          AREA ||i.bsp_ConfigGpioOut||, CODE, READONLY, ALIGN=1

                  bsp_ConfigGpioOut PROC
;;;414    */
;;;415    void bsp_ConfigGpioOut(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX)
000000  b57c              PUSH     {r2-r6,lr}
;;;416    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;417    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;418    
;;;419    	/* 使能GPIO时钟 */
;;;420    	RCC_AHB1PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       bsp_GetRCCofGPIO
00000c  4606              MOV      r6,r0
00000e  2101              MOVS     r1,#1
000010  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;421    
;;;422    	/* 配置GPIO */
;;;423    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;		/* 带入的形参 */
000014  9400              STR      r4,[sp,#0]
;;;424    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;	/* 输出 */
000016  2001              MOVS     r0,#1
000018  f88d0004          STRB     r0,[sp,#4]
;;;425    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001c  2002              MOVS     r0,#2
00001e  f88d0005          STRB     r0,[sp,#5]
;;;426    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 推挽 */
000022  2000              MOVS     r0,#0
000024  f88d0006          STRB     r0,[sp,#6]
;;;427    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;	/* 无上拉 */
000028  f88d0007          STRB     r0,[sp,#7]
;;;428    	GPIO_Init(GPIOx, &GPIO_InitStructure);
00002c  4669              MOV      r1,sp
00002e  4628              MOV      r0,r5
000030  f7fffffe          BL       GPIO_Init
;;;429    }
000034  bd7c              POP      {r2-r6,pc}
;;;430    
                          ENDP


                          AREA ||i.bsp_ConfigTimGpio||, CODE, READONLY, ALIGN=2

                  bsp_ConfigTimGpio PROC
;;;376    */
;;;377    void bsp_ConfigTimGpio(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinX, TIM_TypeDef* TIMx, uint8_t _ucChannel)
000000  e92d47fc          PUSH     {r2-r10,lr}
;;;378    {
000004  4606              MOV      r6,r0
000006  460d              MOV      r5,r1
000008  4614              MOV      r4,r2
00000a  4699              MOV      r9,r3
;;;379    	GPIO_InitTypeDef  GPIO_InitStructure;
;;;380    
;;;381    	/* 使能GPIO时钟 */
;;;382    	RCC_AHB1PeriphClockCmd(bsp_GetRCCofGPIO(GPIOx), ENABLE);
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       bsp_GetRCCofGPIO
000012  4607              MOV      r7,r0
000014  2101              MOVS     r1,#1
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;383    
;;;384      	/* 使能TIM时钟 */
;;;385    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
00001a  481f              LDR      r0,|L2.152|
00001c  4284              CMP      r4,r0
00001e  d00b              BEQ      |L2.56|
000020  481e              LDR      r0,|L2.156|
000022  4284              CMP      r4,r0
000024  d008              BEQ      |L2.56|
000026  481e              LDR      r0,|L2.160|
000028  4284              CMP      r4,r0
00002a  d005              BEQ      |L2.56|
00002c  481d              LDR      r0,|L2.164|
00002e  4284              CMP      r4,r0
000030  d002              BEQ      |L2.56|
000032  481d              LDR      r0,|L2.168|
000034  4284              CMP      r4,r0
000036  d107              BNE      |L2.72|
                  |L2.56|
;;;386    	{
;;;387    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000038  4620              MOV      r0,r4
00003a  f7fffffe          BL       bsp_GetRCCofTIM
00003e  4607              MOV      r7,r0
000040  2101              MOVS     r1,#1
000042  f7fffffe          BL       RCC_APB2PeriphClockCmd
000046  e006              B        |L2.86|
                  |L2.72|
;;;388    	}
;;;389    	else
;;;390    	{
;;;391    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       bsp_GetRCCofTIM
00004e  4607              MOV      r7,r0
000050  2101              MOVS     r1,#1
000052  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L2.86|
;;;392    	}
;;;393    
;;;394    	/* 配置GPIO */
;;;395    	GPIO_InitStructure.GPIO_Pin = GPIO_PinX;	/* 带入的形参 */
000056  9500              STR      r5,[sp,#0]
;;;396    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
000058  2002              MOVS     r0,#2
00005a  f88d0004          STRB     r0,[sp,#4]
;;;397    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00005e  2003              MOVS     r0,#3
000060  f88d0005          STRB     r0,[sp,#5]
;;;398    	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000064  2000              MOVS     r0,#0
000066  f88d0006          STRB     r0,[sp,#6]
;;;399    	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
00006a  2001              MOVS     r0,#1
00006c  f88d0007          STRB     r0,[sp,#7]
;;;400    	GPIO_Init(GPIOx, &GPIO_InitStructure);
000070  4669              MOV      r1,sp
000072  4630              MOV      r0,r6
000074  f7fffffe          BL       GPIO_Init
;;;401    
;;;402    	/* 连接到AF功能 */
;;;403    	GPIO_PinAFConfig(GPIOx, bsp_GetPinSource(GPIO_PinX), bsp_GetAFofTIM(TIMx));
000078  4620              MOV      r0,r4
00007a  f7fffffe          BL       bsp_GetAFofTIM
00007e  4607              MOV      r7,r0
000080  4628              MOV      r0,r5
000082  f7fffffe          BL       bsp_GetPinSource
000086  4680              MOV      r8,r0
000088  463a              MOV      r2,r7
00008a  4641              MOV      r1,r8
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       GPIO_PinAFConfig
;;;404    }
000092  e8bd87fc          POP      {r2-r10,pc}
;;;405    
                          ENDP

000096  0000              DCW      0x0000
                  |L2.152|
                          DCD      0x40010000
                  |L2.156|
                          DCD      0x40010400
                  |L2.160|
                          DCD      0x40014000
                  |L2.164|
                          DCD      0x40014400
                  |L2.168|
                          DCD      0x40014800

                          AREA ||i.bsp_GetAFofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetAFofTIM PROC
;;;295    */
;;;296    uint8_t bsp_GetAFofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;297    {
;;;298    	uint8_t ret = 0;
000002  2000              MOVS     r0,#0
;;;299    
;;;300    	/*
;;;301    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;302    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;303    	*/
;;;304    	if (TIMx == TIM1)
000004  4a22              LDR      r2,|L3.144|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L3.14|
;;;305    	{
;;;306    		ret = GPIO_AF_TIM1;
00000a  2001              MOVS     r0,#1
00000c  e03f              B        |L3.142|
                  |L3.14|
;;;307    	}
;;;308    	else if (TIMx == TIM8)
00000e  4a21              LDR      r2,|L3.148|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L3.24|
;;;309    	{
;;;310    		ret = GPIO_AF_TIM8;
000014  2003              MOVS     r0,#3
000016  e03a              B        |L3.142|
                  |L3.24|
;;;311    	}
;;;312    	else if (TIMx == TIM9)
000018  4a1f              LDR      r2,|L3.152|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L3.34|
;;;313    	{
;;;314    		ret = GPIO_AF_TIM9;
00001e  2003              MOVS     r0,#3
000020  e035              B        |L3.142|
                  |L3.34|
;;;315    	}
;;;316    	else if (TIMx == TIM10)
000022  4a1e              LDR      r2,|L3.156|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L3.44|
;;;317    	{
;;;318    		ret = GPIO_AF_TIM10;
000028  2003              MOVS     r0,#3
00002a  e030              B        |L3.142|
                  |L3.44|
;;;319    	}
;;;320    	else if (TIMx == TIM11)
00002c  4a1c              LDR      r2,|L3.160|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L3.54|
;;;321    	{
;;;322    		ret = GPIO_AF_TIM11;
000032  2003              MOVS     r0,#3
000034  e02b              B        |L3.142|
                  |L3.54|
;;;323    	}
;;;324    	/* 下面是 APB1时钟 */
;;;325    	else if (TIMx == TIM2)
000036  f1b14f80          CMP      r1,#0x40000000
00003a  d101              BNE      |L3.64|
;;;326    	{
;;;327    		ret = GPIO_AF_TIM2;
00003c  2001              MOVS     r0,#1
00003e  e026              B        |L3.142|
                  |L3.64|
;;;328    	}
;;;329    	else if (TIMx == TIM3)
000040  4a18              LDR      r2,|L3.164|
000042  4291              CMP      r1,r2
000044  d101              BNE      |L3.74|
;;;330    	{
;;;331    		ret = GPIO_AF_TIM3;
000046  2002              MOVS     r0,#2
000048  e021              B        |L3.142|
                  |L3.74|
;;;332    	}
;;;333    	else if (TIMx == TIM4)
00004a  4a17              LDR      r2,|L3.168|
00004c  4291              CMP      r1,r2
00004e  d101              BNE      |L3.84|
;;;334    	{
;;;335    		ret = GPIO_AF_TIM4;
000050  2002              MOVS     r0,#2
000052  e01c              B        |L3.142|
                  |L3.84|
;;;336    	}
;;;337    	else if (TIMx == TIM5)
000054  4a15              LDR      r2,|L3.172|
000056  4291              CMP      r1,r2
000058  d101              BNE      |L3.94|
;;;338    	{
;;;339    		ret = GPIO_AF_TIM5;
00005a  2002              MOVS     r0,#2
00005c  e017              B        |L3.142|
                  |L3.94|
;;;340    	}
;;;341    	/* 没有 TIM6 TIM7 */
;;;342    	else if (TIMx == TIM8)
00005e  4a0d              LDR      r2,|L3.148|
000060  4291              CMP      r1,r2
000062  d101              BNE      |L3.104|
;;;343    	{
;;;344    		ret = GPIO_AF_TIM8;
000064  2003              MOVS     r0,#3
000066  e012              B        |L3.142|
                  |L3.104|
;;;345    	}
;;;346    	else if (TIMx == TIM9)
000068  4a0b              LDR      r2,|L3.152|
00006a  4291              CMP      r1,r2
00006c  d101              BNE      |L3.114|
;;;347    	{
;;;348    		ret = GPIO_AF_TIM9;
00006e  2003              MOVS     r0,#3
000070  e00d              B        |L3.142|
                  |L3.114|
;;;349    	}
;;;350    	else if (TIMx == TIM12)
000072  4a0f              LDR      r2,|L3.176|
000074  4291              CMP      r1,r2
000076  d101              BNE      |L3.124|
;;;351    	{
;;;352    		ret = GPIO_AF_TIM12;
000078  2009              MOVS     r0,#9
00007a  e008              B        |L3.142|
                  |L3.124|
;;;353    	}
;;;354    	else if (TIMx == TIM13)
00007c  4a0d              LDR      r2,|L3.180|
00007e  4291              CMP      r1,r2
000080  d101              BNE      |L3.134|
;;;355    	{
;;;356    		ret = GPIO_AF_TIM13;
000082  2009              MOVS     r0,#9
000084  e003              B        |L3.142|
                  |L3.134|
;;;357    	}
;;;358    	else if (TIMx == TIM14)
000086  4a0c              LDR      r2,|L3.184|
000088  4291              CMP      r1,r2
00008a  d100              BNE      |L3.142|
;;;359    	{
;;;360    		ret = GPIO_AF_TIM14;
00008c  2009              MOVS     r0,#9
                  |L3.142|
;;;361    	}
;;;362    
;;;363    	return ret;
;;;364    }
00008e  4770              BX       lr
;;;365    
                          ENDP

                  |L3.144|
                          DCD      0x40010000
                  |L3.148|
                          DCD      0x40010400
                  |L3.152|
                          DCD      0x40014000
                  |L3.156|
                          DCD      0x40014400
                  |L3.160|
                          DCD      0x40014800
                  |L3.164|
                          DCD      0x40000400
                  |L3.168|
                          DCD      0x40000800
                  |L3.172|
                          DCD      0x40000c00
                  |L3.176|
                          DCD      0x40001800
                  |L3.180|
                          DCD      0x40001c00
                  |L3.184|
                          DCD      0x40002000

                          AREA ||i.bsp_GetPinSource||, CODE, READONLY, ALIGN=1

                  bsp_GetPinSource PROC
;;;138    */
;;;139    uint16_t bsp_GetPinSource(uint16_t gpio_pin)
000000  4601              MOV      r1,r0
;;;140    {
;;;141    	uint16_t ret = 0;
000002  2000              MOVS     r0,#0
;;;142    
;;;143    	if (gpio_pin == GPIO_Pin_0)
000004  2901              CMP      r1,#1
000006  d100              BNE      |L4.10|
;;;144    	{
;;;145    		ret = GPIO_PinSource0;
000008  e042              B        |L4.144|
                  |L4.10|
;;;146    	}
;;;147    	else if (gpio_pin == GPIO_Pin_1)
00000a  2902              CMP      r1,#2
00000c  d101              BNE      |L4.18|
;;;148    	{
;;;149    		ret = GPIO_PinSource1;
00000e  2001              MOVS     r0,#1
000010  e03e              B        |L4.144|
                  |L4.18|
;;;150    	}
;;;151    	else if (gpio_pin == GPIO_Pin_2)
000012  2904              CMP      r1,#4
000014  d101              BNE      |L4.26|
;;;152    	{
;;;153    		ret = GPIO_PinSource2;
000016  2002              MOVS     r0,#2
000018  e03a              B        |L4.144|
                  |L4.26|
;;;154    	}
;;;155    	else if (gpio_pin == GPIO_Pin_3)
00001a  2908              CMP      r1,#8
00001c  d101              BNE      |L4.34|
;;;156    	{
;;;157    		ret = GPIO_PinSource3;
00001e  2003              MOVS     r0,#3
000020  e036              B        |L4.144|
                  |L4.34|
;;;158    	}
;;;159    	else if (gpio_pin == GPIO_Pin_4)
000022  2910              CMP      r1,#0x10
000024  d101              BNE      |L4.42|
;;;160    	{
;;;161    		ret = GPIO_PinSource4;
000026  2004              MOVS     r0,#4
000028  e032              B        |L4.144|
                  |L4.42|
;;;162    	}
;;;163    	else if (gpio_pin == GPIO_Pin_5)
00002a  2920              CMP      r1,#0x20
00002c  d101              BNE      |L4.50|
;;;164    	{
;;;165    		ret = GPIO_PinSource5;
00002e  2005              MOVS     r0,#5
000030  e02e              B        |L4.144|
                  |L4.50|
;;;166    	}
;;;167    	else if (gpio_pin == GPIO_Pin_6)
000032  2940              CMP      r1,#0x40
000034  d101              BNE      |L4.58|
;;;168    	{
;;;169    		ret = GPIO_PinSource6;
000036  2006              MOVS     r0,#6
000038  e02a              B        |L4.144|
                  |L4.58|
;;;170    	}
;;;171    	else if (gpio_pin == GPIO_Pin_7)
00003a  2980              CMP      r1,#0x80
00003c  d101              BNE      |L4.66|
;;;172    	{
;;;173    		ret = GPIO_PinSource7;
00003e  2007              MOVS     r0,#7
000040  e026              B        |L4.144|
                  |L4.66|
;;;174    	}
;;;175    	else if (gpio_pin == GPIO_Pin_8)
000042  f5b17f80          CMP      r1,#0x100
000046  d101              BNE      |L4.76|
;;;176    	{
;;;177    		ret = GPIO_PinSource8;
000048  2008              MOVS     r0,#8
00004a  e021              B        |L4.144|
                  |L4.76|
;;;178    	}
;;;179    	else if (gpio_pin == GPIO_Pin_9)
00004c  f5b17f00          CMP      r1,#0x200
000050  d101              BNE      |L4.86|
;;;180    	{
;;;181    		ret = GPIO_PinSource9;
000052  2009              MOVS     r0,#9
000054  e01c              B        |L4.144|
                  |L4.86|
;;;182    	}
;;;183    	else if (gpio_pin == GPIO_Pin_10)
000056  f5b16f80          CMP      r1,#0x400
00005a  d101              BNE      |L4.96|
;;;184    	{
;;;185    		ret = GPIO_PinSource10;
00005c  200a              MOVS     r0,#0xa
00005e  e017              B        |L4.144|
                  |L4.96|
;;;186    	}
;;;187    	else if (gpio_pin == GPIO_Pin_11)
000060  f5b16f00          CMP      r1,#0x800
000064  d101              BNE      |L4.106|
;;;188    	{
;;;189    		ret = GPIO_PinSource11;
000066  200b              MOVS     r0,#0xb
000068  e012              B        |L4.144|
                  |L4.106|
;;;190    	}
;;;191    	else if (gpio_pin == GPIO_Pin_12)
00006a  f5b15f80          CMP      r1,#0x1000
00006e  d101              BNE      |L4.116|
;;;192    	{
;;;193    		ret = GPIO_PinSource12;
000070  200c              MOVS     r0,#0xc
000072  e00d              B        |L4.144|
                  |L4.116|
;;;194    	}
;;;195    	else if (gpio_pin == GPIO_Pin_13)
000074  f5b15f00          CMP      r1,#0x2000
000078  d101              BNE      |L4.126|
;;;196    	{
;;;197    		ret = GPIO_PinSource13;
00007a  200d              MOVS     r0,#0xd
00007c  e008              B        |L4.144|
                  |L4.126|
;;;198    	}
;;;199    	else if (gpio_pin == GPIO_Pin_14)
00007e  f5b14f80          CMP      r1,#0x4000
000082  d101              BNE      |L4.136|
;;;200    	{
;;;201    		ret = GPIO_PinSource14;
000084  200e              MOVS     r0,#0xe
000086  e003              B        |L4.144|
                  |L4.136|
;;;202    	}
;;;203    	else if (gpio_pin == GPIO_Pin_15)
000088  f5b14f00          CMP      r1,#0x8000
00008c  d100              BNE      |L4.144|
;;;204    	{
;;;205    		ret = GPIO_PinSource15;
00008e  200f              MOVS     r0,#0xf
                  |L4.144|
;;;206    	}
;;;207    
;;;208    	return ret;
;;;209    }
000090  4770              BX       lr
;;;210    
                          ENDP


                          AREA ||i.bsp_GetRCCofGPIO||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofGPIO PROC
;;;86     */
;;;87     uint32_t bsp_GetRCCofGPIO(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;88     {
;;;89     	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;90     
;;;91     	if (GPIOx == GPIOA)
000004  4a16              LDR      r2,|L5.96|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L5.14|
;;;92     	{
;;;93     		rcc = RCC_AHB1Periph_GPIOA;
00000a  2001              MOVS     r0,#1
00000c  e026              B        |L5.92|
                  |L5.14|
;;;94     	}
;;;95     	else if (GPIOx == GPIOB)
00000e  4a15              LDR      r2,|L5.100|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L5.24|
;;;96     	{
;;;97     		rcc = RCC_AHB1Periph_GPIOB;
000014  2002              MOVS     r0,#2
000016  e021              B        |L5.92|
                  |L5.24|
;;;98     	}
;;;99     	else if (GPIOx == GPIOC)
000018  4a13              LDR      r2,|L5.104|
00001a  4291              CMP      r1,r2
00001c  d101              BNE      |L5.34|
;;;100    	{
;;;101    		rcc = RCC_AHB1Periph_GPIOC;
00001e  2004              MOVS     r0,#4
000020  e01c              B        |L5.92|
                  |L5.34|
;;;102    	}
;;;103    	else if (GPIOx == GPIOD)
000022  4a12              LDR      r2,|L5.108|
000024  4291              CMP      r1,r2
000026  d101              BNE      |L5.44|
;;;104    	{
;;;105    		rcc = RCC_AHB1Periph_GPIOD;
000028  2008              MOVS     r0,#8
00002a  e017              B        |L5.92|
                  |L5.44|
;;;106    	}
;;;107    	else if (GPIOx == GPIOE)
00002c  4a10              LDR      r2,|L5.112|
00002e  4291              CMP      r1,r2
000030  d101              BNE      |L5.54|
;;;108    	{
;;;109    		rcc = RCC_AHB1Periph_GPIOE;
000032  2010              MOVS     r0,#0x10
000034  e012              B        |L5.92|
                  |L5.54|
;;;110    	}
;;;111    	else if (GPIOx == GPIOF)
000036  4a0f              LDR      r2,|L5.116|
000038  4291              CMP      r1,r2
00003a  d101              BNE      |L5.64|
;;;112    	{
;;;113    		rcc = RCC_AHB1Periph_GPIOF;
00003c  2020              MOVS     r0,#0x20
00003e  e00d              B        |L5.92|
                  |L5.64|
;;;114    	}
;;;115    	else if (GPIOx == GPIOG)
000040  4a0d              LDR      r2,|L5.120|
000042  4291              CMP      r1,r2
000044  d101              BNE      |L5.74|
;;;116    	{
;;;117    		rcc = RCC_AHB1Periph_GPIOG;
000046  2040              MOVS     r0,#0x40
000048  e008              B        |L5.92|
                  |L5.74|
;;;118    	}
;;;119    	else if (GPIOx == GPIOH)
00004a  4a0c              LDR      r2,|L5.124|
00004c  4291              CMP      r1,r2
00004e  d101              BNE      |L5.84|
;;;120    	{
;;;121    		rcc = RCC_AHB1Periph_GPIOH;
000050  2080              MOVS     r0,#0x80
000052  e003              B        |L5.92|
                  |L5.84|
;;;122    	}
;;;123    	else if (GPIOx == GPIOI)
000054  4a0a              LDR      r2,|L5.128|
000056  4291              CMP      r1,r2
000058  d100              BNE      |L5.92|
;;;124    	{
;;;125    		rcc = RCC_AHB1Periph_GPIOI;
00005a  1588              ASRS     r0,r1,#22
                  |L5.92|
;;;126    	}
;;;127    
;;;128    	return rcc;
;;;129    }
00005c  4770              BX       lr
;;;130    
                          ENDP

00005e  0000              DCW      0x0000
                  |L5.96|
                          DCD      0x40020000
                  |L5.100|
                          DCD      0x40020400
                  |L5.104|
                          DCD      0x40020800
                  |L5.108|
                          DCD      0x40020c00
                  |L5.112|
                          DCD      0x40021000
                  |L5.116|
                          DCD      0x40021400
                  |L5.120|
                          DCD      0x40021800
                  |L5.124|
                          DCD      0x40021c00
                  |L5.128|
                          DCD      0x40022000

                          AREA ||i.bsp_GetRCCofTIM||, CODE, READONLY, ALIGN=2

                  bsp_GetRCCofTIM PROC
;;;218    */
;;;219    uint32_t bsp_GetRCCofTIM(TIM_TypeDef* TIMx)
000000  4601              MOV      r1,r0
;;;220    {
;;;221    	uint32_t rcc = 0;
000002  2000              MOVS     r0,#0
;;;222    
;;;223    	/*
;;;224    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13, TIM14
;;;225    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;226    	*/
;;;227    	if (TIMx == TIM1)
000004  4a24              LDR      r2,|L6.152|
000006  4291              CMP      r1,r2
000008  d101              BNE      |L6.14|
;;;228    	{
;;;229    		rcc = RCC_APB2Periph_TIM1;
00000a  2001              MOVS     r0,#1
00000c  e042              B        |L6.148|
                  |L6.14|
;;;230    	}
;;;231    	else if (TIMx == TIM8)
00000e  4a23              LDR      r2,|L6.156|
000010  4291              CMP      r1,r2
000012  d101              BNE      |L6.24|
;;;232    	{
;;;233    		rcc = RCC_APB2Periph_TIM8;
000014  2002              MOVS     r0,#2
000016  e03d              B        |L6.148|
                  |L6.24|
;;;234    	}
;;;235    	else if (TIMx == TIM9)
000018  4a21              LDR      r2,|L6.160|
00001a  4291              CMP      r1,r2
00001c  d102              BNE      |L6.36|
;;;236    	{
;;;237    		rcc = RCC_APB2Periph_TIM9;
00001e  f44f3080          MOV      r0,#0x10000
000022  e037              B        |L6.148|
                  |L6.36|
;;;238    	}
;;;239    	else if (TIMx == TIM10)
000024  4a1f              LDR      r2,|L6.164|
000026  4291              CMP      r1,r2
000028  d102              BNE      |L6.48|
;;;240    	{
;;;241    		rcc = RCC_APB2Periph_TIM10;
00002a  f44f3000          MOV      r0,#0x20000
00002e  e031              B        |L6.148|
                  |L6.48|
;;;242    	}
;;;243    	else if (TIMx == TIM11)
000030  4a1d              LDR      r2,|L6.168|
000032  4291              CMP      r1,r2
000034  d102              BNE      |L6.60|
;;;244    	{
;;;245    		rcc = RCC_APB2Periph_TIM11;
000036  f44f2080          MOV      r0,#0x40000
00003a  e02b              B        |L6.148|
                  |L6.60|
;;;246    	}
;;;247    	/* 下面是 APB1时钟 */
;;;248    	else if (TIMx == TIM2)
00003c  f1b14f80          CMP      r1,#0x40000000
000040  d101              BNE      |L6.70|
;;;249    	{
;;;250    		rcc = RCC_APB1Periph_TIM2;
000042  2001              MOVS     r0,#1
000044  e026              B        |L6.148|
                  |L6.70|
;;;251    	}
;;;252    	else if (TIMx == TIM3)
000046  4a19              LDR      r2,|L6.172|
000048  4291              CMP      r1,r2
00004a  d101              BNE      |L6.80|
;;;253    	{
;;;254    		rcc = RCC_APB1Periph_TIM3;
00004c  2002              MOVS     r0,#2
00004e  e021              B        |L6.148|
                  |L6.80|
;;;255    	}
;;;256    	else if (TIMx == TIM4)
000050  4a17              LDR      r2,|L6.176|
000052  4291              CMP      r1,r2
000054  d101              BNE      |L6.90|
;;;257    	{
;;;258    		rcc = RCC_APB1Periph_TIM4;
000056  2004              MOVS     r0,#4
000058  e01c              B        |L6.148|
                  |L6.90|
;;;259    	}
;;;260    	else if (TIMx == TIM5)
00005a  4a16              LDR      r2,|L6.180|
00005c  4291              CMP      r1,r2
00005e  d101              BNE      |L6.100|
;;;261    	{
;;;262    		rcc = RCC_APB1Periph_TIM5;
000060  2008              MOVS     r0,#8
000062  e017              B        |L6.148|
                  |L6.100|
;;;263    	}
;;;264    	else if (TIMx == TIM6)
000064  4a14              LDR      r2,|L6.184|
000066  4291              CMP      r1,r2
000068  d101              BNE      |L6.110|
;;;265    	{
;;;266    		rcc = RCC_APB1Periph_TIM6;
00006a  2010              MOVS     r0,#0x10
00006c  e012              B        |L6.148|
                  |L6.110|
;;;267    	}
;;;268    	else if (TIMx == TIM7)
00006e  4a13              LDR      r2,|L6.188|
000070  4291              CMP      r1,r2
000072  d101              BNE      |L6.120|
;;;269    	{
;;;270    		rcc = RCC_APB1Periph_TIM7;
000074  2020              MOVS     r0,#0x20
000076  e00d              B        |L6.148|
                  |L6.120|
;;;271    	}
;;;272    	else if (TIMx == TIM12)
000078  4a11              LDR      r2,|L6.192|
00007a  4291              CMP      r1,r2
00007c  d101              BNE      |L6.130|
;;;273    	{
;;;274    		rcc = RCC_APB1Periph_TIM12;
00007e  2040              MOVS     r0,#0x40
000080  e008              B        |L6.148|
                  |L6.130|
;;;275    	}
;;;276    	else if (TIMx == TIM13)
000082  4a10              LDR      r2,|L6.196|
000084  4291              CMP      r1,r2
000086  d101              BNE      |L6.140|
;;;277    	{
;;;278    		rcc = RCC_APB1Periph_TIM13;
000088  2080              MOVS     r0,#0x80
00008a  e003              B        |L6.148|
                  |L6.140|
;;;279    	}
;;;280    	else if (TIMx == TIM14)
00008c  4a0e              LDR      r2,|L6.200|
00008e  4291              CMP      r1,r2
000090  d100              BNE      |L6.148|
;;;281    	{
;;;282    		rcc = RCC_APB1Periph_TIM14;
000092  1588              ASRS     r0,r1,#22
                  |L6.148|
;;;283    	}
;;;284    
;;;285    	return rcc;
;;;286    }
000094  4770              BX       lr
;;;287    
                          ENDP

000096  0000              DCW      0x0000
                  |L6.152|
                          DCD      0x40010000
                  |L6.156|
                          DCD      0x40010400
                  |L6.160|
                          DCD      0x40014000
                  |L6.164|
                          DCD      0x40014400
                  |L6.168|
                          DCD      0x40014800
                  |L6.172|
                          DCD      0x40000400
                  |L6.176|
                          DCD      0x40000800
                  |L6.180|
                          DCD      0x40000c00
                  |L6.184|
                          DCD      0x40001000
                  |L6.188|
                          DCD      0x40001400
                  |L6.192|
                          DCD      0x40001800
                  |L6.196|
                          DCD      0x40001c00
                  |L6.200|
                          DCD      0x40002000

                          AREA ||i.bsp_ServoInit||, CODE, READONLY, ALIGN=1

                  bsp_ServoInit PROC
;;;1018   */
;;;1019   void bsp_ServoInit(void)
000000  b510              PUSH     {r4,lr}
;;;1020   {
;;;1021   	   bsp_Servo_GPIOConfig();
000002  f7fffffe          BL       bsp_Servo_GPIOConfig
;;;1022   	   bsp_Servo_TIMConfig();
000006  f7fffffe          BL       bsp_Servo_TIMConfig
;;;1023   }
00000a  bd10              POP      {r4,pc}
;;;1024   /***************************** 阿波罗科技 www.apollorobot.com (END OF FILE) *********************************/
                          ENDP


                          AREA ||i.bsp_Servo_GPIOConfig||, CODE, READONLY, ALIGN=2

                  bsp_Servo_GPIOConfig PROC
;;;838    */
;;;839    static void bsp_Servo_GPIOConfig(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;840    {
;;;841    				GPIO_InitTypeDef  GPIO_InitStructure;
;;;842    
;;;843    				/* 使能GPIO时钟 */
;;;844    				RCC_AHB1PeriphClockCmd(HIP_PORT_CLK, ENABLE);
000002  2101              MOVS     r1,#1
000004  2009              MOVS     r0,#9
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;845    				RCC_AHB1PeriphClockCmd(KNEE_PORT_CLK, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  2010              MOVS     r0,#0x10
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;846    	      RCC_AHB1PeriphClockCmd(ANKLE_PORT_CLK, ENABLE);
000012  2101              MOVS     r1,#1
000014  200c              MOVS     r0,#0xc
000016  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;847    
;;;848    				/* 配置HIP    GPIO */
;;;849    				GPIO_InitStructure.GPIO_Pin = HIP_1_Pin | HIP_2_Pin | HIP_3_Pin | HIP_4_Pin;	/* 带入的形参 */
00001a  200f              MOVS     r0,#0xf
00001c  9000              STR      r0,[sp,#0]
;;;850    				GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001e  2002              MOVS     r0,#2
000020  f88d0004          STRB     r0,[sp,#4]
;;;851    				GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
000024  2003              MOVS     r0,#3
000026  f88d0005          STRB     r0,[sp,#5]
;;;852    				GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
00002a  2000              MOVS     r0,#0
00002c  f88d0006          STRB     r0,[sp,#6]
;;;853    				GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP ;
000030  2001              MOVS     r0,#1
000032  f88d0007          STRB     r0,[sp,#7]
;;;854    				GPIO_Init(HIP_PORT_1, &GPIO_InitStructure);
000036  4669              MOV      r1,sp
000038  483c              LDR      r0,|L8.300|
00003a  f7fffffe          BL       GPIO_Init
;;;855    	      /* 连接到AF功能 */
;;;856    				GPIO_PinAFConfig(HIP_PORT_1, HIP_1_PinSource, HIP_PORT_AF_1);
00003e  2202              MOVS     r2,#2
000040  2100              MOVS     r1,#0
000042  483a              LDR      r0,|L8.300|
000044  f7fffffe          BL       GPIO_PinAFConfig
;;;857    	      GPIO_PinAFConfig(HIP_PORT_1, HIP_2_PinSource, HIP_PORT_AF_1);
000048  2202              MOVS     r2,#2
00004a  2101              MOVS     r1,#1
00004c  4837              LDR      r0,|L8.300|
00004e  f7fffffe          BL       GPIO_PinAFConfig
;;;858    				GPIO_PinAFConfig(HIP_PORT_1, HIP_3_PinSource, HIP_PORT_AF_1);
000052  2202              MOVS     r2,#2
000054  4611              MOV      r1,r2
000056  4835              LDR      r0,|L8.300|
000058  f7fffffe          BL       GPIO_PinAFConfig
;;;859    				GPIO_PinAFConfig(HIP_PORT_1, HIP_4_PinSource, HIP_PORT_AF_1);
00005c  2202              MOVS     r2,#2
00005e  2103              MOVS     r1,#3
000060  4832              LDR      r0,|L8.300|
000062  f7fffffe          BL       GPIO_PinAFConfig
;;;860    
;;;861    				/* 配置GPIO */
;;;862    				GPIO_InitStructure.GPIO_Pin = HIP_5_Pin | HIP_6_Pin ;	/* 带入的形参 */
000066  f44f4040          MOV      r0,#0xc000
00006a  9000              STR      r0,[sp,#0]
;;;863    	      GPIO_Init(HIP_PORT_2, &GPIO_InitStructure);
00006c  4669              MOV      r1,sp
00006e  4830              LDR      r0,|L8.304|
000070  f7fffffe          BL       GPIO_Init
;;;864    				/* 连接到AF功能 */
;;;865    				GPIO_PinAFConfig(HIP_PORT_2, HIP_5_PinSource, HIP_PORT_AF_2);
000074  2202              MOVS     r2,#2
000076  210e              MOVS     r1,#0xe
000078  482d              LDR      r0,|L8.304|
00007a  f7fffffe          BL       GPIO_PinAFConfig
;;;866    				GPIO_PinAFConfig(HIP_PORT_2, HIP_6_PinSource, HIP_PORT_AF_2);
00007e  2202              MOVS     r2,#2
000080  210f              MOVS     r1,#0xf
000082  482b              LDR      r0,|L8.304|
000084  f7fffffe          BL       GPIO_PinAFConfig
;;;867    				
;;;868    				
;;;869    				/* 配置KNEE    GPIO */
;;;870    				GPIO_InitStructure.GPIO_Pin = KNEE_1_Pin | KNEE_2_Pin | KNEE_3_Pin | KNEE_4_Pin | KNEE_5_Pin | KNEE_6_Pin;	/* 带入的形参 */
000088  f6462060          MOV      r0,#0x6a60
00008c  9000              STR      r0,[sp,#0]
;;;871    				GPIO_Init(KNEE_PORT, &GPIO_InitStructure);
00008e  4669              MOV      r1,sp
000090  4828              LDR      r0,|L8.308|
000092  f7fffffe          BL       GPIO_Init
;;;872    				/* 连接到AF功能 */
;;;873    				GPIO_PinAFConfig(KNEE_PORT, KNEE_1_PinSource, KNEE_PORT_AF_1);
000096  2201              MOVS     r2,#1
000098  210d              MOVS     r1,#0xd
00009a  4826              LDR      r0,|L8.308|
00009c  f7fffffe          BL       GPIO_PinAFConfig
;;;874    				GPIO_PinAFConfig(KNEE_PORT, KNEE_2_PinSource, KNEE_PORT_AF_1);
0000a0  2201              MOVS     r2,#1
0000a2  210e              MOVS     r1,#0xe
0000a4  4823              LDR      r0,|L8.308|
0000a6  f7fffffe          BL       GPIO_PinAFConfig
;;;875    				GPIO_PinAFConfig(KNEE_PORT, KNEE_3_PinSource, KNEE_PORT_AF_2);
0000aa  2203              MOVS     r2,#3
0000ac  2105              MOVS     r1,#5
0000ae  4821              LDR      r0,|L8.308|
0000b0  f7fffffe          BL       GPIO_PinAFConfig
;;;876    				GPIO_PinAFConfig(KNEE_PORT, KNEE_4_PinSource, KNEE_PORT_AF_2);		
0000b4  2203              MOVS     r2,#3
0000b6  2106              MOVS     r1,#6
0000b8  481e              LDR      r0,|L8.308|
0000ba  f7fffffe          BL       GPIO_PinAFConfig
;;;877    				GPIO_PinAFConfig(KNEE_PORT, KNEE_5_PinSource, KNEE_PORT_AF_1);
0000be  2201              MOVS     r2,#1
0000c0  2109              MOVS     r1,#9
0000c2  481c              LDR      r0,|L8.308|
0000c4  f7fffffe          BL       GPIO_PinAFConfig
;;;878    				GPIO_PinAFConfig(KNEE_PORT, KNEE_6_PinSource, KNEE_PORT_AF_1);
0000c8  2201              MOVS     r2,#1
0000ca  210b              MOVS     r1,#0xb
0000cc  4819              LDR      r0,|L8.308|
0000ce  f7fffffe          BL       GPIO_PinAFConfig
;;;879    				
;;;880    				
;;;881    				/* 配置ANKLE    GPIO */
;;;882    				GPIO_InitStructure.GPIO_Pin = ANKLE_1_Pin | ANKLE_2_Pin | ANKLE_3_Pin | ANKLE_4_Pin ;	/* 带入的形参 */
0000d2  f44f7070          MOV      r0,#0x3c0
0000d6  9000              STR      r0,[sp,#0]
;;;883    				GPIO_Init(ANKLE_PORT_1, &GPIO_InitStructure);
0000d8  4669              MOV      r1,sp
0000da  4817              LDR      r0,|L8.312|
0000dc  f7fffffe          BL       GPIO_Init
;;;884    				/* 连接到AF功能 */
;;;885    				GPIO_PinAFConfig(ANKLE_PORT_1, ANKLE_1_PinSource, ANKLE_PORT_AF_1);
0000e0  2202              MOVS     r2,#2
0000e2  2106              MOVS     r1,#6
0000e4  4814              LDR      r0,|L8.312|
0000e6  f7fffffe          BL       GPIO_PinAFConfig
;;;886    				GPIO_PinAFConfig(ANKLE_PORT_1, ANKLE_2_PinSource, ANKLE_PORT_AF_1);
0000ea  2202              MOVS     r2,#2
0000ec  2107              MOVS     r1,#7
0000ee  4812              LDR      r0,|L8.312|
0000f0  f7fffffe          BL       GPIO_PinAFConfig
;;;887    				GPIO_PinAFConfig(ANKLE_PORT_1, ANKLE_3_PinSource, ANKLE_PORT_AF_1);
0000f4  2202              MOVS     r2,#2
0000f6  2108              MOVS     r1,#8
0000f8  480f              LDR      r0,|L8.312|
0000fa  f7fffffe          BL       GPIO_PinAFConfig
;;;888    				GPIO_PinAFConfig(ANKLE_PORT_1, ANKLE_4_PinSource, ANKLE_PORT_AF_1);
0000fe  2202              MOVS     r2,#2
000100  2109              MOVS     r1,#9
000102  480d              LDR      r0,|L8.312|
000104  f7fffffe          BL       GPIO_PinAFConfig
;;;889    				
;;;890    				GPIO_InitStructure.GPIO_Pin = ANKLE_5_Pin | ANKLE_6_Pin;	/* 带入的形参 */
000108  f44f5040          MOV      r0,#0x3000
00010c  9000              STR      r0,[sp,#0]
;;;891    				GPIO_Init(ANKLE_PORT_2, &GPIO_InitStructure);				
00010e  4669              MOV      r1,sp
000110  4807              LDR      r0,|L8.304|
000112  f7fffffe          BL       GPIO_Init
;;;892    				GPIO_PinAFConfig(ANKLE_PORT_2, ANKLE_5_PinSource, ANKLE_PORT_AF_2);
000116  2202              MOVS     r2,#2
000118  210c              MOVS     r1,#0xc
00011a  4805              LDR      r0,|L8.304|
00011c  f7fffffe          BL       GPIO_PinAFConfig
;;;893    				GPIO_PinAFConfig(ANKLE_PORT_2, ANKLE_6_PinSource, ANKLE_PORT_AF_2);
000120  2202              MOVS     r2,#2
000122  210d              MOVS     r1,#0xd
000124  4802              LDR      r0,|L8.304|
000126  f7fffffe          BL       GPIO_PinAFConfig
;;;894    }
00012a  bd1c              POP      {r2-r4,pc}
;;;895    
                          ENDP

                  |L8.300|
                          DCD      0x40020000
                  |L8.304|
                          DCD      0x40020c00
                  |L8.308|
                          DCD      0x40021000
                  |L8.312|
                          DCD      0x40020800

                          AREA ||i.bsp_Servo_TIMConfig||, CODE, READONLY, ALIGN=2

                  bsp_Servo_TIMConfig PROC
;;;904    */
;;;905    static void bsp_Servo_TIMConfig(void)
000000  b510              PUSH     {r4,lr}
;;;906    {
000002  b088              SUB      sp,sp,#0x20
;;;907    	 	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;908    		TIM_OCInitTypeDef          TIM_OCInitStructure;
;;;909    	  u16                       CCR_VAL = DefaultPWM;
000004  f24054dc          MOV      r4,#0x5dc
;;;910    	
;;;911    			RCC_APB1PeriphClockCmd( HIP_TIM_CLK | ANKLE_TIM_CLK, ENABLE);
000008  2101              MOVS     r1,#1
00000a  200e              MOVS     r0,#0xe
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;912    			 /* Time base configuration */
;;;913    			TIM_TimeBaseStructure.TIM_Period = TIMPeriod;
000010  f644601f          MOV      r0,#0x4e1f
000014  9006              STR      r0,[sp,#0x18]
;;;914    			TIM_TimeBaseStructure.TIM_Prescaler = TIMAPB1_Prescaler;//27 - 1;
000016  2053              MOVS     r0,#0x53
000018  f8ad0014          STRH     r0,[sp,#0x14]
;;;915    			TIM_TimeBaseStructure.TIM_ClockDivision = 0;
00001c  2000              MOVS     r0,#0
00001e  f8ad001c          STRH     r0,[sp,#0x1c]
;;;916    			TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000022  f8ad0016          STRH     r0,[sp,#0x16]
;;;917    
;;;918    			TIM_TimeBaseInit(HIP_TIM_1, &TIM_TimeBaseStructure);
000026  a905              ADD      r1,sp,#0x14
000028  487f              LDR      r0,|L9.552|
00002a  f7fffffe          BL       TIM_TimeBaseInit
;;;919    			TIM_TimeBaseInit(HIP_TIM_2, &TIM_TimeBaseStructure);
00002e  a905              ADD      r1,sp,#0x14
000030  487e              LDR      r0,|L9.556|
000032  f7fffffe          BL       TIM_TimeBaseInit
;;;920    	    TIM_TimeBaseInit(ANKLE_TIM_1, &TIM_TimeBaseStructure);
000036  a905              ADD      r1,sp,#0x14
000038  487d              LDR      r0,|L9.560|
00003a  f7fffffe          BL       TIM_TimeBaseInit
;;;921    			/* PWM1 Mode configuration: Channel1 */
;;;922    			TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
00003e  2060              MOVS     r0,#0x60
000040  f8ad0000          STRH     r0,[sp,#0]
;;;923    			TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000044  2001              MOVS     r0,#1
000046  f8ad0002          STRH     r0,[sp,#2]
;;;924    			TIM_OCInitStructure.TIM_Pulse = CCR_VAL;
00004a  9402              STR      r4,[sp,#8]
;;;925    			TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
00004c  2000              MOVS     r0,#0
00004e  f8ad000c          STRH     r0,[sp,#0xc]
;;;926    			
;;;927    			/*TIM5 Initialize*/
;;;928    			TIM_OC1Init(HIP_TIM_1, &TIM_OCInitStructure);
000052  4669              MOV      r1,sp
000054  4874              LDR      r0,|L9.552|
000056  f7fffffe          BL       TIM_OC1Init
;;;929    			TIM_OC1PreloadConfig(HIP_TIM_1, TIM_OCPreload_Enable);
00005a  2108              MOVS     r1,#8
00005c  4872              LDR      r0,|L9.552|
00005e  f7fffffe          BL       TIM_OC1PreloadConfig
;;;930    			TIM_OC2Init(HIP_TIM_1, &TIM_OCInitStructure);
000062  4669              MOV      r1,sp
000064  4870              LDR      r0,|L9.552|
000066  f7fffffe          BL       TIM_OC2Init
;;;931    			TIM_OC2PreloadConfig(HIP_TIM_1, TIM_OCPreload_Enable);
00006a  2108              MOVS     r1,#8
00006c  486e              LDR      r0,|L9.552|
00006e  f7fffffe          BL       TIM_OC2PreloadConfig
;;;932    			TIM_OC3Init(HIP_TIM_1, &TIM_OCInitStructure);
000072  4669              MOV      r1,sp
000074  486c              LDR      r0,|L9.552|
000076  f7fffffe          BL       TIM_OC3Init
;;;933    			TIM_OC3PreloadConfig(HIP_TIM_1, TIM_OCPreload_Enable);
00007a  2108              MOVS     r1,#8
00007c  486a              LDR      r0,|L9.552|
00007e  f7fffffe          BL       TIM_OC3PreloadConfig
;;;934    			TIM_OC4Init(HIP_TIM_1, &TIM_OCInitStructure);
000082  4669              MOV      r1,sp
000084  4868              LDR      r0,|L9.552|
000086  f7fffffe          BL       TIM_OC4Init
;;;935    			TIM_OC4PreloadConfig(HIP_TIM_1, TIM_OCPreload_Enable);
00008a  2108              MOVS     r1,#8
00008c  4866              LDR      r0,|L9.552|
00008e  f7fffffe          BL       TIM_OC4PreloadConfig
;;;936    			TIM_ARRPreloadConfig(HIP_TIM_1, ENABLE);
000092  2101              MOVS     r1,#1
000094  4864              LDR      r0,|L9.552|
000096  f7fffffe          BL       TIM_ARRPreloadConfig
;;;937    			/* TIMx enable counter */
;;;938    	    TIM_Cmd(HIP_TIM_1, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  4862              LDR      r0,|L9.552|
00009e  f7fffffe          BL       TIM_Cmd
;;;939    			
;;;940    			/*TIM4 Initialize*/
;;;941    			TIM_OC1Init(HIP_TIM_2, &TIM_OCInitStructure);
0000a2  4669              MOV      r1,sp
0000a4  4861              LDR      r0,|L9.556|
0000a6  f7fffffe          BL       TIM_OC1Init
;;;942    			TIM_OC1PreloadConfig(HIP_TIM_2, TIM_OCPreload_Enable);
0000aa  2108              MOVS     r1,#8
0000ac  485f              LDR      r0,|L9.556|
0000ae  f7fffffe          BL       TIM_OC1PreloadConfig
;;;943    			TIM_OC2Init(HIP_TIM_2, &TIM_OCInitStructure);
0000b2  4669              MOV      r1,sp
0000b4  485d              LDR      r0,|L9.556|
0000b6  f7fffffe          BL       TIM_OC2Init
;;;944    			TIM_OC2PreloadConfig(HIP_TIM_2, TIM_OCPreload_Enable);
0000ba  2108              MOVS     r1,#8
0000bc  485b              LDR      r0,|L9.556|
0000be  f7fffffe          BL       TIM_OC2PreloadConfig
;;;945    			TIM_OC3Init(HIP_TIM_2, &TIM_OCInitStructure);
0000c2  4669              MOV      r1,sp
0000c4  4859              LDR      r0,|L9.556|
0000c6  f7fffffe          BL       TIM_OC3Init
;;;946    			TIM_OC3PreloadConfig(HIP_TIM_2, TIM_OCPreload_Enable);
0000ca  2108              MOVS     r1,#8
0000cc  4857              LDR      r0,|L9.556|
0000ce  f7fffffe          BL       TIM_OC3PreloadConfig
;;;947    			TIM_OC4Init(HIP_TIM_2, &TIM_OCInitStructure);
0000d2  4669              MOV      r1,sp
0000d4  4855              LDR      r0,|L9.556|
0000d6  f7fffffe          BL       TIM_OC4Init
;;;948    			TIM_OC4PreloadConfig(HIP_TIM_2, TIM_OCPreload_Enable);
0000da  2108              MOVS     r1,#8
0000dc  4853              LDR      r0,|L9.556|
0000de  f7fffffe          BL       TIM_OC4PreloadConfig
;;;949    			TIM_ARRPreloadConfig(HIP_TIM_2, ENABLE);
0000e2  2101              MOVS     r1,#1
0000e4  4851              LDR      r0,|L9.556|
0000e6  f7fffffe          BL       TIM_ARRPreloadConfig
;;;950    			/* TIMx enable counter */
;;;951    	    TIM_Cmd(HIP_TIM_2, ENABLE);
0000ea  2101              MOVS     r1,#1
0000ec  484f              LDR      r0,|L9.556|
0000ee  f7fffffe          BL       TIM_Cmd
;;;952    			
;;;953    			/*TIM3 Initialize*/
;;;954    			TIM_OC1Init(ANKLE_TIM_1, &TIM_OCInitStructure);
0000f2  4669              MOV      r1,sp
0000f4  484e              LDR      r0,|L9.560|
0000f6  f7fffffe          BL       TIM_OC1Init
;;;955    			TIM_OC1PreloadConfig(ANKLE_TIM_1, TIM_OCPreload_Enable);
0000fa  2108              MOVS     r1,#8
0000fc  484c              LDR      r0,|L9.560|
0000fe  f7fffffe          BL       TIM_OC1PreloadConfig
;;;956    			TIM_OC2Init(ANKLE_TIM_1, &TIM_OCInitStructure);
000102  4669              MOV      r1,sp
000104  484a              LDR      r0,|L9.560|
000106  f7fffffe          BL       TIM_OC2Init
;;;957    			TIM_OC2PreloadConfig(ANKLE_TIM_1, TIM_OCPreload_Enable);
00010a  2108              MOVS     r1,#8
00010c  4848              LDR      r0,|L9.560|
00010e  f7fffffe          BL       TIM_OC2PreloadConfig
;;;958    			TIM_OC3Init(ANKLE_TIM_1, &TIM_OCInitStructure);
000112  4669              MOV      r1,sp
000114  4846              LDR      r0,|L9.560|
000116  f7fffffe          BL       TIM_OC3Init
;;;959    			TIM_OC3PreloadConfig(ANKLE_TIM_1, TIM_OCPreload_Enable);
00011a  2108              MOVS     r1,#8
00011c  4844              LDR      r0,|L9.560|
00011e  f7fffffe          BL       TIM_OC3PreloadConfig
;;;960    			TIM_OC4Init(ANKLE_TIM_1, &TIM_OCInitStructure);
000122  4669              MOV      r1,sp
000124  4842              LDR      r0,|L9.560|
000126  f7fffffe          BL       TIM_OC4Init
;;;961    			TIM_OC4PreloadConfig(ANKLE_TIM_1, TIM_OCPreload_Enable);
00012a  2108              MOVS     r1,#8
00012c  4840              LDR      r0,|L9.560|
00012e  f7fffffe          BL       TIM_OC4PreloadConfig
;;;962    			TIM_ARRPreloadConfig(ANKLE_TIM_1, ENABLE);
000132  2101              MOVS     r1,#1
000134  483e              LDR      r0,|L9.560|
000136  f7fffffe          BL       TIM_ARRPreloadConfig
;;;963    			/* TIMx enable counter */
;;;964    	    TIM_Cmd(ANKLE_TIM_1, ENABLE);
00013a  2101              MOVS     r1,#1
00013c  483c              LDR      r0,|L9.560|
00013e  f7fffffe          BL       TIM_Cmd
;;;965    			
;;;966    			RCC_APB2PeriphClockCmd( KNEE_TIM_CLK, ENABLE);
000142  2101              MOVS     r1,#1
000144  f04f1001          MOV      r0,#0x10001
000148  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;967    			/* Time base configuration */
;;;968    	    TIM_TimeBaseStructure.TIM_Period = TIMPeriod;
00014c  f644601f          MOV      r0,#0x4e1f
000150  9006              STR      r0,[sp,#0x18]
;;;969    			TIM_TimeBaseStructure.TIM_Prescaler = TIMAPB2_Prescaler;
000152  20a7              MOVS     r0,#0xa7
000154  f8ad0014          STRH     r0,[sp,#0x14]
;;;970    			TIM_TimeBaseStructure.TIM_ClockDivision = 0;
000158  2000              MOVS     r0,#0
00015a  f8ad001c          STRH     r0,[sp,#0x1c]
;;;971    			TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
00015e  f8ad0016          STRH     r0,[sp,#0x16]
;;;972    			TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;		/* TIM1 和 TIM8 必须设置 */	
000162  f88d001e          STRB     r0,[sp,#0x1e]
;;;973    
;;;974    			TIM_TimeBaseInit(KNEE_TIM_1, &TIM_TimeBaseStructure);
000166  a905              ADD      r1,sp,#0x14
000168  4832              LDR      r0,|L9.564|
00016a  f7fffffe          BL       TIM_TimeBaseInit
;;;975    			TIM_TimeBaseInit(KNEE_TIM_2, &TIM_TimeBaseStructure);
00016e  a905              ADD      r1,sp,#0x14
000170  4831              LDR      r0,|L9.568|
000172  f7fffffe          BL       TIM_TimeBaseInit
;;;976    			
;;;977    			/* PWM1 Mode configuration: Channel1 */
;;;978    			TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
000176  2060              MOVS     r0,#0x60
000178  f8ad0000          STRH     r0,[sp,#0]
;;;979    			TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
00017c  2001              MOVS     r0,#1
00017e  f8ad0002          STRH     r0,[sp,#2]
;;;980    			TIM_OCInitStructure.TIM_Pulse = CCR_VAL;
000182  9402              STR      r4,[sp,#8]
;;;981    			TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
000184  2000              MOVS     r0,#0
000186  f8ad000c          STRH     r0,[sp,#0xc]
;;;982    			
;;;983    			/*TIM9 Initialize*/
;;;984    			TIM_OC1Init(KNEE_TIM_2, &TIM_OCInitStructure);
00018a  4669              MOV      r1,sp
00018c  482a              LDR      r0,|L9.568|
00018e  f7fffffe          BL       TIM_OC1Init
;;;985    			TIM_OC1PreloadConfig(KNEE_TIM_2, TIM_OCPreload_Enable);
000192  2108              MOVS     r1,#8
000194  4828              LDR      r0,|L9.568|
000196  f7fffffe          BL       TIM_OC1PreloadConfig
;;;986    			TIM_OC2Init(KNEE_TIM_2, &TIM_OCInitStructure);
00019a  4669              MOV      r1,sp
00019c  4826              LDR      r0,|L9.568|
00019e  f7fffffe          BL       TIM_OC2Init
;;;987    			TIM_OC2PreloadConfig(KNEE_TIM_2, TIM_OCPreload_Enable);
0001a2  2108              MOVS     r1,#8
0001a4  4824              LDR      r0,|L9.568|
0001a6  f7fffffe          BL       TIM_OC2PreloadConfig
;;;988    			TIM_ARRPreloadConfig(KNEE_TIM_2, ENABLE);
0001aa  2101              MOVS     r1,#1
0001ac  4822              LDR      r0,|L9.568|
0001ae  f7fffffe          BL       TIM_ARRPreloadConfig
;;;989    			/* TIMx enable counter */
;;;990    	    TIM_Cmd(KNEE_TIM_2, ENABLE);
0001b2  2101              MOVS     r1,#1
0001b4  4820              LDR      r0,|L9.568|
0001b6  f7fffffe          BL       TIM_Cmd
;;;991    			
;;;992    			TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;	/* only for TIM1 and TIM8. */	
0001ba  2000              MOVS     r0,#0
0001bc  f8ad0004          STRH     r0,[sp,#4]
;;;993    			TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
0001c0  f8ad000e          STRH     r0,[sp,#0xe]
;;;994    			TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
0001c4  f8ad0010          STRH     r0,[sp,#0x10]
;;;995    			TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
0001c8  f8ad0012          STRH     r0,[sp,#0x12]
;;;996    			/*TIM1 Initialize*/
;;;997    			TIM_OC1Init(KNEE_TIM_1, &TIM_OCInitStructure);
0001cc  4669              MOV      r1,sp
0001ce  4819              LDR      r0,|L9.564|
0001d0  f7fffffe          BL       TIM_OC1Init
;;;998    			TIM_OC1PreloadConfig(KNEE_TIM_1, TIM_OCPreload_Enable);
0001d4  2108              MOVS     r1,#8
0001d6  4817              LDR      r0,|L9.564|
0001d8  f7fffffe          BL       TIM_OC1PreloadConfig
;;;999    			TIM_OC2Init(KNEE_TIM_1, &TIM_OCInitStructure);
0001dc  4669              MOV      r1,sp
0001de  4815              LDR      r0,|L9.564|
0001e0  f7fffffe          BL       TIM_OC2Init
;;;1000   			TIM_OC2PreloadConfig(KNEE_TIM_1, TIM_OCPreload_Enable);
0001e4  2108              MOVS     r1,#8
0001e6  4813              LDR      r0,|L9.564|
0001e8  f7fffffe          BL       TIM_OC2PreloadConfig
;;;1001   			TIM_OC3Init(KNEE_TIM_1, &TIM_OCInitStructure);
0001ec  4669              MOV      r1,sp
0001ee  4811              LDR      r0,|L9.564|
0001f0  f7fffffe          BL       TIM_OC3Init
;;;1002   			TIM_OC3PreloadConfig(KNEE_TIM_1, TIM_OCPreload_Enable);
0001f4  2108              MOVS     r1,#8
0001f6  480f              LDR      r0,|L9.564|
0001f8  f7fffffe          BL       TIM_OC3PreloadConfig
;;;1003   			TIM_OC4Init(KNEE_TIM_1, &TIM_OCInitStructure);
0001fc  4669              MOV      r1,sp
0001fe  480d              LDR      r0,|L9.564|
000200  f7fffffe          BL       TIM_OC4Init
;;;1004   			TIM_OC4PreloadConfig(KNEE_TIM_1, TIM_OCPreload_Enable);
000204  2108              MOVS     r1,#8
000206  480b              LDR      r0,|L9.564|
000208  f7fffffe          BL       TIM_OC4PreloadConfig
;;;1005   			TIM_ARRPreloadConfig(KNEE_TIM_1, ENABLE);
00020c  2101              MOVS     r1,#1
00020e  4809              LDR      r0,|L9.564|
000210  f7fffffe          BL       TIM_ARRPreloadConfig
;;;1006   			/* TIMx enable counter */
;;;1007   	    TIM_Cmd(KNEE_TIM_1, ENABLE);
000214  2101              MOVS     r1,#1
000216  4807              LDR      r0,|L9.564|
000218  f7fffffe          BL       TIM_Cmd
;;;1008   			TIM_CtrlPWMOutputs(KNEE_TIM_1, ENABLE);
00021c  2101              MOVS     r1,#1
00021e  4805              LDR      r0,|L9.564|
000220  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;1009   }
000224  b008              ADD      sp,sp,#0x20
000226  bd10              POP      {r4,pc}
;;;1010   
                          ENDP

                  |L9.552|
                          DCD      0x40000c00
                  |L9.556|
                          DCD      0x40000800
                  |L9.560|
                          DCD      0x40000400
                  |L9.564|
                          DCD      0x40010000
                  |L9.568|
                          DCD      0x40014000

                          AREA ||i.bsp_SetTIMOutPWM||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM PROC
;;;440    */
;;;441    void bsp_SetTIMOutPWM(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;442    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;443    {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a16          LDRD     r6,r10,[sp,#0x58]
;;;444    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;445    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;446    	uint16_t usPeriod;
;;;447    	uint16_t usPrescaler;
;;;448    	uint32_t uiTIMxCLK;
;;;449    
;;;450    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L10.54|
;;;451    	{		
;;;452    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;453    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  990a              LDR      r1,[sp,#0x28]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;454    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  990a              LDR      r1,[sp,#0x28]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L10.48|
;;;455    		return;
;;;456    	}
;;;457    	else if (_ulDutyCycle == 10000)
;;;458    	{
;;;459    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;460    
;;;461    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;462    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;463    		return;
;;;464    	}
;;;465    	
;;;466    
;;;467    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;468    	
;;;469        /*-----------------------------------------------------------------------
;;;470    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;471    
;;;472    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;473    		PCLK2 = HCLK / 2      (APB2Periph)
;;;474    		PCLK1 = HCLK / 4      (APB1Periph)
;;;475    
;;;476    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;477    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;478    
;;;479    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;480    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;481    
;;;482    	----------------------------------------------------------------------- */
;;;483    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;484    	{
;;;485    		/* APB2 定时器 */
;;;486    		uiTIMxCLK = SystemCoreClock;
;;;487    	}
;;;488    	else	/* APB1 定时器 */
;;;489    	{
;;;490    		uiTIMxCLK = SystemCoreClock / 2;
;;;491    	}
;;;492    
;;;493    	if (_ulFreq < 100)
;;;494    	{
;;;495    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;496    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;497    	}
;;;498    	else if (_ulFreq < 3000)
;;;499    	{
;;;500    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;501    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;502    	}
;;;503    	else	/* 大于4K的频率，无需分频 */
;;;504    	{
;;;505    		usPrescaler = 0;					/* 分频比 = 1 */
;;;506    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;507    	}
;;;508    
;;;509    	/* Time base configuration */
;;;510    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;511    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;512    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;513    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;514    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;		/* TIM1 和 TIM8 必须设置 */	
;;;515    
;;;516    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;517    
;;;518    	/* PWM1 Mode configuration: Channel1 */
;;;519    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;520    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
;;;521    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;522    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;523    	
;;;524    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Disable;	/* only for TIM1 and TIM8. */	
;;;525    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		
;;;526    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;527    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;528    	
;;;529    	if (_ucChannel == 1)
;;;530    	{
;;;531    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;532    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;533    	}
;;;534    	else if (_ucChannel == 2)
;;;535    	{
;;;536    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;537    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;538    	}
;;;539    	else if (_ucChannel == 3)
;;;540    	{
;;;541    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;542    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;543    	}
;;;544    	else if (_ucChannel == 4)
;;;545    	{
;;;546    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;547    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;548    	}
;;;549    
;;;550    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;551    
;;;552    	/* TIMx enable counter */
;;;553    	TIM_Cmd(TIMx, ENABLE);
;;;554    
;;;555    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;556    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;557    	{
;;;558    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;559    	}
;;;560    }
000030  b00d              ADD      sp,sp,#0x34
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L10.54|
000036  f2427010          MOV      r0,#0x2710            ;457
00003a  4582              CMP      r10,r0                ;457
00003c  d10d              BNE      |L10.90|
00003e  2100              MOVS     r1,#0                 ;459
000040  4620              MOV      r0,r4                 ;459
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;461
000048  990a              LDR      r1,[sp,#0x28]         ;461
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;462
000050  4658              MOV      r0,r11                ;462
000052  990a              LDR      r1,[sp,#0x28]         ;462
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L10.48|
                  |L10.90|
00005a  462b              MOV      r3,r5                 ;467
00005c  4622              MOV      r2,r4                 ;467
00005e  4658              MOV      r0,r11                ;467
000060  990a              LDR      r1,[sp,#0x28]         ;467
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  484e              LDR      r0,|L10.416|
000068  4284              CMP      r4,r0                 ;483
00006a  d00b              BEQ      |L10.132|
00006c  484d              LDR      r0,|L10.420|
00006e  4284              CMP      r4,r0                 ;483
000070  d008              BEQ      |L10.132|
000072  484d              LDR      r0,|L10.424|
000074  4284              CMP      r4,r0                 ;483
000076  d005              BEQ      |L10.132|
000078  484c              LDR      r0,|L10.428|
00007a  4284              CMP      r4,r0                 ;483
00007c  d002              BEQ      |L10.132|
00007e  484c              LDR      r0,|L10.432|
000080  4284              CMP      r4,r0                 ;483
000082  d103              BNE      |L10.140|
                  |L10.132|
000084  484b              LDR      r0,|L10.436|
000086  f8d08000          LDR      r8,[r0,#0]            ;486  ; SystemCoreClock
00008a  e003              B        |L10.148|
                  |L10.140|
00008c  4849              LDR      r0,|L10.436|
00008e  6800              LDR      r0,[r0,#0]            ;490  ; SystemCoreClock
000090  ea4f0850          LSR      r8,r0,#1              ;490
                  |L10.148|
000094  2e64              CMP      r6,#0x64              ;493
000096  d20a              BCS      |L10.174|
000098  f242790f          MOV      r9,#0x270f            ;495
00009c  f2427010          MOV      r0,#0x2710            ;496
0000a0  fbb8f0f0          UDIV     r0,r8,r0              ;496
0000a4  fbb0f0f6          UDIV     r0,r0,r6              ;496
0000a8  1e40              SUBS     r0,r0,#1              ;496
0000aa  b287              UXTH     r7,r0                 ;496
0000ac  e013              B        |L10.214|
                  |L10.174|
0000ae  f64030b8          MOV      r0,#0xbb8             ;498
0000b2  4286              CMP      r6,r0                 ;498
0000b4  d209              BCS      |L10.202|
0000b6  f04f0963          MOV      r9,#0x63              ;500
0000ba  2064              MOVS     r0,#0x64              ;501
0000bc  fbb8f0f0          UDIV     r0,r8,r0              ;501
0000c0  fbb0f0f6          UDIV     r0,r0,r6              ;501
0000c4  1e40              SUBS     r0,r0,#1              ;501
0000c6  b287              UXTH     r7,r0                 ;501
0000c8  e005              B        |L10.214|
                  |L10.202|
0000ca  f04f0900          MOV      r9,#0                 ;505
0000ce  fbb8f0f6          UDIV     r0,r8,r6              ;506
0000d2  1e40              SUBS     r0,r0,#1              ;506
0000d4  b287              UXTH     r7,r0                 ;506
                  |L10.214|
0000d6  9707              STR      r7,[sp,#0x1c]         ;510
0000d8  f8ad9018          STRH     r9,[sp,#0x18]         ;511
0000dc  2000              MOVS     r0,#0                 ;512
0000de  f8ad0020          STRH     r0,[sp,#0x20]         ;512
0000e2  f8ad001a          STRH     r0,[sp,#0x1a]         ;513
0000e6  f88d0022          STRB     r0,[sp,#0x22]         ;514
0000ea  a906              ADD      r1,sp,#0x18           ;516
0000ec  4620              MOV      r0,r4                 ;516
0000ee  f7fffffe          BL       TIM_TimeBaseInit
0000f2  2060              MOVS     r0,#0x60              ;519
0000f4  f8ad0004          STRH     r0,[sp,#4]            ;519
0000f8  2001              MOVS     r0,#1                 ;520
0000fa  f8ad0006          STRH     r0,[sp,#6]            ;520
0000fe  fb0af007          MUL      r0,r10,r7             ;521
000102  f2427110          MOV      r1,#0x2710            ;521
000106  fbb0f0f1          UDIV     r0,r0,r1              ;521
00010a  9003              STR      r0,[sp,#0xc]          ;521
00010c  2000              MOVS     r0,#0                 ;522
00010e  f8ad0010          STRH     r0,[sp,#0x10]         ;522
000112  f8ad0008          STRH     r0,[sp,#8]            ;524
000116  f8ad0012          STRH     r0,[sp,#0x12]         ;525
00011a  f8ad0014          STRH     r0,[sp,#0x14]         ;526
00011e  f8ad0016          STRH     r0,[sp,#0x16]         ;527
000122  2d01              CMP      r5,#1                 ;529
000124  d108              BNE      |L10.312|
000126  a901              ADD      r1,sp,#4              ;531
000128  4620              MOV      r0,r4                 ;531
00012a  f7fffffe          BL       TIM_OC1Init
00012e  2108              MOVS     r1,#8                 ;532
000130  4620              MOV      r0,r4                 ;532
000132  f7fffffe          BL       TIM_OC1PreloadConfig
000136  e01f              B        |L10.376|
                  |L10.312|
000138  2d02              CMP      r5,#2                 ;534
00013a  d108              BNE      |L10.334|
00013c  a901              ADD      r1,sp,#4              ;536
00013e  4620              MOV      r0,r4                 ;536
000140  f7fffffe          BL       TIM_OC2Init
000144  2108              MOVS     r1,#8                 ;537
000146  4620              MOV      r0,r4                 ;537
000148  f7fffffe          BL       TIM_OC2PreloadConfig
00014c  e014              B        |L10.376|
                  |L10.334|
00014e  2d03              CMP      r5,#3                 ;539
000150  d108              BNE      |L10.356|
000152  a901              ADD      r1,sp,#4              ;541
000154  4620              MOV      r0,r4                 ;541
000156  f7fffffe          BL       TIM_OC3Init
00015a  2108              MOVS     r1,#8                 ;542
00015c  4620              MOV      r0,r4                 ;542
00015e  f7fffffe          BL       TIM_OC3PreloadConfig
000162  e009              B        |L10.376|
                  |L10.356|
000164  2d04              CMP      r5,#4                 ;544
000166  d107              BNE      |L10.376|
000168  a901              ADD      r1,sp,#4              ;546
00016a  4620              MOV      r0,r4                 ;546
00016c  f7fffffe          BL       TIM_OC4Init
000170  2108              MOVS     r1,#8                 ;547
000172  4620              MOV      r0,r4                 ;547
000174  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L10.376|
000178  2101              MOVS     r1,#1                 ;550
00017a  4620              MOV      r0,r4                 ;550
00017c  f7fffffe          BL       TIM_ARRPreloadConfig
000180  2101              MOVS     r1,#1                 ;553
000182  4620              MOV      r0,r4                 ;553
000184  f7fffffe          BL       TIM_Cmd
000188  4805              LDR      r0,|L10.416|
00018a  4284              CMP      r4,r0                 ;556
00018c  d002              BEQ      |L10.404|
00018e  4805              LDR      r0,|L10.420|
000190  4284              CMP      r4,r0                 ;556
000192  d103              BNE      |L10.412|
                  |L10.404|
000194  2101              MOVS     r1,#1                 ;558
000196  4620              MOV      r0,r4                 ;558
000198  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L10.412|
00019c  bf00              NOP      
00019e  e747              B        |L10.48|
;;;561    
                          ENDP

                  |L10.416|
                          DCD      0x40010000
                  |L10.420|
                          DCD      0x40010400
                  |L10.424|
                          DCD      0x40014000
                  |L10.428|
                          DCD      0x40014400
                  |L10.432|
                          DCD      0x40014800
                  |L10.436|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMOutPWM_N||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMOutPWM_N PROC
;;;571    */
;;;572    void bsp_SetTIMOutPWM_N(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TIM_TypeDef* TIMx, uint8_t _ucChannel,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;573    	 uint32_t _ulFreq, uint32_t _ulDutyCycle)
;;;574    {
000004  b089              SUB      sp,sp,#0x24
000006  4683              MOV      r11,r0
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
00000c  e9dd6a16          LDRD     r6,r10,[sp,#0x58]
;;;575    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;576    	TIM_OCInitTypeDef  TIM_OCInitStructure;
;;;577    	uint16_t usPeriod;
;;;578    	uint16_t usPrescaler;
;;;579    	uint32_t uiTIMxCLK;
;;;580    
;;;581    	if (_ulDutyCycle == 0)
000010  f1ba0f00          CMP      r10,#0
000014  d10f              BNE      |L11.54|
;;;582    	{		
;;;583    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
000016  2100              MOVS     r1,#0
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       TIM_Cmd
;;;584    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
00001e  4658              MOV      r0,r11
000020  990a              LDR      r1,[sp,#0x28]
000022  f7fffffe          BL       bsp_ConfigGpioOut
;;;585    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_RESET);	/* PWM = 0 */		
000026  2200              MOVS     r2,#0
000028  4658              MOV      r0,r11
00002a  990a              LDR      r1,[sp,#0x28]
00002c  f7fffffe          BL       GPIO_WriteBit
                  |L11.48|
;;;586    		return;
;;;587    	}
;;;588    	else if (_ulDutyCycle == 10000)
;;;589    	{
;;;590    		TIM_Cmd(TIMx, DISABLE);		/* 关闭PWM输出 */
;;;591    
;;;592    		bsp_ConfigGpioOut(GPIOx, GPIO_Pin);	/* 配置GPIO为推挽输出 */		
;;;593    		GPIO_WriteBit(GPIOx, GPIO_Pin, Bit_SET);	/* PWM = 1 */	
;;;594    		return;
;;;595    	}
;;;596    	
;;;597    
;;;598    	bsp_ConfigTimGpio(GPIOx, GPIO_Pin, TIMx, _ucChannel);	/* 使能GPIO和TIM时钟，并连接TIM通道到GPIO */
;;;599    	
;;;600        /*-----------------------------------------------------------------------
;;;601    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;602    
;;;603    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;604    		PCLK2 = HCLK / 2      (APB2Periph)
;;;605    		PCLK1 = HCLK / 4      (APB1Periph)
;;;606    
;;;607    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;608    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;609    
;;;610    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM6, TIM12, TIM13,TIM14
;;;611    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;612    
;;;613    	----------------------------------------------------------------------- */
;;;614    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;615    	{
;;;616    		/* APB2 定时器 */
;;;617    		uiTIMxCLK = SystemCoreClock;
;;;618    	}
;;;619    	else	/* APB1 定时器 */
;;;620    	{
;;;621    		uiTIMxCLK = SystemCoreClock / 2;
;;;622    	}
;;;623    
;;;624    	if (_ulFreq < 100)
;;;625    	{
;;;626    		usPrescaler = 10000 - 1;					/* 分频比 = 10000 */
;;;627    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;628    	}
;;;629    	else if (_ulFreq < 3000)
;;;630    	{
;;;631    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;632    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;633    	}
;;;634    	else	/* 大于4K的频率，无需分频 */
;;;635    	{
;;;636    		usPrescaler = 0;					/* 分频比 = 1 */
;;;637    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;638    	}
;;;639    
;;;640    	/* Time base configuration */
;;;641    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;642    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;643    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;644    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;645    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;		/* TIM1 和 TIM8 必须设置 */	
;;;646    
;;;647    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;648    
;;;649    	/* PWM1 Mode configuration: Channel1 */
;;;650    	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
;;;651    	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Disable;		/* 此处和正相引脚不同 */
;;;652    	TIM_OCInitStructure.TIM_Pulse = (_ulDutyCycle * usPeriod) / 10000;
;;;653    	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
;;;654    	
;;;655    	TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;		/* only for TIM1 and TIM8. 此处和正相引脚不同 */	
;;;656    	TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;			/* only for TIM1 and TIM8. */		 
;;;657    	TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;658    	TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCNIdleState_Reset;		/* only for TIM1 and TIM8. */
;;;659    	
;;;660    	if (_ucChannel == 1)
;;;661    	{
;;;662    		TIM_OC1Init(TIMx, &TIM_OCInitStructure);
;;;663    		TIM_OC1PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;664    	}
;;;665    	else if (_ucChannel == 2)
;;;666    	{
;;;667    		TIM_OC2Init(TIMx, &TIM_OCInitStructure);
;;;668    		TIM_OC2PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;669    	}
;;;670    	else if (_ucChannel == 3)
;;;671    	{
;;;672    		TIM_OC3Init(TIMx, &TIM_OCInitStructure);
;;;673    		TIM_OC3PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;674    	}
;;;675    	else if (_ucChannel == 4)
;;;676    	{
;;;677    		TIM_OC4Init(TIMx, &TIM_OCInitStructure);
;;;678    		TIM_OC4PreloadConfig(TIMx, TIM_OCPreload_Enable);
;;;679    	}
;;;680    
;;;681    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;682    
;;;683    	/* TIMx enable counter */
;;;684    	TIM_Cmd(TIMx, ENABLE);
;;;685    
;;;686    	/* 下面这句话对于TIM1和TIM8是必须的，对于TIM2-TIM6则不必要 */
;;;687    	if ((TIMx == TIM1) || (TIMx == TIM8))
;;;688    	{
;;;689    		TIM_CtrlPWMOutputs(TIMx, ENABLE);
;;;690    	}
;;;691    }
000030  b00d              ADD      sp,sp,#0x34
000032  e8bd8ff0          POP      {r4-r11,pc}
                  |L11.54|
000036  f2427010          MOV      r0,#0x2710            ;588
00003a  4582              CMP      r10,r0                ;588
00003c  d10d              BNE      |L11.90|
00003e  2100              MOVS     r1,#0                 ;590
000040  4620              MOV      r0,r4                 ;590
000042  f7fffffe          BL       TIM_Cmd
000046  4658              MOV      r0,r11                ;592
000048  990a              LDR      r1,[sp,#0x28]         ;592
00004a  f7fffffe          BL       bsp_ConfigGpioOut
00004e  2201              MOVS     r2,#1                 ;593
000050  4658              MOV      r0,r11                ;593
000052  990a              LDR      r1,[sp,#0x28]         ;593
000054  f7fffffe          BL       GPIO_WriteBit
000058  e7ea              B        |L11.48|
                  |L11.90|
00005a  462b              MOV      r3,r5                 ;598
00005c  4622              MOV      r2,r4                 ;598
00005e  4658              MOV      r0,r11                ;598
000060  990a              LDR      r1,[sp,#0x28]         ;598
000062  f7fffffe          BL       bsp_ConfigTimGpio
000066  484f              LDR      r0,|L11.420|
000068  4284              CMP      r4,r0                 ;614
00006a  d00b              BEQ      |L11.132|
00006c  484e              LDR      r0,|L11.424|
00006e  4284              CMP      r4,r0                 ;614
000070  d008              BEQ      |L11.132|
000072  484e              LDR      r0,|L11.428|
000074  4284              CMP      r4,r0                 ;614
000076  d005              BEQ      |L11.132|
000078  484d              LDR      r0,|L11.432|
00007a  4284              CMP      r4,r0                 ;614
00007c  d002              BEQ      |L11.132|
00007e  484d              LDR      r0,|L11.436|
000080  4284              CMP      r4,r0                 ;614
000082  d103              BNE      |L11.140|
                  |L11.132|
000084  484c              LDR      r0,|L11.440|
000086  f8d08000          LDR      r8,[r0,#0]            ;617  ; SystemCoreClock
00008a  e003              B        |L11.148|
                  |L11.140|
00008c  484a              LDR      r0,|L11.440|
00008e  6800              LDR      r0,[r0,#0]            ;621  ; SystemCoreClock
000090  ea4f0850          LSR      r8,r0,#1              ;621
                  |L11.148|
000094  2e64              CMP      r6,#0x64              ;624
000096  d20a              BCS      |L11.174|
000098  f242790f          MOV      r9,#0x270f            ;626
00009c  f2427010          MOV      r0,#0x2710            ;627
0000a0  fbb8f0f0          UDIV     r0,r8,r0              ;627
0000a4  fbb0f0f6          UDIV     r0,r0,r6              ;627
0000a8  1e40              SUBS     r0,r0,#1              ;627
0000aa  b287              UXTH     r7,r0                 ;627
0000ac  e013              B        |L11.214|
                  |L11.174|
0000ae  f64030b8          MOV      r0,#0xbb8             ;629
0000b2  4286              CMP      r6,r0                 ;629
0000b4  d209              BCS      |L11.202|
0000b6  f04f0963          MOV      r9,#0x63              ;631
0000ba  2064              MOVS     r0,#0x64              ;632
0000bc  fbb8f0f0          UDIV     r0,r8,r0              ;632
0000c0  fbb0f0f6          UDIV     r0,r0,r6              ;632
0000c4  1e40              SUBS     r0,r0,#1              ;632
0000c6  b287              UXTH     r7,r0                 ;632
0000c8  e005              B        |L11.214|
                  |L11.202|
0000ca  f04f0900          MOV      r9,#0                 ;636
0000ce  fbb8f0f6          UDIV     r0,r8,r6              ;637
0000d2  1e40              SUBS     r0,r0,#1              ;637
0000d4  b287              UXTH     r7,r0                 ;637
                  |L11.214|
0000d6  9707              STR      r7,[sp,#0x1c]         ;641
0000d8  f8ad9018          STRH     r9,[sp,#0x18]         ;642
0000dc  2000              MOVS     r0,#0                 ;643
0000de  f8ad0020          STRH     r0,[sp,#0x20]         ;643
0000e2  f8ad001a          STRH     r0,[sp,#0x1a]         ;644
0000e6  f88d0022          STRB     r0,[sp,#0x22]         ;645
0000ea  a906              ADD      r1,sp,#0x18           ;647
0000ec  4620              MOV      r0,r4                 ;647
0000ee  f7fffffe          BL       TIM_TimeBaseInit
0000f2  2060              MOVS     r0,#0x60              ;650
0000f4  f8ad0004          STRH     r0,[sp,#4]            ;650
0000f8  2000              MOVS     r0,#0                 ;651
0000fa  f8ad0006          STRH     r0,[sp,#6]            ;651
0000fe  fb0af007          MUL      r0,r10,r7             ;652
000102  f2427110          MOV      r1,#0x2710            ;652
000106  fbb0f0f1          UDIV     r0,r0,r1              ;652
00010a  9003              STR      r0,[sp,#0xc]          ;652
00010c  2000              MOVS     r0,#0                 ;653
00010e  f8ad0010          STRH     r0,[sp,#0x10]         ;653
000112  2004              MOVS     r0,#4                 ;655
000114  f8ad0008          STRH     r0,[sp,#8]            ;655
000118  2000              MOVS     r0,#0                 ;656
00011a  f8ad0012          STRH     r0,[sp,#0x12]         ;656
00011e  f8ad0014          STRH     r0,[sp,#0x14]         ;657
000122  f8ad0016          STRH     r0,[sp,#0x16]         ;658
000126  2d01              CMP      r5,#1                 ;660
000128  d108              BNE      |L11.316|
00012a  a901              ADD      r1,sp,#4              ;662
00012c  4620              MOV      r0,r4                 ;662
00012e  f7fffffe          BL       TIM_OC1Init
000132  2108              MOVS     r1,#8                 ;663
000134  4620              MOV      r0,r4                 ;663
000136  f7fffffe          BL       TIM_OC1PreloadConfig
00013a  e01f              B        |L11.380|
                  |L11.316|
00013c  2d02              CMP      r5,#2                 ;665
00013e  d108              BNE      |L11.338|
000140  a901              ADD      r1,sp,#4              ;667
000142  4620              MOV      r0,r4                 ;667
000144  f7fffffe          BL       TIM_OC2Init
000148  2108              MOVS     r1,#8                 ;668
00014a  4620              MOV      r0,r4                 ;668
00014c  f7fffffe          BL       TIM_OC2PreloadConfig
000150  e014              B        |L11.380|
                  |L11.338|
000152  2d03              CMP      r5,#3                 ;670
000154  d108              BNE      |L11.360|
000156  a901              ADD      r1,sp,#4              ;672
000158  4620              MOV      r0,r4                 ;672
00015a  f7fffffe          BL       TIM_OC3Init
00015e  2108              MOVS     r1,#8                 ;673
000160  4620              MOV      r0,r4                 ;673
000162  f7fffffe          BL       TIM_OC3PreloadConfig
000166  e009              B        |L11.380|
                  |L11.360|
000168  2d04              CMP      r5,#4                 ;675
00016a  d107              BNE      |L11.380|
00016c  a901              ADD      r1,sp,#4              ;677
00016e  4620              MOV      r0,r4                 ;677
000170  f7fffffe          BL       TIM_OC4Init
000174  2108              MOVS     r1,#8                 ;678
000176  4620              MOV      r0,r4                 ;678
000178  f7fffffe          BL       TIM_OC4PreloadConfig
                  |L11.380|
00017c  2101              MOVS     r1,#1                 ;681
00017e  4620              MOV      r0,r4                 ;681
000180  f7fffffe          BL       TIM_ARRPreloadConfig
000184  2101              MOVS     r1,#1                 ;684
000186  4620              MOV      r0,r4                 ;684
000188  f7fffffe          BL       TIM_Cmd
00018c  4805              LDR      r0,|L11.420|
00018e  4284              CMP      r4,r0                 ;687
000190  d002              BEQ      |L11.408|
000192  4805              LDR      r0,|L11.424|
000194  4284              CMP      r4,r0                 ;687
000196  d103              BNE      |L11.416|
                  |L11.408|
000198  2101              MOVS     r1,#1                 ;689
00019a  4620              MOV      r0,r4                 ;689
00019c  f7fffffe          BL       TIM_CtrlPWMOutputs
                  |L11.416|
0001a0  bf00              NOP      
0001a2  e745              B        |L11.48|
;;;692    
                          ENDP

                  |L11.420|
                          DCD      0x40010000
                  |L11.424|
                          DCD      0x40010400
                  |L11.428|
                          DCD      0x40014000
                  |L11.432|
                          DCD      0x40014400
                  |L11.436|
                          DCD      0x40014800
                  |L11.440|
                          DCD      SystemCoreClock

                          AREA ||i.bsp_SetTIMforInt||, CODE, READONLY, ALIGN=2

                  bsp_SetTIMforInt PROC
;;;703    */
;;;704    void bsp_SetTIMforInt(TIM_TypeDef* TIMx, uint32_t _ulFreq, uint8_t _PreemptionPriority, uint8_t _SubPriority)
000000  e92d5fff          PUSH     {r0-r12,lr}
;;;705    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4691              MOV      r9,r2
00000a  469a              MOV      r10,r3
;;;706    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;707    	uint16_t usPeriod;
;;;708    	uint16_t usPrescaler;
;;;709    	uint32_t uiTIMxCLK;
;;;710    
;;;711      	/* 使能TIM时钟 */
;;;712    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
00000c  486f              LDR      r0,|L12.460|
00000e  4284              CMP      r4,r0
000010  d00b              BEQ      |L12.42|
000012  486f              LDR      r0,|L12.464|
000014  4284              CMP      r4,r0
000016  d008              BEQ      |L12.42|
000018  486e              LDR      r0,|L12.468|
00001a  4284              CMP      r4,r0
00001c  d005              BEQ      |L12.42|
00001e  486e              LDR      r0,|L12.472|
000020  4284              CMP      r4,r0
000022  d002              BEQ      |L12.42|
000024  486d              LDR      r0,|L12.476|
000026  4284              CMP      r4,r0
000028  d107              BNE      |L12.58|
                  |L12.42|
;;;713    	{
;;;714    		RCC_APB2PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       bsp_GetRCCofTIM
000030  4683              MOV      r11,r0
000032  2101              MOVS     r1,#1
000034  f7fffffe          BL       RCC_APB2PeriphClockCmd
000038  e006              B        |L12.72|
                  |L12.58|
;;;715    	}
;;;716    	else
;;;717    	{
;;;718    		RCC_APB1PeriphClockCmd(bsp_GetRCCofTIM(TIMx), ENABLE);
00003a  4620              MOV      r0,r4
00003c  f7fffffe          BL       bsp_GetRCCofTIM
000040  4683              MOV      r11,r0
000042  2101              MOVS     r1,#1
000044  f7fffffe          BL       RCC_APB1PeriphClockCmd
                  |L12.72|
;;;719    	}
;;;720    
;;;721    	if (_ulFreq == 0)
000048  b92d              CBNZ     r5,|L12.86|
;;;722    	{
;;;723    		TIM_Cmd(TIMx, DISABLE);		/* 关闭定时输出 */
00004a  2100              MOVS     r1,#0
00004c  4620              MOV      r0,r4
00004e  f7fffffe          BL       TIM_Cmd
                  |L12.82|
;;;724    		return;
;;;725    	}
;;;726    
;;;727        /*-----------------------------------------------------------------------
;;;728    		system_stm32f4xx.c 文件中 void SetSysClock(void) 函数对时钟的配置如下：
;;;729    
;;;730    		HCLK = SYSCLK / 1     (AHB1Periph)
;;;731    		PCLK2 = HCLK / 2      (APB2Periph)
;;;732    		PCLK1 = HCLK / 4      (APB1Periph)
;;;733    
;;;734    		因为APB1 prescaler != 1, 所以 APB1上的TIMxCLK = PCLK1 x 2 = SystemCoreClock / 2;
;;;735    		因为APB2 prescaler != 1, 所以 APB2上的TIMxCLK = PCLK2 x 2 = SystemCoreClock;
;;;736    
;;;737    		APB1 定时器有 TIM2, TIM3 ,TIM4, TIM5, TIM6, TIM7, TIM12, TIM13,TIM14
;;;738    		APB2 定时器有 TIM1, TIM8 ,TIM9, TIM10, TIM11
;;;739    
;;;740    	----------------------------------------------------------------------- */
;;;741    	if ((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM9) || (TIMx == TIM10) || (TIMx == TIM11))
;;;742    	{
;;;743    		/* APB2 定时器 */
;;;744    		uiTIMxCLK = SystemCoreClock;
;;;745    	}
;;;746    	else	/* APB1 定时器 */
;;;747    	{
;;;748    		uiTIMxCLK = SystemCoreClock / 2;
;;;749    	}
;;;750    
;;;751    	if (_ulFreq < 100)
;;;752    	{
;;;753    		usPrescaler = 10000 - 1;					/* 分频比 = 1000 */
;;;754    		usPeriod =  (uiTIMxCLK / 10000) / _ulFreq  - 1;		/* 自动重装的值 */
;;;755    	}
;;;756    	else if (_ulFreq < 3000)
;;;757    	{
;;;758    		usPrescaler = 100 - 1;					/* 分频比 = 100 */
;;;759    		usPeriod =  (uiTIMxCLK / 100) / _ulFreq  - 1;		/* 自动重装的值 */
;;;760    	}
;;;761    	else	/* 大于4K的频率，无需分频 */
;;;762    	{
;;;763    		usPrescaler = 0;					/* 分频比 = 1 */
;;;764    		usPeriod = uiTIMxCLK / _ulFreq - 1;	/* 自动重装的值 */
;;;765    	}
;;;766    
;;;767    	/* Time base configuration */
;;;768    	TIM_TimeBaseStructure.TIM_Period = usPeriod;
;;;769    	TIM_TimeBaseStructure.TIM_Prescaler = usPrescaler;
;;;770    	TIM_TimeBaseStructure.TIM_ClockDivision = 0;
;;;771    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
;;;772    	TIM_TimeBaseStructure.TIM_RepetitionCounter = 0x0000;		/* TIM1 和 TIM8 必须设置 */
;;;773    
;;;774    	TIM_TimeBaseInit(TIMx, &TIM_TimeBaseStructure);
;;;775    
;;;776    	TIM_ARRPreloadConfig(TIMx, ENABLE);
;;;777    
;;;778    	/* TIM Interrupts enable */
;;;779    	TIM_ITConfig(TIMx, TIM_IT_Update, ENABLE);
;;;780    
;;;781    	/* TIMx enable counter */
;;;782    	TIM_Cmd(TIMx, ENABLE);
;;;783    
;;;784    	/* 配置TIM定时更新中断 (Update) */
;;;785    	{
;;;786    		NVIC_InitTypeDef NVIC_InitStructure;	/* 中断结构体在 misc.h 中定义 */
;;;787    		uint8_t irq = 0;	/* 中断号, 定义在 stm32f4xx.h */
;;;788    
;;;789    		if ((TIMx == TIM1) || (TIMx == TIM10))
;;;790    			irq = TIM1_UP_TIM10_IRQn;
;;;791    		else if (TIMx == TIM2)
;;;792    			irq = TIM2_IRQn;
;;;793    		else if (TIMx == TIM3)
;;;794    			irq = TIM3_IRQn;
;;;795    		else if (TIMx == TIM4)
;;;796    			irq = TIM4_IRQn;
;;;797    		else if (TIMx == TIM5)
;;;798    			irq = TIM5_IRQn;
;;;799    		else if (TIMx == TIM6)
;;;800    			irq = TIM6_DAC_IRQn;
;;;801    		else if (TIMx == TIM7)
;;;802    			irq = TIM7_IRQn;
;;;803    		else if (TIMx == TIM7)
;;;804    			irq = TIM7_IRQn;
;;;805    		else if (TIMx == TIM7)
;;;806    			irq = TIM7_IRQn;
;;;807    		else if ((TIMx == TIM8) || (TIMx == TIM13))
;;;808    			irq = TIM8_UP_TIM13_IRQn;
;;;809    		else if (TIMx == TIM9)
;;;810    			irq = TIM1_BRK_TIM9_IRQn;
;;;811    		else if (TIMx == TIM11)
;;;812    			irq = TIM1_TRG_COM_TIM11_IRQn;
;;;813    		else if (TIMx == TIM12)
;;;814    			irq = TIM8_BRK_TIM12_IRQn;
;;;815    		else if (TIMx == TIM12)
;;;816    			irq = TIM8_TRG_COM_TIM14_IRQn;
;;;817    
;;;818    		NVIC_InitStructure.NVIC_IRQChannel = irq;
;;;819    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = _PreemptionPriority;
;;;820    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = _SubPriority;
;;;821    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;822    		NVIC_Init(&NVIC_InitStructure);
;;;823    	}
;;;824    }
000052  e8bd9fff          POP      {r0-r12,pc}
                  |L12.86|
000056  485d              LDR      r0,|L12.460|
000058  4284              CMP      r4,r0                 ;741
00005a  d00b              BEQ      |L12.116|
00005c  485c              LDR      r0,|L12.464|
00005e  4284              CMP      r4,r0                 ;741
000060  d008              BEQ      |L12.116|
000062  485c              LDR      r0,|L12.468|
000064  4284              CMP      r4,r0                 ;741
000066  d005              BEQ      |L12.116|
000068  485b              LDR      r0,|L12.472|
00006a  4284              CMP      r4,r0                 ;741
00006c  d002              BEQ      |L12.116|
00006e  485b              LDR      r0,|L12.476|
000070  4284              CMP      r4,r0                 ;741
000072  d102              BNE      |L12.122|
                  |L12.116|
000074  485a              LDR      r0,|L12.480|
000076  6806              LDR      r6,[r0,#0]            ;744  ; SystemCoreClock
000078  e002              B        |L12.128|
                  |L12.122|
00007a  4859              LDR      r0,|L12.480|
00007c  6800              LDR      r0,[r0,#0]            ;748  ; SystemCoreClock
00007e  0846              LSRS     r6,r0,#1              ;748
                  |L12.128|
000080  2d64              CMP      r5,#0x64              ;751
000082  d20a              BCS      |L12.154|
000084  f242780f          MOV      r8,#0x270f            ;753
000088  f2427010          MOV      r0,#0x2710            ;754
00008c  fbb6f0f0          UDIV     r0,r6,r0              ;754
000090  fbb0f0f5          UDIV     r0,r0,r5              ;754
000094  1e40              SUBS     r0,r0,#1              ;754
000096  b287              UXTH     r7,r0                 ;754
000098  e013              B        |L12.194|
                  |L12.154|
00009a  f64030b8          MOV      r0,#0xbb8             ;756
00009e  4285              CMP      r5,r0                 ;756
0000a0  d209              BCS      |L12.182|
0000a2  f04f0863          MOV      r8,#0x63              ;758
0000a6  2064              MOVS     r0,#0x64              ;759
0000a8  fbb6f0f0          UDIV     r0,r6,r0              ;759
0000ac  fbb0f0f5          UDIV     r0,r0,r5              ;759
0000b0  1e40              SUBS     r0,r0,#1              ;759
0000b2  b287              UXTH     r7,r0                 ;759
0000b4  e005              B        |L12.194|
                  |L12.182|
0000b6  f04f0800          MOV      r8,#0                 ;763
0000ba  fbb6f0f5          UDIV     r0,r6,r5              ;764
0000be  1e40              SUBS     r0,r0,#1              ;764
0000c0  b287              UXTH     r7,r0                 ;764
                  |L12.194|
0000c2  9702              STR      r7,[sp,#8]            ;768
0000c4  f8ad8004          STRH     r8,[sp,#4]            ;769
0000c8  2000              MOVS     r0,#0                 ;770
0000ca  f8ad000c          STRH     r0,[sp,#0xc]          ;770
0000ce  f8ad0006          STRH     r0,[sp,#6]            ;771
0000d2  f88d000e          STRB     r0,[sp,#0xe]          ;772
0000d6  a901              ADD      r1,sp,#4              ;774
0000d8  4620              MOV      r0,r4                 ;774
0000da  f7fffffe          BL       TIM_TimeBaseInit
0000de  2101              MOVS     r1,#1                 ;776
0000e0  4620              MOV      r0,r4                 ;776
0000e2  f7fffffe          BL       TIM_ARRPreloadConfig
0000e6  2201              MOVS     r2,#1                 ;779
0000e8  4611              MOV      r1,r2                 ;779
0000ea  4620              MOV      r0,r4                 ;779
0000ec  f7fffffe          BL       TIM_ITConfig
0000f0  2101              MOVS     r1,#1                 ;782
0000f2  4620              MOV      r0,r4                 ;782
0000f4  f7fffffe          BL       TIM_Cmd
0000f8  f04f0b00          MOV      r11,#0                ;787
0000fc  4833              LDR      r0,|L12.460|
0000fe  4284              CMP      r4,r0                 ;789
000100  d002              BEQ      |L12.264|
000102  4835              LDR      r0,|L12.472|
000104  4284              CMP      r4,r0                 ;789
000106  d102              BNE      |L12.270|
                  |L12.264|
000108  f04f0b19          MOV      r11,#0x19             ;790
00010c  e04f              B        |L12.430|
                  |L12.270|
00010e  f1b44f80          CMP      r4,#0x40000000        ;791
000112  d102              BNE      |L12.282|
000114  f04f0b1c          MOV      r11,#0x1c             ;792
000118  e049              B        |L12.430|
                  |L12.282|
00011a  4832              LDR      r0,|L12.484|
00011c  4284              CMP      r4,r0                 ;793
00011e  d102              BNE      |L12.294|
000120  f04f0b1d          MOV      r11,#0x1d             ;794
000124  e043              B        |L12.430|
                  |L12.294|
000126  4830              LDR      r0,|L12.488|
000128  4284              CMP      r4,r0                 ;795
00012a  d102              BNE      |L12.306|
00012c  f04f0b1e          MOV      r11,#0x1e             ;796
000130  e03d              B        |L12.430|
                  |L12.306|
000132  482e              LDR      r0,|L12.492|
000134  4284              CMP      r4,r0                 ;797
000136  d102              BNE      |L12.318|
000138  f04f0b32          MOV      r11,#0x32             ;798
00013c  e037              B        |L12.430|
                  |L12.318|
00013e  482c              LDR      r0,|L12.496|
000140  4284              CMP      r4,r0                 ;799
000142  d102              BNE      |L12.330|
000144  f04f0b36          MOV      r11,#0x36             ;800
000148  e031              B        |L12.430|
                  |L12.330|
00014a  482a              LDR      r0,|L12.500|
00014c  4284              CMP      r4,r0                 ;801
00014e  d102              BNE      |L12.342|
000150  f04f0b37          MOV      r11,#0x37             ;802
000154  e02b              B        |L12.430|
                  |L12.342|
000156  4827              LDR      r0,|L12.500|
000158  4284              CMP      r4,r0                 ;803
00015a  d102              BNE      |L12.354|
00015c  f04f0b37          MOV      r11,#0x37             ;804
000160  e025              B        |L12.430|
                  |L12.354|
000162  4824              LDR      r0,|L12.500|
000164  4284              CMP      r4,r0                 ;805
000166  d102              BNE      |L12.366|
000168  f04f0b37          MOV      r11,#0x37             ;806
00016c  e01f              B        |L12.430|
                  |L12.366|
00016e  4818              LDR      r0,|L12.464|
000170  4284              CMP      r4,r0                 ;807
000172  d002              BEQ      |L12.378|
000174  4820              LDR      r0,|L12.504|
000176  4284              CMP      r4,r0                 ;807
000178  d102              BNE      |L12.384|
                  |L12.378|
00017a  f04f0b2c          MOV      r11,#0x2c             ;808
00017e  e016              B        |L12.430|
                  |L12.384|
000180  4814              LDR      r0,|L12.468|
000182  4284              CMP      r4,r0                 ;809
000184  d102              BNE      |L12.396|
000186  f04f0b18          MOV      r11,#0x18             ;810
00018a  e010              B        |L12.430|
                  |L12.396|
00018c  4813              LDR      r0,|L12.476|
00018e  4284              CMP      r4,r0                 ;811
000190  d102              BNE      |L12.408|
000192  f04f0b1a          MOV      r11,#0x1a             ;812
000196  e00a              B        |L12.430|
                  |L12.408|
000198  4818              LDR      r0,|L12.508|
00019a  4284              CMP      r4,r0                 ;813
00019c  d102              BNE      |L12.420|
00019e  f04f0b2b          MOV      r11,#0x2b             ;814
0001a2  e004              B        |L12.430|
                  |L12.420|
0001a4  4815              LDR      r0,|L12.508|
0001a6  4284              CMP      r4,r0                 ;815
0001a8  d101              BNE      |L12.430|
0001aa  f04f0b2d          MOV      r11,#0x2d             ;816
                  |L12.430|
0001ae  f88db000          STRB     r11,[sp,#0]           ;818
0001b2  f88d9001          STRB     r9,[sp,#1]            ;819
0001b6  f88da002          STRB     r10,[sp,#2]           ;820
0001ba  2001              MOVS     r0,#1                 ;821
0001bc  f88d0003          STRB     r0,[sp,#3]            ;821
0001c0  4668              MOV      r0,sp                 ;822
0001c2  f7fffffe          BL       NVIC_Init
0001c6  bf00              NOP      
0001c8  e743              B        |L12.82|
;;;825    
                          ENDP

0001ca  0000              DCW      0x0000
                  |L12.460|
                          DCD      0x40010000
                  |L12.464|
                          DCD      0x40010400
                  |L12.468|
                          DCD      0x40014000
                  |L12.472|
                          DCD      0x40014400
                  |L12.476|
                          DCD      0x40014800
                  |L12.480|
                          DCD      SystemCoreClock
                  |L12.484|
                          DCD      0x40000400
                  |L12.488|
                          DCD      0x40000800
                  |L12.492|
                          DCD      0x40000c00
                  |L12.496|
                          DCD      0x40001000
                  |L12.500|
                          DCD      0x40001400
                  |L12.504|
                          DCD      0x40001c00
                  |L12.508|
                          DCD      0x40001800

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_tim_pwm.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_tim_pwm_c_d7165983____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____REVSH|
#line 144
|__asm___13_bsp_tim_pwm_c_d7165983____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_tim_pwm_c_d7165983____RRX|
#line 300
|__asm___13_bsp_tim_pwm_c_d7165983____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
