; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\ff.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\ff.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\User -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\User\fonts -I..\..\emWin\GUI_X -I..\..\emWin\Config -I..\..\emWin\Include -I..\..\emWin\emWinTask -I..\..\uCOS-III\uC-CPU -I..\..\uCOS-III\uC-LIB -I..\..\uCOS-III\uCOS-III\Ports -I..\..\uCOS-III\uCOS-III\Source -I..\..\uCOS-III\uC-CPU\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uC-LIB\Ports\ARM-Cortex-M4\RealView -I..\..\uCOS-III\uCOS-III\Ports\ARM-Cortex-M4\Generic\RealView -I..\..\User\bsp_stm32f4xx -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\fatfs\src -I..\..\Libraries\CMSIS\Include -I..\..\User\control -I..\..\User\bsp_stm32f4xx\flash -I"F:\学习用具\2016毕业设计\V5-610_uCOS-III + emWin + FatFS\Project\MDK-ARM(uV4)\RTE" -I"E:\KEIL MDK5\ARM\PACK\Keil\STM32F4xx_DFP\2.6.0" -I"E:\KEIL MDK5\ARM\CMSIS\Include" -D__MICROLIB -D__UVISION_VERSION=514 -DSTM32F407xx -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx --omf_browse=.\flash\obj\ff.crf ..\..\User\fatfs\src\ff.c]
                          THUMB

                          AREA ||i.check_fs||, CODE, READONLY, ALIGN=2

                  check_fs PROC
;;;2127   static
;;;2128   BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;2129   	FATFS* fs,	/* File system object */
;;;2130   	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
;;;2131   )
;;;2132   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2133   	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
000006  2000              MOVS     r0,#0
000008  7120              STRB     r0,[r4,#4]
00000a  1e40              SUBS     r0,r0,#1
00000c  62e0              STR      r0,[r4,#0x2c]
;;;2134   	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
00000e  4629              MOV      r1,r5
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       move_window
000016  b108              CBZ      r0,|L1.28|
;;;2135   		return 3;
000018  2003              MOVS     r0,#3
                  |L1.26|
;;;2136   
;;;2137   	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
;;;2138   		return 2;
;;;2139   
;;;2140   	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
;;;2141   		return 0;
;;;2142   	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
;;;2143   		return 0;
;;;2144   
;;;2145   	return 1;
;;;2146   }
00001a  bd70              POP      {r4-r6,pc}
                  |L1.28|
00001c  f894122e          LDRB     r1,[r4,#0x22e]        ;2137
000020  f894022f          LDRB     r0,[r4,#0x22f]        ;2137
000024  ea412000          ORR      r0,r1,r0,LSL #8       ;2137
000028  f64a2155          MOV      r1,#0xaa55            ;2137
00002c  4288              CMP      r0,r1                 ;2137
00002e  d001              BEQ      |L1.52|
000030  2002              MOVS     r0,#2                 ;2138
000032  e7f2              B        |L1.26|
                  |L1.52|
000034  f8940069          LDRB     r0,[r4,#0x69]         ;2140
000038  0601              LSLS     r1,r0,#24             ;2140
00003a  f8940068          LDRB     r0,[r4,#0x68]         ;2140
00003e  ea414100          ORR      r1,r1,r0,LSL #16      ;2140
000042  f8940067          LDRB     r0,[r4,#0x67]         ;2140
000046  ea412000          ORR      r0,r1,r0,LSL #8       ;2140
00004a  f8941066          LDRB     r1,[r4,#0x66]         ;2140
00004e  4308              ORRS     r0,r0,r1              ;2140
000050  f020407f          BIC      r0,r0,#0xff000000     ;2140
000054  490d              LDR      r1,|L1.140|
000056  4288              CMP      r0,r1                 ;2140
000058  d101              BNE      |L1.94|
00005a  2000              MOVS     r0,#0                 ;2141
00005c  e7dd              B        |L1.26|
                  |L1.94|
00005e  f8940085          LDRB     r0,[r4,#0x85]         ;2142
000062  0601              LSLS     r1,r0,#24             ;2142
000064  f8940084          LDRB     r0,[r4,#0x84]         ;2142
000068  ea414100          ORR      r1,r1,r0,LSL #16      ;2142
00006c  f8940083          LDRB     r0,[r4,#0x83]         ;2142
000070  ea412000          ORR      r0,r1,r0,LSL #8       ;2142
000074  f8941082          LDRB     r1,[r4,#0x82]         ;2142
000078  4308              ORRS     r0,r0,r1              ;2142
00007a  f020407f          BIC      r0,r0,#0xff000000     ;2142
00007e  4903              LDR      r1,|L1.140|
000080  4288              CMP      r0,r1                 ;2142
000082  d101              BNE      |L1.136|
000084  2000              MOVS     r0,#0                 ;2143
000086  e7c8              B        |L1.26|
                  |L1.136|
000088  2001              MOVS     r0,#1                 ;2145
00008a  e7c6              B        |L1.26|
;;;2147   
                          ENDP

                  |L1.140|
                          DCD      0x00544146

                          AREA ||i.chk_chr||, CODE, READONLY, ALIGN=1

                  chk_chr PROC
;;;497    static
;;;498    int chk_chr (const char* str, int chr) {
000000  4602              MOV      r2,r0
;;;499    	while (*str && *str != chr) str++;
000002  e000              B        |L2.6|
                  |L2.4|
000004  1c52              ADDS     r2,r2,#1
                  |L2.6|
000006  7810              LDRB     r0,[r2,#0]
000008  b110              CBZ      r0,|L2.16|
00000a  7810              LDRB     r0,[r2,#0]
00000c  4288              CMP      r0,r1
00000e  d1f9              BNE      |L2.4|
                  |L2.16|
;;;500    	return *str;
000010  7810              LDRB     r0,[r2,#0]
;;;501    }
000012  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.clust2sect||, CODE, READONLY, ALIGN=1

                  clust2sect PROC
;;;754    
;;;755    DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
000000  4602              MOV      r2,r0
;;;756    	FATFS* fs,		/* File system object */
;;;757    	DWORD clst		/* Cluster# to be converted */
;;;758    )
;;;759    {
;;;760    	clst -= 2;
000002  1e89              SUBS     r1,r1,#2
;;;761    	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
000004  6950              LDR      r0,[r2,#0x14]
000006  1e80              SUBS     r0,r0,#2
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L3.16|
00000c  2000              MOVS     r0,#0
                  |L3.14|
;;;762    	return clst * fs->csize + fs->database;
;;;763    }
00000e  4770              BX       lr
                  |L3.16|
000010  7893              LDRB     r3,[r2,#2]            ;762
000012  6a90              LDR      r0,[r2,#0x28]         ;762
000014  fb010003          MLA      r0,r1,r3,r0           ;762
000018  e7f9              B        |L3.14|
;;;764    
                          ENDP


                          AREA ||i.create_chain||, CODE, READONLY, ALIGN=1

                  create_chain PROC
;;;944    static
;;;945    DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;946    	FATFS* fs,			/* File system object */
;;;947    	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
;;;948    )
;;;949    {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;950    	DWORD cs, ncl, scl;
;;;951    	FRESULT res;
;;;952    
;;;953    
;;;954    	if (clst == 0) {		/* Create a new chain */
000008  f1b90f00          CMP      r9,#0
00000c  d106              BNE      |L4.28|
;;;955    		scl = fs->last_clust;			/* Get suggested start point */
00000e  68e7              LDR      r7,[r4,#0xc]
;;;956    		if (!scl || scl >= fs->n_fatent) scl = 1;
000010  b117              CBZ      r7,|L4.24|
000012  6960              LDR      r0,[r4,#0x14]
000014  42b8              CMP      r0,r7
000016  d815              BHI      |L4.68|
                  |L4.24|
000018  2701              MOVS     r7,#1
00001a  e013              B        |L4.68|
                  |L4.28|
;;;957    	}
;;;958    	else {					/* Stretch the current chain */
;;;959    		cs = get_fat(fs, clst);			/* Check the cluster status */
00001c  4649              MOV      r1,r9
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       get_fat
000024  4606              MOV      r6,r0
;;;960    		if (cs < 2) return 1;			/* Invalid value */
000026  2e02              CMP      r6,#2
000028  d202              BCS      |L4.48|
00002a  2001              MOVS     r0,#1
                  |L4.44|
;;;961    		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
;;;962    		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
;;;963    		scl = clst;
;;;964    	}
;;;965    
;;;966    	ncl = scl;				/* Start cluster */
;;;967    	for (;;) {
;;;968    		ncl++;							/* Next cluster */
;;;969    		if (ncl >= fs->n_fatent) {		/* Check wrap around */
;;;970    			ncl = 2;
;;;971    			if (ncl > scl) return 0;	/* No free cluster */
;;;972    		}
;;;973    		cs = get_fat(fs, ncl);			/* Get the cluster status */
;;;974    		if (cs == 0) break;				/* Found a free cluster */
;;;975    		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
;;;976    			return cs;
;;;977    		if (ncl == scl) return 0;		/* No free cluster */
;;;978    	}
;;;979    
;;;980    	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
;;;981    	if (res == FR_OK && clst != 0) {
;;;982    		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
;;;983    	}
;;;984    	if (res == FR_OK) {
;;;985    		fs->last_clust = ncl;			/* Update FSINFO */
;;;986    		if (fs->free_clust != 0xFFFFFFFF) {
;;;987    			fs->free_clust--;
;;;988    			fs->fsi_flag |= 1;
;;;989    		}
;;;990    	} else {
;;;991    		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
;;;992    	}
;;;993    
;;;994    	return ncl;		/* Return new cluster number or error code */
;;;995    }
00002c  e8bd87f0          POP      {r4-r10,pc}
                  |L4.48|
000030  1c70              ADDS     r0,r6,#1              ;961
000032  b908              CBNZ     r0,|L4.56|
000034  4630              MOV      r0,r6                 ;961
000036  e7f9              B        |L4.44|
                  |L4.56|
000038  6960              LDR      r0,[r4,#0x14]         ;962
00003a  42b0              CMP      r0,r6                 ;962
00003c  d901              BLS      |L4.66|
00003e  4630              MOV      r0,r6                 ;962
000040  e7f4              B        |L4.44|
                  |L4.66|
000042  464f              MOV      r7,r9                 ;963
                  |L4.68|
000044  463d              MOV      r5,r7                 ;966
000046  bf00              NOP                            ;967
                  |L4.72|
000048  1c6d              ADDS     r5,r5,#1              ;968
00004a  6960              LDR      r0,[r4,#0x14]         ;969
00004c  42a8              CMP      r0,r5                 ;969
00004e  d804              BHI      |L4.90|
000050  2502              MOVS     r5,#2                 ;970
000052  42bd              CMP      r5,r7                 ;971
000054  d901              BLS      |L4.90|
000056  2000              MOVS     r0,#0                 ;971
000058  e7e8              B        |L4.44|
                  |L4.90|
00005a  4629              MOV      r1,r5                 ;973
00005c  4620              MOV      r0,r4                 ;973
00005e  f7fffffe          BL       get_fat
000062  4606              MOV      r6,r0                 ;973
000064  b906              CBNZ     r6,|L4.104|
000066  e009              B        |L4.124|
                  |L4.104|
000068  1c70              ADDS     r0,r6,#1              ;975
00006a  b108              CBZ      r0,|L4.112|
00006c  2e01              CMP      r6,#1                 ;975
00006e  d101              BNE      |L4.116|
                  |L4.112|
000070  4630              MOV      r0,r6                 ;976
000072  e7db              B        |L4.44|
                  |L4.116|
000074  42bd              CMP      r5,r7                 ;977
000076  d1e7              BNE      |L4.72|
000078  2000              MOVS     r0,#0                 ;977
00007a  e7d7              B        |L4.44|
                  |L4.124|
00007c  bf00              NOP                            ;974
00007e  f06f4270          MVN      r2,#0xf0000000        ;980
000082  4629              MOV      r1,r5                 ;980
000084  4620              MOV      r0,r4                 ;980
000086  f7fffffe          BL       put_fat
00008a  4680              MOV      r8,r0                 ;980
00008c  f1b80f00          CMP      r8,#0                 ;981
000090  d108              BNE      |L4.164|
000092  f1b90f00          CMP      r9,#0                 ;981
000096  d005              BEQ      |L4.164|
000098  462a              MOV      r2,r5                 ;982
00009a  4649              MOV      r1,r9                 ;982
00009c  4620              MOV      r0,r4                 ;982
00009e  f7fffffe          BL       put_fat
0000a2  4680              MOV      r8,r0                 ;982
                  |L4.164|
0000a4  f1b80f00          CMP      r8,#0                 ;984
0000a8  d10b              BNE      |L4.194|
0000aa  60e5              STR      r5,[r4,#0xc]          ;985
0000ac  6920              LDR      r0,[r4,#0x10]         ;986
0000ae  1c40              ADDS     r0,r0,#1              ;986
0000b0  b178              CBZ      r0,|L4.210|
0000b2  6920              LDR      r0,[r4,#0x10]         ;987
0000b4  1e40              SUBS     r0,r0,#1              ;987
0000b6  6120              STR      r0,[r4,#0x10]         ;987
0000b8  7960              LDRB     r0,[r4,#5]            ;988
0000ba  f0400001          ORR      r0,r0,#1              ;988
0000be  7160              STRB     r0,[r4,#5]            ;988
0000c0  e007              B        |L4.210|
                  |L4.194|
0000c2  f1b80f01          CMP      r8,#1                 ;991
0000c6  d102              BNE      |L4.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;991
0000cc  e000              B        |L4.208|
                  |L4.206|
0000ce  2001              MOVS     r0,#1                 ;991
                  |L4.208|
0000d0  4605              MOV      r5,r0                 ;991
                  |L4.210|
0000d2  4628              MOV      r0,r5                 ;994
0000d4  e7aa              B        |L4.44|
;;;996    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.create_name||, CODE, READONLY, ALIGN=2

                  create_name PROC
;;;1794   static
;;;1795   FRESULT create_name (
000000  e92d5ff3          PUSH     {r0,r1,r4-r12,lr}
;;;1796   	DIR* dp,			/* Pointer to the directory object */
;;;1797   	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
;;;1798   )
;;;1799   {
;;;1800   #if _USE_LFN	/* LFN configuration */
;;;1801   	BYTE b, cf;
;;;1802   	WCHAR w, *lfn;
;;;1803   	UINT i, ni, si, di;
;;;1804   	const TCHAR *p;
;;;1805   
;;;1806   	/* Create LFN in Unicode */
;;;1807   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
;;;1808   	lfn = dp->lfn;
;;;1809   	si = di = 0;
;;;1810   	for (;;) {
;;;1811   		w = p[si++];					/* Get a character */
;;;1812   		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
;;;1813   		if (di >= _MAX_LFN)				/* Reject too long name */
;;;1814   			return FR_INVALID_NAME;
;;;1815   #if !_LFN_UNICODE
;;;1816   		w &= 0xFF;
;;;1817   		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1818   			b = (BYTE)p[si++];			/* Get 2nd byte */
;;;1819   			w = (w << 8) + b;			/* Create a DBC */
;;;1820   			if (!IsDBCS2(b))
;;;1821   				return FR_INVALID_NAME;	/* Reject invalid sequence */
;;;1822   		}
;;;1823   		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
;;;1824   		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
;;;1825   #endif
;;;1826   		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
;;;1827   			return FR_INVALID_NAME;
;;;1828   		lfn[di++] = w;					/* Store the Unicode character */
;;;1829   	}
;;;1830   	*path = &p[si];						/* Return pointer to the next segment */
;;;1831   	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1832   #if _FS_RPATH
;;;1833   	if ((di == 1 && lfn[di - 1] == '.') || /* Is this a dot entry? */
;;;1834   		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {
;;;1835   		lfn[di] = 0;
;;;1836   		for (i = 0; i < 11; i++)
;;;1837   			dp->fn[i] = (i < di) ? '.' : ' ';
;;;1838   		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
;;;1839   		return FR_OK;
;;;1840   	}
;;;1841   #endif
;;;1842   	while (di) {						/* Strip trailing spaces and dots */
;;;1843   		w = lfn[di - 1];
;;;1844   		if (w != ' ' && w != '.') break;
;;;1845   		di--;
;;;1846   	}
;;;1847   	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
;;;1848   
;;;1849   	lfn[di] = 0;						/* LFN is created */
;;;1850   
;;;1851   	/* Create SFN in directory form */
;;;1852   	mem_set(dp->fn, ' ', 11);
;;;1853   	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
;;;1854   	if (si) cf |= NS_LOSS | NS_LFN;
;;;1855   	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
;;;1856   
;;;1857   	b = i = 0; ni = 8;
;;;1858   	for (;;) {
;;;1859   		w = lfn[si++];					/* Get an LFN character */
;;;1860   		if (!w) break;					/* Break on end of the LFN */
;;;1861   		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
;;;1862   			cf |= NS_LOSS | NS_LFN; continue;
;;;1863   		}
;;;1864   
;;;1865   		if (i >= ni || si == di) {		/* Extension or end of SFN */
;;;1866   			if (ni == 11) {				/* Long extension */
;;;1867   				cf |= NS_LOSS | NS_LFN; break;
;;;1868   			}
;;;1869   			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
;;;1870   			if (si > di) break;			/* No extension */
;;;1871   			si = di; i = 8; ni = 11;	/* Enter extension section */
;;;1872   			b <<= 2; continue;
;;;1873   		}
;;;1874   
;;;1875   		if (w >= 0x80) {				/* Non ASCII character */
;;;1876   #ifdef _EXCVT
;;;1877   			w = ff_convert(w, 0);		/* Unicode -> OEM code */
;;;1878   			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
;;;1879   #else
;;;1880   			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
;;;1881   #endif
;;;1882   			cf |= NS_LFN;				/* Force create LFN entry */
;;;1883   		}
;;;1884   
;;;1885   		if (_DF1S && w >= 0x100) {		/* DBC (always false at SBCS cfg) */
;;;1886   			if (i >= ni - 1) {
;;;1887   				cf |= NS_LOSS | NS_LFN; i = ni; continue;
;;;1888   			}
;;;1889   			dp->fn[i++] = (BYTE)(w >> 8);
;;;1890   		} else {						/* SBC */
;;;1891   			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
;;;1892   				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
;;;1893   			} else {
;;;1894   				if (IsUpper(w)) {		/* ASCII large capital */
;;;1895   					b |= 2;
;;;1896   				} else {
;;;1897   					if (IsLower(w)) {	/* ASCII small capital */
;;;1898   						b |= 1; w -= 0x20;
;;;1899   					}
;;;1900   				}
;;;1901   			}
;;;1902   		}
;;;1903   		dp->fn[i++] = (BYTE)w;
;;;1904   	}
;;;1905   
;;;1906   	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
;;;1907   
;;;1908   	if (ni == 8) b <<= 2;
;;;1909   	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
;;;1910   		cf |= NS_LFN;
;;;1911   	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
;;;1912   		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
;;;1913   		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
;;;1914   	}
;;;1915   
;;;1916   	dp->fn[NSFLAG] = cf;	/* SFN is created */
;;;1917   
;;;1918   	return FR_OK;
;;;1919   
;;;1920   
;;;1921   #else	/* Non-LFN configuration */
;;;1922   	BYTE b, c, d, *sfn;
;;;1923   	UINT ni, si, i;
;;;1924   	const char *p;
;;;1925   
;;;1926   	/* Create file name in directory form */
;;;1927   	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
000004  9801              LDR      r0,[sp,#4]
000006  f8d09000          LDR      r9,[r0,#0]
00000a  e001              B        |L5.16|
                  |L5.12|
00000c  f1090901          ADD      r9,r9,#1
                  |L5.16|
000010  f8990000          LDRB     r0,[r9,#0]
000014  282f              CMP      r0,#0x2f
000016  d0f9              BEQ      |L5.12|
000018  f8990000          LDRB     r0,[r9,#0]
00001c  285c              CMP      r0,#0x5c
00001e  d0f5              BEQ      |L5.12|
;;;1928   	sfn = dp->fn;
000020  9800              LDR      r0,[sp,#0]
000022  6986              LDR      r6,[r0,#0x18]
;;;1929   	mem_set(sfn, ' ', 11);
000024  220b              MOVS     r2,#0xb
000026  2120              MOVS     r1,#0x20
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       mem_set
;;;1930   	si = i = b = 0; ni = 8;
00002e  2500              MOVS     r5,#0
000030  462f              MOV      r7,r5
000032  46ab              MOV      r11,r5
000034  f04f0a08          MOV      r10,#8
;;;1931   #if _FS_RPATH
;;;1932   	if (p[si] == '.') { /* Is this a dot entry? */
;;;1933   		for (;;) {
;;;1934   			c = (BYTE)p[si++];
;;;1935   			if (c != '.' || si >= 3) break;
;;;1936   			sfn[i++] = c;
;;;1937   		}
;;;1938   		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
;;;1939   		*path = &p[si];									/* Return pointer to the next segment */
;;;1940   		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
;;;1941   		return FR_OK;
;;;1942   	}
;;;1943   #endif
;;;1944   	for (;;) {
000038  bf00              NOP      
                  |L5.58|
;;;1945   		c = (BYTE)p[si++];
00003a  4658              MOV      r0,r11
00003c  f10b0b01          ADD      r11,r11,#1
000040  f8194000          LDRB     r4,[r9,r0]
;;;1946   		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
000044  2c20              CMP      r4,#0x20
000046  dd03              BLE      |L5.80|
000048  2c2f              CMP      r4,#0x2f
00004a  d001              BEQ      |L5.80|
00004c  2c5c              CMP      r4,#0x5c
00004e  d100              BNE      |L5.82|
                  |L5.80|
000050  e053              B        |L5.250|
                  |L5.82|
;;;1947   		if (c == '.' || i >= ni) {
000052  2c2e              CMP      r4,#0x2e
000054  d001              BEQ      |L5.90|
000056  4557              CMP      r7,r10
000058  d30d              BCC      |L5.118|
                  |L5.90|
;;;1948   			if (ni != 8 || c != '.') return FR_INVALID_NAME;
00005a  f1ba0f08          CMP      r10,#8
00005e  d101              BNE      |L5.100|
000060  2c2e              CMP      r4,#0x2e
000062  d002              BEQ      |L5.106|
                  |L5.100|
000064  2006              MOVS     r0,#6
                  |L5.102|
;;;1949   			i = 8; ni = 11;
;;;1950   			b <<= 2; continue;
;;;1951   		}
;;;1952   		if (c >= 0x80) {				/* Extended character? */
;;;1953   			b |= 3;						/* Eliminate NT flag */
;;;1954   #ifdef _EXCVT
;;;1955   			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
;;;1956   #else
;;;1957   #if !_DF1S
;;;1958   			return FR_INVALID_NAME;		/* Reject extended characters (ASCII cfg) */
;;;1959   #endif
;;;1960   #endif
;;;1961   		}
;;;1962   		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
;;;1963   			d = (BYTE)p[si++];			/* Get 2nd byte */
;;;1964   			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
;;;1965   				return FR_INVALID_NAME;
;;;1966   			sfn[i++] = c;
;;;1967   			sfn[i++] = d;
;;;1968   		} else {						/* SBC */
;;;1969   			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
;;;1970   				return FR_INVALID_NAME;
;;;1971   			if (IsUpper(c)) {			/* ASCII large capital? */
;;;1972   				b |= 2;
;;;1973   			} else {
;;;1974   				if (IsLower(c)) {		/* ASCII small capital? */
;;;1975   					b |= 1; c -= 0x20;
;;;1976   				}
;;;1977   			}
;;;1978   			sfn[i++] = c;
;;;1979   		}
;;;1980   	}
;;;1981   	*path = &p[si];						/* Return pointer to the next segment */
;;;1982   	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
;;;1983   
;;;1984   	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
;;;1985   	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
;;;1986   
;;;1987   	if (ni == 8) b <<= 2;
;;;1988   	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
;;;1989   	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
;;;1990   
;;;1991   	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
;;;1992   
;;;1993   	return FR_OK;
;;;1994   #endif
;;;1995   }
000066  e8bd9ffc          POP      {r2-r12,pc}
                  |L5.106|
00006a  2708              MOVS     r7,#8                 ;1949
00006c  f04f0a0b          MOV      r10,#0xb              ;1949
000070  06a8              LSLS     r0,r5,#26             ;1950
000072  0e05              LSRS     r5,r0,#24             ;1950
000074  e7e1              B        |L5.58|
                  |L5.118|
000076  2c80              CMP      r4,#0x80              ;1952
000078  db01              BLT      |L5.126|
00007a  f0450503          ORR      r5,r5,#3              ;1953
                  |L5.126|
00007e  2c81              CMP      r4,#0x81              ;1962
000080  db20              BLT      |L5.196|
000082  2cfe              CMP      r4,#0xfe              ;1962
000084  dc1e              BGT      |L5.196|
000086  4658              MOV      r0,r11                ;1963
000088  f10b0b01          ADD      r11,r11,#1            ;1963
00008c  f8198000          LDRB     r8,[r9,r0]            ;1963
000090  f1b80f40          CMP      r8,#0x40              ;1964
000094  db02              BLT      |L5.156|
000096  f1b80f7e          CMP      r8,#0x7e              ;1964
00009a  dd05              BLE      |L5.168|
                  |L5.156|
00009c  f1b80f80          CMP      r8,#0x80              ;1964
0000a0  db06              BLT      |L5.176|
0000a2  f1b80ffe          CMP      r8,#0xfe              ;1964
0000a6  dc03              BGT      |L5.176|
                  |L5.168|
0000a8  f1aa0001          SUB      r0,r10,#1             ;1964
0000ac  42b8              CMP      r0,r7                 ;1964
0000ae  d801              BHI      |L5.180|
                  |L5.176|
0000b0  2006              MOVS     r0,#6                 ;1965
0000b2  e7d8              B        |L5.102|
                  |L5.180|
0000b4  4638              MOV      r0,r7                 ;1966
0000b6  1c7f              ADDS     r7,r7,#1              ;1966
0000b8  5434              STRB     r4,[r6,r0]            ;1966
0000ba  4638              MOV      r0,r7                 ;1967
0000bc  1c7f              ADDS     r7,r7,#1              ;1967
0000be  f8068000          STRB     r8,[r6,r0]            ;1967
0000c2  e019              B        |L5.248|
                  |L5.196|
0000c4  4621              MOV      r1,r4                 ;1969
0000c6  a020              ADR      r0,|L5.328|
0000c8  f7fffffe          BL       chk_chr
0000cc  b108              CBZ      r0,|L5.210|
0000ce  2006              MOVS     r0,#6                 ;1970
0000d0  e7c9              B        |L5.102|
                  |L5.210|
0000d2  2c41              CMP      r4,#0x41              ;1971
0000d4  db04              BLT      |L5.224|
0000d6  2c5a              CMP      r4,#0x5a              ;1971
0000d8  dc02              BGT      |L5.224|
0000da  f0450502          ORR      r5,r5,#2              ;1972
0000de  e008              B        |L5.242|
                  |L5.224|
0000e0  2c61              CMP      r4,#0x61              ;1974
0000e2  db06              BLT      |L5.242|
0000e4  2c7a              CMP      r4,#0x7a              ;1974
0000e6  dc04              BGT      |L5.242|
0000e8  f0450501          ORR      r5,r5,#1              ;1975
0000ec  f1a40020          SUB      r0,r4,#0x20           ;1975
0000f0  b2c4              UXTB     r4,r0                 ;1975
                  |L5.242|
0000f2  4638              MOV      r0,r7                 ;1978
0000f4  1c7f              ADDS     r7,r7,#1              ;1978
0000f6  5434              STRB     r4,[r6,r0]            ;1978
                  |L5.248|
0000f8  e79f              B        |L5.58|
                  |L5.250|
0000fa  bf00              NOP                            ;1946
0000fc  eb09010b          ADD      r1,r9,r11             ;1981
000100  9801              LDR      r0,[sp,#4]            ;1981
000102  6001              STR      r1,[r0,#0]            ;1981
000104  2c20              CMP      r4,#0x20              ;1982
000106  dc01              BGT      |L5.268|
000108  2004              MOVS     r0,#4                 ;1982
00010a  e000              B        |L5.270|
                  |L5.268|
00010c  2000              MOVS     r0,#0                 ;1982
                  |L5.270|
00010e  4604              MOV      r4,r0                 ;1982
000110  b90f              CBNZ     r7,|L5.278|
000112  2006              MOVS     r0,#6                 ;1984
000114  e7a7              B        |L5.102|
                  |L5.278|
000116  7830              LDRB     r0,[r6,#0]            ;1985
000118  28e5              CMP      r0,#0xe5              ;1985
00011a  d101              BNE      |L5.288|
00011c  2005              MOVS     r0,#5                 ;1985
00011e  7030              STRB     r0,[r6,#0]            ;1985
                  |L5.288|
000120  f1ba0f08          CMP      r10,#8                ;1987
000124  d101              BNE      |L5.298|
000126  06a8              LSLS     r0,r5,#26             ;1987
000128  0e05              LSRS     r5,r0,#24             ;1987
                  |L5.298|
00012a  f0050003          AND      r0,r5,#3              ;1988
00012e  2801              CMP      r0,#1                 ;1988
000130  d101              BNE      |L5.310|
000132  f0440410          ORR      r4,r4,#0x10           ;1988
                  |L5.310|
000136  f005000c          AND      r0,r5,#0xc            ;1989
00013a  2804              CMP      r0,#4                 ;1989
00013c  d101              BNE      |L5.322|
00013e  f0440408          ORR      r4,r4,#8              ;1989
                  |L5.322|
000142  72f4              STRB     r4,[r6,#0xb]          ;1991
000144  2000              MOVS     r0,#0                 ;1993
000146  e78e              B        |L5.102|
;;;1996   
                          ENDP

                  |L5.328|
000148  222a2b2c          DCB      """*+,:;<=>?[]|",127,0
00014c  3a3b3c3d
000150  3e3f5b5d
000154  7c7f00  
000157  00                DCB      0

                          AREA ||i.dir_alloc||, CODE, READONLY, ALIGN=1

                  dir_alloc PROC
;;;1153   static
;;;1154   FRESULT dir_alloc (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1155   	DIR* dp,	/* Pointer to the directory object */
;;;1156   	UINT nent	/* Number of contiguous entries to allocate (1-21) */
;;;1157   )
;;;1158   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1159   	FRESULT res;
;;;1160   	UINT n;
;;;1161   
;;;1162   
;;;1163   	res = dir_sdi(dp, 0);
000008  2100              MOVS     r1,#0
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       dir_sdi
000010  4605              MOV      r5,r0
;;;1164   	if (res == FR_OK) {
000012  b9ed              CBNZ     r5,|L6.80|
;;;1165   		n = 0;
000014  2700              MOVS     r7,#0
;;;1166   		do {
000016  bf00              NOP      
                  |L6.24|
;;;1167   			res = move_window(dp->fs, dp->sect);
000018  6921              LDR      r1,[r4,#0x10]
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       move_window
000020  4605              MOV      r5,r0
;;;1168   			if (res != FR_OK) break;
000022  b105              CBZ      r5,|L6.38|
000024  e013              B        |L6.78|
                  |L6.38|
;;;1169   			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
000026  6960              LDR      r0,[r4,#0x14]
000028  7800              LDRB     r0,[r0,#0]
00002a  28e5              CMP      r0,#0xe5
00002c  d002              BEQ      |L6.52|
00002e  6960              LDR      r0,[r4,#0x14]
000030  7800              LDRB     r0,[r0,#0]
000032  b920              CBNZ     r0,|L6.62|
                  |L6.52|
;;;1170   				if (++n == nent) break;	/* A block of contiguous free entries is found */
000034  1c78              ADDS     r0,r7,#1
000036  4607              MOV      r7,r0
000038  42b0              CMP      r0,r6
00003a  d101              BNE      |L6.64|
00003c  e007              B        |L6.78|
                  |L6.62|
;;;1171   			} else {
;;;1172   				n = 0;					/* Not a blank entry. Restart to search */
00003e  2700              MOVS     r7,#0
                  |L6.64|
;;;1173   			}
;;;1174   			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
000040  2101              MOVS     r1,#1
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       dir_next
000048  4605              MOV      r5,r0
;;;1175   		} while (res == FR_OK);
00004a  2d00              CMP      r5,#0
00004c  d0e4              BEQ      |L6.24|
                  |L6.78|
00004e  bf00              NOP                            ;1168
                  |L6.80|
;;;1176   	}
;;;1177   	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
000050  2d04              CMP      r5,#4
000052  d100              BNE      |L6.86|
000054  2507              MOVS     r5,#7
                  |L6.86|
;;;1178   	return res;
000056  4628              MOV      r0,r5
;;;1179   }
000058  e8bd81f0          POP      {r4-r8,pc}
;;;1180   #endif
                          ENDP


                          AREA ||i.dir_find||, CODE, READONLY, ALIGN=1

                  dir_find PROC
;;;1409   static
;;;1410   FRESULT dir_find (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1411   	DIR* dp			/* Pointer to the directory object linked to the file name */
;;;1412   )
;;;1413   {
000004  4604              MOV      r4,r0
;;;1414   	FRESULT res;
;;;1415   	BYTE c, *dir;
;;;1416   #if _USE_LFN
;;;1417   	BYTE a, ord, sum;
;;;1418   #endif
;;;1419   
;;;1420   	res = dir_sdi(dp, 0);			/* Rewind directory object */
000006  2100              MOVS     r1,#0
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       dir_sdi
00000e  4605              MOV      r5,r0
;;;1421   	if (res != FR_OK) return res;
000010  b115              CBZ      r5,|L7.24|
000012  4628              MOV      r0,r5
                  |L7.20|
;;;1422   
;;;1423   #if _USE_LFN
;;;1424   	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1425   #endif
;;;1426   	do {
;;;1427   		res = move_window(dp->fs, dp->sect);
;;;1428   		if (res != FR_OK) break;
;;;1429   		dir = dp->dir;					/* Ptr to the directory entry of current index */
;;;1430   		c = dir[DIR_Name];
;;;1431   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
;;;1432   #if _USE_LFN	/* LFN configuration */
;;;1433   		a = dir[DIR_Attr] & AM_MASK;
;;;1434   		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
;;;1435   			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1436   		} else {
;;;1437   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1438   				if (dp->lfn) {
;;;1439   					if (c & LLEF) {		/* Is it start of LFN sequence? */
;;;1440   						sum = dir[LDIR_Chksum];
;;;1441   						c &= ~LLEF; ord = c;	/* LFN start order */
;;;1442   						dp->lfn_idx = dp->index;	/* Start index of LFN */
;;;1443   					}
;;;1444   					/* Check validity of the LFN entry and compare it with given name */
;;;1445   					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1446   				}
;;;1447   			} else {					/* An SFN entry is found */
;;;1448   				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
;;;1449   				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
;;;1450   				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
;;;1451   			}
;;;1452   		}
;;;1453   #else		/* Non LFN configuration */
;;;1454   		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
;;;1455   			break;
;;;1456   #endif
;;;1457   		res = dir_next(dp, 0);		/* Next entry */
;;;1458   	} while (res == FR_OK);
;;;1459   
;;;1460   	return res;
;;;1461   }
000014  e8bd81f0          POP      {r4-r8,pc}
                  |L7.24|
000018  bf00              NOP                            ;1426
                  |L7.26|
00001a  6921              LDR      r1,[r4,#0x10]         ;1427
00001c  6820              LDR      r0,[r4,#0]            ;1427
00001e  f7fffffe          BL       move_window
000022  4605              MOV      r5,r0                 ;1427
000024  b105              CBZ      r5,|L7.40|
000026  e016              B        |L7.86|
                  |L7.40|
000028  6966              LDR      r6,[r4,#0x14]         ;1429
00002a  7837              LDRB     r7,[r6,#0]            ;1430
00002c  b90f              CBNZ     r7,|L7.50|
00002e  2504              MOVS     r5,#4                 ;1431
000030  e011              B        |L7.86|
                  |L7.50|
000032  7af0              LDRB     r0,[r6,#0xb]          ;1454
000034  f0000008          AND      r0,r0,#8              ;1454
000038  b930              CBNZ     r0,|L7.72|
00003a  220b              MOVS     r2,#0xb               ;1454
00003c  4630              MOV      r0,r6                 ;1454
00003e  69a1              LDR      r1,[r4,#0x18]         ;1454
000040  f7fffffe          BL       mem_cmp
000044  b900              CBNZ     r0,|L7.72|
000046  e006              B        |L7.86|
                  |L7.72|
000048  2100              MOVS     r1,#0                 ;1457
00004a  4620              MOV      r0,r4                 ;1457
00004c  f7fffffe          BL       dir_next
000050  4605              MOV      r5,r0                 ;1457
000052  2d00              CMP      r5,#0                 ;1458
000054  d0e1              BEQ      |L7.26|
                  |L7.86|
000056  bf00              NOP                            ;1428
000058  4628              MOV      r0,r5                 ;1460
00005a  e7db              B        |L7.20|
;;;1462   
                          ENDP


                          AREA ||i.dir_next||, CODE, READONLY, ALIGN=1

                  dir_next PROC
;;;1082   static
;;;1083   FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1084   	DIR* dp,		/* Pointer to the directory object */
;;;1085   	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
;;;1086   )
;;;1087   {
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;1088   	DWORD clst;
;;;1089   	UINT i;
;;;1090   #if !_FS_READONLY
;;;1091   	UINT c;
;;;1092   #endif
;;;1093   
;;;1094   
;;;1095   	i = dp->index + 1;
000008  88e0              LDRH     r0,[r4,#6]
00000a  1c46              ADDS     r6,r0,#1
;;;1096   	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
00000c  b2b0              UXTH     r0,r6
00000e  b108              CBZ      r0,|L8.20|
000010  6920              LDR      r0,[r4,#0x10]
000012  b910              CBNZ     r0,|L8.26|
                  |L8.20|
;;;1097   		return FR_NO_FILE;
000014  2004              MOVS     r0,#4
                  |L8.22|
;;;1098   
;;;1099   	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
;;;1100   		dp->sect++;					/* Next sector */
;;;1101   
;;;1102   		if (!dp->clust) {		/* Static table */
;;;1103   			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
;;;1104   				return FR_NO_FILE;
;;;1105   		}
;;;1106   		else {					/* Dynamic table */
;;;1107   			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
;;;1108   				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
;;;1109   				if (clst <= 1) return FR_INT_ERR;
;;;1110   				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1111   				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
;;;1112   #if !_FS_READONLY
;;;1113   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
;;;1114   					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
;;;1115   					if (clst == 0) return FR_DENIED;			/* No free cluster */
;;;1116   					if (clst == 1) return FR_INT_ERR;
;;;1117   					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
;;;1118   					/* Clean-up stretched table */
;;;1119   					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
;;;1120   					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
;;;1121   					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
;;;1122   					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
;;;1123   						dp->fs->wflag = 1;
;;;1124   						if (sync_window(dp->fs)) return FR_DISK_ERR;
;;;1125   						dp->fs->winsect++;
;;;1126   					}
;;;1127   					dp->fs->winsect -= c;						/* Rewind window offset */
;;;1128   #else
;;;1129   					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
;;;1130   					return FR_NO_FILE;							/* Report EOT */
;;;1131   #endif
;;;1132   				}
;;;1133   				dp->clust = clst;				/* Initialize data for new cluster */
;;;1134   				dp->sect = clust2sect(dp->fs, clst);
;;;1135   			}
;;;1136   		}
;;;1137   	}
;;;1138   
;;;1139   	dp->index = (WORD)i;	/* Current index */
;;;1140   	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
;;;1141   
;;;1142   	return FR_OK;
;;;1143   }
000016  e8bd81f0          POP      {r4-r8,pc}
                  |L8.26|
00001a  f006000f          AND      r0,r6,#0xf            ;1099
00001e  2800              CMP      r0,#0                 ;1099
000020  d16b              BNE      |L8.250|
000022  6920              LDR      r0,[r4,#0x10]         ;1100
000024  1c40              ADDS     r0,r0,#1              ;1100
000026  6120              STR      r0,[r4,#0x10]         ;1100
000028  68e0              LDR      r0,[r4,#0xc]          ;1102
00002a  b928              CBNZ     r0,|L8.56|
00002c  6820              LDR      r0,[r4,#0]            ;1103
00002e  8900              LDRH     r0,[r0,#8]            ;1103
000030  42b0              CMP      r0,r6                 ;1103
000032  d862              BHI      |L8.250|
000034  2004              MOVS     r0,#4                 ;1104
000036  e7ee              B        |L8.22|
                  |L8.56|
000038  6820              LDR      r0,[r4,#0]            ;1107
00003a  7880              LDRB     r0,[r0,#2]            ;1107
00003c  1e40              SUBS     r0,r0,#1              ;1107
00003e  ea001016          AND      r0,r0,r6,LSR #4       ;1107
000042  2800              CMP      r0,#0                 ;1107
000044  d159              BNE      |L8.250|
000046  68e1              LDR      r1,[r4,#0xc]          ;1108
000048  6820              LDR      r0,[r4,#0]            ;1108
00004a  f7fffffe          BL       get_fat
00004e  4605              MOV      r5,r0                 ;1108
000050  2d01              CMP      r5,#1                 ;1109
000052  d801              BHI      |L8.88|
000054  2002              MOVS     r0,#2                 ;1109
000056  e7de              B        |L8.22|
                  |L8.88|
000058  1c68              ADDS     r0,r5,#1              ;1110
00005a  b908              CBNZ     r0,|L8.96|
00005c  2001              MOVS     r0,#1                 ;1110
00005e  e7da              B        |L8.22|
                  |L8.96|
000060  6820              LDR      r0,[r4,#0]            ;1111
000062  6940              LDR      r0,[r0,#0x14]         ;1111
000064  42a8              CMP      r0,r5                 ;1111
000066  d842              BHI      |L8.238|
000068  f1b80f00          CMP      r8,#0                 ;1113
00006c  d101              BNE      |L8.114|
00006e  2004              MOVS     r0,#4                 ;1113
000070  e7d1              B        |L8.22|
                  |L8.114|
000072  68e1              LDR      r1,[r4,#0xc]          ;1114
000074  6820              LDR      r0,[r4,#0]            ;1114
000076  f7fffffe          BL       create_chain
00007a  4605              MOV      r5,r0                 ;1114
00007c  b90d              CBNZ     r5,|L8.130|
00007e  2007              MOVS     r0,#7                 ;1115
000080  e7c9              B        |L8.22|
                  |L8.130|
000082  2d01              CMP      r5,#1                 ;1116
000084  d101              BNE      |L8.138|
000086  2002              MOVS     r0,#2                 ;1116
000088  e7c5              B        |L8.22|
                  |L8.138|
00008a  1c68              ADDS     r0,r5,#1              ;1117
00008c  b908              CBNZ     r0,|L8.146|
00008e  2001              MOVS     r0,#1                 ;1117
000090  e7c1              B        |L8.22|
                  |L8.146|
000092  6820              LDR      r0,[r4,#0]            ;1119
000094  f7fffffe          BL       sync_window
000098  b108              CBZ      r0,|L8.158|
00009a  2001              MOVS     r0,#1                 ;1119
00009c  e7bb              B        |L8.22|
                  |L8.158|
00009e  6821              LDR      r1,[r4,#0]            ;1120
0000a0  f1010030          ADD      r0,r1,#0x30           ;1120
0000a4  f44f7200          MOV      r2,#0x200             ;1120
0000a8  2100              MOVS     r1,#0                 ;1120
0000aa  f7fffffe          BL       mem_set
0000ae  4629              MOV      r1,r5                 ;1121
0000b0  6820              LDR      r0,[r4,#0]            ;1121
0000b2  f7fffffe          BL       clust2sect
0000b6  6821              LDR      r1,[r4,#0]            ;1121
0000b8  62c8              STR      r0,[r1,#0x2c]         ;1121
0000ba  2700              MOVS     r7,#0                 ;1122
0000bc  e00e              B        |L8.220|
                  |L8.190|
0000be  2001              MOVS     r0,#1                 ;1123
0000c0  6821              LDR      r1,[r4,#0]            ;1123
0000c2  7108              STRB     r0,[r1,#4]            ;1123
0000c4  6820              LDR      r0,[r4,#0]            ;1124
0000c6  f7fffffe          BL       sync_window
0000ca  b108              CBZ      r0,|L8.208|
0000cc  2001              MOVS     r0,#1                 ;1124
0000ce  e7a2              B        |L8.22|
                  |L8.208|
0000d0  6820              LDR      r0,[r4,#0]            ;1125
0000d2  6ac0              LDR      r0,[r0,#0x2c]         ;1125
0000d4  1c40              ADDS     r0,r0,#1              ;1125
0000d6  6821              LDR      r1,[r4,#0]            ;1125
0000d8  62c8              STR      r0,[r1,#0x2c]         ;1125
0000da  1c7f              ADDS     r7,r7,#1              ;1122
                  |L8.220|
0000dc  6820              LDR      r0,[r4,#0]            ;1122
0000de  7880              LDRB     r0,[r0,#2]            ;1122
0000e0  42b8              CMP      r0,r7                 ;1122
0000e2  d8ec              BHI      |L8.190|
0000e4  6820              LDR      r0,[r4,#0]            ;1127
0000e6  6ac0              LDR      r0,[r0,#0x2c]         ;1127
0000e8  1bc0              SUBS     r0,r0,r7              ;1127
0000ea  6821              LDR      r1,[r4,#0]            ;1127
0000ec  62c8              STR      r0,[r1,#0x2c]         ;1127
                  |L8.238|
0000ee  60e5              STR      r5,[r4,#0xc]          ;1133
0000f0  4629              MOV      r1,r5                 ;1134
0000f2  6820              LDR      r0,[r4,#0]            ;1134
0000f4  f7fffffe          BL       clust2sect
0000f8  6120              STR      r0,[r4,#0x10]         ;1134
                  |L8.250|
0000fa  80e6              STRH     r6,[r4,#6]            ;1139
0000fc  6820              LDR      r0,[r4,#0]            ;1140
0000fe  3030              ADDS     r0,r0,#0x30           ;1140
000100  f006010f          AND      r1,r6,#0xf            ;1140
000104  eb001041          ADD      r0,r0,r1,LSL #5       ;1140
000108  6160              STR      r0,[r4,#0x14]         ;1140
00010a  2000              MOVS     r0,#0                 ;1142
00010c  e783              B        |L8.22|
;;;1144   
                          ENDP


                          AREA ||i.dir_read||, CODE, READONLY, ALIGN=1

                  dir_read PROC
;;;1470   static
;;;1471   FRESULT dir_read (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1472   	DIR* dp,		/* Pointer to the directory object */
;;;1473   	int vol			/* Filtered by 0:file/directory or 1:volume label */
;;;1474   )
;;;1475   {
000004  4604              MOV      r4,r0
000006  4689              MOV      r9,r1
;;;1476   	FRESULT res;
;;;1477   	BYTE a, c, *dir;
;;;1478   #if _USE_LFN
;;;1479   	BYTE ord = 0xFF, sum = 0xFF;
;;;1480   #endif
;;;1481   
;;;1482   	res = FR_NO_FILE;
000008  2504              MOVS     r5,#4
;;;1483   	while (dp->sect) {
00000a  e028              B        |L9.94|
                  |L9.12|
;;;1484   		res = move_window(dp->fs, dp->sect);
00000c  6921              LDR      r1,[r4,#0x10]
00000e  6820              LDR      r0,[r4,#0]
000010  f7fffffe          BL       move_window
000014  4605              MOV      r5,r0
;;;1485   		if (res != FR_OK) break;
000016  b105              CBZ      r5,|L9.26|
000018  e024              B        |L9.100|
                  |L9.26|
;;;1486   		dir = dp->dir;					/* Ptr to the directory entry of current index */
00001a  f8d48014          LDR      r8,[r4,#0x14]
;;;1487   		c = dir[DIR_Name];
00001e  f8986000          LDRB     r6,[r8,#0]
;;;1488   		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
000022  b90e              CBNZ     r6,|L9.40|
000024  2504              MOVS     r5,#4
000026  e01d              B        |L9.100|
                  |L9.40|
;;;1489   		a = dir[DIR_Attr] & AM_MASK;
000028  f898000b          LDRB     r0,[r8,#0xb]
00002c  f000073f          AND      r7,r0,#0x3f
;;;1490   #if _USE_LFN	/* LFN configuration */
;;;1491   		if (c == DDEM || (!_FS_RPATH && c == '.') || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
;;;1492   			ord = 0xFF;
;;;1493   		} else {
;;;1494   			if (a == AM_LFN) {			/* An LFN entry is found */
;;;1495   				if (c & LLEF) {			/* Is it start of LFN sequence? */
;;;1496   					sum = dir[LDIR_Chksum];
;;;1497   					c &= ~LLEF; ord = c;
;;;1498   					dp->lfn_idx = dp->index;
;;;1499   				}
;;;1500   				/* Check LFN validity and capture it */
;;;1501   				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
;;;1502   			} else {					/* An SFN entry is found */
;;;1503   				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
;;;1504   					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
;;;1505   				break;
;;;1506   			}
;;;1507   		}
;;;1508   #else		/* Non LFN configuration */
;;;1509   		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
000030  2ee5              CMP      r6,#0xe5
000032  d00d              BEQ      |L9.80|
000034  2e2e              CMP      r6,#0x2e
000036  d00b              BEQ      |L9.80|
000038  2f0f              CMP      r7,#0xf
00003a  d009              BEQ      |L9.80|
00003c  f0270020          BIC      r0,r7,#0x20
000040  2808              CMP      r0,#8
000042  d101              BNE      |L9.72|
000044  2001              MOVS     r0,#1
000046  e000              B        |L9.74|
                  |L9.72|
000048  2000              MOVS     r0,#0
                  |L9.74|
00004a  4548              CMP      r0,r9
00004c  d100              BNE      |L9.80|
;;;1510   			break;
00004e  e009              B        |L9.100|
                  |L9.80|
;;;1511   #endif
;;;1512   		res = dir_next(dp, 0);				/* Next entry */
000050  2100              MOVS     r1,#0
000052  4620              MOV      r0,r4
000054  f7fffffe          BL       dir_next
000058  4605              MOV      r5,r0
;;;1513   		if (res != FR_OK) break;
00005a  b105              CBZ      r5,|L9.94|
00005c  e002              B        |L9.100|
                  |L9.94|
00005e  6920              LDR      r0,[r4,#0x10]         ;1483
000060  2800              CMP      r0,#0                 ;1483
000062  d1d3              BNE      |L9.12|
                  |L9.100|
000064  bf00              NOP                            ;1485
;;;1514   	}
;;;1515   
;;;1516   	if (res != FR_OK) dp->sect = 0;
000066  b10d              CBZ      r5,|L9.108|
000068  2000              MOVS     r0,#0
00006a  6120              STR      r0,[r4,#0x10]
                  |L9.108|
;;;1517   
;;;1518   	return res;
00006c  4628              MOV      r0,r5
;;;1519   }
00006e  e8bd87f0          POP      {r4-r10,pc}
;;;1520   #endif	/* _FS_MINIMIZE <= 1 || _USE_LABEL || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.dir_register||, CODE, READONLY, ALIGN=1

                  dir_register PROC
;;;1529   static
;;;1530   FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1531   	DIR* dp				/* Target directory with object name to be created */
;;;1532   )
;;;1533   {
000002  4604              MOV      r4,r0
;;;1534   	FRESULT res;
;;;1535   #if _USE_LFN	/* LFN configuration */
;;;1536   	UINT n, nent;
;;;1537   	BYTE sn[12], *fn, sum;
;;;1538   	WCHAR *lfn;
;;;1539   
;;;1540   
;;;1541   	fn = dp->fn; lfn = dp->lfn;
;;;1542   	mem_cpy(sn, fn, 12);
;;;1543   
;;;1544   	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
;;;1545   		return FR_INVALID_NAME;
;;;1546   
;;;1547   	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
;;;1548   		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
;;;1549   		for (n = 1; n < 100; n++) {
;;;1550   			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
;;;1551   			res = dir_find(dp);				/* Check if the name collides with existing SFN */
;;;1552   			if (res != FR_OK) break;
;;;1553   		}
;;;1554   		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
;;;1555   		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
;;;1556   		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
;;;1557   	}
;;;1558   
;;;1559   	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
;;;1560   		for (n = 0; lfn[n]; n++) ;
;;;1561   		nent = (n + 25) / 13;
;;;1562   	} else {						/* Otherwise allocate an entry for an SFN  */
;;;1563   		nent = 1;
;;;1564   	}
;;;1565   	res = dir_alloc(dp, nent);		/* Allocate entries */
;;;1566   
;;;1567   	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
;;;1568   		res = dir_sdi(dp, dp->index - nent);
;;;1569   		if (res == FR_OK) {
;;;1570   			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
;;;1571   			do {					/* Store LFN entries in bottom first */
;;;1572   				res = move_window(dp->fs, dp->sect);
;;;1573   				if (res != FR_OK) break;
;;;1574   				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
;;;1575   				dp->fs->wflag = 1;
;;;1576   				res = dir_next(dp, 0);	/* Next entry */
;;;1577   			} while (res == FR_OK && --nent);
;;;1578   		}
;;;1579   	}
;;;1580   #else	/* Non LFN configuration */
;;;1581   	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
000004  2101              MOVS     r1,#1
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       dir_alloc
00000c  4605              MOV      r5,r0
;;;1582   #endif
;;;1583   
;;;1584   	if (res == FR_OK) {				/* Set SFN entry */
00000e  b995              CBNZ     r5,|L10.54|
;;;1585   		res = move_window(dp->fs, dp->sect);
000010  6921              LDR      r1,[r4,#0x10]
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       move_window
000018  4605              MOV      r5,r0
;;;1586   		if (res == FR_OK) {
00001a  b965              CBNZ     r5,|L10.54|
;;;1587   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
00001c  2220              MOVS     r2,#0x20
00001e  2100              MOVS     r1,#0
000020  6960              LDR      r0,[r4,#0x14]
000022  f7fffffe          BL       mem_set
;;;1588   			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
000026  220b              MOVS     r2,#0xb
000028  e9d40105          LDRD     r0,r1,[r4,#0x14]
00002c  f7fffffe          BL       mem_cpy
;;;1589   #if _USE_LFN
;;;1590   			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
;;;1591   #endif
;;;1592   			dp->fs->wflag = 1;
000030  2001              MOVS     r0,#1
000032  6821              LDR      r1,[r4,#0]
000034  7108              STRB     r0,[r1,#4]
                  |L10.54|
;;;1593   		}
;;;1594   	}
;;;1595   
;;;1596   	return res;
000036  4628              MOV      r0,r5
;;;1597   }
000038  bd70              POP      {r4-r6,pc}
;;;1598   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_remove||, CODE, READONLY, ALIGN=1

                  dir_remove PROC
;;;1607   static
;;;1608   FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
000000  b570              PUSH     {r4-r6,lr}
;;;1609   	DIR* dp				/* Directory object pointing the entry to be removed */
;;;1610   )
;;;1611   {
000002  4604              MOV      r4,r0
;;;1612   	FRESULT res;
;;;1613   #if _USE_LFN	/* LFN configuration */
;;;1614   	UINT i;
;;;1615   
;;;1616   	i = dp->index;	/* SFN index */
;;;1617   	res = dir_sdi(dp, (dp->lfn_idx == 0xFFFF) ? i : dp->lfn_idx);	/* Goto the SFN or top of the LFN entries */
;;;1618   	if (res == FR_OK) {
;;;1619   		do {
;;;1620   			res = move_window(dp->fs, dp->sect);
;;;1621   			if (res != FR_OK) break;
;;;1622   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
;;;1623   			*dp->dir = DDEM;
;;;1624   			dp->fs->wflag = 1;
;;;1625   			if (dp->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
;;;1626   			res = dir_next(dp, 0);		/* Next entry */
;;;1627   		} while (res == FR_OK);
;;;1628   		if (res == FR_NO_FILE) res = FR_INT_ERR;
;;;1629   	}
;;;1630   
;;;1631   #else			/* Non LFN configuration */
;;;1632   	res = dir_sdi(dp, dp->index);
000004  88e1              LDRH     r1,[r4,#6]
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       dir_sdi
00000c  4605              MOV      r5,r0
;;;1633   	if (res == FR_OK) {
00000e  b985              CBNZ     r5,|L11.50|
;;;1634   		res = move_window(dp->fs, dp->sect);
000010  6921              LDR      r1,[r4,#0x10]
000012  6820              LDR      r0,[r4,#0]
000014  f7fffffe          BL       move_window
000018  4605              MOV      r5,r0
;;;1635   		if (res == FR_OK) {
00001a  b955              CBNZ     r5,|L11.50|
;;;1636   			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
00001c  2220              MOVS     r2,#0x20
00001e  2100              MOVS     r1,#0
000020  6960              LDR      r0,[r4,#0x14]
000022  f7fffffe          BL       mem_set
;;;1637   			*dp->dir = DDEM;
000026  20e5              MOVS     r0,#0xe5
000028  6961              LDR      r1,[r4,#0x14]
00002a  7008              STRB     r0,[r1,#0]
;;;1638   			dp->fs->wflag = 1;
00002c  2001              MOVS     r0,#1
00002e  6821              LDR      r1,[r4,#0]
000030  7108              STRB     r0,[r1,#4]
                  |L11.50|
;;;1639   		}
;;;1640   	}
;;;1641   #endif
;;;1642   
;;;1643   	return res;
000032  4628              MOV      r0,r5
;;;1644   }
000034  bd70              POP      {r4-r6,pc}
;;;1645   #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.dir_sdi||, CODE, READONLY, ALIGN=1

                  dir_sdi PROC
;;;1034   static
;;;1035   FRESULT dir_sdi (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1036   	DIR* dp,		/* Pointer to directory object */
;;;1037   	UINT idx		/* Index of directory table */
;;;1038   )
;;;1039   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;1040   	DWORD clst, sect;
;;;1041   	UINT ic;
;;;1042   
;;;1043   
;;;1044   	dp->index = (WORD)idx;	/* Current index */
000008  80e6              STRH     r6,[r4,#6]
;;;1045   	clst = dp->sclust;		/* Table start cluster (0:root) */
00000a  68a5              LDR      r5,[r4,#8]
;;;1046   	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
00000c  2d01              CMP      r5,#1
00000e  d003              BEQ      |L12.24|
000010  6820              LDR      r0,[r4,#0]
000012  6940              LDR      r0,[r0,#0x14]
000014  42a8              CMP      r0,r5
000016  d802              BHI      |L12.30|
                  |L12.24|
;;;1047   		return FR_INT_ERR;
000018  2002              MOVS     r0,#2
                  |L12.26|
;;;1048   	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
;;;1049   		clst = dp->fs->dirbase;
;;;1050   
;;;1051   	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
;;;1052   		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
;;;1053   			return FR_INT_ERR;
;;;1054   		sect = dp->fs->dirbase;
;;;1055   	}
;;;1056   	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
;;;1057   		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
;;;1058   		while (idx >= ic) {	/* Follow cluster chain */
;;;1059   			clst = get_fat(dp->fs, clst);				/* Get next cluster */
;;;1060   			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
;;;1061   			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
;;;1062   				return FR_INT_ERR;
;;;1063   			idx -= ic;
;;;1064   		}
;;;1065   		sect = clust2sect(dp->fs, clst);
;;;1066   	}
;;;1067   	dp->clust = clst;	/* Current cluster# */
;;;1068   	if (!sect) return FR_INT_ERR;
;;;1069   	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
;;;1070   	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
;;;1071   
;;;1072   	return FR_OK;
;;;1073   }
00001a  e8bd81f0          POP      {r4-r8,pc}
                  |L12.30|
00001e  b92d              CBNZ     r5,|L12.44|
000020  6820              LDR      r0,[r4,#0]            ;1048
000022  7800              LDRB     r0,[r0,#0]            ;1048
000024  2803              CMP      r0,#3                 ;1048
000026  d101              BNE      |L12.44|
000028  6820              LDR      r0,[r4,#0]            ;1049
00002a  6a45              LDR      r5,[r0,#0x24]         ;1049
                  |L12.44|
00002c  b945              CBNZ     r5,|L12.64|
00002e  6820              LDR      r0,[r4,#0]            ;1052
000030  8900              LDRH     r0,[r0,#8]            ;1052
000032  42b0              CMP      r0,r6                 ;1052
000034  d801              BHI      |L12.58|
000036  2002              MOVS     r0,#2                 ;1053
000038  e7ef              B        |L12.26|
                  |L12.58|
00003a  6820              LDR      r0,[r4,#0]            ;1054
00003c  6a47              LDR      r7,[r0,#0x24]         ;1054
00003e  e01e              B        |L12.126|
                  |L12.64|
000040  6820              LDR      r0,[r4,#0]            ;1057
000042  7880              LDRB     r0,[r0,#2]            ;1057
000044  ea4f1800          LSL      r8,r0,#4              ;1057
000048  e012              B        |L12.112|
                  |L12.74|
00004a  4629              MOV      r1,r5                 ;1059
00004c  6820              LDR      r0,[r4,#0]            ;1059
00004e  f7fffffe          BL       get_fat
000052  4605              MOV      r5,r0                 ;1059
000054  1c68              ADDS     r0,r5,#1              ;1060
000056  b908              CBNZ     r0,|L12.92|
000058  2001              MOVS     r0,#1                 ;1060
00005a  e7de              B        |L12.26|
                  |L12.92|
00005c  2d02              CMP      r5,#2                 ;1061
00005e  d303              BCC      |L12.104|
000060  6820              LDR      r0,[r4,#0]            ;1061
000062  6940              LDR      r0,[r0,#0x14]         ;1061
000064  42a8              CMP      r0,r5                 ;1061
000066  d801              BHI      |L12.108|
                  |L12.104|
000068  2002              MOVS     r0,#2                 ;1062
00006a  e7d6              B        |L12.26|
                  |L12.108|
00006c  eba60608          SUB      r6,r6,r8              ;1063
                  |L12.112|
000070  4546              CMP      r6,r8                 ;1058
000072  d2ea              BCS      |L12.74|
000074  4629              MOV      r1,r5                 ;1065
000076  6820              LDR      r0,[r4,#0]            ;1065
000078  f7fffffe          BL       clust2sect
00007c  4607              MOV      r7,r0                 ;1065
                  |L12.126|
00007e  60e5              STR      r5,[r4,#0xc]          ;1067
000080  b90f              CBNZ     r7,|L12.134|
000082  2002              MOVS     r0,#2                 ;1068
000084  e7c9              B        |L12.26|
                  |L12.134|
000086  eb071016          ADD      r0,r7,r6,LSR #4       ;1069
00008a  6120              STR      r0,[r4,#0x10]         ;1069
00008c  6820              LDR      r0,[r4,#0]            ;1070
00008e  3030              ADDS     r0,r0,#0x30           ;1070
000090  f006010f          AND      r1,r6,#0xf            ;1070
000094  eb001041          ADD      r0,r0,r1,LSL #5       ;1070
000098  6160              STR      r0,[r4,#0x14]         ;1070
00009a  2000              MOVS     r0,#0                 ;1072
00009c  e7bd              B        |L12.26|
;;;1074   
                          ENDP


                          AREA ||i.f_chmod||, CODE, READONLY, ALIGN=1

                  f_chmod PROC
;;;3625   
;;;3626   FRESULT f_chmod (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;3627   	const TCHAR* path,	/* Pointer to the file path */
;;;3628   	BYTE attr,			/* Attribute bits */
;;;3629   	BYTE mask			/* Attribute mask to change */
;;;3630   )
;;;3631   {
000002  b08a              SUB      sp,sp,#0x28
000004  460f              MOV      r7,r1
000006  4614              MOV      r4,r2
;;;3632   	FRESULT res;
;;;3633   	DIR dj;
;;;3634   	BYTE *dir;
;;;3635   	DEFINE_NAMEBUF;
;;;3636   
;;;3637   
;;;3638   	/* Get logical drive number */
;;;3639   	res = find_volume(&dj.fs, &path, 1);
000008  2201              MOVS     r2,#1
00000a  a90a              ADD      r1,sp,#0x28
00000c  a803              ADD      r0,sp,#0xc
00000e  f7fffffe          BL       find_volume
000012  4606              MOV      r6,r0
;;;3640   	if (res == FR_OK) {
000014  b9de              CBNZ     r6,|L13.78|
;;;3641   		INIT_BUF(dj);
000016  f8cdd024          STR      sp,[sp,#0x24]
;;;3642   		res = follow_path(&dj, path);		/* Follow the file path */
00001a  a803              ADD      r0,sp,#0xc
00001c  990a              LDR      r1,[sp,#0x28]
00001e  f7fffffe          BL       follow_path
000022  4606              MOV      r6,r0
;;;3643   		FREE_BUF();
;;;3644   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
000024  bf00              NOP      
;;;3645   			res = FR_INVALID_NAME;
;;;3646   		if (res == FR_OK) {
000026  b996              CBNZ     r6,|L13.78|
;;;3647   			dir = dj.dir;
000028  9d08              LDR      r5,[sp,#0x20]
;;;3648   			if (!dir) {						/* Is it a root directory? */
00002a  b90d              CBNZ     r5,|L13.48|
;;;3649   				res = FR_INVALID_NAME;
00002c  2606              MOVS     r6,#6
00002e  e00e              B        |L13.78|
                  |L13.48|
;;;3650   			} else {						/* File or sub directory */
;;;3651   				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
000030  f0040427          AND      r4,r4,#0x27
;;;3652   				dir[DIR_Attr] = (attr & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
000034  ea070004          AND      r0,r7,r4
000038  7ae9              LDRB     r1,[r5,#0xb]
00003a  43a1              BICS     r1,r1,r4
00003c  4308              ORRS     r0,r0,r1
00003e  72e8              STRB     r0,[r5,#0xb]
;;;3653   				dj.fs->wflag = 1;
000040  2001              MOVS     r0,#1
000042  9903              LDR      r1,[sp,#0xc]
000044  7108              STRB     r0,[r1,#4]
;;;3654   				res = sync_fs(dj.fs);
000046  9803              LDR      r0,[sp,#0xc]
000048  f7fffffe          BL       sync_fs
00004c  4606              MOV      r6,r0
                  |L13.78|
;;;3655   			}
;;;3656   		}
;;;3657   	}
;;;3658   
;;;3659   	LEAVE_FF(dj.fs, res);
00004e  4630              MOV      r0,r6
;;;3660   }
000050  b00d              ADD      sp,sp,#0x34
000052  bdf0              POP      {r4-r7,pc}
;;;3661   
                          ENDP


                          AREA ||i.f_close||, CODE, READONLY, ALIGN=1

                  f_close PROC
;;;2812   
;;;2813   FRESULT f_close (
000000  b570              PUSH     {r4-r6,lr}
;;;2814   	FIL *fp		/* Pointer to the file object to be closed */
;;;2815   )
;;;2816   {
000002  4605              MOV      r5,r0
;;;2817   	FRESULT res;
;;;2818   
;;;2819   
;;;2820   #if !_FS_READONLY
;;;2821   	res = f_sync(fp);					/* Flush cached data */
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       f_sync
00000a  4604              MOV      r4,r0
;;;2822   	if (res == FR_OK)
00000c  b934              CBNZ     r4,|L14.28|
;;;2823   #endif
;;;2824   	{
;;;2825   		res = validate(fp);				/* Lock volume */
00000e  4628              MOV      r0,r5
000010  f7fffffe          BL       validate
000014  4604              MOV      r4,r0
;;;2826   		if (res == FR_OK) {
000016  b90c              CBNZ     r4,|L14.28|
;;;2827   #if _FS_REENTRANT
;;;2828   			FATFS *fs = fp->fs;
;;;2829   #endif
;;;2830   #if _FS_LOCK
;;;2831   			res = dec_lock(fp->lockid);	/* Decrement file open counter */
;;;2832   			if (res == FR_OK)
;;;2833   #endif
;;;2834   				fp->fs = 0;				/* Invalidate file object */
000018  2000              MOVS     r0,#0
00001a  6028              STR      r0,[r5,#0]
                  |L14.28|
;;;2835   #if _FS_REENTRANT
;;;2836   			unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;2837   #endif
;;;2838   		}
;;;2839   	}
;;;2840   	return res;
00001c  4620              MOV      r0,r4
;;;2841   }
00001e  bd70              POP      {r4-r6,pc}
;;;2842   
                          ENDP


                          AREA ||i.f_closedir||, CODE, READONLY, ALIGN=1

                  f_closedir PROC
;;;3198   
;;;3199   FRESULT f_closedir (
000000  b570              PUSH     {r4-r6,lr}
;;;3200   	DIR *dp		/* Pointer to the directory object to be closed */
;;;3201   )
;;;3202   {
000002  4604              MOV      r4,r0
;;;3203   	FRESULT res;
;;;3204   
;;;3205   
;;;3206   	res = validate(dp);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3207   	if (res == FR_OK) {
00000c  b90d              CBNZ     r5,|L15.18|
;;;3208   #if _FS_REENTRANT
;;;3209   		FATFS *fs = dp->fs;
;;;3210   #endif
;;;3211   #if _FS_LOCK
;;;3212   		if (dp->lockid)				/* Decrement sub-directory open counter */
;;;3213   			res = dec_lock(dp->lockid);
;;;3214   		if (res == FR_OK)
;;;3215   #endif
;;;3216   			dp->fs = 0;				/* Invalidate directory object */
00000e  2000              MOVS     r0,#0
000010  6020              STR      r0,[r4,#0]
                  |L15.18|
;;;3217   #if _FS_REENTRANT
;;;3218   		unlock_fs(fs, FR_OK);		/* Unlock volume */
;;;3219   #endif
;;;3220   	}
;;;3221   	return res;
000012  4628              MOV      r0,r5
;;;3222   }
000014  bd70              POP      {r4-r6,pc}
;;;3223   
                          ENDP


                          AREA ||i.f_getfree||, CODE, READONLY, ALIGN=1

                  f_getfree PROC
;;;3359   
;;;3360   FRESULT f_getfree (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;3361   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3362   	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
;;;3363   	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
;;;3364   )
;;;3365   {
000004  b082              SUB      sp,sp,#8
000006  468a              MOV      r10,r1
;;;3366   	FRESULT res;
;;;3367   	FATFS *fs;
;;;3368   	DWORD n, clst, sect, stat;
;;;3369   	UINT i;
;;;3370   	BYTE fat, *p;
;;;3371   
;;;3372   
;;;3373   	/* Get logical drive number */
;;;3374   	res = find_volume(fatfs, &path, 0);
000008  2200              MOVS     r2,#0
00000a  a902              ADD      r1,sp,#8
00000c  9804              LDR      r0,[sp,#0x10]
00000e  f7fffffe          BL       find_volume
000012  9001              STR      r0,[sp,#4]
;;;3375   	fs = *fatfs;
000014  9804              LDR      r0,[sp,#0x10]
000016  6804              LDR      r4,[r0,#0]
;;;3376   	if (res == FR_OK) {
000018  9801              LDR      r0,[sp,#4]
00001a  2800              CMP      r0,#0
00001c  d16d              BNE      |L16.250|
;;;3377   		/* If free_clust is valid, return it without full cluster scan */
;;;3378   		if (fs->free_clust <= fs->n_fatent - 2) {
00001e  e9d41004          LDRD     r1,r0,[r4,#0x10]
000022  1e80              SUBS     r0,r0,#2
000024  4281              CMP      r1,r0
000026  d803              BHI      |L16.48|
;;;3379   			*nclst = fs->free_clust;
000028  6920              LDR      r0,[r4,#0x10]
00002a  f8ca0000          STR      r0,[r10,#0]
00002e  e064              B        |L16.250|
                  |L16.48|
;;;3380   		} else {
;;;3381   			/* Get number of free clusters */
;;;3382   			fat = fs->fs_type;
000030  f894b000          LDRB     r11,[r4,#0]
;;;3383   			n = 0;
000034  2600              MOVS     r6,#0
;;;3384   			if (fat == FS_FAT12) {
000036  f1bb0f01          CMP      r11,#1
00003a  d11c              BNE      |L16.118|
;;;3385   				clst = 2;
00003c  2702              MOVS     r7,#2
;;;3386   				do {
00003e  bf00              NOP      
                  |L16.64|
;;;3387   					stat = get_fat(fs, clst);
000040  4639              MOV      r1,r7
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       get_fat
000048  4680              MOV      r8,r0
;;;3388   					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
00004a  f1080001          ADD      r0,r8,#1
00004e  b910              CBNZ     r0,|L16.86|
000050  2001              MOVS     r0,#1
000052  9001              STR      r0,[sp,#4]
000054  e00e              B        |L16.116|
                  |L16.86|
;;;3389   					if (stat == 1) { res = FR_INT_ERR; break; }
000056  f1b80f01          CMP      r8,#1
00005a  d102              BNE      |L16.98|
00005c  2002              MOVS     r0,#2
00005e  9001              STR      r0,[sp,#4]
000060  e008              B        |L16.116|
                  |L16.98|
;;;3390   					if (stat == 0) n++;
000062  f1b80f00          CMP      r8,#0
000066  d100              BNE      |L16.106|
000068  1c76              ADDS     r6,r6,#1
                  |L16.106|
;;;3391   				} while (++clst < fs->n_fatent);
00006a  1c78              ADDS     r0,r7,#1
00006c  4607              MOV      r7,r0
00006e  6961              LDR      r1,[r4,#0x14]
000070  4288              CMP      r0,r1
000072  d3e5              BCC      |L16.64|
                  |L16.116|
000074  e03a              B        |L16.236|
                  |L16.118|
;;;3392   			} else {
;;;3393   				clst = fs->n_fatent;
000076  6967              LDR      r7,[r4,#0x14]
;;;3394   				sect = fs->fatbase;
000078  6a20              LDR      r0,[r4,#0x20]
00007a  9000              STR      r0,[sp,#0]
;;;3395   				i = 0; p = 0;
00007c  f04f0900          MOV      r9,#0
000080  2500              MOVS     r5,#0
;;;3396   				do {
000082  bf00              NOP      
                  |L16.132|
;;;3397   					if (!i) {
000084  f1b90f00          CMP      r9,#0
000088  d10e              BNE      |L16.168|
;;;3398   						res = move_window(fs, sect++);
00008a  9800              LDR      r0,[sp,#0]
00008c  1c42              ADDS     r2,r0,#1
00008e  4601              MOV      r1,r0
000090  4620              MOV      r0,r4
000092  9200              STR      r2,[sp,#0]
000094  f7fffffe          BL       move_window
000098  9001              STR      r0,[sp,#4]
;;;3399   						if (res != FR_OK) break;
00009a  9801              LDR      r0,[sp,#4]
00009c  b100              CBZ      r0,|L16.160|
00009e  e024              B        |L16.234|
                  |L16.160|
;;;3400   						p = fs->win;
0000a0  f1040530          ADD      r5,r4,#0x30
;;;3401   						i = SS(fs);
0000a4  f44f7900          MOV      r9,#0x200
                  |L16.168|
;;;3402   					}
;;;3403   					if (fat == FS_FAT16) {
0000a8  f1bb0f02          CMP      r11,#2
0000ac  d109              BNE      |L16.194|
;;;3404   						if (LD_WORD(p) == 0) n++;
0000ae  7828              LDRB     r0,[r5,#0]
0000b0  7869              LDRB     r1,[r5,#1]
0000b2  ea402001          ORR      r0,r0,r1,LSL #8
0000b6  b900              CBNZ     r0,|L16.186|
0000b8  1c76              ADDS     r6,r6,#1
                  |L16.186|
;;;3405   						p += 2; i -= 2;
0000ba  1cad              ADDS     r5,r5,#2
0000bc  f1a90902          SUB      r9,r9,#2
0000c0  e010              B        |L16.228|
                  |L16.194|
;;;3406   					} else {
;;;3407   						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
0000c2  78e8              LDRB     r0,[r5,#3]
0000c4  0600              LSLS     r0,r0,#24
0000c6  78a9              LDRB     r1,[r5,#2]
0000c8  ea404001          ORR      r0,r0,r1,LSL #16
0000cc  7869              LDRB     r1,[r5,#1]
0000ce  ea402001          ORR      r0,r0,r1,LSL #8
0000d2  7829              LDRB     r1,[r5,#0]
0000d4  4308              ORRS     r0,r0,r1
0000d6  f0204070          BIC      r0,r0,#0xf0000000
0000da  b900              CBNZ     r0,|L16.222|
0000dc  1c76              ADDS     r6,r6,#1
                  |L16.222|
;;;3408   						p += 4; i -= 4;
0000de  1d2d              ADDS     r5,r5,#4
0000e0  f1a90904          SUB      r9,r9,#4
                  |L16.228|
;;;3409   					}
;;;3410   				} while (--clst);
0000e4  1e78              SUBS     r0,r7,#1
0000e6  0007              MOVS     r7,r0
0000e8  d1cc              BNE      |L16.132|
                  |L16.234|
0000ea  bf00              NOP                            ;3399
                  |L16.236|
;;;3411   			}
;;;3412   			fs->free_clust = n;
0000ec  6126              STR      r6,[r4,#0x10]
;;;3413   			fs->fsi_flag |= 1;
0000ee  7960              LDRB     r0,[r4,#5]
0000f0  f0400001          ORR      r0,r0,#1
0000f4  7160              STRB     r0,[r4,#5]
;;;3414   			*nclst = n;
0000f6  f8ca6000          STR      r6,[r10,#0]
                  |L16.250|
;;;3415   		}
;;;3416   	}
;;;3417   	LEAVE_FF(fs, res);
0000fa  9801              LDR      r0,[sp,#4]
;;;3418   }
0000fc  b005              ADD      sp,sp,#0x14
0000fe  e8bd8ff0          POP      {r4-r11,pc}
;;;3419   
                          ENDP


                          AREA ||i.f_getlabel||, CODE, READONLY, ALIGN=1

                  f_getlabel PROC
;;;3794   
;;;3795   FRESULT f_getlabel (
000000  e92d41f7          PUSH     {r0-r2,r4-r8,lr}
;;;3796   	const TCHAR* path,	/* Path name of the logical drive number */
;;;3797   	TCHAR* label,		/* Pointer to a buffer to return the volume label */
;;;3798   	DWORD* vsn			/* Pointer to a variable to return the volume serial number */
;;;3799   )
;;;3800   {
000004  b087              SUB      sp,sp,#0x1c
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
;;;3801   	FRESULT res;
;;;3802   	DIR dj;
;;;3803   	UINT i, j;
;;;3804   #if _USE_LFN && _LFN_UNICODE
;;;3805   	WCHAR w;
;;;3806   #endif
;;;3807   
;;;3808   
;;;3809   	/* Get logical drive number */
;;;3810   	res = find_volume(&dj.fs, &path, 0);
00000a  2200              MOVS     r2,#0
00000c  a907              ADD      r1,sp,#0x1c
00000e  4668              MOV      r0,sp
000010  f7fffffe          BL       find_volume
000014  4604              MOV      r4,r0
;;;3811   
;;;3812   	/* Get volume label */
;;;3813   	if (res == FR_OK && label) {
000016  bb24              CBNZ     r4,|L17.98|
000018  b31d              CBZ      r5,|L17.98|
;;;3814   		dj.sclust = 0;					/* Open root directory */
00001a  2000              MOVS     r0,#0
00001c  9002              STR      r0,[sp,#8]
;;;3815   		res = dir_sdi(&dj, 0);
00001e  2100              MOVS     r1,#0
000020  4668              MOV      r0,sp
000022  f7fffffe          BL       dir_sdi
000026  4604              MOV      r4,r0
;;;3816   		if (res == FR_OK) {
000028  b9dc              CBNZ     r4,|L17.98|
;;;3817   			res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
00002a  2101              MOVS     r1,#1
00002c  4668              MOV      r0,sp
00002e  f7fffffe          BL       dir_read
000032  4604              MOV      r4,r0
;;;3818   			if (res == FR_OK) {			/* A volume label is exist */
000034  b984              CBNZ     r4,|L17.88|
;;;3819   #if _USE_LFN && _LFN_UNICODE
;;;3820   				i = j = 0;
;;;3821   				do {
;;;3822   					w = (i < 11) ? dj.dir[i++] : ' ';
;;;3823   					if (IsDBCS1(w) && i < 11 && IsDBCS2(dj.dir[i]))
;;;3824   						w = w << 8 | dj.dir[i++];
;;;3825   					label[j++] = ff_convert(w, 1);	/* OEM -> Unicode */
;;;3826   				} while (j < 11);
;;;3827   #else
;;;3828   				mem_cpy(label, dj.dir, 11);
000036  220b              MOVS     r2,#0xb
000038  4628              MOV      r0,r5
00003a  9905              LDR      r1,[sp,#0x14]
00003c  f7fffffe          BL       mem_cpy
;;;3829   #endif
;;;3830   				j = 11;
000040  270b              MOVS     r7,#0xb
;;;3831   				do {
000042  bf00              NOP      
                  |L17.68|
;;;3832   					label[j] = 0;
000044  2000              MOVS     r0,#0
000046  55e8              STRB     r0,[r5,r7]
;;;3833   					if (!j) break;
000048  b907              CBNZ     r7,|L17.76|
00004a  e004              B        |L17.86|
                  |L17.76|
;;;3834   				} while (label[--j] == ' ');
00004c  1e78              SUBS     r0,r7,#1
00004e  4607              MOV      r7,r0
000050  5c28              LDRB     r0,[r5,r0]
000052  2820              CMP      r0,#0x20
000054  d0f6              BEQ      |L17.68|
                  |L17.86|
000056  bf00              NOP                            ;3833
                  |L17.88|
;;;3835   			}
;;;3836   			if (res == FR_NO_FILE) {	/* No label, return nul string */
000058  2c04              CMP      r4,#4
00005a  d102              BNE      |L17.98|
;;;3837   				label[0] = 0;
00005c  2000              MOVS     r0,#0
00005e  7028              STRB     r0,[r5,#0]
;;;3838   				res = FR_OK;
000060  2400              MOVS     r4,#0
                  |L17.98|
;;;3839   			}
;;;3840   		}
;;;3841   	}
;;;3842   
;;;3843   	/* Get volume serial number */
;;;3844   	if (res == FR_OK && vsn) {
000062  bb44              CBNZ     r4,|L17.182|
000064  f1b80f00          CMP      r8,#0
000068  d025              BEQ      |L17.182|
;;;3845   		res = move_window(dj.fs, dj.fs->volbase);
00006a  9a00              LDR      r2,[sp,#0]
00006c  4610              MOV      r0,r2
00006e  69d1              LDR      r1,[r2,#0x1c]
000070  f7fffffe          BL       move_window
000074  4604              MOV      r4,r0
;;;3846   		if (res == FR_OK) {
000076  b9f4              CBNZ     r4,|L17.182|
;;;3847   			i = dj.fs->fs_type == FS_FAT32 ? BS_VolID32 : BS_VolID;
000078  9800              LDR      r0,[sp,#0]
00007a  7800              LDRB     r0,[r0,#0]
00007c  2803              CMP      r0,#3
00007e  d101              BNE      |L17.132|
000080  2043              MOVS     r0,#0x43
000082  e000              B        |L17.134|
                  |L17.132|
000084  2027              MOVS     r0,#0x27
                  |L17.134|
000086  4606              MOV      r6,r0
;;;3848   			*vsn = LD_DWORD(&dj.fs->win[i]);
000088  9800              LDR      r0,[sp,#0]
00008a  3030              ADDS     r0,r0,#0x30
00008c  4430              ADD      r0,r0,r6
00008e  78c0              LDRB     r0,[r0,#3]
000090  0601              LSLS     r1,r0,#24
000092  9800              LDR      r0,[sp,#0]
000094  3030              ADDS     r0,r0,#0x30
000096  4430              ADD      r0,r0,r6
000098  7880              LDRB     r0,[r0,#2]
00009a  ea414100          ORR      r1,r1,r0,LSL #16
00009e  9800              LDR      r0,[sp,#0]
0000a0  3030              ADDS     r0,r0,#0x30
0000a2  4430              ADD      r0,r0,r6
0000a4  7840              LDRB     r0,[r0,#1]
0000a6  ea412000          ORR      r0,r1,r0,LSL #8
0000aa  9900              LDR      r1,[sp,#0]
0000ac  3130              ADDS     r1,r1,#0x30
0000ae  5d89              LDRB     r1,[r1,r6]
0000b0  4308              ORRS     r0,r0,r1
0000b2  f8c80000          STR      r0,[r8,#0]
                  |L17.182|
;;;3849   		}
;;;3850   	}
;;;3851   
;;;3852   	LEAVE_FF(dj.fs, res);
0000b6  4620              MOV      r0,r4
;;;3853   }
0000b8  b00a              ADD      sp,sp,#0x28
0000ba  e8bd81f0          POP      {r4-r8,pc}
;;;3854   
                          ENDP


                          AREA ||i.f_lseek||, CODE, READONLY, ALIGN=1

                  f_lseek PROC
;;;2984   
;;;2985   FRESULT f_lseek (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2986   	FIL* fp,		/* Pointer to the file object */
;;;2987   	DWORD ofs		/* File pointer from top of file */
;;;2988   )
;;;2989   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;2990   	FRESULT res;
;;;2991   	DWORD clst, bcs, nsect, ifptr;
;;;2992   #if _USE_FASTSEEK
;;;2993   	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
;;;2994   #endif
;;;2995   
;;;2996   
;;;2997   	res = validate(fp);					/* Check validity of the object */
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       validate
00000e  4682              MOV      r10,r0
;;;2998   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
000010  f1ba0f00          CMP      r10,#0
000014  d002              BEQ      |L18.28|
000016  4650              MOV      r0,r10
                  |L18.24|
;;;2999   	if (fp->err)						/* Check error */
;;;3000   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;3001   
;;;3002   #if _USE_FASTSEEK
;;;3003   	if (fp->cltbl) {	/* Fast seek */
;;;3004   		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
;;;3005   			tbl = fp->cltbl;
;;;3006   			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
;;;3007   			cl = fp->sclust;			/* Top of the chain */
;;;3008   			if (cl) {
;;;3009   				do {
;;;3010   					/* Get a fragment */
;;;3011   					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
;;;3012   					do {
;;;3013   						pcl = cl; ncl++;
;;;3014   						cl = get_fat(fp->fs, cl);
;;;3015   						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
;;;3016   						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3017   					} while (cl == pcl + 1);
;;;3018   					if (ulen <= tlen) {		/* Store the length and top of the fragment */
;;;3019   						*tbl++ = ncl; *tbl++ = tcl;
;;;3020   					}
;;;3021   				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
;;;3022   			}
;;;3023   			*fp->cltbl = ulen;	/* Number of items used */
;;;3024   			if (ulen <= tlen)
;;;3025   				*tbl = 0;		/* Terminate table */
;;;3026   			else
;;;3027   				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
;;;3028   
;;;3029   		} else {						/* Fast seek */
;;;3030   			if (ofs > fp->fsize)		/* Clip offset at the file size */
;;;3031   				ofs = fp->fsize;
;;;3032   			fp->fptr = ofs;				/* Set file pointer */
;;;3033   			if (ofs) {
;;;3034   				fp->clust = clmt_clust(fp, ofs - 1);
;;;3035   				dsc = clust2sect(fp->fs, fp->clust);
;;;3036   				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
;;;3037   				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
;;;3038   				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
;;;3039   #if !_FS_TINY
;;;3040   #if !_FS_READONLY
;;;3041   					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;3042   						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3043   							ABORT(fp->fs, FR_DISK_ERR);
;;;3044   						fp->flag &= ~FA__DIRTY;
;;;3045   					}
;;;3046   #endif
;;;3047   					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)	/* Load current sector */
;;;3048   						ABORT(fp->fs, FR_DISK_ERR);
;;;3049   #endif
;;;3050   					fp->dsect = dsc;
;;;3051   				}
;;;3052   			}
;;;3053   		}
;;;3054   	} else
;;;3055   #endif
;;;3056   
;;;3057   	/* Normal Seek */
;;;3058   	{
;;;3059   		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
;;;3060   #if !_FS_READONLY
;;;3061   			 && !(fp->flag & FA_WRITE)
;;;3062   #endif
;;;3063   			) ofs = fp->fsize;
;;;3064   
;;;3065   		ifptr = fp->fptr;
;;;3066   		fp->fptr = nsect = 0;
;;;3067   		if (ofs) {
;;;3068   			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
;;;3069   			if (ifptr > 0 &&
;;;3070   				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
;;;3071   				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
;;;3072   				ofs -= fp->fptr;
;;;3073   				clst = fp->clust;
;;;3074   			} else {									/* When seek to back cluster, */
;;;3075   				clst = fp->sclust;						/* start from the first cluster */
;;;3076   #if !_FS_READONLY
;;;3077   				if (clst == 0) {						/* If no cluster chain, create a new chain */
;;;3078   					clst = create_chain(fp->fs, 0);
;;;3079   					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;3080   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3081   					fp->sclust = clst;
;;;3082   				}
;;;3083   #endif
;;;3084   				fp->clust = clst;
;;;3085   			}
;;;3086   			if (clst != 0) {
;;;3087   				while (ofs > bcs) {						/* Cluster following loop */
;;;3088   #if !_FS_READONLY
;;;3089   					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
;;;3090   						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
;;;3091   						if (clst == 0) {				/* When disk gets full, clip file size */
;;;3092   							ofs = bcs; break;
;;;3093   						}
;;;3094   					} else
;;;3095   #endif
;;;3096   						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
;;;3097   					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;3098   					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
;;;3099   					fp->clust = clst;
;;;3100   					fp->fptr += bcs;
;;;3101   					ofs -= bcs;
;;;3102   				}
;;;3103   				fp->fptr += ofs;
;;;3104   				if (ofs % SS(fp->fs)) {
;;;3105   					nsect = clust2sect(fp->fs, clst);	/* Current sector */
;;;3106   					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
;;;3107   					nsect += ofs / SS(fp->fs);
;;;3108   				}
;;;3109   			}
;;;3110   		}
;;;3111   		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
;;;3112   #if !_FS_TINY
;;;3113   #if !_FS_READONLY
;;;3114   			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
;;;3115   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;3116   					ABORT(fp->fs, FR_DISK_ERR);
;;;3117   				fp->flag &= ~FA__DIRTY;
;;;3118   			}
;;;3119   #endif
;;;3120   			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
;;;3121   				ABORT(fp->fs, FR_DISK_ERR);
;;;3122   #endif
;;;3123   			fp->dsect = nsect;
;;;3124   		}
;;;3125   #if !_FS_READONLY
;;;3126   		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
;;;3127   			fp->fsize = fp->fptr;
;;;3128   			fp->flag |= FA__WRITTEN;
;;;3129   		}
;;;3130   #endif
;;;3131   	}
;;;3132   
;;;3133   	LEAVE_FF(fp->fs, res);
;;;3134   }
000018  e8bd87f0          POP      {r4-r10,pc}
                  |L18.28|
00001c  79e0              LDRB     r0,[r4,#7]            ;2999
00001e  b108              CBZ      r0,|L18.36|
000020  79e0              LDRB     r0,[r4,#7]            ;3000
000022  e7f9              B        |L18.24|
                  |L18.36|
000024  68e0              LDR      r0,[r4,#0xc]          ;3059
000026  42b0              CMP      r0,r6                 ;3059
000028  d204              BCS      |L18.52|
00002a  79a0              LDRB     r0,[r4,#6]            ;3061
00002c  f0000002          AND      r0,r0,#2              ;3061
000030  b900              CBNZ     r0,|L18.52|
000032  68e6              LDR      r6,[r4,#0xc]          ;3063
                  |L18.52|
000034  f8d49008          LDR      r9,[r4,#8]            ;3065
000038  f04f0800          MOV      r8,#0                 ;3066
00003c  f8c48008          STR      r8,[r4,#8]            ;3066
000040  2e00              CMP      r6,#0                 ;3067
000042  d067              BEQ      |L18.276|
000044  6820              LDR      r0,[r4,#0]            ;3068
000046  7880              LDRB     r0,[r0,#2]            ;3068
000048  0247              LSLS     r7,r0,#9              ;3068
00004a  f1b90f00          CMP      r9,#0                 ;3069
00004e  d011              BEQ      |L18.116|
000050  1e70              SUBS     r0,r6,#1              ;3070
000052  fbb0f1f7          UDIV     r1,r0,r7              ;3070
000056  f1a90001          SUB      r0,r9,#1              ;3070
00005a  fbb0f0f7          UDIV     r0,r0,r7              ;3070
00005e  4281              CMP      r1,r0                 ;3070
000060  d308              BCC      |L18.116|
000062  f1a90001          SUB      r0,r9,#1              ;3071
000066  1e79              SUBS     r1,r7,#1              ;3071
000068  4388              BICS     r0,r0,r1              ;3071
00006a  60a0              STR      r0,[r4,#8]            ;3071
00006c  68a0              LDR      r0,[r4,#8]            ;3072
00006e  1a36              SUBS     r6,r6,r0              ;3072
000070  6965              LDR      r5,[r4,#0x14]         ;3073
000072  e012              B        |L18.154|
                  |L18.116|
000074  6925              LDR      r5,[r4,#0x10]         ;3075
000076  b97d              CBNZ     r5,|L18.152|
000078  2100              MOVS     r1,#0                 ;3078
00007a  6820              LDR      r0,[r4,#0]            ;3078
00007c  f7fffffe          BL       create_chain
000080  4605              MOV      r5,r0                 ;3078
000082  2d01              CMP      r5,#1                 ;3079
000084  d102              BNE      |L18.140|
000086  2002              MOVS     r0,#2                 ;3079
000088  71e0              STRB     r0,[r4,#7]            ;3079
00008a  e7c5              B        |L18.24|
                  |L18.140|
00008c  1c68              ADDS     r0,r5,#1              ;3080
00008e  b910              CBNZ     r0,|L18.150|
000090  2001              MOVS     r0,#1                 ;3080
000092  71e0              STRB     r0,[r4,#7]            ;3080
000094  e7c0              B        |L18.24|
                  |L18.150|
000096  6125              STR      r5,[r4,#0x10]         ;3081
                  |L18.152|
000098  6165              STR      r5,[r4,#0x14]         ;3084
                  |L18.154|
00009a  2d00              CMP      r5,#0                 ;3086
00009c  d03a              BEQ      |L18.276|
00009e  e023              B        |L18.232|
                  |L18.160|
0000a0  79a0              LDRB     r0,[r4,#6]            ;3089
0000a2  f0000002          AND      r0,r0,#2              ;3089
0000a6  b138              CBZ      r0,|L18.184|
0000a8  4629              MOV      r1,r5                 ;3090
0000aa  6820              LDR      r0,[r4,#0]            ;3090
0000ac  f7fffffe          BL       create_chain
0000b0  4605              MOV      r5,r0                 ;3090
0000b2  b935              CBNZ     r5,|L18.194|
0000b4  463e              MOV      r6,r7                 ;3092
0000b6  e019              B        |L18.236|
                  |L18.184|
0000b8  4629              MOV      r1,r5                 ;3096
0000ba  6820              LDR      r0,[r4,#0]            ;3096
0000bc  f7fffffe          BL       get_fat
0000c0  4605              MOV      r5,r0                 ;3096
                  |L18.194|
0000c2  1c68              ADDS     r0,r5,#1              ;3097
0000c4  b910              CBNZ     r0,|L18.204|
0000c6  2001              MOVS     r0,#1                 ;3097
0000c8  71e0              STRB     r0,[r4,#7]            ;3097
0000ca  e7a5              B        |L18.24|
                  |L18.204|
0000cc  2d01              CMP      r5,#1                 ;3098
0000ce  d903              BLS      |L18.216|
0000d0  6820              LDR      r0,[r4,#0]            ;3098
0000d2  6940              LDR      r0,[r0,#0x14]         ;3098
0000d4  42a8              CMP      r0,r5                 ;3098
0000d6  d802              BHI      |L18.222|
                  |L18.216|
0000d8  2002              MOVS     r0,#2                 ;3098
0000da  71e0              STRB     r0,[r4,#7]            ;3098
0000dc  e79c              B        |L18.24|
                  |L18.222|
0000de  6165              STR      r5,[r4,#0x14]         ;3099
0000e0  68a0              LDR      r0,[r4,#8]            ;3100
0000e2  4438              ADD      r0,r0,r7              ;3100
0000e4  60a0              STR      r0,[r4,#8]            ;3100
0000e6  1bf6              SUBS     r6,r6,r7              ;3101
                  |L18.232|
0000e8  42be              CMP      r6,r7                 ;3087
0000ea  d8d9              BHI      |L18.160|
                  |L18.236|
0000ec  bf00              NOP                            ;3092
0000ee  68a0              LDR      r0,[r4,#8]            ;3103
0000f0  4430              ADD      r0,r0,r6              ;3103
0000f2  60a0              STR      r0,[r4,#8]            ;3103
0000f4  f3c60008          UBFX     r0,r6,#0,#9           ;3104
0000f8  b160              CBZ      r0,|L18.276|
0000fa  4629              MOV      r1,r5                 ;3105
0000fc  6820              LDR      r0,[r4,#0]            ;3105
0000fe  f7fffffe          BL       clust2sect
000102  4680              MOV      r8,r0                 ;3105
000104  f1b80f00          CMP      r8,#0                 ;3106
000108  d102              BNE      |L18.272|
00010a  2002              MOVS     r0,#2                 ;3106
00010c  71e0              STRB     r0,[r4,#7]            ;3106
00010e  e783              B        |L18.24|
                  |L18.272|
000110  eb082856          ADD      r8,r8,r6,LSR #9       ;3107
                  |L18.276|
000114  8920              LDRH     r0,[r4,#8]            ;3111
000116  f3c00008          UBFX     r0,r0,#0,#9           ;3111
00011a  b320              CBZ      r0,|L18.358|
00011c  69a0              LDR      r0,[r4,#0x18]         ;3111
00011e  4540              CMP      r0,r8                 ;3111
000120  d021              BEQ      |L18.358|
000122  79a0              LDRB     r0,[r4,#6]            ;3114
000124  f0000040          AND      r0,r0,#0x40           ;3114
000128  b178              CBZ      r0,|L18.330|
00012a  6821              LDR      r1,[r4,#0]            ;3115
00012c  7848              LDRB     r0,[r1,#1]            ;3115
00012e  2301              MOVS     r3,#1                 ;3115
000130  f1040124          ADD      r1,r4,#0x24           ;3115
000134  69a2              LDR      r2,[r4,#0x18]         ;3115
000136  f7fffffe          BL       disk_write
00013a  b110              CBZ      r0,|L18.322|
00013c  2001              MOVS     r0,#1                 ;3116
00013e  71e0              STRB     r0,[r4,#7]            ;3116
000140  e76a              B        |L18.24|
                  |L18.322|
000142  79a0              LDRB     r0,[r4,#6]            ;3117
000144  f0200040          BIC      r0,r0,#0x40           ;3117
000148  71a0              STRB     r0,[r4,#6]            ;3117
                  |L18.330|
00014a  6821              LDR      r1,[r4,#0]            ;3120
00014c  7848              LDRB     r0,[r1,#1]            ;3120
00014e  2301              MOVS     r3,#1                 ;3120
000150  4642              MOV      r2,r8                 ;3120
000152  f1040124          ADD      r1,r4,#0x24           ;3120
000156  f7fffffe          BL       disk_read
00015a  b110              CBZ      r0,|L18.354|
00015c  2001              MOVS     r0,#1                 ;3121
00015e  71e0              STRB     r0,[r4,#7]            ;3121
000160  e75a              B        |L18.24|
                  |L18.354|
000162  f8c48018          STR      r8,[r4,#0x18]         ;3123
                  |L18.358|
000166  e9d40102          LDRD     r0,r1,[r4,#8]         ;3126
00016a  4288              CMP      r0,r1                 ;3126
00016c  d905              BLS      |L18.378|
00016e  68a0              LDR      r0,[r4,#8]            ;3127
000170  60e0              STR      r0,[r4,#0xc]          ;3127
000172  79a0              LDRB     r0,[r4,#6]            ;3128
000174  f0400020          ORR      r0,r0,#0x20           ;3128
000178  71a0              STRB     r0,[r4,#6]            ;3128
                  |L18.378|
00017a  4650              MOV      r0,r10                ;3133
00017c  e74c              B        |L18.24|
;;;3135   
                          ENDP


                          AREA ||i.f_mkdir||, CODE, READONLY, ALIGN=1

                  f_mkdir PROC
;;;3551   
;;;3552   FRESULT f_mkdir (
000000  e92d47f1          PUSH     {r0,r4-r10,lr}
;;;3553   	const TCHAR* path		/* Pointer to the directory path */
;;;3554   )
;;;3555   {
000004  b08b              SUB      sp,sp,#0x2c
;;;3556   	FRESULT res;
;;;3557   	DIR dj;
;;;3558   	BYTE *dir, n;
;;;3559   	DWORD dsc, dcl, pcl, tm = GET_FATTIME();
000006  f7fffffe          BL       get_fattime
00000a  4606              MOV      r6,r0
;;;3560   	DEFINE_NAMEBUF;
;;;3561   
;;;3562   
;;;3563   	/* Get logical drive number */
;;;3564   	res = find_volume(&dj.fs, &path, 1);
00000c  2201              MOVS     r2,#1
00000e  a90b              ADD      r1,sp,#0x2c
000010  a804              ADD      r0,sp,#0x10
000012  f7fffffe          BL       find_volume
000016  4605              MOV      r5,r0
;;;3565   	if (res == FR_OK) {
000018  2d00              CMP      r5,#0
                  |L19.26|
00001a  d17d              BNE      |L19.280|
;;;3566   		INIT_BUF(dj);
00001c  a801              ADD      r0,sp,#4
00001e  900a              STR      r0,[sp,#0x28]
;;;3567   		res = follow_path(&dj, path);			/* Follow the file path */
000020  a804              ADD      r0,sp,#0x10
000022  990b              LDR      r1,[sp,#0x2c]
000024  f7fffffe          BL       follow_path
000028  4605              MOV      r5,r0
;;;3568   		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
00002a  b905              CBNZ     r5,|L19.46|
00002c  2508              MOVS     r5,#8
                  |L19.46|
;;;3569   		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT))
00002e  bf00              NOP      
;;;3570   			res = FR_INVALID_NAME;
;;;3571   		if (res == FR_NO_FILE) {				/* Can create a new directory */
000030  2d04              CMP      r5,#4
000032  d1f2              BNE      |L19.26|
;;;3572   			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
000034  2100              MOVS     r1,#0
000036  9804              LDR      r0,[sp,#0x10]
000038  f7fffffe          BL       create_chain
00003c  4607              MOV      r7,r0
;;;3573   			res = FR_OK;
00003e  2500              MOVS     r5,#0
;;;3574   			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
000040  b907              CBNZ     r7,|L19.68|
000042  2507              MOVS     r5,#7
                  |L19.68|
;;;3575   			if (dcl == 1) res = FR_INT_ERR;
000044  2f01              CMP      r7,#1
000046  d100              BNE      |L19.74|
000048  2502              MOVS     r5,#2
                  |L19.74|
;;;3576   			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
00004a  1c78              ADDS     r0,r7,#1
00004c  b900              CBNZ     r0,|L19.80|
00004e  2501              MOVS     r5,#1
                  |L19.80|
;;;3577   			if (res == FR_OK)					/* Flush FAT */
000050  b91d              CBNZ     r5,|L19.90|
;;;3578   				res = sync_window(dj.fs);
000052  9804              LDR      r0,[sp,#0x10]
000054  f7fffffe          BL       sync_window
000058  4605              MOV      r5,r0
                  |L19.90|
;;;3579   			if (res == FR_OK) {					/* Initialize the new directory table */
00005a  2d00              CMP      r5,#0
00005c  d15a              BNE      |L19.276|
;;;3580   				dsc = clust2sect(dj.fs, dcl);
00005e  4639              MOV      r1,r7
000060  9804              LDR      r0,[sp,#0x10]
000062  f7fffffe          BL       clust2sect
000066  4681              MOV      r9,r0
;;;3581   				dir = dj.fs->win;
000068  9804              LDR      r0,[sp,#0x10]
00006a  f1000430          ADD      r4,r0,#0x30
;;;3582   				mem_set(dir, 0, SS(dj.fs));
00006e  f44f7200          MOV      r2,#0x200
000072  2100              MOVS     r1,#0
000074  4620              MOV      r0,r4
000076  f7fffffe          BL       mem_set
;;;3583   				mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
00007a  220b              MOVS     r2,#0xb
00007c  2120              MOVS     r1,#0x20
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       mem_set
;;;3584   				dir[DIR_Name] = '.';
000084  202e              MOVS     r0,#0x2e
000086  7020              STRB     r0,[r4,#0]
;;;3585   				dir[DIR_Attr] = AM_DIR;
000088  2010              MOVS     r0,#0x10
00008a  72e0              STRB     r0,[r4,#0xb]
;;;3586   				ST_DWORD(dir + DIR_WrtTime, tm);
00008c  75a6              STRB     r6,[r4,#0x16]
00008e  0a31              LSRS     r1,r6,#8
000090  75e1              STRB     r1,[r4,#0x17]
000092  0c31              LSRS     r1,r6,#16
000094  7621              STRB     r1,[r4,#0x18]
000096  0e31              LSRS     r1,r6,#24
000098  7661              STRB     r1,[r4,#0x19]
;;;3587   				st_clust(dir, dcl);
00009a  4639              MOV      r1,r7
00009c  4620              MOV      r0,r4
00009e  f7fffffe          BL       st_clust
;;;3588   				mem_cpy(dir + SZ_DIRE, dir, SZ_DIRE); 	/* Create ".." entry */
0000a2  2220              MOVS     r2,#0x20
0000a4  4621              MOV      r1,r4
0000a6  f1040020          ADD      r0,r4,#0x20
0000aa  f7fffffe          BL       mem_cpy
;;;3589   				dir[SZ_DIRE + 1] = '.'; pcl = dj.sclust;
0000ae  202e              MOVS     r0,#0x2e
0000b0  f8840021          STRB     r0,[r4,#0x21]
0000b4  f8dda018          LDR      r10,[sp,#0x18]
;;;3590   				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
0000b8  9804              LDR      r0,[sp,#0x10]
0000ba  7800              LDRB     r0,[r0,#0]
0000bc  2803              CMP      r0,#3
0000be  d104              BNE      |L19.202|
0000c0  9804              LDR      r0,[sp,#0x10]
0000c2  6a40              LDR      r0,[r0,#0x24]
0000c4  4550              CMP      r0,r10
0000c6  d100              BNE      |L19.202|
;;;3591   					pcl = 0;
0000c8  46aa              MOV      r10,r5
                  |L19.202|
;;;3592   				st_clust(dir + SZ_DIRE, pcl);
0000ca  4651              MOV      r1,r10
0000cc  f1040020          ADD      r0,r4,#0x20
0000d0  f7fffffe          BL       st_clust
;;;3593   				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
0000d4  9804              LDR      r0,[sp,#0x10]
0000d6  f8908002          LDRB     r8,[r0,#2]
0000da  e017              B        |L19.268|
                  |L19.220|
;;;3594   					dj.fs->winsect = dsc++;
0000dc  9804              LDR      r0,[sp,#0x10]
0000de  f8c0902c          STR      r9,[r0,#0x2c]
0000e2  f1090901          ADD      r9,r9,#1
;;;3595   					dj.fs->wflag = 1;
0000e6  2001              MOVS     r0,#1
0000e8  9904              LDR      r1,[sp,#0x10]
0000ea  7108              STRB     r0,[r1,#4]
;;;3596   					res = sync_window(dj.fs);
0000ec  9804              LDR      r0,[sp,#0x10]
0000ee  f7fffffe          BL       sync_window
0000f2  4605              MOV      r5,r0
;;;3597   					if (res != FR_OK) break;
0000f4  b105              CBZ      r5,|L19.248|
0000f6  e00c              B        |L19.274|
                  |L19.248|
;;;3598   					mem_set(dir, 0, SS(dj.fs));
0000f8  f44f7200          MOV      r2,#0x200
0000fc  2100              MOVS     r1,#0
0000fe  4620              MOV      r0,r4
000100  f7fffffe          BL       mem_set
000104  f1a80001          SUB      r0,r8,#1              ;3593
000108  f00008ff          AND      r8,r0,#0xff           ;3593
                  |L19.268|
00010c  f1b80f00          CMP      r8,#0                 ;3593
000110  d1e4              BNE      |L19.220|
                  |L19.274|
000112  bf00              NOP                            ;3597
                  |L19.276|
;;;3599   				}
;;;3600   			}
;;;3601   			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
000114  b92d              CBNZ     r5,|L19.290|
000116  e000              B        |L19.282|
                  |L19.280|
000118  e01e              B        |L19.344|
                  |L19.282|
00011a  a804              ADD      r0,sp,#0x10
00011c  f7fffffe          BL       dir_register
000120  4605              MOV      r5,r0
                  |L19.290|
;;;3602   			if (res != FR_OK) {
000122  b125              CBZ      r5,|L19.302|
;;;3603   				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
000124  4639              MOV      r1,r7
000126  9804              LDR      r0,[sp,#0x10]
000128  f7fffffe          BL       remove_chain
00012c  e014              B        |L19.344|
                  |L19.302|
;;;3604   			} else {
;;;3605   				dir = dj.dir;
00012e  9c09              LDR      r4,[sp,#0x24]
;;;3606   				dir[DIR_Attr] = AM_DIR;				/* Attribute */
000130  2010              MOVS     r0,#0x10
000132  72e0              STRB     r0,[r4,#0xb]
;;;3607   				ST_DWORD(dir + DIR_WrtTime, tm);	/* Created time */
000134  75a6              STRB     r6,[r4,#0x16]
000136  0a31              LSRS     r1,r6,#8
000138  75e1              STRB     r1,[r4,#0x17]
00013a  0c31              LSRS     r1,r6,#16
00013c  7621              STRB     r1,[r4,#0x18]
00013e  0e31              LSRS     r1,r6,#24
000140  7661              STRB     r1,[r4,#0x19]
;;;3608   				st_clust(dir, dcl);					/* Table start cluster */
000142  4639              MOV      r1,r7
000144  4620              MOV      r0,r4
000146  f7fffffe          BL       st_clust
;;;3609   				dj.fs->wflag = 1;
00014a  2001              MOVS     r0,#1
00014c  9904              LDR      r1,[sp,#0x10]
00014e  7108              STRB     r0,[r1,#4]
;;;3610   				res = sync_fs(dj.fs);
000150  9804              LDR      r0,[sp,#0x10]
000152  f7fffffe          BL       sync_fs
000156  4605              MOV      r5,r0
                  |L19.344|
;;;3611   			}
;;;3612   		}
;;;3613   		FREE_BUF();
;;;3614   	}
;;;3615   
;;;3616   	LEAVE_FF(dj.fs, res);
000158  4628              MOV      r0,r5
;;;3617   }
00015a  b00c              ADD      sp,sp,#0x30
00015c  e8bd87f0          POP      {r4-r10,pc}
;;;3618   
                          ENDP


                          AREA ||i.f_mkfs||, CODE, READONLY, ALIGN=2

                  f_mkfs PROC
;;;4020   
;;;4021   FRESULT f_mkfs (
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;4022   	const TCHAR* path,	/* Logical drive number */
;;;4023   	BYTE sfd,			/* Partitioning rule 0:FDISK, 1:SFD */
;;;4024   	UINT au				/* Size of allocation unit in unit of byte or sector */
;;;4025   )
;;;4026   {
000004  b090              SUB      sp,sp,#0x40
000006  4690              MOV      r8,r2
;;;4027   	static const WORD vst[] = { 1024,   512,  256,  128,   64,    32,   16,    8,    4,    2,   0};
;;;4028   	static const WORD cst[] = {32768, 16384, 8192, 4096, 2048, 16384, 8192, 4096, 2048, 1024, 512};
;;;4029   	int vol;
;;;4030   	BYTE fmt, md, sys, *tbl, pdrv, part;
;;;4031   	DWORD n_clst, vs, n, wsect;
;;;4032   	UINT i;
;;;4033   	DWORD b_vol, b_fat, b_dir, b_data;	/* LBA */
;;;4034   	DWORD n_vol, n_rsv, n_fat, n_dir;	/* Size */
;;;4035   	FATFS *fs;
;;;4036   	DSTATUS stat;
;;;4037   #if _USE_TRIM
;;;4038   	DWORD eb[2];
;;;4039   #endif
;;;4040   
;;;4041   
;;;4042   	/* Check mounted drive and clear work area */
;;;4043   	if (sfd > 1) return FR_INVALID_PARAMETER;
000008  9811              LDR      r0,[sp,#0x44]
00000a  2801              CMP      r0,#1
00000c  dd03              BLE      |L20.22|
00000e  2013              MOVS     r0,#0x13
                  |L20.16|
;;;4044   	vol = get_ldnumber(&path);
;;;4045   	if (vol < 0) return FR_INVALID_DRIVE;
;;;4046   	fs = FatFs[vol];
;;;4047   	if (!fs) return FR_NOT_ENABLED;
;;;4048   	fs->fs_type = 0;
;;;4049   	pdrv = LD2PD(vol);	/* Physical drive */
;;;4050   	part = LD2PT(vol);	/* Partition (0:auto detect, 1-4:get from partition table)*/
;;;4051   
;;;4052   	/* Get disk statics */
;;;4053   	stat = disk_initialize(pdrv);
;;;4054   	if (stat & STA_NOINIT) return FR_NOT_READY;
;;;4055   	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
;;;4056   #if _MAX_SS != _MIN_SS		/* Get disk sector size */
;;;4057   	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK || SS(fs) > _MAX_SS || SS(fs) < _MIN_SS)
;;;4058   		return FR_DISK_ERR;
;;;4059   #endif
;;;4060   	if (_MULTI_PARTITION && part) {
;;;4061   		/* Get partition information from partition table in the MBR */
;;;4062   		if (disk_read(pdrv, fs->win, 0, 1) != RES_OK) return FR_DISK_ERR;
;;;4063   		if (LD_WORD(fs->win + BS_55AA) != 0xAA55) return FR_MKFS_ABORTED;
;;;4064   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4065   		if (!tbl[4]) return FR_MKFS_ABORTED;	/* No partition? */
;;;4066   		b_vol = LD_DWORD(tbl + 8);	/* Volume start sector */
;;;4067   		n_vol = LD_DWORD(tbl + 12);	/* Volume size */
;;;4068   	} else {
;;;4069   		/* Create a partition in this function */
;;;4070   		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &n_vol) != RES_OK || n_vol < 128)
;;;4071   			return FR_DISK_ERR;
;;;4072   		b_vol = (sfd) ? 0 : 63;		/* Volume start sector */
;;;4073   		n_vol -= b_vol;				/* Volume size */
;;;4074   	}
;;;4075   
;;;4076   	if (au & (au - 1)) au = 0;
;;;4077   	if (!au) {						/* AU auto selection */
;;;4078   		vs = n_vol / (2000 / (SS(fs) / 512));
;;;4079   		for (i = 0; vs < vst[i]; i++) ;
;;;4080   		au = cst[i];
;;;4081   	}
;;;4082   	if (au >= _MIN_SS) au /= SS(fs);	/* Number of sectors per cluster */
;;;4083   	if (!au) au = 1;
;;;4084   	if (au > 128) au = 128;
;;;4085   
;;;4086   	/* Pre-compute number of clusters and FAT sub-type */
;;;4087   	n_clst = n_vol / au;
;;;4088   	fmt = FS_FAT12;
;;;4089   	if (n_clst >= MIN_FAT16) fmt = FS_FAT16;
;;;4090   	if (n_clst >= MIN_FAT32) fmt = FS_FAT32;
;;;4091   
;;;4092   	/* Determine offset and size of FAT structure */
;;;4093   	if (fmt == FS_FAT32) {
;;;4094   		n_fat = ((n_clst * 4) + 8 + SS(fs) - 1) / SS(fs);
;;;4095   		n_rsv = 32;
;;;4096   		n_dir = 0;
;;;4097   	} else {
;;;4098   		n_fat = (fmt == FS_FAT12) ? (n_clst * 3 + 1) / 2 + 3 : (n_clst * 2) + 4;
;;;4099   		n_fat = (n_fat + SS(fs) - 1) / SS(fs);
;;;4100   		n_rsv = 1;
;;;4101   		n_dir = (DWORD)N_ROOTDIR * SZ_DIRE / SS(fs);
;;;4102   	}
;;;4103   	b_fat = b_vol + n_rsv;				/* FAT area start sector */
;;;4104   	b_dir = b_fat + n_fat * N_FATS;		/* Directory area start sector */
;;;4105   	b_data = b_dir + n_dir;				/* Data area start sector */
;;;4106   	if (n_vol < b_data + au - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
;;;4107   
;;;4108   	/* Align data start sector to erase block boundary (for flash memory media) */
;;;4109   	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &n) != RES_OK || !n || n > 32768) n = 1;
;;;4110   	n = (b_data + n - 1) & ~(n - 1);	/* Next nearest erase block from current data start */
;;;4111   	n = (n - b_data) / N_FATS;
;;;4112   	if (fmt == FS_FAT32) {		/* FAT32: Move FAT offset */
;;;4113   		n_rsv += n;
;;;4114   		b_fat += n;
;;;4115   	} else {					/* FAT12/16: Expand FAT size */
;;;4116   		n_fat += n;
;;;4117   	}
;;;4118   
;;;4119   	/* Determine number of clusters and final check of validity of the FAT sub-type */
;;;4120   	n_clst = (n_vol - n_rsv - n_fat * N_FATS - n_dir) / au;
;;;4121   	if (   (fmt == FS_FAT16 && n_clst < MIN_FAT16)
;;;4122   		|| (fmt == FS_FAT32 && n_clst < MIN_FAT32))
;;;4123   		return FR_MKFS_ABORTED;
;;;4124   
;;;4125   	/* Determine system ID in the partition table */
;;;4126   	if (fmt == FS_FAT32) {
;;;4127   		sys = 0x0C;		/* FAT32X */
;;;4128   	} else {
;;;4129   		if (fmt == FS_FAT12 && n_vol < 0x10000) {
;;;4130   			sys = 0x01;	/* FAT12(<65536) */
;;;4131   		} else {
;;;4132   			sys = (n_vol < 0x10000) ? 0x04 : 0x06;	/* FAT16(<65536) : FAT12/16(>=65536) */
;;;4133   		}
;;;4134   	}
;;;4135   
;;;4136   	if (_MULTI_PARTITION && part) {
;;;4137   		/* Update system ID in the partition table */
;;;4138   		tbl = &fs->win[MBR_Table + (part - 1) * SZ_PTE];
;;;4139   		tbl[4] = sys;
;;;4140   		if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to teh MBR */
;;;4141   			return FR_DISK_ERR;
;;;4142   		md = 0xF8;
;;;4143   	} else {
;;;4144   		if (sfd) {	/* No partition table (SFD) */
;;;4145   			md = 0xF0;
;;;4146   		} else {	/* Create partition table (FDISK) */
;;;4147   			mem_set(fs->win, 0, SS(fs));
;;;4148   			tbl = fs->win + MBR_Table;	/* Create partition table for single partition in the drive */
;;;4149   			tbl[1] = 1;						/* Partition start head */
;;;4150   			tbl[2] = 1;						/* Partition start sector */
;;;4151   			tbl[3] = 0;						/* Partition start cylinder */
;;;4152   			tbl[4] = sys;					/* System type */
;;;4153   			tbl[5] = 254;					/* Partition end head */
;;;4154   			n = (b_vol + n_vol) / 63 / 255;
;;;4155   			tbl[6] = (BYTE)(n >> 2 | 63);	/* Partition end sector */
;;;4156   			tbl[7] = (BYTE)n;				/* End cylinder */
;;;4157   			ST_DWORD(tbl + 8, 63);			/* Partition start in LBA */
;;;4158   			ST_DWORD(tbl + 12, n_vol);		/* Partition size in LBA */
;;;4159   			ST_WORD(fs->win + BS_55AA, 0xAA55);	/* MBR signature */
;;;4160   			if (disk_write(pdrv, fs->win, 0, 1) != RES_OK)	/* Write it to the MBR */
;;;4161   				return FR_DISK_ERR;
;;;4162   			md = 0xF8;
;;;4163   		}
;;;4164   	}
;;;4165   
;;;4166   	/* Create BPB in the VBR */
;;;4167   	tbl = fs->win;							/* Clear sector */
;;;4168   	mem_set(tbl, 0, SS(fs));
;;;4169   	mem_cpy(tbl, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code, OEM name */
;;;4170   	i = SS(fs);								/* Sector size */
;;;4171   	ST_WORD(tbl + BPB_BytsPerSec, i);
;;;4172   	tbl[BPB_SecPerClus] = (BYTE)au;			/* Sectors per cluster */
;;;4173   	ST_WORD(tbl + BPB_RsvdSecCnt, n_rsv);	/* Reserved sectors */
;;;4174   	tbl[BPB_NumFATs] = N_FATS;				/* Number of FATs */
;;;4175   	i = (fmt == FS_FAT32) ? 0 : N_ROOTDIR;	/* Number of root directory entries */
;;;4176   	ST_WORD(tbl + BPB_RootEntCnt, i);
;;;4177   	if (n_vol < 0x10000) {					/* Number of total sectors */
;;;4178   		ST_WORD(tbl + BPB_TotSec16, n_vol);
;;;4179   	} else {
;;;4180   		ST_DWORD(tbl + BPB_TotSec32, n_vol);
;;;4181   	}
;;;4182   	tbl[BPB_Media] = md;					/* Media descriptor */
;;;4183   	ST_WORD(tbl + BPB_SecPerTrk, 63);		/* Number of sectors per track */
;;;4184   	ST_WORD(tbl + BPB_NumHeads, 255);		/* Number of heads */
;;;4185   	ST_DWORD(tbl + BPB_HiddSec, b_vol);		/* Hidden sectors */
;;;4186   	n = GET_FATTIME();						/* Use current time as VSN */
;;;4187   	if (fmt == FS_FAT32) {
;;;4188   		ST_DWORD(tbl + BS_VolID32, n);		/* VSN */
;;;4189   		ST_DWORD(tbl + BPB_FATSz32, n_fat);	/* Number of sectors per FAT */
;;;4190   		ST_DWORD(tbl + BPB_RootClus, 2);	/* Root directory start cluster (2) */
;;;4191   		ST_WORD(tbl + BPB_FSInfo, 1);		/* FSINFO record offset (VBR + 1) */
;;;4192   		ST_WORD(tbl + BPB_BkBootSec, 6);	/* Backup boot record offset (VBR + 6) */
;;;4193   		tbl[BS_DrvNum32] = 0x80;			/* Drive number */
;;;4194   		tbl[BS_BootSig32] = 0x29;			/* Extended boot signature */
;;;4195   		mem_cpy(tbl + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
;;;4196   	} else {
;;;4197   		ST_DWORD(tbl + BS_VolID, n);		/* VSN */
;;;4198   		ST_WORD(tbl + BPB_FATSz16, n_fat);	/* Number of sectors per FAT */
;;;4199   		tbl[BS_DrvNum] = 0x80;				/* Drive number */
;;;4200   		tbl[BS_BootSig] = 0x29;				/* Extended boot signature */
;;;4201   		mem_cpy(tbl + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
;;;4202   	}
;;;4203   	ST_WORD(tbl + BS_55AA, 0xAA55);			/* Signature (Offset is fixed here regardless of sector size) */
;;;4204   	if (disk_write(pdrv, tbl, b_vol, 1) != RES_OK)	/* Write it to the VBR sector */
;;;4205   		return FR_DISK_ERR;
;;;4206   	if (fmt == FS_FAT32)					/* Write backup VBR if needed (VBR + 6) */
;;;4207   		disk_write(pdrv, tbl, b_vol + 6, 1);
;;;4208   
;;;4209   	/* Initialize FAT area */
;;;4210   	wsect = b_fat;
;;;4211   	for (i = 0; i < N_FATS; i++) {		/* Initialize each FAT copy */
;;;4212   		mem_set(tbl, 0, SS(fs));			/* 1st sector of the FAT  */
;;;4213   		n = md;								/* Media descriptor byte */
;;;4214   		if (fmt != FS_FAT32) {
;;;4215   			n |= (fmt == FS_FAT12) ? 0x00FFFF00 : 0xFFFFFF00;
;;;4216   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT12/16) */
;;;4217   		} else {
;;;4218   			n |= 0xFFFFFF00;
;;;4219   			ST_DWORD(tbl + 0, n);			/* Reserve cluster #0-1 (FAT32) */
;;;4220   			ST_DWORD(tbl + 4, 0xFFFFFFFF);
;;;4221   			ST_DWORD(tbl + 8, 0x0FFFFFFF);	/* Reserve cluster #2 for root directory */
;;;4222   		}
;;;4223   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4224   			return FR_DISK_ERR;
;;;4225   		mem_set(tbl, 0, SS(fs));			/* Fill following FAT entries with zero */
;;;4226   		for (n = 1; n < n_fat; n++) {		/* This loop may take a time on FAT32 volume due to many single sector writes */
;;;4227   			if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4228   				return FR_DISK_ERR;
;;;4229   		}
;;;4230   	}
;;;4231   
;;;4232   	/* Initialize root directory */
;;;4233   	i = (fmt == FS_FAT32) ? au : (UINT)n_dir;
;;;4234   	do {
;;;4235   		if (disk_write(pdrv, tbl, wsect++, 1) != RES_OK)
;;;4236   			return FR_DISK_ERR;
;;;4237   	} while (--i);
;;;4238   
;;;4239   #if _USE_TRIM	/* Erase data area if needed */
;;;4240   	{
;;;4241   		eb[0] = wsect; eb[1] = wsect + (n_clst - ((fmt == FS_FAT32) ? 1 : 0)) * au - 1;
;;;4242   		disk_ioctl(pdrv, CTRL_TRIM, eb);
;;;4243   	}
;;;4244   #endif
;;;4245   
;;;4246   	/* Create FSINFO if needed */
;;;4247   	if (fmt == FS_FAT32) {
;;;4248   		ST_DWORD(tbl + FSI_LeadSig, 0x41615252);
;;;4249   		ST_DWORD(tbl + FSI_StrucSig, 0x61417272);
;;;4250   		ST_DWORD(tbl + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
;;;4251   		ST_DWORD(tbl + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
;;;4252   		ST_WORD(tbl + BS_55AA, 0xAA55);
;;;4253   		disk_write(pdrv, tbl, b_vol + 1, 1);	/* Write original (VBR + 1) */
;;;4254   		disk_write(pdrv, tbl, b_vol + 7, 1);	/* Write backup (VBR + 7) */
;;;4255   	}
;;;4256   
;;;4257   	return (disk_ioctl(pdrv, CTRL_SYNC, 0) == RES_OK) ? FR_OK : FR_DISK_ERR;
;;;4258   }
000010  b013              ADD      sp,sp,#0x4c
000012  e8bd8ff0          POP      {r4-r11,pc}
                  |L20.22|
000016  a810              ADD      r0,sp,#0x40           ;4044
000018  f7fffffe          BL       get_ldnumber
00001c  900f              STR      r0,[sp,#0x3c]         ;4044
00001e  980f              LDR      r0,[sp,#0x3c]         ;4045
000020  2800              CMP      r0,#0                 ;4045
000022  da01              BGE      |L20.40|
000024  200b              MOVS     r0,#0xb               ;4045
000026  e7f3              B        |L20.16|
                  |L20.40|
000028  49fc              LDR      r1,|L20.1052|
00002a  980f              LDR      r0,[sp,#0x3c]         ;4046
00002c  f851b020          LDR      r11,[r1,r0,LSL #2]    ;4046
000030  f1bb0f00          CMP      r11,#0                ;4047
000034  d101              BNE      |L20.58|
000036  200c              MOVS     r0,#0xc               ;4047
000038  e7ea              B        |L20.16|
                  |L20.58|
00003a  2000              MOVS     r0,#0                 ;4048
00003c  f88b0000          STRB     r0,[r11,#0]           ;4048
000040  980f              LDR      r0,[sp,#0x3c]         ;4049
000042  b2c0              UXTB     r0,r0                 ;4049
000044  900c              STR      r0,[sp,#0x30]         ;4049
000046  2000              MOVS     r0,#0                 ;4050
000048  900b              STR      r0,[sp,#0x2c]         ;4050
00004a  980c              LDR      r0,[sp,#0x30]         ;4053
00004c  f7fffffe          BL       disk_initialize
000050  9001              STR      r0,[sp,#4]            ;4053
000052  9801              LDR      r0,[sp,#4]            ;4054
000054  f0000001          AND      r0,r0,#1              ;4054
000058  b108              CBZ      r0,|L20.94|
00005a  2003              MOVS     r0,#3                 ;4054
00005c  e7d8              B        |L20.16|
                  |L20.94|
00005e  9801              LDR      r0,[sp,#4]            ;4055
000060  f0000004          AND      r0,r0,#4              ;4055
000064  b108              CBZ      r0,|L20.106|
000066  200a              MOVS     r0,#0xa               ;4055
000068  e7d2              B        |L20.16|
                  |L20.106|
00006a  bf00              NOP                            ;4060
00006c  aa04              ADD      r2,sp,#0x10           ;4070
00006e  2101              MOVS     r1,#1                 ;4070
000070  980c              LDR      r0,[sp,#0x30]         ;4070
000072  f7fffffe          BL       disk_ioctl
000076  b910              CBNZ     r0,|L20.126|
000078  9804              LDR      r0,[sp,#0x10]         ;4070
00007a  2880              CMP      r0,#0x80              ;4070
00007c  d201              BCS      |L20.130|
                  |L20.126|
00007e  2001              MOVS     r0,#1                 ;4071
000080  e7c6              B        |L20.16|
                  |L20.130|
000082  9811              LDR      r0,[sp,#0x44]         ;4072
000084  b108              CBZ      r0,|L20.138|
000086  2000              MOVS     r0,#0                 ;4072
000088  e000              B        |L20.140|
                  |L20.138|
00008a  203f              MOVS     r0,#0x3f              ;4072
                  |L20.140|
00008c  4681              MOV      r9,r0                 ;4072
00008e  9804              LDR      r0,[sp,#0x10]         ;4073
000090  eba00009          SUB      r0,r0,r9              ;4073
000094  9004              STR      r0,[sp,#0x10]         ;4073
000096  f1a80001          SUB      r0,r8,#1              ;4076
00009a  ea000008          AND      r0,r0,r8              ;4076
00009e  b108              CBZ      r0,|L20.164|
0000a0  f04f0800          MOV      r8,#0                 ;4076
                  |L20.164|
0000a4  f1b80f00          CMP      r8,#0                 ;4077
0000a8  d113              BNE      |L20.210|
0000aa  f44f61fa          MOV      r1,#0x7d0             ;4078
0000ae  9804              LDR      r0,[sp,#0x10]         ;4078
0000b0  fbb0f0f1          UDIV     r0,r0,r1              ;4078
0000b4  900a              STR      r0,[sp,#0x28]         ;4078
0000b6  f04f0a00          MOV      r10,#0                ;4079
0000ba  e001              B        |L20.192|
                  |L20.188|
0000bc  f10a0a01          ADD      r10,r10,#1            ;4079
                  |L20.192|
0000c0  48d7              LDR      r0,|L20.1056|
0000c2  f830101a          LDRH     r1,[r0,r10,LSL #1]    ;4079
0000c6  980a              LDR      r0,[sp,#0x28]         ;4079
0000c8  4281              CMP      r1,r0                 ;4079
0000ca  d8f7              BHI      |L20.188|
0000cc  48d5              LDR      r0,|L20.1060|
0000ce  f830801a          LDRH     r8,[r0,r10,LSL #1]    ;4080
                  |L20.210|
0000d2  f5b87f00          CMP      r8,#0x200             ;4082
0000d6  d301              BCC      |L20.220|
0000d8  ea4f2858          LSR      r8,r8,#9              ;4082
                  |L20.220|
0000dc  f1b80f00          CMP      r8,#0                 ;4083
0000e0  d101              BNE      |L20.230|
0000e2  f04f0801          MOV      r8,#1                 ;4083
                  |L20.230|
0000e6  f1b80f80          CMP      r8,#0x80              ;4084
0000ea  d901              BLS      |L20.240|
0000ec  f04f0880          MOV      r8,#0x80              ;4084
                  |L20.240|
0000f0  9804              LDR      r0,[sp,#0x10]         ;4087
0000f2  fbb0f7f8          UDIV     r7,r0,r8              ;4087
0000f6  2501              MOVS     r5,#1                 ;4088
0000f8  f64070f6          MOV      r0,#0xff6             ;4089
0000fc  4287              CMP      r7,r0                 ;4089
0000fe  d300              BCC      |L20.258|
000100  2502              MOVS     r5,#2                 ;4089
                  |L20.258|
000102  f64f70f6          MOV      r0,#0xfff6            ;4090
000106  4287              CMP      r7,r0                 ;4090
000108  d300              BCC      |L20.268|
00010a  2503              MOVS     r5,#3                 ;4090
                  |L20.268|
00010c  2d03              CMP      r5,#3                 ;4093
00010e  d10a              BNE      |L20.294|
000110  2008              MOVS     r0,#8                 ;4094
000112  eb000087          ADD      r0,r0,r7,LSL #2       ;4094
000116  f20010ff          ADD      r0,r0,#0x1ff          ;4094
00011a  0a46              LSRS     r6,r0,#9              ;4094
00011c  2020              MOVS     r0,#0x20              ;4095
00011e  9003              STR      r0,[sp,#0xc]          ;4095
000120  2000              MOVS     r0,#0                 ;4096
000122  9002              STR      r0,[sp,#8]            ;4096
000124  e011              B        |L20.330|
                  |L20.294|
000126  2d01              CMP      r5,#1                 ;4098
000128  d105              BNE      |L20.310|
00012a  eb070047          ADD      r0,r7,r7,LSL #1       ;4098
00012e  1c40              ADDS     r0,r0,#1              ;4098
000130  0840              LSRS     r0,r0,#1              ;4098
000132  1cc0              ADDS     r0,r0,#3              ;4098
000134  e001              B        |L20.314|
                  |L20.310|
000136  0078              LSLS     r0,r7,#1              ;4098
000138  1d00              ADDS     r0,r0,#4              ;4098
                  |L20.314|
00013a  4606              MOV      r6,r0                 ;4098
00013c  f20610ff          ADD      r0,r6,#0x1ff          ;4099
000140  0a46              LSRS     r6,r0,#9              ;4099
000142  2001              MOVS     r0,#1                 ;4100
000144  9003              STR      r0,[sp,#0xc]          ;4100
000146  2020              MOVS     r0,#0x20              ;4101
000148  9002              STR      r0,[sp,#8]            ;4101
                  |L20.330|
00014a  9803              LDR      r0,[sp,#0xc]          ;4103
00014c  4448              ADD      r0,r0,r9              ;4103
00014e  9007              STR      r0,[sp,#0x1c]         ;4103
000150  9807              LDR      r0,[sp,#0x1c]         ;4104
000152  4430              ADD      r0,r0,r6              ;4104
000154  9006              STR      r0,[sp,#0x18]         ;4104
000156  9902              LDR      r1,[sp,#8]            ;4105
000158  9806              LDR      r0,[sp,#0x18]         ;4105
00015a  4408              ADD      r0,r0,r1              ;4105
00015c  9005              STR      r0,[sp,#0x14]         ;4105
00015e  9805              LDR      r0,[sp,#0x14]         ;4106
000160  4440              ADD      r0,r0,r8              ;4106
000162  eba00009          SUB      r0,r0,r9              ;4106
000166  9904              LDR      r1,[sp,#0x10]         ;4106
000168  4288              CMP      r0,r1                 ;4106
00016a  d901              BLS      |L20.368|
00016c  200e              MOVS     r0,#0xe               ;4106
00016e  e74f              B        |L20.16|
                  |L20.368|
000170  aa09              ADD      r2,sp,#0x24           ;4109
000172  2103              MOVS     r1,#3                 ;4109
000174  980c              LDR      r0,[sp,#0x30]         ;4109
000176  f7fffffe          BL       disk_ioctl
00017a  b928              CBNZ     r0,|L20.392|
00017c  9809              LDR      r0,[sp,#0x24]         ;4109
00017e  b118              CBZ      r0,|L20.392|
000180  9809              LDR      r0,[sp,#0x24]         ;4109
000182  f5b04f00          CMP      r0,#0x8000            ;4109
000186  d901              BLS      |L20.396|
                  |L20.392|
000188  2001              MOVS     r0,#1                 ;4109
00018a  9009              STR      r0,[sp,#0x24]         ;4109
                  |L20.396|
00018c  9909              LDR      r1,[sp,#0x24]         ;4110
00018e  9805              LDR      r0,[sp,#0x14]         ;4110
000190  4408              ADD      r0,r0,r1              ;4110
000192  1e40              SUBS     r0,r0,#1              ;4110
000194  1e49              SUBS     r1,r1,#1              ;4110
000196  4388              BICS     r0,r0,r1              ;4110
000198  9009              STR      r0,[sp,#0x24]         ;4110
00019a  9909              LDR      r1,[sp,#0x24]         ;4111
00019c  9805              LDR      r0,[sp,#0x14]         ;4111
00019e  1a08              SUBS     r0,r1,r0              ;4111
0001a0  9009              STR      r0,[sp,#0x24]         ;4111
0001a2  2d03              CMP      r5,#3                 ;4112
0001a4  d108              BNE      |L20.440|
0001a6  9909              LDR      r1,[sp,#0x24]         ;4113
0001a8  9803              LDR      r0,[sp,#0xc]          ;4113
0001aa  4408              ADD      r0,r0,r1              ;4113
0001ac  9003              STR      r0,[sp,#0xc]          ;4113
0001ae  9909              LDR      r1,[sp,#0x24]         ;4114
0001b0  9807              LDR      r0,[sp,#0x1c]         ;4114
0001b2  4408              ADD      r0,r0,r1              ;4114
0001b4  9007              STR      r0,[sp,#0x1c]         ;4114
0001b6  e001              B        |L20.444|
                  |L20.440|
0001b8  9809              LDR      r0,[sp,#0x24]         ;4116
0001ba  4406              ADD      r6,r6,r0              ;4116
                  |L20.444|
0001bc  e9dd0103          LDRD     r0,r1,[sp,#0xc]       ;4120
0001c0  1a08              SUBS     r0,r1,r0              ;4120
0001c2  1b81              SUBS     r1,r0,r6              ;4120
0001c4  9802              LDR      r0,[sp,#8]            ;4120
0001c6  1a08              SUBS     r0,r1,r0              ;4120
0001c8  fbb0f7f8          UDIV     r7,r0,r8              ;4120
0001cc  2d02              CMP      r5,#2                 ;4121
0001ce  d103              BNE      |L20.472|
0001d0  f64070f6          MOV      r0,#0xff6             ;4121
0001d4  4287              CMP      r7,r0                 ;4121
0001d6  d305              BCC      |L20.484|
                  |L20.472|
0001d8  2d03              CMP      r5,#3                 ;4122
0001da  d105              BNE      |L20.488|
0001dc  f64f70f6          MOV      r0,#0xfff6            ;4122
0001e0  4287              CMP      r7,r0                 ;4122
0001e2  d201              BCS      |L20.488|
                  |L20.484|
0001e4  200e              MOVS     r0,#0xe               ;4123
0001e6  e713              B        |L20.16|
                  |L20.488|
0001e8  2d03              CMP      r5,#3                 ;4126
0001ea  d102              BNE      |L20.498|
0001ec  200c              MOVS     r0,#0xc               ;4127
0001ee  900d              STR      r0,[sp,#0x34]         ;4127
0001f0  e010              B        |L20.532|
                  |L20.498|
0001f2  2d01              CMP      r5,#1                 ;4129
0001f4  d106              BNE      |L20.516|
0001f6  9804              LDR      r0,[sp,#0x10]         ;4129
0001f8  f5b03f80          CMP      r0,#0x10000           ;4129
0001fc  d202              BCS      |L20.516|
0001fe  2001              MOVS     r0,#1                 ;4130
000200  900d              STR      r0,[sp,#0x34]         ;4130
000202  e007              B        |L20.532|
                  |L20.516|
000204  9804              LDR      r0,[sp,#0x10]         ;4132
000206  f5b03f80          CMP      r0,#0x10000           ;4132
00020a  d201              BCS      |L20.528|
00020c  2004              MOVS     r0,#4                 ;4132
00020e  e000              B        |L20.530|
                  |L20.528|
000210  2006              MOVS     r0,#6                 ;4132
                  |L20.530|
000212  900d              STR      r0,[sp,#0x34]         ;4132
                  |L20.532|
000214  bf00              NOP                            ;4136
000216  9811              LDR      r0,[sp,#0x44]         ;4144
000218  b110              CBZ      r0,|L20.544|
00021a  20f0              MOVS     r0,#0xf0              ;4145
00021c  900e              STR      r0,[sp,#0x38]         ;4145
00021e  e044              B        |L20.682|
                  |L20.544|
000220  f44f7200          MOV      r2,#0x200             ;4147
000224  2100              MOVS     r1,#0                 ;4147
000226  f10b0030          ADD      r0,r11,#0x30          ;4147
00022a  f7fffffe          BL       mem_set
00022e  f50b74f7          ADD      r4,r11,#0x1ee         ;4148
000232  2001              MOVS     r0,#1                 ;4149
000234  7060              STRB     r0,[r4,#1]            ;4149
000236  70a0              STRB     r0,[r4,#2]            ;4150
000238  2000              MOVS     r0,#0                 ;4151
00023a  70e0              STRB     r0,[r4,#3]            ;4151
00023c  980d              LDR      r0,[sp,#0x34]         ;4152
00023e  7120              STRB     r0,[r4,#4]            ;4152
000240  20fe              MOVS     r0,#0xfe              ;4153
000242  7160              STRB     r0,[r4,#5]            ;4153
000244  9804              LDR      r0,[sp,#0x10]         ;4154
000246  4448              ADD      r0,r0,r9              ;4154
000248  213f              MOVS     r1,#0x3f              ;4154
00024a  fbb0f0f1          UDIV     r0,r0,r1              ;4154
00024e  21ff              MOVS     r1,#0xff              ;4154
000250  fbb0f0f1          UDIV     r0,r0,r1              ;4154
000254  9009              STR      r0,[sp,#0x24]         ;4154
000256  213f              MOVS     r1,#0x3f              ;4155
000258  9809              LDR      r0,[sp,#0x24]         ;4155
00025a  ea410090          ORR      r0,r1,r0,LSR #2       ;4155
00025e  71a0              STRB     r0,[r4,#6]            ;4155
000260  9809              LDR      r0,[sp,#0x24]         ;4156
000262  71e0              STRB     r0,[r4,#7]            ;4156
000264  203f              MOVS     r0,#0x3f              ;4157
000266  7220              STRB     r0,[r4,#8]            ;4157
000268  2100              MOVS     r1,#0                 ;4157
00026a  7261              STRB     r1,[r4,#9]            ;4157
00026c  72a1              STRB     r1,[r4,#0xa]          ;4157
00026e  72e1              STRB     r1,[r4,#0xb]          ;4157
000270  9804              LDR      r0,[sp,#0x10]         ;4158
000272  7320              STRB     r0,[r4,#0xc]          ;4158
000274  9804              LDR      r0,[sp,#0x10]         ;4158
000276  0a01              LSRS     r1,r0,#8              ;4158
000278  7361              STRB     r1,[r4,#0xd]          ;4158
00027a  9804              LDR      r0,[sp,#0x10]         ;4158
00027c  0c01              LSRS     r1,r0,#16             ;4158
00027e  73a1              STRB     r1,[r4,#0xe]          ;4158
000280  9804              LDR      r0,[sp,#0x10]         ;4158
000282  0e01              LSRS     r1,r0,#24             ;4158
000284  73e1              STRB     r1,[r4,#0xf]          ;4158
000286  2155              MOVS     r1,#0x55              ;4159
000288  f88b122e          STRB     r1,[r11,#0x22e]       ;4159
00028c  21aa              MOVS     r1,#0xaa              ;4159
00028e  f88b122f          STRB     r1,[r11,#0x22f]       ;4159
000292  2301              MOVS     r3,#1                 ;4160
000294  2200              MOVS     r2,#0                 ;4160
000296  f10b0130          ADD      r1,r11,#0x30          ;4160
00029a  980c              LDR      r0,[sp,#0x30]         ;4160
00029c  f7fffffe          BL       disk_write
0002a0  b108              CBZ      r0,|L20.678|
0002a2  2001              MOVS     r0,#1                 ;4161
0002a4  e6b4              B        |L20.16|
                  |L20.678|
0002a6  20f8              MOVS     r0,#0xf8              ;4162
0002a8  900e              STR      r0,[sp,#0x38]         ;4162
                  |L20.682|
0002aa  f10b0430          ADD      r4,r11,#0x30          ;4167
0002ae  f44f7200          MOV      r2,#0x200             ;4168
0002b2  2100              MOVS     r1,#0                 ;4168
0002b4  4620              MOV      r0,r4                 ;4168
0002b6  f7fffffe          BL       mem_set
0002ba  220b              MOVS     r2,#0xb               ;4169
0002bc  a15a              ADR      r1,|L20.1064|
0002be  4620              MOV      r0,r4                 ;4169
0002c0  f7fffffe          BL       mem_cpy
0002c4  f44f7a00          MOV      r10,#0x200            ;4170
0002c8  f884a00b          STRB     r10,[r4,#0xb]         ;4171
0002cc  ea4f211a          LSR      r1,r10,#8             ;4171
0002d0  7321              STRB     r1,[r4,#0xc]          ;4171
0002d2  f884800d          STRB     r8,[r4,#0xd]          ;4172
0002d6  9803              LDR      r0,[sp,#0xc]          ;4173
0002d8  73a0              STRB     r0,[r4,#0xe]          ;4173
0002da  9803              LDR      r0,[sp,#0xc]          ;4173
0002dc  0a01              LSRS     r1,r0,#8              ;4173
0002de  73e1              STRB     r1,[r4,#0xf]          ;4173
0002e0  2001              MOVS     r0,#1                 ;4174
0002e2  7420              STRB     r0,[r4,#0x10]         ;4174
0002e4  2d03              CMP      r5,#3                 ;4175
0002e6  d101              BNE      |L20.748|
0002e8  2000              MOVS     r0,#0                 ;4175
0002ea  e001              B        |L20.752|
                  |L20.748|
0002ec  f44f7000          MOV      r0,#0x200             ;4175
                  |L20.752|
0002f0  4682              MOV      r10,r0                ;4175
0002f2  f884a011          STRB     r10,[r4,#0x11]        ;4176
0002f6  ea4f211a          LSR      r1,r10,#8             ;4176
0002fa  74a1              STRB     r1,[r4,#0x12]         ;4176
0002fc  9804              LDR      r0,[sp,#0x10]         ;4177
0002fe  f5b03f80          CMP      r0,#0x10000           ;4177
000302  d205              BCS      |L20.784|
000304  9804              LDR      r0,[sp,#0x10]         ;4178
000306  74e0              STRB     r0,[r4,#0x13]         ;4178
000308  9804              LDR      r0,[sp,#0x10]         ;4178
00030a  0a01              LSRS     r1,r0,#8              ;4178
00030c  7521              STRB     r1,[r4,#0x14]         ;4178
00030e  e010              B        |L20.818|
                  |L20.784|
000310  9804              LDR      r0,[sp,#0x10]         ;4180
000312  f8840020          STRB     r0,[r4,#0x20]         ;4180
000316  9804              LDR      r0,[sp,#0x10]         ;4180
000318  f3c02107          UBFX     r1,r0,#8,#8           ;4180
00031c  2021              MOVS     r0,#0x21              ;4180
00031e  5501              STRB     r1,[r0,r4]            ;4180
000320  9804              LDR      r0,[sp,#0x10]         ;4180
000322  f3c04107          UBFX     r1,r0,#16,#8          ;4180
000326  2022              MOVS     r0,#0x22              ;4180
000328  5501              STRB     r1,[r0,r4]            ;4180
00032a  9804              LDR      r0,[sp,#0x10]         ;4180
00032c  0e01              LSRS     r1,r0,#24             ;4180
00032e  2023              MOVS     r0,#0x23              ;4180
000330  5501              STRB     r1,[r0,r4]            ;4180
                  |L20.818|
000332  980e              LDR      r0,[sp,#0x38]         ;4182
000334  7560              STRB     r0,[r4,#0x15]         ;4182
000336  203f              MOVS     r0,#0x3f              ;4183
000338  7620              STRB     r0,[r4,#0x18]         ;4183
00033a  2100              MOVS     r1,#0                 ;4183
00033c  7661              STRB     r1,[r4,#0x19]         ;4183
00033e  20ff              MOVS     r0,#0xff              ;4184
000340  76a0              STRB     r0,[r4,#0x1a]         ;4184
000342  76e1              STRB     r1,[r4,#0x1b]         ;4184
000344  f884901c          STRB     r9,[r4,#0x1c]         ;4185
000348  ea4f2119          LSR      r1,r9,#8              ;4185
00034c  7761              STRB     r1,[r4,#0x1d]         ;4185
00034e  ea4f4119          LSR      r1,r9,#16             ;4185
000352  77a1              STRB     r1,[r4,#0x1e]         ;4185
000354  ea4f6119          LSR      r1,r9,#24             ;4185
000358  77e1              STRB     r1,[r4,#0x1f]         ;4185
00035a  f7fffffe          BL       get_fattime
00035e  9009              STR      r0,[sp,#0x24]         ;4186
000360  2d03              CMP      r5,#3                 ;4187
000362  d13e              BNE      |L20.994|
000364  9809              LDR      r0,[sp,#0x24]         ;4188
000366  f8840043          STRB     r0,[r4,#0x43]         ;4188
00036a  9809              LDR      r0,[sp,#0x24]         ;4188
00036c  f3c02107          UBFX     r1,r0,#8,#8           ;4188
000370  2044              MOVS     r0,#0x44              ;4188
000372  5501              STRB     r1,[r0,r4]            ;4188
000374  9809              LDR      r0,[sp,#0x24]         ;4188
000376  f3c04107          UBFX     r1,r0,#16,#8          ;4188
00037a  2045              MOVS     r0,#0x45              ;4188
00037c  5501              STRB     r1,[r0,r4]            ;4188
00037e  9809              LDR      r0,[sp,#0x24]         ;4188
000380  0e01              LSRS     r1,r0,#24             ;4188
000382  2046              MOVS     r0,#0x46              ;4188
000384  5501              STRB     r1,[r0,r4]            ;4188
000386  f8846024          STRB     r6,[r4,#0x24]         ;4189
00038a  f3c62107          UBFX     r1,r6,#8,#8           ;4189
00038e  2025              MOVS     r0,#0x25              ;4189
000390  5501              STRB     r1,[r0,r4]            ;4189
000392  f3c64107          UBFX     r1,r6,#16,#8          ;4189
000396  2026              MOVS     r0,#0x26              ;4189
000398  5501              STRB     r1,[r0,r4]            ;4189
00039a  0e31              LSRS     r1,r6,#24             ;4189
00039c  2027              MOVS     r0,#0x27              ;4189
00039e  5501              STRB     r1,[r0,r4]            ;4189
0003a0  2002              MOVS     r0,#2                 ;4190
0003a2  f884002c          STRB     r0,[r4,#0x2c]         ;4190
0003a6  2100              MOVS     r1,#0                 ;4190
0003a8  202d              MOVS     r0,#0x2d              ;4190
0003aa  5501              STRB     r1,[r0,r4]            ;4190
0003ac  202e              MOVS     r0,#0x2e              ;4190
0003ae  5501              STRB     r1,[r0,r4]            ;4190
0003b0  202f              MOVS     r0,#0x2f              ;4190
0003b2  5501              STRB     r1,[r0,r4]            ;4190
0003b4  2001              MOVS     r0,#1                 ;4191
0003b6  f8840030          STRB     r0,[r4,#0x30]         ;4191
0003ba  2031              MOVS     r0,#0x31              ;4191
0003bc  5501              STRB     r1,[r0,r4]            ;4191
0003be  2006              MOVS     r0,#6                 ;4192
0003c0  f8840032          STRB     r0,[r4,#0x32]         ;4192
0003c4  2033              MOVS     r0,#0x33              ;4192
0003c6  5501              STRB     r1,[r0,r4]            ;4192
0003c8  2080              MOVS     r0,#0x80              ;4193
0003ca  f8840040          STRB     r0,[r4,#0x40]         ;4193
0003ce  2029              MOVS     r0,#0x29              ;4194
0003d0  f8840042          STRB     r0,[r4,#0x42]         ;4194
0003d4  2213              MOVS     r2,#0x13              ;4195
0003d6  a117              ADR      r1,|L20.1076|
0003d8  f1040047          ADD      r0,r4,#0x47           ;4195
0003dc  f7fffffe          BL       mem_cpy
0003e0  e037              B        |L20.1106|
                  |L20.994|
0003e2  9809              LDR      r0,[sp,#0x24]         ;4197
0003e4  f8840027          STRB     r0,[r4,#0x27]         ;4197
0003e8  9809              LDR      r0,[sp,#0x24]         ;4197
0003ea  f3c02107          UBFX     r1,r0,#8,#8           ;4197
0003ee  2028              MOVS     r0,#0x28              ;4197
0003f0  5501              STRB     r1,[r0,r4]            ;4197
0003f2  9809              LDR      r0,[sp,#0x24]         ;4197
0003f4  f3c04107          UBFX     r1,r0,#16,#8          ;4197
0003f8  2029              MOVS     r0,#0x29              ;4197
0003fa  5501              STRB     r1,[r0,r4]            ;4197
0003fc  9809              LDR      r0,[sp,#0x24]         ;4197
0003fe  0e01              LSRS     r1,r0,#24             ;4197
000400  202a              MOVS     r0,#0x2a              ;4197
000402  5501              STRB     r1,[r0,r4]            ;4197
000404  75a6              STRB     r6,[r4,#0x16]         ;4198
000406  0a31              LSRS     r1,r6,#8              ;4198
000408  75e1              STRB     r1,[r4,#0x17]         ;4198
00040a  2080              MOVS     r0,#0x80              ;4199
00040c  f8840024          STRB     r0,[r4,#0x24]         ;4199
000410  2029              MOVS     r0,#0x29              ;4200
000412  f8840026          STRB     r0,[r4,#0x26]         ;4200
000416  2213              MOVS     r2,#0x13              ;4201
000418  e016              B        |L20.1096|
00041a  0000              DCW      0x0000
                  |L20.1052|
                          DCD      FatFs
                  |L20.1056|
                          DCD      vst
                  |L20.1060|
                          DCD      ||cst||
                  |L20.1064|
000428  ebfe904d          DCB      235,254,144,"MSDOS5.0",0
00042c  53444f53
000430  352e3000
                  |L20.1076|
000434  4e4f204e          DCB      "NO NAME    FAT32   ",0
000438  414d4520
00043c  20202046
000440  41543332
000444  20202000
                  |L20.1096|
000448  a179              ADR      r1,|L20.1584|
00044a  f104002b          ADD      r0,r4,#0x2b           ;4201
00044e  f7fffffe          BL       mem_cpy
                  |L20.1106|
000452  2055              MOVS     r0,#0x55              ;4203
000454  f88401fe          STRB     r0,[r4,#0x1fe]        ;4203
000458  21aa              MOVS     r1,#0xaa              ;4203
00045a  f24010ff          MOV      r0,#0x1ff             ;4203
00045e  5501              STRB     r1,[r0,r4]            ;4203
000460  2301              MOVS     r3,#1                 ;4204
000462  464a              MOV      r2,r9                 ;4204
000464  4621              MOV      r1,r4                 ;4204
000466  980c              LDR      r0,[sp,#0x30]         ;4204
000468  f7fffffe          BL       disk_write
00046c  b108              CBZ      r0,|L20.1138|
00046e  2001              MOVS     r0,#1                 ;4205
000470  e5ce              B        |L20.16|
                  |L20.1138|
000472  2d03              CMP      r5,#3                 ;4206
000474  d106              BNE      |L20.1156|
000476  2301              MOVS     r3,#1                 ;4207
000478  f1090206          ADD      r2,r9,#6              ;4207
00047c  4621              MOV      r1,r4                 ;4207
00047e  980c              LDR      r0,[sp,#0x30]         ;4207
000480  f7fffffe          BL       disk_write
                  |L20.1156|
000484  9807              LDR      r0,[sp,#0x1c]         ;4210
000486  9008              STR      r0,[sp,#0x20]         ;4210
000488  f04f0a00          MOV      r10,#0                ;4211
00048c  e061              B        |L20.1362|
                  |L20.1166|
00048e  f44f7200          MOV      r2,#0x200             ;4212
000492  2100              MOVS     r1,#0                 ;4212
000494  4620              MOV      r0,r4                 ;4212
000496  f7fffffe          BL       mem_set
00049a  980e              LDR      r0,[sp,#0x38]         ;4213
00049c  9009              STR      r0,[sp,#0x24]         ;4213
00049e  2d03              CMP      r5,#3                 ;4214
0004a0  d014              BEQ      |L20.1228|
0004a2  2d01              CMP      r5,#1                 ;4215
0004a4  d101              BNE      |L20.1194|
0004a6  4867              LDR      r0,|L20.1604|
0004a8  e001              B        |L20.1198|
                  |L20.1194|
0004aa  f06f00ff          MVN      r0,#0xff              ;4215
                  |L20.1198|
0004ae  9909              LDR      r1,[sp,#0x24]         ;4215
0004b0  4308              ORRS     r0,r0,r1              ;4215
0004b2  9009              STR      r0,[sp,#0x24]         ;4215
0004b4  9809              LDR      r0,[sp,#0x24]         ;4216
0004b6  7020              STRB     r0,[r4,#0]            ;4216
0004b8  9809              LDR      r0,[sp,#0x24]         ;4216
0004ba  0a00              LSRS     r0,r0,#8              ;4216
0004bc  7060              STRB     r0,[r4,#1]            ;4216
0004be  9809              LDR      r0,[sp,#0x24]         ;4216
0004c0  0c00              LSRS     r0,r0,#16             ;4216
0004c2  70a0              STRB     r0,[r4,#2]            ;4216
0004c4  9809              LDR      r0,[sp,#0x24]         ;4216
0004c6  0e00              LSRS     r0,r0,#24             ;4216
0004c8  70e0              STRB     r0,[r4,#3]            ;4216
0004ca  e019              B        |L20.1280|
                  |L20.1228|
0004cc  9809              LDR      r0,[sp,#0x24]         ;4218
0004ce  f06000ff          ORN      r0,r0,#0xff           ;4218
0004d2  9009              STR      r0,[sp,#0x24]         ;4218
0004d4  9809              LDR      r0,[sp,#0x24]         ;4219
0004d6  7020              STRB     r0,[r4,#0]            ;4219
0004d8  9809              LDR      r0,[sp,#0x24]         ;4219
0004da  0a00              LSRS     r0,r0,#8              ;4219
0004dc  7060              STRB     r0,[r4,#1]            ;4219
0004de  9809              LDR      r0,[sp,#0x24]         ;4219
0004e0  0c00              LSRS     r0,r0,#16             ;4219
0004e2  70a0              STRB     r0,[r4,#2]            ;4219
0004e4  9809              LDR      r0,[sp,#0x24]         ;4219
0004e6  0e00              LSRS     r0,r0,#24             ;4219
0004e8  70e0              STRB     r0,[r4,#3]            ;4219
0004ea  20ff              MOVS     r0,#0xff              ;4220
0004ec  7120              STRB     r0,[r4,#4]            ;4220
0004ee  21ff              MOVS     r1,#0xff              ;4220
0004f0  7161              STRB     r1,[r4,#5]            ;4220
0004f2  71a1              STRB     r1,[r4,#6]            ;4220
0004f4  71e1              STRB     r1,[r4,#7]            ;4220
0004f6  7220              STRB     r0,[r4,#8]            ;4221
0004f8  7261              STRB     r1,[r4,#9]            ;4221
0004fa  72a1              STRB     r1,[r4,#0xa]          ;4221
0004fc  210f              MOVS     r1,#0xf               ;4221
0004fe  72e1              STRB     r1,[r4,#0xb]          ;4221
                  |L20.1280|
000500  9808              LDR      r0,[sp,#0x20]         ;4223
000502  1c41              ADDS     r1,r0,#1              ;4223
000504  4602              MOV      r2,r0                 ;4223
000506  2301              MOVS     r3,#1                 ;4223
000508  9108              STR      r1,[sp,#0x20]         ;4223
00050a  4621              MOV      r1,r4                 ;4223
00050c  980c              LDR      r0,[sp,#0x30]         ;4223
00050e  f7fffffe          BL       disk_write
000512  b108              CBZ      r0,|L20.1304|
000514  2001              MOVS     r0,#1                 ;4224
000516  e57b              B        |L20.16|
                  |L20.1304|
000518  f44f7200          MOV      r2,#0x200             ;4225
00051c  2100              MOVS     r1,#0                 ;4225
00051e  4620              MOV      r0,r4                 ;4225
000520  f7fffffe          BL       mem_set
000524  2001              MOVS     r0,#1                 ;4226
000526  9009              STR      r0,[sp,#0x24]         ;4226
000528  e00e              B        |L20.1352|
                  |L20.1322|
00052a  9808              LDR      r0,[sp,#0x20]         ;4227
00052c  1c41              ADDS     r1,r0,#1              ;4227
00052e  4602              MOV      r2,r0                 ;4227
000530  2301              MOVS     r3,#1                 ;4227
000532  9108              STR      r1,[sp,#0x20]         ;4227
000534  4621              MOV      r1,r4                 ;4227
000536  980c              LDR      r0,[sp,#0x30]         ;4227
000538  f7fffffe          BL       disk_write
00053c  b108              CBZ      r0,|L20.1346|
00053e  2001              MOVS     r0,#1                 ;4228
000540  e566              B        |L20.16|
                  |L20.1346|
000542  9809              LDR      r0,[sp,#0x24]         ;4226
000544  1c40              ADDS     r0,r0,#1              ;4226
000546  9009              STR      r0,[sp,#0x24]         ;4226
                  |L20.1352|
000548  9809              LDR      r0,[sp,#0x24]         ;4226
00054a  42b0              CMP      r0,r6                 ;4226
00054c  d3ed              BCC      |L20.1322|
00054e  f10a0a01          ADD      r10,r10,#1            ;4211
                  |L20.1362|
000552  f1ba0f00          CMP      r10,#0                ;4211
000556  d09a              BEQ      |L20.1166|
000558  2d03              CMP      r5,#3                 ;4233
00055a  d101              BNE      |L20.1376|
00055c  4640              MOV      r0,r8                 ;4233
00055e  e000              B        |L20.1378|
                  |L20.1376|
000560  9802              LDR      r0,[sp,#8]            ;4233
                  |L20.1378|
000562  4682              MOV      r10,r0                ;4233
000564  bf00              NOP                            ;4234
                  |L20.1382|
000566  9808              LDR      r0,[sp,#0x20]         ;4235
000568  1c41              ADDS     r1,r0,#1              ;4235
00056a  4602              MOV      r2,r0                 ;4235
00056c  2301              MOVS     r3,#1                 ;4235
00056e  9108              STR      r1,[sp,#0x20]         ;4235
000570  4621              MOV      r1,r4                 ;4235
000572  980c              LDR      r0,[sp,#0x30]         ;4235
000574  f7fffffe          BL       disk_write
000578  b108              CBZ      r0,|L20.1406|
00057a  2001              MOVS     r0,#1                 ;4236
00057c  e548              B        |L20.16|
                  |L20.1406|
00057e  f1aa0001          SUB      r0,r10,#1             ;4237
000582  ea5f0a00          MOVS     r10,r0                ;4237
000586  d1ee              BNE      |L20.1382|
000588  2d03              CMP      r5,#3                 ;4247
00058a  d146              BNE      |L20.1562|
00058c  2052              MOVS     r0,#0x52              ;4248
00058e  7020              STRB     r0,[r4,#0]            ;4248
000590  7060              STRB     r0,[r4,#1]            ;4248
000592  2061              MOVS     r0,#0x61              ;4248
000594  70a0              STRB     r0,[r4,#2]            ;4248
000596  2041              MOVS     r0,#0x41              ;4248
000598  70e0              STRB     r0,[r4,#3]            ;4248
00059a  2072              MOVS     r0,#0x72              ;4249
00059c  f88401e4          STRB     r0,[r4,#0x1e4]        ;4249
0005a0  2172              MOVS     r1,#0x72              ;4249
0005a2  f24010e5          MOV      r0,#0x1e5             ;4249
0005a6  5501              STRB     r1,[r0,r4]            ;4249
0005a8  2141              MOVS     r1,#0x41              ;4249
0005aa  1c40              ADDS     r0,r0,#1              ;4249
0005ac  5501              STRB     r1,[r0,r4]            ;4249
0005ae  2161              MOVS     r1,#0x61              ;4249
0005b0  1c40              ADDS     r0,r0,#1              ;4249
0005b2  5501              STRB     r1,[r0,r4]            ;4249
0005b4  1e78              SUBS     r0,r7,#1              ;4250
0005b6  f88401e8          STRB     r0,[r4,#0x1e8]        ;4250
0005ba  f3c02107          UBFX     r1,r0,#8,#8           ;4250
0005be  f24010e9          MOV      r0,#0x1e9             ;4250
0005c2  5501              STRB     r1,[r0,r4]            ;4250
0005c4  1e78              SUBS     r0,r7,#1              ;4250
0005c6  f3c04107          UBFX     r1,r0,#16,#8          ;4250
0005ca  f44f70f5          MOV      r0,#0x1ea             ;4250
0005ce  5501              STRB     r1,[r0,r4]            ;4250
0005d0  1e78              SUBS     r0,r7,#1              ;4250
0005d2  0e01              LSRS     r1,r0,#24             ;4250
0005d4  f24010eb          MOV      r0,#0x1eb             ;4250
0005d8  5501              STRB     r1,[r0,r4]            ;4250
0005da  2002              MOVS     r0,#2                 ;4251
0005dc  f88401ec          STRB     r0,[r4,#0x1ec]        ;4251
0005e0  2100              MOVS     r1,#0                 ;4251
0005e2  f24010ed          MOV      r0,#0x1ed             ;4251
0005e6  5501              STRB     r1,[r0,r4]            ;4251
0005e8  1c40              ADDS     r0,r0,#1              ;4251
0005ea  5501              STRB     r1,[r0,r4]            ;4251
0005ec  1c40              ADDS     r0,r0,#1              ;4251
0005ee  5501              STRB     r1,[r0,r4]            ;4251
0005f0  2055              MOVS     r0,#0x55              ;4252
0005f2  f88401fe          STRB     r0,[r4,#0x1fe]        ;4252
0005f6  21aa              MOVS     r1,#0xaa              ;4252
0005f8  f24010ff          MOV      r0,#0x1ff             ;4252
0005fc  5501              STRB     r1,[r0,r4]            ;4252
0005fe  2301              MOVS     r3,#1                 ;4253
000600  f1090201          ADD      r2,r9,#1              ;4253
000604  4621              MOV      r1,r4                 ;4253
000606  980c              LDR      r0,[sp,#0x30]         ;4253
000608  f7fffffe          BL       disk_write
00060c  2301              MOVS     r3,#1                 ;4254
00060e  f1090207          ADD      r2,r9,#7              ;4254
000612  4621              MOV      r1,r4                 ;4254
000614  980c              LDR      r0,[sp,#0x30]         ;4254
000616  f7fffffe          BL       disk_write
                  |L20.1562|
00061a  2200              MOVS     r2,#0                 ;4257
00061c  4611              MOV      r1,r2                 ;4257
00061e  980c              LDR      r0,[sp,#0x30]         ;4257
000620  f7fffffe          BL       disk_ioctl
000624  b108              CBZ      r0,|L20.1578|
000626  2001              MOVS     r0,#1                 ;4257
000628  e4f2              B        |L20.16|
                  |L20.1578|
00062a  2000              MOVS     r0,#0                 ;4257
00062c  e4f0              B        |L20.16|
;;;4259   
                          ENDP

00062e  0000              DCW      0x0000
                  |L20.1584|
000630  4e4f204e          DCB      "NO NAME    FAT     ",0
000634  414d4520
000638  20202046
00063c  41542020
000640  20202000
                  |L20.1604|
                          DCD      0x00ffff00

                          AREA ||i.f_mount||, CODE, READONLY, ALIGN=2

                  f_mount PROC
;;;2357   
;;;2358   FRESULT f_mount (
000000  b5f7              PUSH     {r0-r2,r4-r7,lr}
;;;2359   	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
;;;2360   	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
;;;2361   	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
;;;2362   )
;;;2363   {
000002  b082              SUB      sp,sp,#8
000004  4616              MOV      r6,r2
;;;2364   	FATFS *cfs;
;;;2365   	int vol;
;;;2366   	FRESULT res;
;;;2367   	const TCHAR *rp = path;
000006  9803              LDR      r0,[sp,#0xc]
000008  9001              STR      r0,[sp,#4]
;;;2368   
;;;2369   
;;;2370   	vol = get_ldnumber(&rp);
00000a  a801              ADD      r0,sp,#4
00000c  f7fffffe          BL       get_ldnumber
000010  4605              MOV      r5,r0
;;;2371   	if (vol < 0) return FR_INVALID_DRIVE;
000012  2d00              CMP      r5,#0
000014  da02              BGE      |L21.28|
000016  200b              MOVS     r0,#0xb
                  |L21.24|
;;;2372   	cfs = FatFs[vol];					/* Pointer to fs object */
;;;2373   
;;;2374   	if (cfs) {
;;;2375   #if _FS_LOCK
;;;2376   		clear_lock(cfs);
;;;2377   #endif
;;;2378   #if _FS_REENTRANT						/* Discard sync object of the current volume */
;;;2379   		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
;;;2380   #endif
;;;2381   		cfs->fs_type = 0;				/* Clear old fs object */
;;;2382   	}
;;;2383   
;;;2384   	if (fs) {
;;;2385   		fs->fs_type = 0;				/* Clear new fs object */
;;;2386   #if _FS_REENTRANT						/* Create sync object for the new volume */
;;;2387   		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
;;;2388   #endif
;;;2389   	}
;;;2390   	FatFs[vol] = fs;					/* Register new fs object */
;;;2391   
;;;2392   	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
;;;2393   
;;;2394   	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
;;;2395   	LEAVE_FF(fs, res);
;;;2396   }
000018  b005              ADD      sp,sp,#0x14
00001a  bdf0              POP      {r4-r7,pc}
                  |L21.28|
00001c  480e              LDR      r0,|L21.88|
00001e  f8504025          LDR      r4,[r0,r5,LSL #2]     ;2372
000022  b10c              CBZ      r4,|L21.40|
000024  2000              MOVS     r0,#0                 ;2381
000026  7020              STRB     r0,[r4,#0]            ;2381
                  |L21.40|
000028  9802              LDR      r0,[sp,#8]            ;2384
00002a  b110              CBZ      r0,|L21.50|
00002c  2000              MOVS     r0,#0                 ;2385
00002e  9902              LDR      r1,[sp,#8]            ;2385
000030  7008              STRB     r0,[r1,#0]            ;2385
                  |L21.50|
000032  4909              LDR      r1,|L21.88|
000034  9802              LDR      r0,[sp,#8]            ;2390
000036  f8410025          STR      r0,[r1,r5,LSL #2]     ;2390
00003a  9802              LDR      r0,[sp,#8]            ;2392
00003c  b108              CBZ      r0,|L21.66|
00003e  2e01              CMP      r6,#1                 ;2392
000040  d001              BEQ      |L21.70|
                  |L21.66|
000042  2000              MOVS     r0,#0                 ;2392
000044  e7e8              B        |L21.24|
                  |L21.70|
000046  2200              MOVS     r2,#0                 ;2394
000048  a903              ADD      r1,sp,#0xc            ;2394
00004a  a802              ADD      r0,sp,#8              ;2394
00004c  f7fffffe          BL       find_volume
000050  4607              MOV      r7,r0                 ;2394
000052  4638              MOV      r0,r7                 ;2395
000054  e7e0              B        |L21.24|
;;;2397   
                          ENDP

000056  0000              DCW      0x0000
                  |L21.88|
                          DCD      FatFs

                          AREA ||i.f_open||, CODE, READONLY, ALIGN=1

                  f_open PROC
;;;2404   
;;;2405   FRESULT f_open (
000000  e92d43f7          PUSH     {r0-r2,r4-r9,lr}
;;;2406   	FIL* fp,			/* Pointer to the blank file object */
;;;2407   	const TCHAR* path,	/* Pointer to the file name */
;;;2408   	BYTE mode			/* Access mode and file open mode flags */
;;;2409   )
;;;2410   {
000004  b08a              SUB      sp,sp,#0x28
000006  4605              MOV      r5,r0
000008  4616              MOV      r6,r2
;;;2411   	FRESULT res;
;;;2412   	DIR dj;
;;;2413   	BYTE *dir;
;;;2414   	DEFINE_NAMEBUF;
;;;2415   #if !_FS_READONLY
;;;2416   	DWORD dw, cl;
;;;2417   #endif
;;;2418   
;;;2419   
;;;2420   	if (!fp) return FR_INVALID_OBJECT;
00000a  b91d              CBNZ     r5,|L22.20|
00000c  2009              MOVS     r0,#9
                  |L22.14|
;;;2421   	fp->fs = 0;			/* Clear file object */
;;;2422   
;;;2423   	/* Get logical drive number */
;;;2424   #if !_FS_READONLY
;;;2425   	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
;;;2426   	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
;;;2427   #else
;;;2428   	mode &= FA_READ;
;;;2429   	res = find_volume(&dj.fs, &path, 0);
;;;2430   #endif
;;;2431   	if (res == FR_OK) {
;;;2432   		INIT_BUF(dj);
;;;2433   		res = follow_path(&dj, path);	/* Follow the file path */
;;;2434   		dir = dj.dir;
;;;2435   #if !_FS_READONLY	/* R/W configuration */
;;;2436   		if (res == FR_OK) {
;;;2437   			if (!dir)	/* Default directory itself */
;;;2438   				res = FR_INVALID_NAME;
;;;2439   #if _FS_LOCK
;;;2440   			else
;;;2441   				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2442   #endif
;;;2443   		}
;;;2444   		/* Create or Open a file */
;;;2445   		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
;;;2446   			if (res != FR_OK) {					/* No file, create new */
;;;2447   				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
;;;2448   #if _FS_LOCK
;;;2449   					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
;;;2450   #else
;;;2451   					res = dir_register(&dj);
;;;2452   #endif
;;;2453   				mode |= FA_CREATE_ALWAYS;		/* File is created */
;;;2454   				dir = dj.dir;					/* New entry */
;;;2455   			}
;;;2456   			else {								/* Any object is already existing */
;;;2457   				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
;;;2458   					res = FR_DENIED;
;;;2459   				} else {
;;;2460   					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
;;;2461   						res = FR_EXIST;
;;;2462   				}
;;;2463   			}
;;;2464   			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
;;;2465   				dw = GET_FATTIME();				/* Created time */
;;;2466   				ST_DWORD(dir + DIR_CrtTime, dw);
;;;2467   				dir[DIR_Attr] = 0;				/* Reset attribute */
;;;2468   				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
;;;2469   				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
;;;2470   				st_clust(dir, 0);				/* cluster = 0 */
;;;2471   				dj.fs->wflag = 1;
;;;2472   				if (cl) {						/* Remove the cluster chain if exist */
;;;2473   					dw = dj.fs->winsect;
;;;2474   					res = remove_chain(dj.fs, cl);
;;;2475   					if (res == FR_OK) {
;;;2476   						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
;;;2477   						res = move_window(dj.fs, dw);
;;;2478   					}
;;;2479   				}
;;;2480   			}
;;;2481   		}
;;;2482   		else {	/* Open an existing file */
;;;2483   			if (res == FR_OK) {					/* Follow succeeded */
;;;2484   				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
;;;2485   					res = FR_NO_FILE;
;;;2486   				} else {
;;;2487   					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
;;;2488   						res = FR_DENIED;
;;;2489   				}
;;;2490   			}
;;;2491   		}
;;;2492   		if (res == FR_OK) {
;;;2493   			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
;;;2494   				mode |= FA__WRITTEN;
;;;2495   			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
;;;2496   			fp->dir_ptr = dir;
;;;2497   #if _FS_LOCK
;;;2498   			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
;;;2499   			if (!fp->lockid) res = FR_INT_ERR;
;;;2500   #endif
;;;2501   		}
;;;2502   
;;;2503   #else				/* R/O configuration */
;;;2504   		if (res == FR_OK) {					/* Follow succeeded */
;;;2505   			dir = dj.dir;
;;;2506   			if (!dir) {						/* Current directory itself */
;;;2507   				res = FR_INVALID_NAME;
;;;2508   			} else {
;;;2509   				if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
;;;2510   					res = FR_NO_FILE;
;;;2511   			}
;;;2512   		}
;;;2513   #endif
;;;2514   		FREE_BUF();
;;;2515   
;;;2516   		if (res == FR_OK) {
;;;2517   			fp->flag = mode;					/* File access mode */
;;;2518   			fp->err = 0;						/* Clear error flag */
;;;2519   			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
;;;2520   			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
;;;2521   			fp->fptr = 0;						/* File pointer */
;;;2522   			fp->dsect = 0;
;;;2523   #if _USE_FASTSEEK
;;;2524   			fp->cltbl = 0;						/* Normal seek mode */
;;;2525   #endif
;;;2526   			fp->fs = dj.fs;	 					/* Validate file object */
;;;2527   			fp->id = fp->fs->id;
;;;2528   		}
;;;2529   	}
;;;2530   
;;;2531   	LEAVE_FF(dj.fs, res);
;;;2532   }
00000e  b00d              ADD      sp,sp,#0x34
000010  e8bd83f0          POP      {r4-r9,pc}
                  |L22.20|
000014  2000              MOVS     r0,#0                 ;2421
000016  6028              STR      r0,[r5,#0]            ;2421
000018  f006061f          AND      r6,r6,#0x1f           ;2425
00001c  f0260201          BIC      r2,r6,#1              ;2426
000020  a90b              ADD      r1,sp,#0x2c           ;2426
000022  a803              ADD      r0,sp,#0xc            ;2426
000024  f7fffffe          BL       find_volume
000028  4607              MOV      r7,r0                 ;2426
00002a  2f00              CMP      r7,#0                 ;2431
00002c  d17e              BNE      |L22.300|
00002e  f8cdd024          STR      sp,[sp,#0x24]         ;2432
000032  a803              ADD      r0,sp,#0xc            ;2433
000034  990b              LDR      r1,[sp,#0x2c]         ;2433
000036  f7fffffe          BL       follow_path
00003a  4607              MOV      r7,r0                 ;2433
00003c  9c08              LDR      r4,[sp,#0x20]         ;2434
00003e  b90f              CBNZ     r7,|L22.68|
000040  b904              CBNZ     r4,|L22.68|
000042  2706              MOVS     r7,#6                 ;2438
                  |L22.68|
000044  f006001c          AND      r0,r6,#0x1c           ;2445
000048  2800              CMP      r0,#0                 ;2445
00004a  d051              BEQ      |L22.240|
00004c  b14f              CBZ      r7,|L22.98|
00004e  2f04              CMP      r7,#4                 ;2447
000050  d103              BNE      |L22.90|
000052  a803              ADD      r0,sp,#0xc            ;2451
000054  f7fffffe          BL       dir_register
000058  4607              MOV      r7,r0                 ;2451
                  |L22.90|
00005a  f0460608          ORR      r6,r6,#8              ;2453
00005e  9c08              LDR      r4,[sp,#0x20]         ;2454
000060  e009              B        |L22.118|
                  |L22.98|
000062  7ae0              LDRB     r0,[r4,#0xb]          ;2457
000064  f0000011          AND      r0,r0,#0x11           ;2457
000068  b108              CBZ      r0,|L22.110|
00006a  2707              MOVS     r7,#7                 ;2458
00006c  e003              B        |L22.118|
                  |L22.110|
00006e  f0060004          AND      r0,r6,#4              ;2460
000072  b100              CBZ      r0,|L22.118|
000074  2708              MOVS     r7,#8                 ;2461
                  |L22.118|
000076  2f00              CMP      r7,#0                 ;2464
000078  d149              BNE      |L22.270|
00007a  f0060008          AND      r0,r6,#8              ;2464
00007e  2800              CMP      r0,#0                 ;2464
000080  d045              BEQ      |L22.270|
000082  f7fffffe          BL       get_fattime
000086  4680              MOV      r8,r0                 ;2465
000088  f884800e          STRB     r8,[r4,#0xe]          ;2466
00008c  ea4f2118          LSR      r1,r8,#8              ;2466
000090  73e1              STRB     r1,[r4,#0xf]          ;2466
000092  ea4f4118          LSR      r1,r8,#16             ;2466
000096  7421              STRB     r1,[r4,#0x10]         ;2466
000098  ea4f6118          LSR      r1,r8,#24             ;2466
00009c  7461              STRB     r1,[r4,#0x11]         ;2466
00009e  2000              MOVS     r0,#0                 ;2467
0000a0  72e0              STRB     r0,[r4,#0xb]          ;2467
0000a2  7720              STRB     r0,[r4,#0x1c]         ;2468
0000a4  2100              MOVS     r1,#0                 ;2468
0000a6  7761              STRB     r1,[r4,#0x1d]         ;2468
0000a8  77a1              STRB     r1,[r4,#0x1e]         ;2468
0000aa  77e1              STRB     r1,[r4,#0x1f]         ;2468
0000ac  4621              MOV      r1,r4                 ;2469
0000ae  9803              LDR      r0,[sp,#0xc]          ;2469
0000b0  f7fffffe          BL       ld_clust
0000b4  4681              MOV      r9,r0                 ;2469
0000b6  2100              MOVS     r1,#0                 ;2470
0000b8  4620              MOV      r0,r4                 ;2470
0000ba  f7fffffe          BL       st_clust
0000be  2001              MOVS     r0,#1                 ;2471
0000c0  9903              LDR      r1,[sp,#0xc]          ;2471
0000c2  7108              STRB     r0,[r1,#4]            ;2471
0000c4  f1b90f00          CMP      r9,#0                 ;2472
0000c8  d021              BEQ      |L22.270|
0000ca  9803              LDR      r0,[sp,#0xc]          ;2473
0000cc  f8d0802c          LDR      r8,[r0,#0x2c]         ;2473
0000d0  4649              MOV      r1,r9                 ;2474
0000d2  9803              LDR      r0,[sp,#0xc]          ;2474
0000d4  f7fffffe          BL       remove_chain
0000d8  4607              MOV      r7,r0                 ;2474
0000da  b9c7              CBNZ     r7,|L22.270|
0000dc  f1a90001          SUB      r0,r9,#1              ;2476
0000e0  9903              LDR      r1,[sp,#0xc]          ;2476
0000e2  60c8              STR      r0,[r1,#0xc]          ;2476
0000e4  4641              MOV      r1,r8                 ;2477
0000e6  9803              LDR      r0,[sp,#0xc]          ;2477
0000e8  f7fffffe          BL       move_window
0000ec  4607              MOV      r7,r0                 ;2477
0000ee  e00e              B        |L22.270|
                  |L22.240|
0000f0  b96f              CBNZ     r7,|L22.270|
0000f2  7ae0              LDRB     r0,[r4,#0xb]          ;2484
0000f4  f0000010          AND      r0,r0,#0x10           ;2484
0000f8  b108              CBZ      r0,|L22.254|
0000fa  2704              MOVS     r7,#4                 ;2485
0000fc  e007              B        |L22.270|
                  |L22.254|
0000fe  f0060002          AND      r0,r6,#2              ;2487
000102  b120              CBZ      r0,|L22.270|
000104  7ae0              LDRB     r0,[r4,#0xb]          ;2487
000106  f0000001          AND      r0,r0,#1              ;2487
00010a  b100              CBZ      r0,|L22.270|
00010c  2707              MOVS     r7,#7                 ;2488
                  |L22.270|
00010e  b947              CBNZ     r7,|L22.290|
000110  f0060008          AND      r0,r6,#8              ;2493
000114  b108              CBZ      r0,|L22.282|
000116  f0460620          ORR      r6,r6,#0x20           ;2494
                  |L22.282|
00011a  9803              LDR      r0,[sp,#0xc]          ;2495
00011c  6ac0              LDR      r0,[r0,#0x2c]         ;2495
00011e  61e8              STR      r0,[r5,#0x1c]         ;2495
000120  622c              STR      r4,[r5,#0x20]         ;2496
                  |L22.290|
000122  b91f              CBNZ     r7,|L22.300|
000124  71ae              STRB     r6,[r5,#6]            ;2517
000126  2000              MOVS     r0,#0                 ;2518
000128  71e8              STRB     r0,[r5,#7]            ;2518
00012a  e000              B        |L22.302|
                  |L22.300|
00012c  e017              B        |L22.350|
                  |L22.302|
00012e  4621              MOV      r1,r4                 ;2519
000130  9803              LDR      r0,[sp,#0xc]          ;2519
000132  f7fffffe          BL       ld_clust
000136  6128              STR      r0,[r5,#0x10]         ;2519
000138  7fe0              LDRB     r0,[r4,#0x1f]         ;2520
00013a  0601              LSLS     r1,r0,#24             ;2520
00013c  7fa0              LDRB     r0,[r4,#0x1e]         ;2520
00013e  ea414100          ORR      r1,r1,r0,LSL #16      ;2520
000142  7f60              LDRB     r0,[r4,#0x1d]         ;2520
000144  ea412000          ORR      r0,r1,r0,LSL #8       ;2520
000148  7f21              LDRB     r1,[r4,#0x1c]         ;2520
00014a  4308              ORRS     r0,r0,r1              ;2520
00014c  60e8              STR      r0,[r5,#0xc]          ;2520
00014e  2000              MOVS     r0,#0                 ;2521
000150  60a8              STR      r0,[r5,#8]            ;2521
000152  61a8              STR      r0,[r5,#0x18]         ;2522
000154  9803              LDR      r0,[sp,#0xc]          ;2526
000156  6028              STR      r0,[r5,#0]            ;2526
000158  6828              LDR      r0,[r5,#0]            ;2527
00015a  88c0              LDRH     r0,[r0,#6]            ;2527
00015c  80a8              STRH     r0,[r5,#4]            ;2527
                  |L22.350|
00015e  4638              MOV      r0,r7                 ;2531
000160  e755              B        |L22.14|
;;;2533   
                          ENDP


                          AREA ||i.f_opendir||, CODE, READONLY, ALIGN=1

                  f_opendir PROC
;;;3142   
;;;3143   FRESULT f_opendir (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3144   	DIR* dp,			/* Pointer to directory object to create */
;;;3145   	const TCHAR* path	/* Pointer to the directory path */
;;;3146   )
;;;3147   {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
;;;3148   	FRESULT res;
;;;3149   	FATFS* fs;
;;;3150   	DEFINE_NAMEBUF;
;;;3151   
;;;3152   
;;;3153   	if (!dp) return FR_INVALID_OBJECT;
000006  b914              CBNZ     r4,|L23.14|
000008  2009              MOVS     r0,#9
                  |L23.10|
;;;3154   
;;;3155   	/* Get logical drive number */
;;;3156   	res = find_volume(&fs, &path, 0);
;;;3157   	if (res == FR_OK) {
;;;3158   		dp->fs = fs;
;;;3159   		INIT_BUF(*dp);
;;;3160   		res = follow_path(dp, path);			/* Follow the path to the directory */
;;;3161   		FREE_BUF();
;;;3162   		if (res == FR_OK) {						/* Follow completed */
;;;3163   			if (dp->dir) {						/* It is not the origin directory itself */
;;;3164   				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
;;;3165   					dp->sclust = ld_clust(fs, dp->dir);
;;;3166   				else							/* The object is a file */
;;;3167   					res = FR_NO_PATH;
;;;3168   			}
;;;3169   			if (res == FR_OK) {
;;;3170   				dp->id = fs->id;
;;;3171   				res = dir_sdi(dp, 0);			/* Rewind directory */
;;;3172   #if _FS_LOCK
;;;3173   				if (res == FR_OK) {
;;;3174   					if (dp->sclust) {
;;;3175   						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
;;;3176   						if (!dp->lockid)
;;;3177   							res = FR_TOO_MANY_OPEN_FILES;
;;;3178   					} else {
;;;3179   						dp->lockid = 0;	/* Root directory need not to be locked */
;;;3180   					}
;;;3181   				}
;;;3182   #endif
;;;3183   			}
;;;3184   		}
;;;3185   		if (res == FR_NO_FILE) res = FR_NO_PATH;
;;;3186   	}
;;;3187   	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
;;;3188   
;;;3189   	LEAVE_FF(fs, res);
;;;3190   }
00000a  b007              ADD      sp,sp,#0x1c
00000c  bd30              POP      {r4,r5,pc}
                  |L23.14|
00000e  2200              MOVS     r2,#0                 ;3156
000010  a906              ADD      r1,sp,#0x18           ;3156
000012  a804              ADD      r0,sp,#0x10           ;3156
000014  f7fffffe          BL       find_volume
000018  4605              MOV      r5,r0                 ;3156
00001a  bb1d              CBNZ     r5,|L23.100|
00001c  9804              LDR      r0,[sp,#0x10]         ;3158
00001e  6020              STR      r0,[r4,#0]            ;3158
000020  a801              ADD      r0,sp,#4              ;3159
000022  61a0              STR      r0,[r4,#0x18]         ;3159
000024  4620              MOV      r0,r4                 ;3160
000026  9906              LDR      r1,[sp,#0x18]         ;3160
000028  f7fffffe          BL       follow_path
00002c  4605              MOV      r5,r0                 ;3160
00002e  b9b5              CBNZ     r5,|L23.94|
000030  6960              LDR      r0,[r4,#0x14]         ;3163
000032  b158              CBZ      r0,|L23.76|
000034  6960              LDR      r0,[r4,#0x14]         ;3164
000036  7ac0              LDRB     r0,[r0,#0xb]          ;3164
000038  f0000010          AND      r0,r0,#0x10           ;3164
00003c  b128              CBZ      r0,|L23.74|
00003e  6961              LDR      r1,[r4,#0x14]         ;3165
000040  9804              LDR      r0,[sp,#0x10]         ;3165
000042  f7fffffe          BL       ld_clust
000046  60a0              STR      r0,[r4,#8]            ;3165
000048  e000              B        |L23.76|
                  |L23.74|
00004a  2505              MOVS     r5,#5                 ;3167
                  |L23.76|
00004c  b93d              CBNZ     r5,|L23.94|
00004e  9804              LDR      r0,[sp,#0x10]         ;3170
000050  88c0              LDRH     r0,[r0,#6]            ;3170
000052  80a0              STRH     r0,[r4,#4]            ;3170
000054  2100              MOVS     r1,#0                 ;3171
000056  4620              MOV      r0,r4                 ;3171
000058  f7fffffe          BL       dir_sdi
00005c  4605              MOV      r5,r0                 ;3171
                  |L23.94|
00005e  2d04              CMP      r5,#4                 ;3185
000060  d100              BNE      |L23.100|
000062  2505              MOVS     r5,#5                 ;3185
                  |L23.100|
000064  b10d              CBZ      r5,|L23.106|
000066  2000              MOVS     r0,#0                 ;3187
000068  6020              STR      r0,[r4,#0]            ;3187
                  |L23.106|
00006a  4628              MOV      r0,r5                 ;3189
00006c  e7cd              B        |L23.10|
;;;3191   
                          ENDP


                          AREA ||i.f_read||, CODE, READONLY, ALIGN=1

                  f_read PROC
;;;2540   
;;;2541   FRESULT f_read (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2542   	FIL* fp, 		/* Pointer to the file object */
;;;2543   	void* buff,		/* Pointer to data buffer */
;;;2544   	UINT btr,		/* Number of bytes to read */
;;;2545   	UINT* br		/* Pointer to number of bytes read */
;;;2546   )
;;;2547   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469a              MOV      r10,r3
;;;2548   	FRESULT res;
;;;2549   	DWORD clst, sect, remain;
;;;2550   	UINT rcnt, cc;
;;;2551   	BYTE csect, *rbuff = (BYTE*)buff;
00000c  f8ddb010          LDR      r11,[sp,#0x10]
;;;2552   
;;;2553   
;;;2554   	*br = 0;	/* Clear read byte counter */
000010  2000              MOVS     r0,#0
000012  f8ca0000          STR      r0,[r10,#0]
;;;2555   
;;;2556   	res = validate(fp);							/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2557   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L24.42|
000022  9802              LDR      r0,[sp,#8]
                  |L24.36|
;;;2558   	if (fp->err)								/* Check error */
;;;2559   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2560   	if (!(fp->flag & FA_READ)) 					/* Check access mode */
;;;2561   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2562   	remain = fp->fsize - fp->fptr;
;;;2563   	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
;;;2564   
;;;2565   	for ( ;  btr;								/* Repeat until all data read */
;;;2566   		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
;;;2567   		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
;;;2568   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2569   			if (!csect) {						/* On the cluster boundary? */
;;;2570   				if (fp->fptr == 0) {			/* On the top of the file? */
;;;2571   					clst = fp->sclust;			/* Follow from the origin */
;;;2572   				} else {						/* Middle or end of the file */
;;;2573   #if _USE_FASTSEEK
;;;2574   					if (fp->cltbl)
;;;2575   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2576   					else
;;;2577   #endif
;;;2578   						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
;;;2579   				}
;;;2580   				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
;;;2581   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2582   				fp->clust = clst;				/* Update current cluster */
;;;2583   			}
;;;2584   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2585   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2586   			sect += csect;
;;;2587   			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
;;;2588   			if (cc) {							/* Read maximum contiguous sectors directly */
;;;2589   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2590   					cc = fp->fs->csize - csect;
;;;2591   				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
;;;2592   					ABORT(fp->fs, FR_DISK_ERR);
;;;2593   #if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
;;;2594   #if _FS_TINY
;;;2595   				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
;;;2596   					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
;;;2597   #else
;;;2598   				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
;;;2599   					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
;;;2600   #endif
;;;2601   #endif
;;;2602   				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
;;;2603   				continue;
;;;2604   			}
;;;2605   #if !_FS_TINY
;;;2606   			if (fp->dsect != sect) {			/* Load data sector if not in cache */
;;;2607   #if !_FS_READONLY
;;;2608   				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
;;;2609   					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2610   						ABORT(fp->fs, FR_DISK_ERR);
;;;2611   					fp->flag &= ~FA__DIRTY;
;;;2612   				}
;;;2613   #endif
;;;2614   				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
;;;2615   					ABORT(fp->fs, FR_DISK_ERR);
;;;2616   			}
;;;2617   #endif
;;;2618   			fp->dsect = sect;
;;;2619   		}
;;;2620   		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
;;;2621   		if (rcnt > btr) rcnt = btr;
;;;2622   #if _FS_TINY
;;;2623   		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
;;;2624   			ABORT(fp->fs, FR_DISK_ERR);
;;;2625   		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2626   #else
;;;2627   		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
;;;2628   #endif
;;;2629   	}
;;;2630   
;;;2631   	LEAVE_FF(fp->fs, FR_OK);
;;;2632   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L24.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2558
00002c  b108              CBZ      r0,|L24.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2559
000030  e7f8              B        |L24.36|
                  |L24.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2560
000034  f0000001          AND      r0,r0,#1              ;2560
000038  b908              CBNZ     r0,|L24.62|
00003a  2007              MOVS     r0,#7                 ;2561
00003c  e7f2              B        |L24.36|
                  |L24.62|
00003e  e9d41002          LDRD     r1,r0,[r4,#8]         ;2562
000042  1a40              SUBS     r0,r0,r1              ;2562
000044  9000              STR      r0,[sp,#0]            ;2562
000046  9800              LDR      r0,[sp,#0]            ;2563
000048  4285              CMP      r5,r0                 ;2563
00004a  d900              BLS      |L24.78|
00004c  9d00              LDR      r5,[sp,#0]            ;2563
                  |L24.78|
00004e  e0a2              B        |L24.406|
                  |L24.80|
000050  8920              LDRH     r0,[r4,#8]            ;2567
000052  f3c00008          UBFX     r0,r0,#0,#9           ;2567
000056  2800              CMP      r0,#0                 ;2567
000058  d17e              BNE      |L24.344|
00005a  6820              LDR      r0,[r4,#0]            ;2568
00005c  7880              LDRB     r0,[r0,#2]            ;2568
00005e  1e40              SUBS     r0,r0,#1              ;2568
000060  68a1              LDR      r1,[r4,#8]            ;2568
000062  ea002051          AND      r0,r0,r1,LSR #9       ;2568
000066  f00009ff          AND      r9,r0,#0xff           ;2568
00006a  f1b90f00          CMP      r9,#0                 ;2569
00006e  d117              BNE      |L24.160|
000070  68a0              LDR      r0,[r4,#8]            ;2570
000072  b910              CBNZ     r0,|L24.122|
000074  6920              LDR      r0,[r4,#0x10]         ;2571
000076  9001              STR      r0,[sp,#4]            ;2571
000078  e004              B        |L24.132|
                  |L24.122|
00007a  6961              LDR      r1,[r4,#0x14]         ;2578
00007c  6820              LDR      r0,[r4,#0]            ;2578
00007e  f7fffffe          BL       get_fat
000082  9001              STR      r0,[sp,#4]            ;2578
                  |L24.132|
000084  9801              LDR      r0,[sp,#4]            ;2580
000086  2802              CMP      r0,#2                 ;2580
000088  d202              BCS      |L24.144|
00008a  2002              MOVS     r0,#2                 ;2580
00008c  71e0              STRB     r0,[r4,#7]            ;2580
00008e  e7c9              B        |L24.36|
                  |L24.144|
000090  9801              LDR      r0,[sp,#4]            ;2581
000092  1c40              ADDS     r0,r0,#1              ;2581
000094  b910              CBNZ     r0,|L24.156|
000096  2001              MOVS     r0,#1                 ;2581
000098  71e0              STRB     r0,[r4,#7]            ;2581
00009a  e7c3              B        |L24.36|
                  |L24.156|
00009c  9801              LDR      r0,[sp,#4]            ;2582
00009e  6160              STR      r0,[r4,#0x14]         ;2582
                  |L24.160|
0000a0  6961              LDR      r1,[r4,#0x14]         ;2584
0000a2  6820              LDR      r0,[r4,#0]            ;2584
0000a4  f7fffffe          BL       clust2sect
0000a8  4606              MOV      r6,r0                 ;2584
0000aa  b916              CBNZ     r6,|L24.178|
0000ac  2002              MOVS     r0,#2                 ;2585
0000ae  71e0              STRB     r0,[r4,#7]            ;2585
0000b0  e7b8              B        |L24.36|
                  |L24.178|
0000b2  444e              ADD      r6,r6,r9              ;2586
0000b4  ea4f2855          LSR      r8,r5,#9              ;2587
0000b8  f1b80f00          CMP      r8,#0                 ;2588
0000bc  d029              BEQ      |L24.274|
0000be  eb090008          ADD      r0,r9,r8              ;2589
0000c2  6821              LDR      r1,[r4,#0]            ;2589
0000c4  7889              LDRB     r1,[r1,#2]            ;2589
0000c6  4288              CMP      r0,r1                 ;2589
0000c8  d903              BLS      |L24.210|
0000ca  6820              LDR      r0,[r4,#0]            ;2590
0000cc  7880              LDRB     r0,[r0,#2]            ;2590
0000ce  eba00809          SUB      r8,r0,r9              ;2590
                  |L24.210|
0000d2  6821              LDR      r1,[r4,#0]            ;2591
0000d4  7848              LDRB     r0,[r1,#1]            ;2591
0000d6  4643              MOV      r3,r8                 ;2591
0000d8  4632              MOV      r2,r6                 ;2591
0000da  4659              MOV      r1,r11                ;2591
0000dc  f7fffffe          BL       disk_read
0000e0  b110              CBZ      r0,|L24.232|
0000e2  2001              MOVS     r0,#1                 ;2592
0000e4  71e0              STRB     r0,[r4,#7]            ;2592
0000e6  e79d              B        |L24.36|
                  |L24.232|
0000e8  79a0              LDRB     r0,[r4,#6]            ;2598
0000ea  f0000040          AND      r0,r0,#0x40           ;2598
0000ee  b168              CBZ      r0,|L24.268|
0000f0  69a0              LDR      r0,[r4,#0x18]         ;2598
0000f2  1b80              SUBS     r0,r0,r6              ;2598
0000f4  4540              CMP      r0,r8                 ;2598
0000f6  d209              BCS      |L24.268|
0000f8  69a1              LDR      r1,[r4,#0x18]         ;2599
0000fa  1b89              SUBS     r1,r1,r6              ;2599
0000fc  eb0b2041          ADD      r0,r11,r1,LSL #9      ;2599
000100  f44f7200          MOV      r2,#0x200             ;2599
000104  f1040124          ADD      r1,r4,#0x24           ;2599
000108  f7fffffe          BL       mem_cpy
                  |L24.268|
00010c  ea4f2748          LSL      r7,r8,#9              ;2602
000110  e037              B        |L24.386|
                  |L24.274|
000112  69a0              LDR      r0,[r4,#0x18]         ;2606
000114  42b0              CMP      r0,r6                 ;2606
000116  d020              BEQ      |L24.346|
000118  79a0              LDRB     r0,[r4,#6]            ;2608
00011a  f0000040          AND      r0,r0,#0x40           ;2608
00011e  b178              CBZ      r0,|L24.320|
000120  6821              LDR      r1,[r4,#0]            ;2609
000122  7848              LDRB     r0,[r1,#1]            ;2609
000124  2301              MOVS     r3,#1                 ;2609
000126  f1040124          ADD      r1,r4,#0x24           ;2609
00012a  69a2              LDR      r2,[r4,#0x18]         ;2609
00012c  f7fffffe          BL       disk_write
000130  b110              CBZ      r0,|L24.312|
000132  2001              MOVS     r0,#1                 ;2610
000134  71e0              STRB     r0,[r4,#7]            ;2610
000136  e775              B        |L24.36|
                  |L24.312|
000138  79a0              LDRB     r0,[r4,#6]            ;2611
00013a  f0200040          BIC      r0,r0,#0x40           ;2611
00013e  71a0              STRB     r0,[r4,#6]            ;2611
                  |L24.320|
000140  6821              LDR      r1,[r4,#0]            ;2614
000142  7848              LDRB     r0,[r1,#1]            ;2614
000144  2301              MOVS     r3,#1                 ;2614
000146  4632              MOV      r2,r6                 ;2614
000148  f1040124          ADD      r1,r4,#0x24           ;2614
00014c  f7fffffe          BL       disk_read
000150  b118              CBZ      r0,|L24.346|
000152  2001              MOVS     r0,#1                 ;2615
000154  71e0              STRB     r0,[r4,#7]            ;2615
000156  e765              B        |L24.36|
                  |L24.344|
000158  e000              B        |L24.348|
                  |L24.346|
00015a  61a6              STR      r6,[r4,#0x18]         ;2618
                  |L24.348|
00015c  8920              LDRH     r0,[r4,#8]            ;2620
00015e  f3c00008          UBFX     r0,r0,#0,#9           ;2620
000162  f5c07700          RSB      r7,r0,#0x200          ;2620
000166  42af              CMP      r7,r5                 ;2621
000168  d900              BLS      |L24.364|
00016a  462f              MOV      r7,r5                 ;2621
                  |L24.364|
00016c  8920              LDRH     r0,[r4,#8]            ;2627
00016e  f3c00208          UBFX     r2,r0,#0,#9           ;2627
000172  f1040024          ADD      r0,r4,#0x24           ;2627
000176  1811              ADDS     r1,r2,r0              ;2627
000178  463a              MOV      r2,r7                 ;2627
00017a  4658              MOV      r0,r11                ;2627
00017c  f7fffffe          BL       mem_cpy
000180  bf00              NOP                            ;2603
                  |L24.386|
000182  44bb              ADD      r11,r11,r7            ;2566
000184  68a0              LDR      r0,[r4,#8]            ;2566
000186  4438              ADD      r0,r0,r7              ;2566
000188  60a0              STR      r0,[r4,#8]            ;2566
00018a  f8da0000          LDR      r0,[r10,#0]           ;2566
00018e  4438              ADD      r0,r0,r7              ;2566
000190  f8ca0000          STR      r0,[r10,#0]           ;2566
000194  1bed              SUBS     r5,r5,r7              ;2566
                  |L24.406|
000196  2d00              CMP      r5,#0                 ;2565
000198  f47faf5a          BNE      |L24.80|
00019c  2000              MOVS     r0,#0                 ;2631
00019e  e741              B        |L24.36|
;;;2633   
                          ENDP


                          AREA ||i.f_readdir||, CODE, READONLY, ALIGN=1

                  f_readdir PROC
;;;3230   
;;;3231   FRESULT f_readdir (
000000  b5fe              PUSH     {r1-r7,lr}
;;;3232   	DIR* dp,			/* Pointer to the open directory object */
;;;3233   	FILINFO* fno		/* Pointer to file information to return */
;;;3234   )
;;;3235   {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;3236   	FRESULT res;
;;;3237   	DEFINE_NAMEBUF;
;;;3238   
;;;3239   
;;;3240   	res = validate(dp);						/* Check validity of the object */
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       validate
00000c  4604              MOV      r4,r0
;;;3241   	if (res == FR_OK) {
00000e  bb0c              CBNZ     r4,|L25.84|
;;;3242   		if (!fno) {
000010  b92e              CBNZ     r6,|L25.30|
;;;3243   			res = dir_sdi(dp, 0);			/* Rewind the directory object */
000012  2100              MOVS     r1,#0
000014  4628              MOV      r0,r5
000016  f7fffffe          BL       dir_sdi
00001a  4604              MOV      r4,r0
00001c  e01a              B        |L25.84|
                  |L25.30|
;;;3244   		} else {
;;;3245   			INIT_BUF(*dp);
00001e  f8c5d018          STR      sp,[r5,#0x18]
;;;3246   			res = dir_read(dp, 0);			/* Read an item */
000022  2100              MOVS     r1,#0
000024  4628              MOV      r0,r5
000026  f7fffffe          BL       dir_read
00002a  4604              MOV      r4,r0
;;;3247   			if (res == FR_NO_FILE) {		/* Reached end of directory */
00002c  2c04              CMP      r4,#4
00002e  d102              BNE      |L25.54|
;;;3248   				dp->sect = 0;
000030  2000              MOVS     r0,#0
000032  6128              STR      r0,[r5,#0x10]
;;;3249   				res = FR_OK;
000034  2400              MOVS     r4,#0
                  |L25.54|
;;;3250   			}
;;;3251   			if (res == FR_OK) {				/* A valid entry is found */
000036  b96c              CBNZ     r4,|L25.84|
;;;3252   				get_fileinfo(dp, fno);		/* Get the object information */
000038  4631              MOV      r1,r6
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       get_fileinfo
;;;3253   				res = dir_next(dp, 0);		/* Increment index for next */
000040  2100              MOVS     r1,#0
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       dir_next
000048  4604              MOV      r4,r0
;;;3254   				if (res == FR_NO_FILE) {
00004a  2c04              CMP      r4,#4
00004c  d102              BNE      |L25.84|
;;;3255   					dp->sect = 0;
00004e  2000              MOVS     r0,#0
000050  6128              STR      r0,[r5,#0x10]
;;;3256   					res = FR_OK;
000052  2400              MOVS     r4,#0
                  |L25.84|
;;;3257   				}
;;;3258   			}
;;;3259   			FREE_BUF();
;;;3260   		}
;;;3261   	}
;;;3262   
;;;3263   	LEAVE_FF(dp->fs, res);
000054  4620              MOV      r0,r4
;;;3264   }
000056  bdfe              POP      {r1-r7,pc}
;;;3265   
                          ENDP


                          AREA ||i.f_rename||, CODE, READONLY, ALIGN=1

                  f_rename PROC
;;;3668   
;;;3669   FRESULT f_rename (
000000  b5f3              PUSH     {r0,r1,r4-r7,lr}
;;;3670   	const TCHAR* path_old,	/* Pointer to the object to be renamed */
;;;3671   	const TCHAR* path_new	/* Pointer to the new name */
;;;3672   )
;;;3673   {
000002  b097              SUB      sp,sp,#0x5c
;;;3674   	FRESULT res;
;;;3675   	DIR djo, djn;
;;;3676   	BYTE buf[21], *dir;
;;;3677   	DWORD dw;
;;;3678   	DEFINE_NAMEBUF;
;;;3679   
;;;3680   
;;;3681   	/* Get logical drive number of the source object */
;;;3682   	res = find_volume(&djo.fs, &path_old, 1);
000004  2201              MOVS     r2,#1
000006  a917              ADD      r1,sp,#0x5c
000008  a810              ADD      r0,sp,#0x40
00000a  f7fffffe          BL       find_volume
00000e  4604              MOV      r4,r0
;;;3683   	if (res == FR_OK) {
000010  2c00              CMP      r4,#0
000012  d173              BNE      |L26.252|
;;;3684   		djn.fs = djo.fs;
000014  9810              LDR      r0,[sp,#0x40]
000016  9009              STR      r0,[sp,#0x24]
;;;3685   		INIT_BUF(djo);
000018  f8cdd058          STR      sp,[sp,#0x58]
;;;3686   		res = follow_path(&djo, path_old);		/* Check old object */
00001c  a810              ADD      r0,sp,#0x40
00001e  9917              LDR      r1,[sp,#0x5c]
000020  f7fffffe          BL       follow_path
000024  4604              MOV      r4,r0
;;;3687   		if (_FS_RPATH && res == FR_OK && (djo.fn[NSFLAG] & NS_DOT))
000026  bf00              NOP      
;;;3688   			res = FR_INVALID_NAME;
;;;3689   #if _FS_LOCK
;;;3690   		if (res == FR_OK) res = chk_lock(&djo, 2);
;;;3691   #endif
;;;3692   		if (res == FR_OK) {						/* Old object is found */
000028  2c00              CMP      r4,#0
00002a  d167              BNE      |L26.252|
;;;3693   			if (!djo.dir) {						/* Is root dir? */
00002c  9815              LDR      r0,[sp,#0x54]
00002e  b908              CBNZ     r0,|L26.52|
;;;3694   				res = FR_NO_FILE;
000030  2404              MOVS     r4,#4
000032  e063              B        |L26.252|
                  |L26.52|
;;;3695   			} else {
;;;3696   				mem_cpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about object except name */
000034  9815              LDR      r0,[sp,#0x54]
000036  f100010b          ADD      r1,r0,#0xb
00003a  2215              MOVS     r2,#0x15
00003c  a803              ADD      r0,sp,#0xc
00003e  f7fffffe          BL       mem_cpy
;;;3697   				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
000042  221c              MOVS     r2,#0x1c
000044  a910              ADD      r1,sp,#0x40
000046  a809              ADD      r0,sp,#0x24
000048  f7fffffe          BL       mem_cpy
;;;3698   				if (get_ldnumber(&path_new) >= 0)		/* Snip drive number off and ignore it */
00004c  a818              ADD      r0,sp,#0x60
00004e  f7fffffe          BL       get_ldnumber
000052  2800              CMP      r0,#0
000054  db05              BLT      |L26.98|
;;;3699   					res = follow_path(&djn, path_new);	/* and make sure if new object name is not conflicting */
000056  a809              ADD      r0,sp,#0x24
000058  9918              LDR      r1,[sp,#0x60]
00005a  f7fffffe          BL       follow_path
00005e  4604              MOV      r4,r0
000060  e000              B        |L26.100|
                  |L26.98|
;;;3700   				else
;;;3701   					res = FR_INVALID_DRIVE;
000062  240b              MOVS     r4,#0xb
                  |L26.100|
;;;3702   				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
000064  b904              CBNZ     r4,|L26.104|
000066  2408              MOVS     r4,#8
                  |L26.104|
;;;3703   				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
000068  2c04              CMP      r4,#4
00006a  d147              BNE      |L26.252|
;;;3704   					res = dir_register(&djn);			/* Register the new entry */
00006c  a809              ADD      r0,sp,#0x24
00006e  f7fffffe          BL       dir_register
000072  4604              MOV      r4,r0
;;;3705   					if (res == FR_OK) {
000074  2c00              CMP      r4,#0
000076  d141              BNE      |L26.252|
;;;3706   /* Start of critical section where any interruption can cause a cross-link */
;;;3707   						dir = djn.dir;					/* Copy information about object except name */
000078  9d0e              LDR      r5,[sp,#0x38]
;;;3708   						mem_cpy(dir + 13, buf + 2, 19);
00007a  2213              MOVS     r2,#0x13
00007c  f10d010e          ADD      r1,sp,#0xe
000080  f105000d          ADD      r0,r5,#0xd
000084  f7fffffe          BL       mem_cpy
;;;3709   						dir[DIR_Attr] = buf[0] | AM_ARC;
000088  f89d000c          LDRB     r0,[sp,#0xc]
00008c  f0400020          ORR      r0,r0,#0x20
000090  72e8              STRB     r0,[r5,#0xb]
;;;3710   						djo.fs->wflag = 1;
000092  2001              MOVS     r0,#1
000094  9910              LDR      r1,[sp,#0x40]
000096  7108              STRB     r0,[r1,#4]
;;;3711   						if ((dir[DIR_Attr] & AM_DIR) && djo.sclust != djn.sclust) {	/* Update .. entry in the sub-directory if needed */
000098  7ae8              LDRB     r0,[r5,#0xb]
00009a  f0000010          AND      r0,r0,#0x10
00009e  b318              CBZ      r0,|L26.232|
0000a0  990b              LDR      r1,[sp,#0x2c]
0000a2  9812              LDR      r0,[sp,#0x48]
0000a4  4288              CMP      r0,r1
0000a6  d01f              BEQ      |L26.232|
;;;3712   							dw = clust2sect(djo.fs, ld_clust(djo.fs, dir));
0000a8  4629              MOV      r1,r5
0000aa  9810              LDR      r0,[sp,#0x40]
0000ac  f7fffffe          BL       ld_clust
0000b0  4607              MOV      r7,r0
0000b2  4639              MOV      r1,r7
0000b4  9810              LDR      r0,[sp,#0x40]
0000b6  f7fffffe          BL       clust2sect
0000ba  4606              MOV      r6,r0
;;;3713   							if (!dw) {
0000bc  b90e              CBNZ     r6,|L26.194|
;;;3714   								res = FR_INT_ERR;
0000be  2402              MOVS     r4,#2
0000c0  e012              B        |L26.232|
                  |L26.194|
;;;3715   							} else {
;;;3716   								res = move_window(djo.fs, dw);
0000c2  4631              MOV      r1,r6
0000c4  9810              LDR      r0,[sp,#0x40]
0000c6  f7fffffe          BL       move_window
0000ca  4604              MOV      r4,r0
;;;3717   								dir = djo.fs->win + SZ_DIRE * 1;	/* Ptr to .. entry */
0000cc  9810              LDR      r0,[sp,#0x40]
0000ce  f1000550          ADD      r5,r0,#0x50
;;;3718   								if (res == FR_OK && dir[1] == '.') {
0000d2  b94c              CBNZ     r4,|L26.232|
0000d4  7868              LDRB     r0,[r5,#1]
0000d6  282e              CMP      r0,#0x2e
0000d8  d106              BNE      |L26.232|
;;;3719   									st_clust(dir, djn.sclust);
0000da  4628              MOV      r0,r5
0000dc  990b              LDR      r1,[sp,#0x2c]
0000de  f7fffffe          BL       st_clust
;;;3720   									djo.fs->wflag = 1;
0000e2  2001              MOVS     r0,#1
0000e4  9910              LDR      r1,[sp,#0x40]
0000e6  7108              STRB     r0,[r1,#4]
                  |L26.232|
;;;3721   								}
;;;3722   							}
;;;3723   						}
;;;3724   						if (res == FR_OK) {
0000e8  b944              CBNZ     r4,|L26.252|
;;;3725   							res = dir_remove(&djo);		/* Remove old entry */
0000ea  a810              ADD      r0,sp,#0x40
0000ec  f7fffffe          BL       dir_remove
0000f0  4604              MOV      r4,r0
;;;3726   							if (res == FR_OK)
0000f2  b91c              CBNZ     r4,|L26.252|
;;;3727   								res = sync_fs(djo.fs);
0000f4  9810              LDR      r0,[sp,#0x40]
0000f6  f7fffffe          BL       sync_fs
0000fa  4604              MOV      r4,r0
                  |L26.252|
;;;3728   						}
;;;3729   /* End of critical section */
;;;3730   					}
;;;3731   				}
;;;3732   			}
;;;3733   		}
;;;3734   		FREE_BUF();
;;;3735   	}
;;;3736   
;;;3737   	LEAVE_FF(djo.fs, res);
0000fc  4620              MOV      r0,r4
;;;3738   }
0000fe  b019              ADD      sp,sp,#0x64
000100  bdf0              POP      {r4-r7,pc}
;;;3739   
                          ENDP


                          AREA ||i.f_setlabel||, CODE, READONLY, ALIGN=2

                  f_setlabel PROC
;;;3861   
;;;3862   FRESULT f_setlabel (
000000  e92d43f1          PUSH     {r0,r4-r9,lr}
;;;3863   	const TCHAR* label	/* Pointer to the volume label to set */
;;;3864   )
;;;3865   {
000004  b08a              SUB      sp,sp,#0x28
;;;3866   	FRESULT res;
;;;3867   	DIR dj;
;;;3868   	BYTE vn[11];
;;;3869   	UINT i, j, sl;
;;;3870   	WCHAR w;
;;;3871   	DWORD tm;
;;;3872   
;;;3873   
;;;3874   	/* Get logical drive number */
;;;3875   	res = find_volume(&dj.fs, &label, 1);
000006  2201              MOVS     r2,#1
000008  a90a              ADD      r1,sp,#0x28
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       find_volume
000010  4681              MOV      r9,r0
;;;3876   	if (res) LEAVE_FF(dj.fs, res);
000012  f1b90f00          CMP      r9,#0
000016  d003              BEQ      |L27.32|
000018  4648              MOV      r0,r9
                  |L27.26|
;;;3877   
;;;3878   	/* Create a volume label in directory form */
;;;3879   	vn[0] = 0;
;;;3880   	for (sl = 0; label[sl]; sl++) ;				/* Get name length */
;;;3881   	for ( ; sl && label[sl - 1] == ' '; sl--) ;	/* Remove trailing spaces */
;;;3882   	if (sl) {	/* Create volume label in directory form */
;;;3883   		i = j = 0;
;;;3884   		do {
;;;3885   #if _USE_LFN && _LFN_UNICODE
;;;3886   			w = ff_convert(ff_wtoupper(label[i++]), 0);
;;;3887   #else
;;;3888   			w = (BYTE)label[i++];
;;;3889   			if (IsDBCS1(w))
;;;3890   				w = (j < 10 && i < sl && IsDBCS2(label[i])) ? w << 8 | (BYTE)label[i++] : 0;
;;;3891   #if _USE_LFN
;;;3892   			w = ff_convert(ff_wtoupper(ff_convert(w, 1)), 0);
;;;3893   #else
;;;3894   			if (IsLower(w)) w -= 0x20;			/* To upper ASCII characters */
;;;3895   #ifdef _EXCVT
;;;3896   			if (w >= 0x80) w = ExCvt[w - 0x80];	/* To upper extended characters (SBCS cfg) */
;;;3897   #else
;;;3898   			if (!_DF1S && w >= 0x80) w = 0;		/* Reject extended characters (ASCII cfg) */
;;;3899   #endif
;;;3900   #endif
;;;3901   #endif
;;;3902   			if (!w || chk_chr("\"*+,.:;<=>\?[]|\x7F", w) || j >= (UINT)((w >= 0x100) ? 10 : 11)) /* Reject invalid characters for volume label */
;;;3903   				LEAVE_FF(dj.fs, FR_INVALID_NAME);
;;;3904   			if (w >= 0x100) vn[j++] = (BYTE)(w >> 8);
;;;3905   			vn[j++] = (BYTE)w;
;;;3906   		} while (i < sl);
;;;3907   		while (j < 11) vn[j++] = ' ';	/* Fill remaining name field */
;;;3908   		if (vn[0] == DDEM) LEAVE_FF(dj.fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
;;;3909   	}
;;;3910   
;;;3911   	/* Set volume label */
;;;3912   	dj.sclust = 0;					/* Open root directory */
;;;3913   	res = dir_sdi(&dj, 0);
;;;3914   	if (res == FR_OK) {
;;;3915   		res = dir_read(&dj, 1);		/* Get an entry with AM_VOL */
;;;3916   		if (res == FR_OK) {			/* A volume label is found */
;;;3917   			if (vn[0]) {
;;;3918   				mem_cpy(dj.dir, vn, 11);	/* Change the volume label name */
;;;3919   				tm = GET_FATTIME();
;;;3920   				ST_DWORD(dj.dir + DIR_WrtTime, tm);
;;;3921   			} else {
;;;3922   				dj.dir[0] = DDEM;			/* Remove the volume label */
;;;3923   			}
;;;3924   			dj.fs->wflag = 1;
;;;3925   			res = sync_fs(dj.fs);
;;;3926   		} else {					/* No volume label is found or error */
;;;3927   			if (res == FR_NO_FILE) {
;;;3928   				res = FR_OK;
;;;3929   				if (vn[0]) {				/* Create volume label as new */
;;;3930   					res = dir_alloc(&dj, 1);	/* Allocate an entry for volume label */
;;;3931   					if (res == FR_OK) {
;;;3932   						mem_set(dj.dir, 0, SZ_DIRE);	/* Set volume label */
;;;3933   						mem_cpy(dj.dir, vn, 11);
;;;3934   						dj.dir[DIR_Attr] = AM_VOL;
;;;3935   						tm = GET_FATTIME();
;;;3936   						ST_DWORD(dj.dir + DIR_WrtTime, tm);
;;;3937   						dj.fs->wflag = 1;
;;;3938   						res = sync_fs(dj.fs);
;;;3939   					}
;;;3940   				}
;;;3941   			}
;;;3942   		}
;;;3943   	}
;;;3944   
;;;3945   	LEAVE_FF(dj.fs, res);
;;;3946   }
00001a  b00b              ADD      sp,sp,#0x2c
00001c  e8bd83f0          POP      {r4-r9,pc}
                  |L27.32|
000020  2000              MOVS     r0,#0                 ;3879
000022  f88d0000          STRB     r0,[sp,#0]            ;3879
000026  2700              MOVS     r7,#0                 ;3880
000028  e000              B        |L27.44|
                  |L27.42|
00002a  1c7f              ADDS     r7,r7,#1              ;3880
                  |L27.44|
00002c  980a              LDR      r0,[sp,#0x28]         ;3880
00002e  5dc0              LDRB     r0,[r0,r7]            ;3880
000030  2800              CMP      r0,#0                 ;3880
000032  d1fa              BNE      |L27.42|
000034  e000              B        |L27.56|
                  |L27.54|
000036  1e7f              SUBS     r7,r7,#1              ;3881
                  |L27.56|
000038  b127              CBZ      r7,|L27.68|
00003a  1e78              SUBS     r0,r7,#1              ;3881
00003c  990a              LDR      r1,[sp,#0x28]         ;3881
00003e  5c08              LDRB     r0,[r1,r0]            ;3881
000040  2820              CMP      r0,#0x20              ;3881
000042  d0f8              BEQ      |L27.54|
                  |L27.68|
000044  2f00              CMP      r7,#0                 ;3882
000046  d060              BEQ      |L27.266|
000048  2600              MOVS     r6,#0                 ;3883
00004a  46b0              MOV      r8,r6                 ;3883
00004c  bf00              NOP                            ;3884
                  |L27.78|
00004e  4630              MOV      r0,r6                 ;3888
000050  1c76              ADDS     r6,r6,#1              ;3888
000052  990a              LDR      r1,[sp,#0x28]         ;3888
000054  5c0c              LDRB     r4,[r1,r0]            ;3888
000056  2c81              CMP      r4,#0x81              ;3889
000058  db20              BLT      |L27.156|
00005a  b2e0              UXTB     r0,r4                 ;3889
00005c  28fe              CMP      r0,#0xfe              ;3889
00005e  dc1d              BGT      |L27.156|
000060  f1b80f0a          CMP      r8,#0xa               ;3890
000064  d218              BCS      |L27.152|
000066  42be              CMP      r6,r7                 ;3890
000068  d216              BCS      |L27.152|
00006a  980a              LDR      r0,[sp,#0x28]         ;3890
00006c  5d80              LDRB     r0,[r0,r6]            ;3890
00006e  2840              CMP      r0,#0x40              ;3890
000070  db03              BLT      |L27.122|
000072  980a              LDR      r0,[sp,#0x28]         ;3890
000074  5d80              LDRB     r0,[r0,r6]            ;3890
000076  287e              CMP      r0,#0x7e              ;3890
000078  dd07              BLE      |L27.138|
                  |L27.122|
00007a  980a              LDR      r0,[sp,#0x28]         ;3890
00007c  5d80              LDRB     r0,[r0,r6]            ;3890
00007e  2880              CMP      r0,#0x80              ;3890
000080  db0a              BLT      |L27.152|
000082  980a              LDR      r0,[sp,#0x28]         ;3890
000084  5d80              LDRB     r0,[r0,r6]            ;3890
000086  28fe              CMP      r0,#0xfe              ;3890
000088  dc06              BGT      |L27.152|
                  |L27.138|
00008a  4630              MOV      r0,r6                 ;3890
00008c  1c76              ADDS     r6,r6,#1              ;3890
00008e  990a              LDR      r1,[sp,#0x28]         ;3890
000090  5c08              LDRB     r0,[r1,r0]            ;3890
000092  ea402004          ORR      r0,r0,r4,LSL #8       ;3890
000096  e000              B        |L27.154|
                  |L27.152|
000098  2000              MOVS     r0,#0                 ;3890
                  |L27.154|
00009a  b284              UXTH     r4,r0                 ;3890
                  |L27.156|
00009c  2c61              CMP      r4,#0x61              ;3894
00009e  db04              BLT      |L27.170|
0000a0  2c7a              CMP      r4,#0x7a              ;3894
0000a2  dc02              BGT      |L27.170|
0000a4  f1a40020          SUB      r0,r4,#0x20           ;3894
0000a8  b284              UXTH     r4,r0                 ;3894
                  |L27.170|
0000aa  bf00              NOP                            ;3898
0000ac  b15c              CBZ      r4,|L27.198|
0000ae  4621              MOV      r1,r4                 ;3902
0000b0  a04a              ADR      r0,|L27.476|
0000b2  f7fffffe          BL       chk_chr
0000b6  b930              CBNZ     r0,|L27.198|
0000b8  2cff              CMP      r4,#0xff              ;3902
0000ba  dd01              BLE      |L27.192|
0000bc  200a              MOVS     r0,#0xa               ;3902
0000be  e000              B        |L27.194|
                  |L27.192|
0000c0  200b              MOVS     r0,#0xb               ;3902
                  |L27.194|
0000c2  4540              CMP      r0,r8                 ;3902
0000c4  d801              BHI      |L27.202|
                  |L27.198|
0000c6  2006              MOVS     r0,#6                 ;3903
0000c8  e7a7              B        |L27.26|
                  |L27.202|
0000ca  2cff              CMP      r4,#0xff              ;3904
0000cc  dd05              BLE      |L27.218|
0000ce  1222              ASRS     r2,r4,#8              ;3904
0000d0  4640              MOV      r0,r8                 ;3904
0000d2  f1080801          ADD      r8,r8,#1              ;3904
0000d6  f80d2000          STRB     r2,[sp,r0]            ;3904
                  |L27.218|
0000da  b2e2              UXTB     r2,r4                 ;3905
0000dc  4640              MOV      r0,r8                 ;3905
0000de  f1080801          ADD      r8,r8,#1              ;3905
0000e2  f80d2000          STRB     r2,[sp,r0]            ;3905
0000e6  42be              CMP      r6,r7                 ;3906
0000e8  d3b1              BCC      |L27.78|
0000ea  e005              B        |L27.248|
                  |L27.236|
0000ec  2220              MOVS     r2,#0x20              ;3907
0000ee  4640              MOV      r0,r8                 ;3907
0000f0  f1080801          ADD      r8,r8,#1              ;3907
0000f4  f80d2000          STRB     r2,[sp,r0]            ;3907
                  |L27.248|
0000f8  f1b80f0b          CMP      r8,#0xb               ;3907
0000fc  d3f6              BCC      |L27.236|
0000fe  f89d0000          LDRB     r0,[sp,#0]            ;3908
000102  28e5              CMP      r0,#0xe5              ;3908
000104  d101              BNE      |L27.266|
000106  2006              MOVS     r0,#6                 ;3908
000108  e787              B        |L27.26|
                  |L27.266|
00010a  2000              MOVS     r0,#0                 ;3912
00010c  9005              STR      r0,[sp,#0x14]         ;3912
00010e  2100              MOVS     r1,#0                 ;3913
000110  a803              ADD      r0,sp,#0xc            ;3913
000112  f7fffffe          BL       dir_sdi
000116  4681              MOV      r9,r0                 ;3913
000118  f1b90f00          CMP      r9,#0                 ;3914
00011c  d15b              BNE      |L27.470|
00011e  2101              MOVS     r1,#1                 ;3915
000120  a803              ADD      r0,sp,#0xc            ;3915
000122  f7fffffe          BL       dir_read
000126  4681              MOV      r9,r0                 ;3915
000128  f1b90f00          CMP      r9,#0                 ;3916
00012c  d121              BNE      |L27.370|
00012e  f89d0000          LDRB     r0,[sp,#0]            ;3917
000132  b198              CBZ      r0,|L27.348|
000134  220b              MOVS     r2,#0xb               ;3918
000136  4669              MOV      r1,sp                 ;3918
000138  9808              LDR      r0,[sp,#0x20]         ;3918
00013a  f7fffffe          BL       mem_cpy
00013e  f7fffffe          BL       get_fattime
000142  4605              MOV      r5,r0                 ;3919
000144  9908              LDR      r1,[sp,#0x20]         ;3920
000146  758d              STRB     r5,[r1,#0x16]         ;3920
000148  0a29              LSRS     r1,r5,#8              ;3920
00014a  9808              LDR      r0,[sp,#0x20]         ;3920
00014c  75c1              STRB     r1,[r0,#0x17]         ;3920
00014e  0c29              LSRS     r1,r5,#16             ;3920
000150  9808              LDR      r0,[sp,#0x20]         ;3920
000152  7601              STRB     r1,[r0,#0x18]         ;3920
000154  0e29              LSRS     r1,r5,#24             ;3920
000156  9808              LDR      r0,[sp,#0x20]         ;3920
000158  7641              STRB     r1,[r0,#0x19]         ;3920
00015a  e002              B        |L27.354|
                  |L27.348|
00015c  20e5              MOVS     r0,#0xe5              ;3922
00015e  9908              LDR      r1,[sp,#0x20]         ;3922
000160  7008              STRB     r0,[r1,#0]            ;3922
                  |L27.354|
000162  2001              MOVS     r0,#1                 ;3924
000164  9903              LDR      r1,[sp,#0xc]          ;3924
000166  7108              STRB     r0,[r1,#4]            ;3924
000168  9803              LDR      r0,[sp,#0xc]          ;3925
00016a  f7fffffe          BL       sync_fs
00016e  4681              MOV      r9,r0                 ;3925
000170  e031              B        |L27.470|
                  |L27.370|
000172  f1b90f04          CMP      r9,#4                 ;3927
000176  d12e              BNE      |L27.470|
000178  f04f0900          MOV      r9,#0                 ;3928
00017c  f89d0000          LDRB     r0,[sp,#0]            ;3929
000180  b348              CBZ      r0,|L27.470|
000182  2101              MOVS     r1,#1                 ;3930
000184  a803              ADD      r0,sp,#0xc            ;3930
000186  f7fffffe          BL       dir_alloc
00018a  4681              MOV      r9,r0                 ;3930
00018c  f1b90f00          CMP      r9,#0                 ;3931
000190  d121              BNE      |L27.470|
000192  2220              MOVS     r2,#0x20              ;3932
000194  2100              MOVS     r1,#0                 ;3932
000196  9808              LDR      r0,[sp,#0x20]         ;3932
000198  f7fffffe          BL       mem_set
00019c  220b              MOVS     r2,#0xb               ;3933
00019e  4669              MOV      r1,sp                 ;3933
0001a0  9808              LDR      r0,[sp,#0x20]         ;3933
0001a2  f7fffffe          BL       mem_cpy
0001a6  2008              MOVS     r0,#8                 ;3934
0001a8  9908              LDR      r1,[sp,#0x20]         ;3934
0001aa  72c8              STRB     r0,[r1,#0xb]          ;3934
0001ac  f7fffffe          BL       get_fattime
0001b0  4605              MOV      r5,r0                 ;3935
0001b2  9908              LDR      r1,[sp,#0x20]         ;3936
0001b4  758d              STRB     r5,[r1,#0x16]         ;3936
0001b6  0a29              LSRS     r1,r5,#8              ;3936
0001b8  9808              LDR      r0,[sp,#0x20]         ;3936
0001ba  75c1              STRB     r1,[r0,#0x17]         ;3936
0001bc  0c29              LSRS     r1,r5,#16             ;3936
0001be  9808              LDR      r0,[sp,#0x20]         ;3936
0001c0  7601              STRB     r1,[r0,#0x18]         ;3936
0001c2  0e29              LSRS     r1,r5,#24             ;3936
0001c4  9808              LDR      r0,[sp,#0x20]         ;3936
0001c6  7641              STRB     r1,[r0,#0x19]         ;3936
0001c8  2001              MOVS     r0,#1                 ;3937
0001ca  9903              LDR      r1,[sp,#0xc]          ;3937
0001cc  7108              STRB     r0,[r1,#4]            ;3937
0001ce  9803              LDR      r0,[sp,#0xc]          ;3938
0001d0  f7fffffe          BL       sync_fs
0001d4  4681              MOV      r9,r0                 ;3938
                  |L27.470|
0001d6  4648              MOV      r0,r9                 ;3945
0001d8  e71f              B        |L27.26|
;;;3947   
                          ENDP

0001da  0000              DCW      0x0000
                  |L27.476|
0001dc  222a2b2c          DCB      """*+,.:;<=>?[]|",127,0
0001e0  2e3a3b3c
0001e4  3d3e3f5b
0001e8  5d7c7f00

                          AREA ||i.f_stat||, CODE, READONLY, ALIGN=1

                  f_stat PROC
;;;3324   
;;;3325   FRESULT f_stat (
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;3326   	const TCHAR* path,	/* Pointer to the file path */
;;;3327   	FILINFO* fno		/* Pointer to file information to return */
;;;3328   )
;;;3329   {
000002  b08b              SUB      sp,sp,#0x2c
000004  460d              MOV      r5,r1
;;;3330   	FRESULT res;
;;;3331   	DIR dj;
;;;3332   	DEFINE_NAMEBUF;
;;;3333   
;;;3334   
;;;3335   	/* Get logical drive number */
;;;3336   	res = find_volume(&dj.fs, &path, 0);
000006  2200              MOVS     r2,#0
000008  a90b              ADD      r1,sp,#0x2c
00000a  a804              ADD      r0,sp,#0x10
00000c  f7fffffe          BL       find_volume
000010  4604              MOV      r4,r0
;;;3337   	if (res == FR_OK) {
000012  b984              CBNZ     r4,|L28.54|
;;;3338   		INIT_BUF(dj);
000014  a801              ADD      r0,sp,#4
000016  900a              STR      r0,[sp,#0x28]
;;;3339   		res = follow_path(&dj, path);	/* Follow the file path */
000018  a804              ADD      r0,sp,#0x10
00001a  990b              LDR      r1,[sp,#0x2c]
00001c  f7fffffe          BL       follow_path
000020  4604              MOV      r4,r0
;;;3340   		if (res == FR_OK) {				/* Follow completed */
000022  b944              CBNZ     r4,|L28.54|
;;;3341   			if (dj.dir) {		/* Found an object */
000024  9809              LDR      r0,[sp,#0x24]
000026  b128              CBZ      r0,|L28.52|
;;;3342   				if (fno) get_fileinfo(&dj, fno);
000028  b12d              CBZ      r5,|L28.54|
00002a  4629              MOV      r1,r5
00002c  a804              ADD      r0,sp,#0x10
00002e  f7fffffe          BL       get_fileinfo
000032  e000              B        |L28.54|
                  |L28.52|
;;;3343   			} else {			/* It is root directory */
;;;3344   				res = FR_INVALID_NAME;
000034  2406              MOVS     r4,#6
                  |L28.54|
;;;3345   			}
;;;3346   		}
;;;3347   		FREE_BUF();
;;;3348   	}
;;;3349   
;;;3350   	LEAVE_FF(dj.fs, res);
000036  4620              MOV      r0,r4
;;;3351   }
000038  b00d              ADD      sp,sp,#0x34
00003a  bd30              POP      {r4,r5,pc}
;;;3352   
                          ENDP


                          AREA ||i.f_sync||, CODE, READONLY, ALIGN=1

                  f_sync PROC
;;;2763   
;;;2764   FRESULT f_sync (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2765   	FIL* fp		/* Pointer to the file object */
;;;2766   )
;;;2767   {
000004  4604              MOV      r4,r0
;;;2768   	FRESULT res;
;;;2769   	DWORD tm;
;;;2770   	BYTE *dir;
;;;2771   
;;;2772   
;;;2773   	res = validate(fp);					/* Check validity of the object */
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       validate
00000c  4607              MOV      r7,r0
;;;2774   	if (res == FR_OK) {
00000e  2f00              CMP      r7,#0
000010  d14c              BNE      |L29.172|
;;;2775   		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
000012  79a0              LDRB     r0,[r4,#6]
000014  f0000020          AND      r0,r0,#0x20
000018  2800              CMP      r0,#0
00001a  d047              BEQ      |L29.172|
;;;2776   			/* Write-back dirty buffer */
;;;2777   #if !_FS_TINY
;;;2778   			if (fp->flag & FA__DIRTY) {
00001c  79a0              LDRB     r0,[r4,#6]
00001e  f0000040          AND      r0,r0,#0x40
000022  b178              CBZ      r0,|L29.68|
;;;2779   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
000024  6821              LDR      r1,[r4,#0]
000026  7848              LDRB     r0,[r1,#1]
000028  2301              MOVS     r3,#1
00002a  f1040124          ADD      r1,r4,#0x24
00002e  69a2              LDR      r2,[r4,#0x18]
000030  f7fffffe          BL       disk_write
000034  b110              CBZ      r0,|L29.60|
;;;2780   					LEAVE_FF(fp->fs, FR_DISK_ERR);
000036  2001              MOVS     r0,#1
                  |L29.56|
;;;2781   				fp->flag &= ~FA__DIRTY;
;;;2782   			}
;;;2783   #endif
;;;2784   			/* Update the directory entry */
;;;2785   			res = move_window(fp->fs, fp->dir_sect);
;;;2786   			if (res == FR_OK) {
;;;2787   				dir = fp->dir_ptr;
;;;2788   				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
;;;2789   				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
;;;2790   				st_clust(dir, fp->sclust);					/* Update start cluster */
;;;2791   				tm = GET_FATTIME();							/* Update updated time */
;;;2792   				ST_DWORD(dir + DIR_WrtTime, tm);
;;;2793   				ST_WORD(dir + DIR_LstAccDate, 0);
;;;2794   				fp->flag &= ~FA__WRITTEN;
;;;2795   				fp->fs->wflag = 1;
;;;2796   				res = sync_fs(fp->fs);
;;;2797   			}
;;;2798   		}
;;;2799   	}
;;;2800   
;;;2801   	LEAVE_FF(fp->fs, res);
;;;2802   }
000038  e8bd81f0          POP      {r4-r8,pc}
                  |L29.60|
00003c  79a0              LDRB     r0,[r4,#6]            ;2781
00003e  f0200040          BIC      r0,r0,#0x40           ;2781
000042  71a0              STRB     r0,[r4,#6]            ;2781
                  |L29.68|
000044  69e1              LDR      r1,[r4,#0x1c]         ;2785
000046  6820              LDR      r0,[r4,#0]            ;2785
000048  f7fffffe          BL       move_window
00004c  4607              MOV      r7,r0                 ;2785
00004e  2f00              CMP      r7,#0                 ;2786
000050  d12c              BNE      |L29.172|
000052  6a25              LDR      r5,[r4,#0x20]         ;2787
000054  7ae8              LDRB     r0,[r5,#0xb]          ;2788
000056  f0400020          ORR      r0,r0,#0x20           ;2788
00005a  72e8              STRB     r0,[r5,#0xb]          ;2788
00005c  7b20              LDRB     r0,[r4,#0xc]          ;2789
00005e  7728              STRB     r0,[r5,#0x1c]         ;2789
000060  89a0              LDRH     r0,[r4,#0xc]          ;2789
000062  0a01              LSRS     r1,r0,#8              ;2789
000064  7769              STRB     r1,[r5,#0x1d]         ;2789
000066  68e0              LDR      r0,[r4,#0xc]          ;2789
000068  0c01              LSRS     r1,r0,#16             ;2789
00006a  77a9              STRB     r1,[r5,#0x1e]         ;2789
00006c  68e0              LDR      r0,[r4,#0xc]          ;2789
00006e  0e01              LSRS     r1,r0,#24             ;2789
000070  77e9              STRB     r1,[r5,#0x1f]         ;2789
000072  4628              MOV      r0,r5                 ;2790
000074  6921              LDR      r1,[r4,#0x10]         ;2790
000076  f7fffffe          BL       st_clust
00007a  f7fffffe          BL       get_fattime
00007e  4606              MOV      r6,r0                 ;2791
000080  75ae              STRB     r6,[r5,#0x16]         ;2792
000082  0a31              LSRS     r1,r6,#8              ;2792
000084  75e9              STRB     r1,[r5,#0x17]         ;2792
000086  0c31              LSRS     r1,r6,#16             ;2792
000088  7629              STRB     r1,[r5,#0x18]         ;2792
00008a  0e31              LSRS     r1,r6,#24             ;2792
00008c  7669              STRB     r1,[r5,#0x19]         ;2792
00008e  2000              MOVS     r0,#0                 ;2793
000090  74a8              STRB     r0,[r5,#0x12]         ;2793
000092  2100              MOVS     r1,#0                 ;2793
000094  74e9              STRB     r1,[r5,#0x13]         ;2793
000096  79a0              LDRB     r0,[r4,#6]            ;2794
000098  f0200020          BIC      r0,r0,#0x20           ;2794
00009c  71a0              STRB     r0,[r4,#6]            ;2794
00009e  2001              MOVS     r0,#1                 ;2795
0000a0  6821              LDR      r1,[r4,#0]            ;2795
0000a2  7108              STRB     r0,[r1,#4]            ;2795
0000a4  6820              LDR      r0,[r4,#0]            ;2796
0000a6  f7fffffe          BL       sync_fs
0000aa  4607              MOV      r7,r0                 ;2796
                  |L29.172|
0000ac  4638              MOV      r0,r7                 ;2801
0000ae  e7c3              B        |L29.56|
;;;2803   
                          ENDP


                          AREA ||i.f_truncate||, CODE, READONLY, ALIGN=1

                  f_truncate PROC
;;;3426   
;;;3427   FRESULT f_truncate (
000000  b570              PUSH     {r4-r6,lr}
;;;3428   	FIL* fp		/* Pointer to the file object */
;;;3429   )
;;;3430   {
000002  4604              MOV      r4,r0
;;;3431   	FRESULT res;
;;;3432   	DWORD ncl;
;;;3433   
;;;3434   
;;;3435   	res = validate(fp);						/* Check validity of the object */
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       validate
00000a  4605              MOV      r5,r0
;;;3436   	if (res == FR_OK) {
00000c  b945              CBNZ     r5,|L30.32|
;;;3437   		if (fp->err) {						/* Check error */
00000e  79e0              LDRB     r0,[r4,#7]
000010  b108              CBZ      r0,|L30.22|
;;;3438   			res = (FRESULT)fp->err;
000012  79e5              LDRB     r5,[r4,#7]
000014  e004              B        |L30.32|
                  |L30.22|
;;;3439   		} else {
;;;3440   			if (!(fp->flag & FA_WRITE))		/* Check access mode */
000016  79a0              LDRB     r0,[r4,#6]
000018  f0000002          AND      r0,r0,#2
00001c  b900              CBNZ     r0,|L30.32|
;;;3441   				res = FR_DENIED;
00001e  2507              MOVS     r5,#7
                  |L30.32|
;;;3442   		}
;;;3443   	}
;;;3444   	if (res == FR_OK) {
000020  2d00              CMP      r5,#0
000022  d147              BNE      |L30.180|
;;;3445   		if (fp->fsize > fp->fptr) {
000024  e9d41002          LDRD     r1,r0,[r4,#8]
000028  4288              CMP      r0,r1
00002a  d941              BLS      |L30.176|
;;;3446   			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
00002c  68a0              LDR      r0,[r4,#8]
00002e  60e0              STR      r0,[r4,#0xc]
;;;3447   			fp->flag |= FA__WRITTEN;
000030  79a0              LDRB     r0,[r4,#6]
000032  f0400020          ORR      r0,r0,#0x20
000036  71a0              STRB     r0,[r4,#6]
;;;3448   			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
000038  68a0              LDR      r0,[r4,#8]
00003a  b938              CBNZ     r0,|L30.76|
;;;3449   				res = remove_chain(fp->fs, fp->sclust);
00003c  6921              LDR      r1,[r4,#0x10]
00003e  6820              LDR      r0,[r4,#0]
000040  f7fffffe          BL       remove_chain
000044  4605              MOV      r5,r0
;;;3450   				fp->sclust = 0;
000046  2000              MOVS     r0,#0
000048  6120              STR      r0,[r4,#0x10]
00004a  e01d              B        |L30.136|
                  |L30.76|
;;;3451   			} else {				/* When truncate a part of the file, remove remaining clusters */
;;;3452   				ncl = get_fat(fp->fs, fp->clust);
00004c  6961              LDR      r1,[r4,#0x14]
00004e  6820              LDR      r0,[r4,#0]
000050  f7fffffe          BL       get_fat
000054  4606              MOV      r6,r0
;;;3453   				res = FR_OK;
000056  2500              MOVS     r5,#0
;;;3454   				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
000058  1c70              ADDS     r0,r6,#1
00005a  b900              CBNZ     r0,|L30.94|
00005c  2501              MOVS     r5,#1
                  |L30.94|
;;;3455   				if (ncl == 1) res = FR_INT_ERR;
00005e  2e01              CMP      r6,#1
000060  d100              BNE      |L30.100|
000062  2502              MOVS     r5,#2
                  |L30.100|
;;;3456   				if (res == FR_OK && ncl < fp->fs->n_fatent) {
000064  b985              CBNZ     r5,|L30.136|
000066  6820              LDR      r0,[r4,#0]
000068  6940              LDR      r0,[r0,#0x14]
00006a  42b0              CMP      r0,r6
00006c  d90c              BLS      |L30.136|
;;;3457   					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
00006e  f06f4270          MVN      r2,#0xf0000000
000072  6961              LDR      r1,[r4,#0x14]
000074  6820              LDR      r0,[r4,#0]
000076  f7fffffe          BL       put_fat
00007a  4605              MOV      r5,r0
;;;3458   					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
00007c  b925              CBNZ     r5,|L30.136|
00007e  4631              MOV      r1,r6
000080  6820              LDR      r0,[r4,#0]
000082  f7fffffe          BL       remove_chain
000086  4605              MOV      r5,r0
                  |L30.136|
;;;3459   				}
;;;3460   			}
;;;3461   #if !_FS_TINY
;;;3462   			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
000088  b995              CBNZ     r5,|L30.176|
00008a  79a0              LDRB     r0,[r4,#6]
00008c  f0000040          AND      r0,r0,#0x40
000090  b170              CBZ      r0,|L30.176|
;;;3463   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
000092  6821              LDR      r1,[r4,#0]
000094  7848              LDRB     r0,[r1,#1]
000096  2301              MOVS     r3,#1
000098  f1040124          ADD      r1,r4,#0x24
00009c  69a2              LDR      r2,[r4,#0x18]
00009e  f7fffffe          BL       disk_write
0000a2  b108              CBZ      r0,|L30.168|
;;;3464   					res = FR_DISK_ERR;
0000a4  2501              MOVS     r5,#1
0000a6  e003              B        |L30.176|
                  |L30.168|
;;;3465   				else
;;;3466   					fp->flag &= ~FA__DIRTY;
0000a8  79a0              LDRB     r0,[r4,#6]
0000aa  f0200040          BIC      r0,r0,#0x40
0000ae  71a0              STRB     r0,[r4,#6]
                  |L30.176|
;;;3467   			}
;;;3468   #endif
;;;3469   		}
;;;3470   		if (res != FR_OK) fp->err = (FRESULT)res;
0000b0  b105              CBZ      r5,|L30.180|
0000b2  71e5              STRB     r5,[r4,#7]
                  |L30.180|
;;;3471   	}
;;;3472   
;;;3473   	LEAVE_FF(fp->fs, res);
0000b4  4628              MOV      r0,r5
;;;3474   }
0000b6  bd70              POP      {r4-r6,pc}
;;;3475   
                          ENDP


                          AREA ||i.f_unlink||, CODE, READONLY, ALIGN=1

                  f_unlink PROC
;;;3482   
;;;3483   FRESULT f_unlink (
000000  b571              PUSH     {r0,r4-r6,lr}
;;;3484   	const TCHAR* path		/* Pointer to the file or directory path */
;;;3485   )
;;;3486   {
000002  b091              SUB      sp,sp,#0x44
;;;3487   	FRESULT res;
;;;3488   	DIR dj, sdj;
;;;3489   	BYTE *dir;
;;;3490   	DWORD dclst = 0;
000004  2600              MOVS     r6,#0
;;;3491   	DEFINE_NAMEBUF;
;;;3492   
;;;3493   
;;;3494   	/* Get logical drive number */
;;;3495   	res = find_volume(&dj.fs, &path, 1);
000006  2201              MOVS     r2,#1
000008  a911              ADD      r1,sp,#0x44
00000a  a80a              ADD      r0,sp,#0x28
00000c  f7fffffe          BL       find_volume
000010  4604              MOV      r4,r0
;;;3496   	if (res == FR_OK) {
000012  2c00              CMP      r4,#0
000014  d144              BNE      |L31.160|
;;;3497   		INIT_BUF(dj);
000016  f8cdd040          STR      sp,[sp,#0x40]
;;;3498   		res = follow_path(&dj, path);		/* Follow the file path */
00001a  a80a              ADD      r0,sp,#0x28
00001c  9911              LDR      r1,[sp,#0x44]
00001e  f7fffffe          BL       follow_path
000022  4604              MOV      r4,r0
;;;3499   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
000024  bf00              NOP      
;;;3500   			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
;;;3501   #if _FS_LOCK
;;;3502   		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
;;;3503   #endif
;;;3504   		if (res == FR_OK) {					/* The object is accessible */
000026  2c00              CMP      r4,#0
000028  d13a              BNE      |L31.160|
;;;3505   			dir = dj.dir;
00002a  9d0f              LDR      r5,[sp,#0x3c]
;;;3506   			if (!dir) {
00002c  b90d              CBNZ     r5,|L31.50|
;;;3507   				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
00002e  2406              MOVS     r4,#6
000030  e004              B        |L31.60|
                  |L31.50|
;;;3508   			} else {
;;;3509   				if (dir[DIR_Attr] & AM_RDO)
000032  7ae8              LDRB     r0,[r5,#0xb]
000034  f0000001          AND      r0,r0,#1
000038  b100              CBZ      r0,|L31.60|
;;;3510   					res = FR_DENIED;		/* Cannot remove R/O object */
00003a  2407              MOVS     r4,#7
                  |L31.60|
;;;3511   			}
;;;3512   			if (res == FR_OK) {
00003c  b9fc              CBNZ     r4,|L31.126|
;;;3513   				dclst = ld_clust(dj.fs, dir);
00003e  4629              MOV      r1,r5
000040  980a              LDR      r0,[sp,#0x28]
000042  f7fffffe          BL       ld_clust
000046  4606              MOV      r6,r0
;;;3514   				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
000048  b1ce              CBZ      r6,|L31.126|
00004a  7ae8              LDRB     r0,[r5,#0xb]
00004c  f0000010          AND      r0,r0,#0x10
000050  b1a8              CBZ      r0,|L31.126|
;;;3515   #if _FS_RPATH
;;;3516   					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
;;;3517   						res = FR_DENIED;
;;;3518   					} else
;;;3519   #endif
;;;3520   					{
;;;3521   						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
000052  221c              MOVS     r2,#0x1c
000054  a90a              ADD      r1,sp,#0x28
000056  a803              ADD      r0,sp,#0xc
000058  f7fffffe          BL       mem_cpy
;;;3522   						sdj.sclust = dclst;
00005c  9605              STR      r6,[sp,#0x14]
;;;3523   						res = dir_sdi(&sdj, 2);
00005e  2102              MOVS     r1,#2
000060  a803              ADD      r0,sp,#0xc
000062  f7fffffe          BL       dir_sdi
000066  4604              MOV      r4,r0
;;;3524   						if (res == FR_OK) {
000068  b94c              CBNZ     r4,|L31.126|
;;;3525   							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
00006a  2100              MOVS     r1,#0
00006c  a803              ADD      r0,sp,#0xc
00006e  f7fffffe          BL       dir_read
000072  4604              MOV      r4,r0
;;;3526   							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
000074  b904              CBNZ     r4,|L31.120|
000076  2407              MOVS     r4,#7
                  |L31.120|
;;;3527   							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
000078  2c04              CMP      r4,#4
00007a  d100              BNE      |L31.126|
00007c  2400              MOVS     r4,#0
                  |L31.126|
;;;3528   						}
;;;3529   					}
;;;3530   				}
;;;3531   			}
;;;3532   			if (res == FR_OK) {
00007e  b97c              CBNZ     r4,|L31.160|
;;;3533   				res = dir_remove(&dj);		/* Remove the directory entry */
000080  a80a              ADD      r0,sp,#0x28
000082  f7fffffe          BL       dir_remove
000086  4604              MOV      r4,r0
;;;3534   				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
000088  b92c              CBNZ     r4,|L31.150|
00008a  b126              CBZ      r6,|L31.150|
;;;3535   					res = remove_chain(dj.fs, dclst);
00008c  4631              MOV      r1,r6
00008e  980a              LDR      r0,[sp,#0x28]
000090  f7fffffe          BL       remove_chain
000094  4604              MOV      r4,r0
                  |L31.150|
;;;3536   				if (res == FR_OK) res = sync_fs(dj.fs);
000096  b91c              CBNZ     r4,|L31.160|
000098  980a              LDR      r0,[sp,#0x28]
00009a  f7fffffe          BL       sync_fs
00009e  4604              MOV      r4,r0
                  |L31.160|
;;;3537   			}
;;;3538   		}
;;;3539   		FREE_BUF();
;;;3540   	}
;;;3541   
;;;3542   	LEAVE_FF(dj.fs, res);
0000a0  4620              MOV      r0,r4
;;;3543   }
0000a2  b012              ADD      sp,sp,#0x48
0000a4  bd70              POP      {r4-r6,pc}
;;;3544   
                          ENDP


                          AREA ||i.f_utime||, CODE, READONLY, ALIGN=1

                  f_utime PROC
;;;3746   
;;;3747   FRESULT f_utime (
000000  b573              PUSH     {r0,r1,r4-r6,lr}
;;;3748   	const TCHAR* path,	/* Pointer to the file/directory name */
;;;3749   	const FILINFO* fno	/* Pointer to the time stamp to be set */
;;;3750   )
;;;3751   {
000002  b08a              SUB      sp,sp,#0x28
000004  460d              MOV      r5,r1
;;;3752   	FRESULT res;
;;;3753   	DIR dj;
;;;3754   	BYTE *dir;
;;;3755   	DEFINE_NAMEBUF;
;;;3756   
;;;3757   
;;;3758   	/* Get logical drive number */
;;;3759   	res = find_volume(&dj.fs, &path, 1);
000006  2201              MOVS     r2,#1
000008  a90a              ADD      r1,sp,#0x28
00000a  a803              ADD      r0,sp,#0xc
00000c  f7fffffe          BL       find_volume
000010  4606              MOV      r6,r0
;;;3760   	if (res == FR_OK) {
000012  b9ee              CBNZ     r6,|L32.80|
;;;3761   		INIT_BUF(dj);
000014  f8cdd024          STR      sp,[sp,#0x24]
;;;3762   		res = follow_path(&dj, path);	/* Follow the file path */
000018  a803              ADD      r0,sp,#0xc
00001a  990a              LDR      r1,[sp,#0x28]
00001c  f7fffffe          BL       follow_path
000020  4606              MOV      r6,r0
;;;3763   		FREE_BUF();
;;;3764   		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
000022  bf00              NOP      
;;;3765   			res = FR_INVALID_NAME;
;;;3766   		if (res == FR_OK) {
000024  b9a6              CBNZ     r6,|L32.80|
;;;3767   			dir = dj.dir;
000026  9c08              LDR      r4,[sp,#0x20]
;;;3768   			if (!dir) {					/* Root directory */
000028  b90c              CBNZ     r4,|L32.46|
;;;3769   				res = FR_INVALID_NAME;
00002a  2606              MOVS     r6,#6
00002c  e010              B        |L32.80|
                  |L32.46|
;;;3770   			} else {					/* File or sub-directory */
;;;3771   				ST_WORD(dir + DIR_WrtTime, fno->ftime);
00002e  79a8              LDRB     r0,[r5,#6]
000030  75a0              STRB     r0,[r4,#0x16]
000032  88e8              LDRH     r0,[r5,#6]
000034  1201              ASRS     r1,r0,#8
000036  75e1              STRB     r1,[r4,#0x17]
;;;3772   				ST_WORD(dir + DIR_WrtDate, fno->fdate);
000038  7928              LDRB     r0,[r5,#4]
00003a  7620              STRB     r0,[r4,#0x18]
00003c  88a8              LDRH     r0,[r5,#4]
00003e  1201              ASRS     r1,r0,#8
000040  7661              STRB     r1,[r4,#0x19]
;;;3773   				dj.fs->wflag = 1;
000042  2001              MOVS     r0,#1
000044  9903              LDR      r1,[sp,#0xc]
000046  7108              STRB     r0,[r1,#4]
;;;3774   				res = sync_fs(dj.fs);
000048  9803              LDR      r0,[sp,#0xc]
00004a  f7fffffe          BL       sync_fs
00004e  4606              MOV      r6,r0
                  |L32.80|
;;;3775   			}
;;;3776   		}
;;;3777   	}
;;;3778   
;;;3779   	LEAVE_FF(dj.fs, res);
000050  4630              MOV      r0,r6
;;;3780   }
000052  b00c              ADD      sp,sp,#0x30
000054  bd70              POP      {r4-r6,pc}
;;;3781   
                          ENDP


                          AREA ||i.f_write||, CODE, READONLY, ALIGN=1

                  f_write PROC
;;;2641   
;;;2642   FRESULT f_write (
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;2643   	FIL* fp,			/* Pointer to the file object */
;;;2644   	const void *buff,	/* Pointer to the data to be written */
;;;2645   	UINT btw,			/* Number of bytes to write */
;;;2646   	UINT* bw			/* Pointer to number of bytes written */
;;;2647   )
;;;2648   {
000004  b083              SUB      sp,sp,#0xc
000006  4604              MOV      r4,r0
000008  4615              MOV      r5,r2
00000a  469b              MOV      r11,r3
;;;2649   	FRESULT res;
;;;2650   	DWORD clst, sect;
;;;2651   	UINT wcnt, cc;
;;;2652   	const BYTE *wbuff = (const BYTE*)buff;
00000c  9804              LDR      r0,[sp,#0x10]
00000e  9001              STR      r0,[sp,#4]
;;;2653   	BYTE csect;
;;;2654   
;;;2655   
;;;2656   	*bw = 0;	/* Clear write byte counter */
000010  2000              MOVS     r0,#0
000012  f8cb0000          STR      r0,[r11,#0]
;;;2657   
;;;2658   	res = validate(fp);						/* Check validity */
000016  4620              MOV      r0,r4
000018  f7fffffe          BL       validate
00001c  9002              STR      r0,[sp,#8]
;;;2659   	if (res != FR_OK) LEAVE_FF(fp->fs, res);
00001e  9802              LDR      r0,[sp,#8]
000020  b118              CBZ      r0,|L33.42|
000022  9802              LDR      r0,[sp,#8]
                  |L33.36|
;;;2660   	if (fp->err)							/* Check error */
;;;2661   		LEAVE_FF(fp->fs, (FRESULT)fp->err);
;;;2662   	if (!(fp->flag & FA_WRITE))				/* Check access mode */
;;;2663   		LEAVE_FF(fp->fs, FR_DENIED);
;;;2664   	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
;;;2665   
;;;2666   	for ( ;  btw;							/* Repeat until all data written */
;;;2667   		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
;;;2668   		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
;;;2669   			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
;;;2670   			if (!csect) {					/* On the cluster boundary? */
;;;2671   				if (fp->fptr == 0) {		/* On the top of the file? */
;;;2672   					clst = fp->sclust;		/* Follow from the origin */
;;;2673   					if (clst == 0)			/* When no cluster is allocated, */
;;;2674   						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
;;;2675   				} else {					/* Middle or end of the file */
;;;2676   #if _USE_FASTSEEK
;;;2677   					if (fp->cltbl)
;;;2678   						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
;;;2679   					else
;;;2680   #endif
;;;2681   						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
;;;2682   				}
;;;2683   				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
;;;2684   				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
;;;2685   				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
;;;2686   				fp->clust = clst;			/* Update current cluster */
;;;2687   				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
;;;2688   			}
;;;2689   #if _FS_TINY
;;;2690   			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
;;;2691   				ABORT(fp->fs, FR_DISK_ERR);
;;;2692   #else
;;;2693   			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
;;;2694   				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
;;;2695   					ABORT(fp->fs, FR_DISK_ERR);
;;;2696   				fp->flag &= ~FA__DIRTY;
;;;2697   			}
;;;2698   #endif
;;;2699   			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
;;;2700   			if (!sect) ABORT(fp->fs, FR_INT_ERR);
;;;2701   			sect += csect;
;;;2702   			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
;;;2703   			if (cc) {						/* Write maximum contiguous sectors directly */
;;;2704   				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
;;;2705   					cc = fp->fs->csize - csect;
;;;2706   				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
;;;2707   					ABORT(fp->fs, FR_DISK_ERR);
;;;2708   #if _FS_MINIMIZE <= 2
;;;2709   #if _FS_TINY
;;;2710   				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
;;;2711   					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2712   					fp->fs->wflag = 0;
;;;2713   				}
;;;2714   #else
;;;2715   				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
;;;2716   					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
;;;2717   					fp->flag &= ~FA__DIRTY;
;;;2718   				}
;;;2719   #endif
;;;2720   #endif
;;;2721   				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
;;;2722   				continue;
;;;2723   			}
;;;2724   #if _FS_TINY
;;;2725   			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
;;;2726   				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
;;;2727   				fp->fs->winsect = sect;
;;;2728   			}
;;;2729   #else
;;;2730   			if (fp->dsect != sect) {		/* Fill sector cache with file data */
;;;2731   				if (fp->fptr < fp->fsize &&
;;;2732   					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
;;;2733   						ABORT(fp->fs, FR_DISK_ERR);
;;;2734   			}
;;;2735   #endif
;;;2736   			fp->dsect = sect;
;;;2737   		}
;;;2738   		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
;;;2739   		if (wcnt > btw) wcnt = btw;
;;;2740   #if _FS_TINY
;;;2741   		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
;;;2742   			ABORT(fp->fs, FR_DISK_ERR);
;;;2743   		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2744   		fp->fs->wflag = 1;
;;;2745   #else
;;;2746   		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
;;;2747   		fp->flag |= FA__DIRTY;
;;;2748   #endif
;;;2749   	}
;;;2750   
;;;2751   	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
;;;2752   	fp->flag |= FA__WRITTEN;						/* Set file change flag */
;;;2753   
;;;2754   	LEAVE_FF(fp->fs, FR_OK);
;;;2755   }
000024  b007              ADD      sp,sp,#0x1c
000026  e8bd8ff0          POP      {r4-r11,pc}
                  |L33.42|
00002a  79e0              LDRB     r0,[r4,#7]            ;2660
00002c  b108              CBZ      r0,|L33.50|
00002e  79e0              LDRB     r0,[r4,#7]            ;2661
000030  e7f8              B        |L33.36|
                  |L33.50|
000032  79a0              LDRB     r0,[r4,#6]            ;2662
000034  f0000002          AND      r0,r0,#2              ;2662
000038  b908              CBNZ     r0,|L33.62|
00003a  2007              MOVS     r0,#7                 ;2663
00003c  e7f2              B        |L33.36|
                  |L33.62|
00003e  68a0              LDR      r0,[r4,#8]            ;2664
000040  4428              ADD      r0,r0,r5              ;2664
000042  68a1              LDR      r1,[r4,#8]            ;2664
000044  4288              CMP      r0,r1                 ;2664
000046  d200              BCS      |L33.74|
000048  2500              MOVS     r5,#0                 ;2664
                  |L33.74|
00004a  e0b5              B        |L33.440|
                  |L33.76|
00004c  8920              LDRH     r0,[r4,#8]            ;2668
00004e  f3c00008          UBFX     r0,r0,#0,#9           ;2668
000052  2800              CMP      r0,#0                 ;2668
000054  d177              BNE      |L33.326|
000056  6820              LDR      r0,[r4,#0]            ;2669
000058  7880              LDRB     r0,[r0,#2]            ;2669
00005a  1e40              SUBS     r0,r0,#1              ;2669
00005c  68a1              LDR      r1,[r4,#8]            ;2669
00005e  ea002051          AND      r0,r0,r1,LSR #9       ;2669
000062  f0000aff          AND      r10,r0,#0xff          ;2669
000066  f1ba0f00          CMP      r10,#0                ;2670
00006a  d11e              BNE      |L33.170|
00006c  68a0              LDR      r0,[r4,#8]            ;2671
00006e  b938              CBNZ     r0,|L33.128|
000070  6927              LDR      r7,[r4,#0x10]         ;2672
000072  b957              CBNZ     r7,|L33.138|
000074  2100              MOVS     r1,#0                 ;2674
000076  6820              LDR      r0,[r4,#0]            ;2674
000078  f7fffffe          BL       create_chain
00007c  4607              MOV      r7,r0                 ;2674
00007e  e004              B        |L33.138|
                  |L33.128|
000080  6961              LDR      r1,[r4,#0x14]         ;2681
000082  6820              LDR      r0,[r4,#0]            ;2681
000084  f7fffffe          BL       create_chain
000088  4607              MOV      r7,r0                 ;2681
                  |L33.138|
00008a  b907              CBNZ     r7,|L33.142|
00008c  e097              B        |L33.446|
                  |L33.142|
00008e  2f01              CMP      r7,#1                 ;2684
000090  d102              BNE      |L33.152|
000092  2002              MOVS     r0,#2                 ;2684
000094  71e0              STRB     r0,[r4,#7]            ;2684
000096  e7c5              B        |L33.36|
                  |L33.152|
000098  1c78              ADDS     r0,r7,#1              ;2685
00009a  b910              CBNZ     r0,|L33.162|
00009c  2001              MOVS     r0,#1                 ;2685
00009e  71e0              STRB     r0,[r4,#7]            ;2685
0000a0  e7c0              B        |L33.36|
                  |L33.162|
0000a2  6167              STR      r7,[r4,#0x14]         ;2686
0000a4  6920              LDR      r0,[r4,#0x10]         ;2687
0000a6  b900              CBNZ     r0,|L33.170|
0000a8  6127              STR      r7,[r4,#0x10]         ;2687
                  |L33.170|
0000aa  79a0              LDRB     r0,[r4,#6]            ;2693
0000ac  f0000040          AND      r0,r0,#0x40           ;2693
0000b0  b178              CBZ      r0,|L33.210|
0000b2  6821              LDR      r1,[r4,#0]            ;2694
0000b4  7848              LDRB     r0,[r1,#1]            ;2694
0000b6  2301              MOVS     r3,#1                 ;2694
0000b8  f1040124          ADD      r1,r4,#0x24           ;2694
0000bc  69a2              LDR      r2,[r4,#0x18]         ;2694
0000be  f7fffffe          BL       disk_write
0000c2  b110              CBZ      r0,|L33.202|
0000c4  2001              MOVS     r0,#1                 ;2695
0000c6  71e0              STRB     r0,[r4,#7]            ;2695
0000c8  e7ac              B        |L33.36|
                  |L33.202|
0000ca  79a0              LDRB     r0,[r4,#6]            ;2696
0000cc  f0200040          BIC      r0,r0,#0x40           ;2696
0000d0  71a0              STRB     r0,[r4,#6]            ;2696
                  |L33.210|
0000d2  6961              LDR      r1,[r4,#0x14]         ;2699
0000d4  6820              LDR      r0,[r4,#0]            ;2699
0000d6  f7fffffe          BL       clust2sect
0000da  4606              MOV      r6,r0                 ;2699
0000dc  b916              CBNZ     r6,|L33.228|
0000de  2002              MOVS     r0,#2                 ;2700
0000e0  71e0              STRB     r0,[r4,#7]            ;2700
0000e2  e79f              B        |L33.36|
                  |L33.228|
0000e4  4456              ADD      r6,r6,r10             ;2701
0000e6  ea4f2955          LSR      r9,r5,#9              ;2702
0000ea  f1b90f00          CMP      r9,#0                 ;2703
0000ee  d02b              BEQ      |L33.328|
0000f0  eb0a0009          ADD      r0,r10,r9             ;2704
0000f4  6821              LDR      r1,[r4,#0]            ;2704
0000f6  7889              LDRB     r1,[r1,#2]            ;2704
0000f8  4288              CMP      r0,r1                 ;2704
0000fa  d903              BLS      |L33.260|
0000fc  6820              LDR      r0,[r4,#0]            ;2705
0000fe  7880              LDRB     r0,[r0,#2]            ;2705
000100  eba0090a          SUB      r9,r0,r10             ;2705
                  |L33.260|
000104  6821              LDR      r1,[r4,#0]            ;2706
000106  7848              LDRB     r0,[r1,#1]            ;2706
000108  464b              MOV      r3,r9                 ;2706
00010a  4632              MOV      r2,r6                 ;2706
00010c  9901              LDR      r1,[sp,#4]            ;2706
00010e  f7fffffe          BL       disk_write
000112  b110              CBZ      r0,|L33.282|
000114  2001              MOVS     r0,#1                 ;2707
000116  71e0              STRB     r0,[r4,#7]            ;2707
000118  e784              B        |L33.36|
                  |L33.282|
00011a  69a0              LDR      r0,[r4,#0x18]         ;2715
00011c  1b80              SUBS     r0,r0,r6              ;2715
00011e  4548              CMP      r0,r9                 ;2715
000120  d20e              BCS      |L33.320|
000122  69a0              LDR      r0,[r4,#0x18]         ;2716
000124  1b80              SUBS     r0,r0,r6              ;2716
000126  9a01              LDR      r2,[sp,#4]            ;2716
000128  eb022140          ADD      r1,r2,r0,LSL #9       ;2716
00012c  f44f7200          MOV      r2,#0x200             ;2716
000130  f1040024          ADD      r0,r4,#0x24           ;2716
000134  f7fffffe          BL       mem_cpy
000138  79a0              LDRB     r0,[r4,#6]            ;2717
00013a  f0200040          BIC      r0,r0,#0x40           ;2717
00013e  71a0              STRB     r0,[r4,#6]            ;2717
                  |L33.320|
000140  ea4f2849          LSL      r8,r9,#9              ;2721
000144  e02b              B        |L33.414|
                  |L33.326|
000146  e013              B        |L33.368|
                  |L33.328|
000148  69a0              LDR      r0,[r4,#0x18]         ;2730
00014a  42b0              CMP      r0,r6                 ;2730
00014c  d00f              BEQ      |L33.366|
00014e  e9d40102          LDRD     r0,r1,[r4,#8]         ;2731
000152  4288              CMP      r0,r1                 ;2731
000154  d20b              BCS      |L33.366|
000156  6821              LDR      r1,[r4,#0]            ;2732
000158  7848              LDRB     r0,[r1,#1]            ;2732
00015a  2301              MOVS     r3,#1                 ;2732
00015c  4632              MOV      r2,r6                 ;2732
00015e  f1040124          ADD      r1,r4,#0x24           ;2732
000162  f7fffffe          BL       disk_read
000166  b110              CBZ      r0,|L33.366|
000168  2001              MOVS     r0,#1                 ;2733
00016a  71e0              STRB     r0,[r4,#7]            ;2733
00016c  e75a              B        |L33.36|
                  |L33.366|
00016e  61a6              STR      r6,[r4,#0x18]         ;2736
                  |L33.368|
000170  8920              LDRH     r0,[r4,#8]            ;2738
000172  f3c00008          UBFX     r0,r0,#0,#9           ;2738
000176  f5c07800          RSB      r8,r0,#0x200          ;2738
00017a  45a8              CMP      r8,r5                 ;2739
00017c  d900              BLS      |L33.384|
00017e  46a8              MOV      r8,r5                 ;2739
                  |L33.384|
000180  8921              LDRH     r1,[r4,#8]            ;2746
000182  f3c10208          UBFX     r2,r1,#0,#9           ;2746
000186  f1040124          ADD      r1,r4,#0x24           ;2746
00018a  1850              ADDS     r0,r2,r1              ;2746
00018c  4642              MOV      r2,r8                 ;2746
00018e  9901              LDR      r1,[sp,#4]            ;2746
000190  f7fffffe          BL       mem_cpy
000194  79a0              LDRB     r0,[r4,#6]            ;2747
000196  f0400040          ORR      r0,r0,#0x40           ;2747
00019a  71a0              STRB     r0,[r4,#6]            ;2747
00019c  bf00              NOP                            ;2722
                  |L33.414|
00019e  9801              LDR      r0,[sp,#4]            ;2667
0001a0  4440              ADD      r0,r0,r8              ;2667
0001a2  9001              STR      r0,[sp,#4]            ;2667
0001a4  68a0              LDR      r0,[r4,#8]            ;2667
0001a6  4440              ADD      r0,r0,r8              ;2667
0001a8  60a0              STR      r0,[r4,#8]            ;2667
0001aa  f8db0000          LDR      r0,[r11,#0]           ;2667
0001ae  4440              ADD      r0,r0,r8              ;2667
0001b0  f8cb0000          STR      r0,[r11,#0]           ;2667
0001b4  eba50508          SUB      r5,r5,r8              ;2667
                  |L33.440|
0001b8  2d00              CMP      r5,#0                 ;2666
0001ba  f47faf47          BNE      |L33.76|
                  |L33.446|
0001be  bf00              NOP                            ;2683
0001c0  e9d40102          LDRD     r0,r1,[r4,#8]         ;2751
0001c4  4288              CMP      r0,r1                 ;2751
0001c6  d901              BLS      |L33.460|
0001c8  68a0              LDR      r0,[r4,#8]            ;2751
0001ca  60e0              STR      r0,[r4,#0xc]          ;2751
                  |L33.460|
0001cc  79a0              LDRB     r0,[r4,#6]            ;2752
0001ce  f0400020          ORR      r0,r0,#0x20           ;2752
0001d2  71a0              STRB     r0,[r4,#6]            ;2752
0001d4  2000              MOVS     r0,#0                 ;2754
0001d6  e725              B        |L33.36|
;;;2756   
                          ENDP


                          AREA ||i.find_volume||, CODE, READONLY, ALIGN=2

                  find_volume PROC
;;;2155   static
;;;2156   FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
000000  e92d4ff7          PUSH     {r0-r2,r4-r11,lr}
;;;2157   	FATFS** rfs,		/* Pointer to pointer to the found file system object */
;;;2158   	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
;;;2159   	BYTE wmode			/* !=0: Check write protection for write access */
;;;2160   )
;;;2161   {
000004  b08a              SUB      sp,sp,#0x28
;;;2162   	BYTE fmt, *pt;
;;;2163   	int vol;
;;;2164   	DSTATUS stat;
;;;2165   	DWORD bsect, fasize, tsect, sysect, nclst, szbfat, br[4];
;;;2166   	WORD nrsv;
;;;2167   	FATFS *fs;
;;;2168   	UINT i;
;;;2169   
;;;2170   
;;;2171   	/* Get logical drive number from the path name */
;;;2172   	*rfs = 0;
000006  2100              MOVS     r1,#0
000008  980a              LDR      r0,[sp,#0x28]
00000a  6001              STR      r1,[r0,#0]
;;;2173   	vol = get_ldnumber(path);
00000c  980b              LDR      r0,[sp,#0x2c]
00000e  f7fffffe          BL       get_ldnumber
000012  9009              STR      r0,[sp,#0x24]
;;;2174   	if (vol < 0) return FR_INVALID_DRIVE;
000014  9809              LDR      r0,[sp,#0x24]
000016  2800              CMP      r0,#0
000018  da03              BGE      |L34.34|
00001a  200b              MOVS     r0,#0xb
                  |L34.28|
;;;2175   
;;;2176   	/* Check if the file system object is valid or not */
;;;2177   	fs = FatFs[vol];					/* Get pointer to the file system object */
;;;2178   	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
;;;2179   
;;;2180   	ENTER_FF(fs);						/* Lock the volume */
;;;2181   	*rfs = fs;							/* Return pointer to the file system object */
;;;2182   
;;;2183   	if (fs->fs_type) {					/* If the volume has been mounted */
;;;2184   		stat = disk_status(fs->drv);
;;;2185   		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
;;;2186   			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
;;;2187   				return FR_WRITE_PROTECTED;
;;;2188   			return FR_OK;				/* The file system object is valid */
;;;2189   		}
;;;2190   	}
;;;2191   
;;;2192   	/* The file system object is not valid. */
;;;2193   	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */
;;;2194   
;;;2195   	fs->fs_type = 0;					/* Clear the file system object */
;;;2196   	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
;;;2197   	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
;;;2198   	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
;;;2199   		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
;;;2200   	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
;;;2201   		return FR_WRITE_PROTECTED;
;;;2202   #if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
;;;2203   	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
;;;2204   		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
;;;2205   #endif
;;;2206   	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
;;;2207   	bsect = 0;
;;;2208   	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
;;;2209   	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
;;;2210   		for (i = 0; i < 4; i++) {			/* Get partition offset */
;;;2211   			pt = fs->win + MBR_Table + i * SZ_PTE;
;;;2212   			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
;;;2213   		}
;;;2214   		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
;;;2215   		if (i) i--;
;;;2216   		do {								/* Find an FAT volume */
;;;2217   			bsect = br[i];
;;;2218   			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
;;;2219   		} while (!LD2PT(vol) && fmt && ++i < 4);
;;;2220   	}
;;;2221   	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
;;;2222   	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
;;;2223   
;;;2224   	/* An FAT volume is found. Following code initializes the file system object */
;;;2225   
;;;2226   	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
;;;2227   		return FR_NO_FILESYSTEM;
;;;2228   
;;;2229   	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
;;;2230   	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
;;;2231   	fs->fsize = fasize;
;;;2232   
;;;2233   	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
;;;2234   	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
;;;2235   		return FR_NO_FILESYSTEM;
;;;2236   	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
;;;2237   
;;;2238   	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
;;;2239   	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
;;;2240   		return FR_NO_FILESYSTEM;
;;;2241   
;;;2242   	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
;;;2243   	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
;;;2244   		return FR_NO_FILESYSTEM;
;;;2245   
;;;2246   	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
;;;2247   	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
;;;2248   
;;;2249   	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
;;;2250   	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
;;;2251   
;;;2252   	/* Determine the FAT sub type */
;;;2253   	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
;;;2254   	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
;;;2255   	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
;;;2256   	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
;;;2257   	fmt = FS_FAT12;
;;;2258   	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
;;;2259   	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
;;;2260   
;;;2261   	/* Boundaries and Limits */
;;;2262   	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
;;;2263   	fs->volbase = bsect;								/* Volume start sector */
;;;2264   	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
;;;2265   	fs->database = bsect + sysect;						/* Data start sector */
;;;2266   	if (fmt == FS_FAT32) {
;;;2267   		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
;;;2268   		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
;;;2269   		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
;;;2270   	} else {
;;;2271   		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
;;;2272   		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
;;;2273   		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
;;;2274   			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
;;;2275   	}
;;;2276   	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
;;;2277   		return FR_NO_FILESYSTEM;
;;;2278   
;;;2279   #if !_FS_READONLY
;;;2280   	/* Initialize cluster allocation information */
;;;2281   	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
;;;2282   
;;;2283   	/* Get fsinfo if available */
;;;2284   	fs->fsi_flag = 0x80;
;;;2285   #if (_FS_NOFSINFO & 3) != 3
;;;2286   	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
;;;2287   		&& LD_WORD(fs->win + BPB_FSInfo) == 1
;;;2288   		&& move_window(fs, bsect + 1) == FR_OK)
;;;2289   	{
;;;2290   		fs->fsi_flag = 0;
;;;2291   		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
;;;2292   			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
;;;2293   			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
;;;2294   		{
;;;2295   #if (_FS_NOFSINFO & 1) == 0
;;;2296   			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
;;;2297   #endif
;;;2298   #if (_FS_NOFSINFO & 2) == 0
;;;2299   			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
;;;2300   #endif
;;;2301   		}
;;;2302   	}
;;;2303   #endif
;;;2304   #endif
;;;2305   	fs->fs_type = fmt;	/* FAT sub-type */
;;;2306   	fs->id = ++Fsid;	/* File system mount ID */
;;;2307   #if _FS_RPATH
;;;2308   	fs->cdir = 0;		/* Set current directory to root */
;;;2309   #endif
;;;2310   #if _FS_LOCK			/* Clear file lock semaphores */
;;;2311   	clear_lock(fs);
;;;2312   #endif
;;;2313   
;;;2314   	return FR_OK;
;;;2315   }
00001c  b00d              ADD      sp,sp,#0x34
00001e  e8bd8ff0          POP      {r4-r11,pc}
                  |L34.34|
000022  49d8              LDR      r1,|L34.900|
000024  9809              LDR      r0,[sp,#0x24]         ;2177
000026  f8514020          LDR      r4,[r1,r0,LSL #2]     ;2177
00002a  b90c              CBNZ     r4,|L34.48|
00002c  200c              MOVS     r0,#0xc               ;2178
00002e  e7f5              B        |L34.28|
                  |L34.48|
000030  980a              LDR      r0,[sp,#0x28]         ;2181
000032  6004              STR      r4,[r0,#0]            ;2181
000034  7820              LDRB     r0,[r4,#0]            ;2183
000036  b178              CBZ      r0,|L34.88|
000038  7860              LDRB     r0,[r4,#1]            ;2184
00003a  f7fffffe          BL       disk_status
00003e  4681              MOV      r9,r0                 ;2184
000040  f0090001          AND      r0,r9,#1              ;2185
000044  b940              CBNZ     r0,|L34.88|
000046  980c              LDR      r0,[sp,#0x30]         ;2186
000048  b120              CBZ      r0,|L34.84|
00004a  f0090004          AND      r0,r9,#4              ;2186
00004e  b108              CBZ      r0,|L34.84|
000050  200a              MOVS     r0,#0xa               ;2187
000052  e7e3              B        |L34.28|
                  |L34.84|
000054  2000              MOVS     r0,#0                 ;2188
000056  e7e1              B        |L34.28|
                  |L34.88|
000058  2000              MOVS     r0,#0                 ;2195
00005a  7020              STRB     r0,[r4,#0]            ;2195
00005c  9809              LDR      r0,[sp,#0x24]         ;2196
00005e  7060              STRB     r0,[r4,#1]            ;2196
000060  7860              LDRB     r0,[r4,#1]            ;2197
000062  f7fffffe          BL       disk_initialize
000066  4681              MOV      r9,r0                 ;2197
000068  f0090001          AND      r0,r9,#1              ;2198
00006c  b108              CBZ      r0,|L34.114|
00006e  2003              MOVS     r0,#3                 ;2199
000070  e7d4              B        |L34.28|
                  |L34.114|
000072  980c              LDR      r0,[sp,#0x30]         ;2200
000074  b120              CBZ      r0,|L34.128|
000076  f0090004          AND      r0,r9,#4              ;2200
00007a  b108              CBZ      r0,|L34.128|
00007c  200a              MOVS     r0,#0xa               ;2201
00007e  e7cd              B        |L34.28|
                  |L34.128|
000080  2700              MOVS     r7,#0                 ;2207
000082  4639              MOV      r1,r7                 ;2208
000084  4620              MOV      r0,r4                 ;2208
000086  f7fffffe          BL       check_fs
00008a  4605              MOV      r5,r0                 ;2208
00008c  2d01              CMP      r5,#1                 ;2209
00008e  d001              BEQ      |L34.148|
000090  bb9d              CBNZ     r5,|L34.250|
000092  e032              B        |L34.250|
                  |L34.148|
000094  2600              MOVS     r6,#0                 ;2210
000096  e01a              B        |L34.206|
                  |L34.152|
000098  f50470f7          ADD      r0,r4,#0x1ee          ;2211
00009c  eb001806          ADD      r8,r0,r6,LSL #4       ;2211
0000a0  f8980004          LDRB     r0,[r8,#4]            ;2212
0000a4  b170              CBZ      r0,|L34.196|
0000a6  f898000b          LDRB     r0,[r8,#0xb]          ;2212
0000aa  0601              LSLS     r1,r0,#24             ;2212
0000ac  f898000a          LDRB     r0,[r8,#0xa]          ;2212
0000b0  ea414100          ORR      r1,r1,r0,LSL #16      ;2212
0000b4  f8980009          LDRB     r0,[r8,#9]            ;2212
0000b8  ea412000          ORR      r0,r1,r0,LSL #8       ;2212
0000bc  f8981008          LDRB     r1,[r8,#8]            ;2212
0000c0  4308              ORRS     r0,r0,r1              ;2212
0000c2  e000              B        |L34.198|
                  |L34.196|
0000c4  2000              MOVS     r0,#0                 ;2212
                  |L34.198|
0000c6  a902              ADD      r1,sp,#8              ;2212
0000c8  f8410026          STR      r0,[r1,r6,LSL #2]     ;2212
0000cc  1c76              ADDS     r6,r6,#1              ;2210
                  |L34.206|
0000ce  2e04              CMP      r6,#4                 ;2210
0000d0  d3e2              BCC      |L34.152|
0000d2  2600              MOVS     r6,#0                 ;2214
0000d4  b106              CBZ      r6,|L34.216|
0000d6  1e76              SUBS     r6,r6,#1              ;2215
                  |L34.216|
0000d8  bf00              NOP                            ;2216
                  |L34.218|
0000da  a802              ADD      r0,sp,#8              ;2217
0000dc  f8507026          LDR      r7,[r0,r6,LSL #2]     ;2217
0000e0  b127              CBZ      r7,|L34.236|
0000e2  4639              MOV      r1,r7                 ;2218
0000e4  4620              MOV      r0,r4                 ;2218
0000e6  f7fffffe          BL       check_fs
0000ea  e000              B        |L34.238|
                  |L34.236|
0000ec  2002              MOVS     r0,#2                 ;2218
                  |L34.238|
0000ee  4605              MOV      r5,r0                 ;2218
0000f0  b11d              CBZ      r5,|L34.250|
0000f2  1c70              ADDS     r0,r6,#1              ;2219
0000f4  4606              MOV      r6,r0                 ;2219
0000f6  2804              CMP      r0,#4                 ;2219
0000f8  d3ef              BCC      |L34.218|
                  |L34.250|
0000fa  2d03              CMP      r5,#3                 ;2221
0000fc  d101              BNE      |L34.258|
0000fe  2001              MOVS     r0,#1                 ;2221
000100  e78c              B        |L34.28|
                  |L34.258|
000102  b10d              CBZ      r5,|L34.264|
000104  200d              MOVS     r0,#0xd               ;2222
000106  e789              B        |L34.28|
                  |L34.264|
000108  203b              MOVS     r0,#0x3b              ;2226
00010a  5d01              LDRB     r1,[r0,r4]            ;2226
00010c  f894003c          LDRB     r0,[r4,#0x3c]         ;2226
000110  ea412000          ORR      r0,r1,r0,LSL #8       ;2226
000114  f5b07f00          CMP      r0,#0x200             ;2226
000118  d001              BEQ      |L34.286|
00011a  200d              MOVS     r0,#0xd               ;2227
00011c  e77e              B        |L34.28|
                  |L34.286|
00011e  2046              MOVS     r0,#0x46              ;2229
000120  5d01              LDRB     r1,[r0,r4]            ;2229
000122  f8940047          LDRB     r0,[r4,#0x47]         ;2229
000126  ea412a00          ORR      r10,r1,r0,LSL #8      ;2229
00012a  f1ba0f00          CMP      r10,#0                ;2230
00012e  d10e              BNE      |L34.334|
000130  f8940057          LDRB     r0,[r4,#0x57]         ;2230
000134  0601              LSLS     r1,r0,#24             ;2230
000136  f8940056          LDRB     r0,[r4,#0x56]         ;2230
00013a  ea414100          ORR      r1,r1,r0,LSL #16      ;2230
00013e  f8940055          LDRB     r0,[r4,#0x55]         ;2230
000142  ea412000          ORR      r0,r1,r0,LSL #8       ;2230
000146  f8941054          LDRB     r1,[r4,#0x54]         ;2230
00014a  ea400a01          ORR      r10,r0,r1             ;2230
                  |L34.334|
00014e  f8c4a018          STR      r10,[r4,#0x18]        ;2231
000152  2040              MOVS     r0,#0x40              ;2233
000154  5d00              LDRB     r0,[r0,r4]            ;2233
000156  70e0              STRB     r0,[r4,#3]            ;2233
000158  78e0              LDRB     r0,[r4,#3]            ;2234
00015a  2801              CMP      r0,#1                 ;2234
00015c  d004              BEQ      |L34.360|
00015e  78e0              LDRB     r0,[r4,#3]            ;2234
000160  2802              CMP      r0,#2                 ;2234
000162  d001              BEQ      |L34.360|
000164  200d              MOVS     r0,#0xd               ;2235
000166  e759              B        |L34.28|
                  |L34.360|
000168  78e0              LDRB     r0,[r4,#3]            ;2236
00016a  fb0afa00          MUL      r10,r10,r0            ;2236
00016e  203d              MOVS     r0,#0x3d              ;2238
000170  5d00              LDRB     r0,[r0,r4]            ;2238
000172  70a0              STRB     r0,[r4,#2]            ;2238
000174  78a0              LDRB     r0,[r4,#2]            ;2239
000176  b118              CBZ      r0,|L34.384|
000178  78a0              LDRB     r0,[r4,#2]            ;2239
00017a  1e41              SUBS     r1,r0,#1              ;2239
00017c  4008              ANDS     r0,r0,r1              ;2239
00017e  b108              CBZ      r0,|L34.388|
                  |L34.384|
000180  200d              MOVS     r0,#0xd               ;2240
000182  e74b              B        |L34.28|
                  |L34.388|
000184  2041              MOVS     r0,#0x41              ;2242
000186  5d01              LDRB     r1,[r0,r4]            ;2242
000188  f8940042          LDRB     r0,[r4,#0x42]         ;2242
00018c  ea412000          ORR      r0,r1,r0,LSL #8       ;2242
000190  8120              STRH     r0,[r4,#8]            ;2242
000192  7a20              LDRB     r0,[r4,#8]            ;2243
000194  f000000f          AND      r0,r0,#0xf            ;2243
000198  b108              CBZ      r0,|L34.414|
00019a  200d              MOVS     r0,#0xd               ;2244
00019c  e73e              B        |L34.28|
                  |L34.414|
00019e  2043              MOVS     r0,#0x43              ;2246
0001a0  5d01              LDRB     r1,[r0,r4]            ;2246
0001a2  f8940044          LDRB     r0,[r4,#0x44]         ;2246
0001a6  ea412000          ORR      r0,r1,r0,LSL #8       ;2246
0001aa  9008              STR      r0,[sp,#0x20]         ;2246
0001ac  9808              LDR      r0,[sp,#0x20]         ;2247
0001ae  b970              CBNZ     r0,|L34.462|
0001b0  f8940053          LDRB     r0,[r4,#0x53]         ;2247
0001b4  0601              LSLS     r1,r0,#24             ;2247
0001b6  f8940052          LDRB     r0,[r4,#0x52]         ;2247
0001ba  ea414100          ORR      r1,r1,r0,LSL #16      ;2247
0001be  f8940051          LDRB     r0,[r4,#0x51]         ;2247
0001c2  ea412000          ORR      r0,r1,r0,LSL #8       ;2247
0001c6  f8941050          LDRB     r1,[r4,#0x50]         ;2247
0001ca  4308              ORRS     r0,r0,r1              ;2247
0001cc  9008              STR      r0,[sp,#0x20]         ;2247
                  |L34.462|
0001ce  203e              MOVS     r0,#0x3e              ;2249
0001d0  5d01              LDRB     r1,[r0,r4]            ;2249
0001d2  f894003f          LDRB     r0,[r4,#0x3f]         ;2249
0001d6  ea412000          ORR      r0,r1,r0,LSL #8       ;2249
0001da  9001              STR      r0,[sp,#4]            ;2249
0001dc  9801              LDR      r0,[sp,#4]            ;2250
0001de  b908              CBNZ     r0,|L34.484|
0001e0  200d              MOVS     r0,#0xd               ;2250
0001e2  e71b              B        |L34.28|
                  |L34.484|
0001e4  9801              LDR      r0,[sp,#4]            ;2253
0001e6  4450              ADD      r0,r0,r10             ;2253
0001e8  8921              LDRH     r1,[r4,#8]            ;2253
0001ea  eb001011          ADD      r0,r0,r1,LSR #4       ;2253
0001ee  9007              STR      r0,[sp,#0x1c]         ;2253
0001f0  e9dd0107          LDRD     r0,r1,[sp,#0x1c]      ;2254
0001f4  4281              CMP      r1,r0                 ;2254
0001f6  d201              BCS      |L34.508|
0001f8  200d              MOVS     r0,#0xd               ;2254
0001fa  e70f              B        |L34.28|
                  |L34.508|
0001fc  e9dd1007          LDRD     r1,r0,[sp,#0x1c]      ;2255
000200  1a40              SUBS     r0,r0,r1              ;2255
000202  78a1              LDRB     r1,[r4,#2]            ;2255
000204  fbb0fbf1          UDIV     r11,r0,r1             ;2255
000208  f1bb0f00          CMP      r11,#0                ;2256
00020c  d101              BNE      |L34.530|
00020e  200d              MOVS     r0,#0xd               ;2256
000210  e704              B        |L34.28|
                  |L34.530|
000212  2501              MOVS     r5,#1                 ;2257
000214  f64070f6          MOV      r0,#0xff6             ;2258
000218  4583              CMP      r11,r0                ;2258
00021a  d300              BCC      |L34.542|
00021c  2502              MOVS     r5,#2                 ;2258
                  |L34.542|
00021e  f64f70f6          MOV      r0,#0xfff6            ;2259
000222  4583              CMP      r11,r0                ;2259
000224  d300              BCC      |L34.552|
000226  2503              MOVS     r5,#3                 ;2259
                  |L34.552|
000228  f10b0002          ADD      r0,r11,#2             ;2262
00022c  6160              STR      r0,[r4,#0x14]         ;2262
00022e  61e7              STR      r7,[r4,#0x1c]         ;2263
000230  9801              LDR      r0,[sp,#4]            ;2264
000232  4438              ADD      r0,r0,r7              ;2264
000234  6220              STR      r0,[r4,#0x20]         ;2264
000236  9807              LDR      r0,[sp,#0x1c]         ;2265
000238  4438              ADD      r0,r0,r7              ;2265
00023a  62a0              STR      r0,[r4,#0x28]         ;2265
00023c  2d03              CMP      r5,#3                 ;2266
00023e  d116              BNE      |L34.622|
000240  8920              LDRH     r0,[r4,#8]            ;2267
000242  b108              CBZ      r0,|L34.584|
000244  200d              MOVS     r0,#0xd               ;2267
000246  e6e9              B        |L34.28|
                  |L34.584|
000248  f894005f          LDRB     r0,[r4,#0x5f]         ;2268
00024c  0601              LSLS     r1,r0,#24             ;2268
00024e  f894005e          LDRB     r0,[r4,#0x5e]         ;2268
000252  ea414100          ORR      r1,r1,r0,LSL #16      ;2268
000256  f894005d          LDRB     r0,[r4,#0x5d]         ;2268
00025a  ea412000          ORR      r0,r1,r0,LSL #8       ;2268
00025e  f894105c          LDRB     r1,[r4,#0x5c]         ;2268
000262  4308              ORRS     r0,r0,r1              ;2268
000264  6260              STR      r0,[r4,#0x24]         ;2268
000266  6960              LDR      r0,[r4,#0x14]         ;2269
000268  0080              LSLS     r0,r0,#2              ;2269
00026a  9006              STR      r0,[sp,#0x18]         ;2269
00026c  e014              B        |L34.664|
                  |L34.622|
00026e  8920              LDRH     r0,[r4,#8]            ;2271
000270  b908              CBNZ     r0,|L34.630|
000272  200d              MOVS     r0,#0xd               ;2271
000274  e6d2              B        |L34.28|
                  |L34.630|
000276  6a20              LDR      r0,[r4,#0x20]         ;2272
000278  4450              ADD      r0,r0,r10             ;2272
00027a  6260              STR      r0,[r4,#0x24]         ;2272
00027c  2d02              CMP      r5,#2                 ;2273
00027e  d102              BNE      |L34.646|
000280  6960              LDR      r0,[r4,#0x14]         ;2274
000282  0040              LSLS     r0,r0,#1              ;2274
000284  e007              B        |L34.662|
                  |L34.646|
000286  7d20              LDRB     r0,[r4,#0x14]         ;2274
000288  f0000001          AND      r0,r0,#1              ;2274
00028c  6961              LDR      r1,[r4,#0x14]         ;2274
00028e  eb010141          ADD      r1,r1,r1,LSL #1       ;2274
000292  eb000051          ADD      r0,r0,r1,LSR #1       ;2274
                  |L34.662|
000296  9006              STR      r0,[sp,#0x18]         ;2274
                  |L34.664|
000298  69a1              LDR      r1,[r4,#0x18]         ;2276
00029a  9806              LDR      r0,[sp,#0x18]         ;2276
00029c  f20010ff          ADD      r0,r0,#0x1ff          ;2276
0002a0  ebb12f50          CMP      r1,r0,LSR #9          ;2276
0002a4  d201              BCS      |L34.682|
0002a6  200d              MOVS     r0,#0xd               ;2277
0002a8  e6b8              B        |L34.28|
                  |L34.682|
0002aa  f04f30ff          MOV      r0,#0xffffffff        ;2281
0002ae  6120              STR      r0,[r4,#0x10]         ;2281
0002b0  60e0              STR      r0,[r4,#0xc]          ;2281
0002b2  2080              MOVS     r0,#0x80              ;2284
0002b4  7160              STRB     r0,[r4,#5]            ;2284
0002b6  2d03              CMP      r5,#3                 ;2286
0002b8  d15a              BNE      |L34.880|
0002ba  f8941060          LDRB     r1,[r4,#0x60]         ;2287
0002be  f8940061          LDRB     r0,[r4,#0x61]         ;2287
0002c2  ea412000          ORR      r0,r1,r0,LSL #8       ;2287
0002c6  2801              CMP      r0,#1                 ;2287
0002c8  d152              BNE      |L34.880|
0002ca  1c79              ADDS     r1,r7,#1              ;2288
0002cc  4620              MOV      r0,r4                 ;2288
0002ce  f7fffffe          BL       move_window
0002d2  bbe8              CBNZ     r0,|L34.848|
0002d4  2000              MOVS     r0,#0                 ;2290
0002d6  7160              STRB     r0,[r4,#5]            ;2290
0002d8  f894122e          LDRB     r1,[r4,#0x22e]        ;2291
0002dc  f894022f          LDRB     r0,[r4,#0x22f]        ;2291
0002e0  ea412000          ORR      r0,r1,r0,LSL #8       ;2291
0002e4  f64a2155          MOV      r1,#0xaa55            ;2291
0002e8  4288              CMP      r0,r1                 ;2291
0002ea  d141              BNE      |L34.880|
0002ec  2033              MOVS     r0,#0x33              ;2292
0002ee  5d00              LDRB     r0,[r0,r4]            ;2292
0002f0  0601              LSLS     r1,r0,#24             ;2292
0002f2  2032              MOVS     r0,#0x32              ;2292
0002f4  5d00              LDRB     r0,[r0,r4]            ;2292
0002f6  ea414100          ORR      r1,r1,r0,LSL #16      ;2292
0002fa  2031              MOVS     r0,#0x31              ;2292
0002fc  5d00              LDRB     r0,[r0,r4]            ;2292
0002fe  ea412000          ORR      r0,r1,r0,LSL #8       ;2292
000302  f8941030          LDRB     r1,[r4,#0x30]         ;2292
000306  4308              ORRS     r0,r0,r1              ;2292
000308  491f              LDR      r1,|L34.904|
00030a  4288              CMP      r0,r1                 ;2292
00030c  d130              BNE      |L34.880|
00030e  f8940217          LDRB     r0,[r4,#0x217]        ;2293
000312  0601              LSLS     r1,r0,#24             ;2293
000314  f8940216          LDRB     r0,[r4,#0x216]        ;2293
000318  ea414100          ORR      r1,r1,r0,LSL #16      ;2293
00031c  f8940215          LDRB     r0,[r4,#0x215]        ;2293
000320  ea412000          ORR      r0,r1,r0,LSL #8       ;2293
000324  f8941214          LDRB     r1,[r4,#0x214]        ;2293
000328  4308              ORRS     r0,r0,r1              ;2293
00032a  4918              LDR      r1,|L34.908|
00032c  4288              CMP      r0,r1                 ;2293
00032e  d11f              BNE      |L34.880|
000330  f894021b          LDRB     r0,[r4,#0x21b]        ;2296
000334  0601              LSLS     r1,r0,#24             ;2296
000336  f894021a          LDRB     r0,[r4,#0x21a]        ;2296
00033a  ea414100          ORR      r1,r1,r0,LSL #16      ;2296
00033e  f8940219          LDRB     r0,[r4,#0x219]        ;2296
000342  ea412000          ORR      r0,r1,r0,LSL #8       ;2296
000346  f8941218          LDRB     r1,[r4,#0x218]        ;2296
00034a  4308              ORRS     r0,r0,r1              ;2296
00034c  6120              STR      r0,[r4,#0x10]         ;2296
00034e  e000              B        |L34.850|
                  |L34.848|
000350  e00e              B        |L34.880|
                  |L34.850|
000352  f894021f          LDRB     r0,[r4,#0x21f]        ;2299
000356  0601              LSLS     r1,r0,#24             ;2299
000358  f894021e          LDRB     r0,[r4,#0x21e]        ;2299
00035c  ea414100          ORR      r1,r1,r0,LSL #16      ;2299
000360  f894021d          LDRB     r0,[r4,#0x21d]        ;2299
000364  ea412000          ORR      r0,r1,r0,LSL #8       ;2299
000368  f894121c          LDRB     r1,[r4,#0x21c]        ;2299
00036c  4308              ORRS     r0,r0,r1              ;2299
00036e  60e0              STR      r0,[r4,#0xc]          ;2299
                  |L34.880|
000370  7025              STRB     r5,[r4,#0]            ;2305
000372  4807              LDR      r0,|L34.912|
000374  8800              LDRH     r0,[r0,#0]            ;2306  ; Fsid
000376  1c40              ADDS     r0,r0,#1              ;2306
000378  b280              UXTH     r0,r0                 ;2306
00037a  4905              LDR      r1,|L34.912|
00037c  8008              STRH     r0,[r1,#0]            ;2306
00037e  80e0              STRH     r0,[r4,#6]            ;2306
000380  2000              MOVS     r0,#0                 ;2314
000382  e64b              B        |L34.28|
;;;2316   
                          ENDP

                  |L34.900|
                          DCD      FatFs
                  |L34.904|
                          DCD      0x41615252
                  |L34.908|
                          DCD      0x61417272
                  |L34.912|
                          DCD      Fsid

                          AREA ||i.follow_path||, CODE, READONLY, ALIGN=1

                  follow_path PROC
;;;2004   static
;;;2005   FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
000000  e92d41f3          PUSH     {r0,r1,r4-r8,lr}
;;;2006   	DIR* dp,			/* Directory object to return last directory and found object */
;;;2007   	const TCHAR* path	/* Full-path string to find a file or directory */
;;;2008   )
;;;2009   {
000004  4604              MOV      r4,r0
;;;2010   	FRESULT res;
;;;2011   	BYTE *dir, ns;
;;;2012   
;;;2013   
;;;2014   #if _FS_RPATH
;;;2015   	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
;;;2016   		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
;;;2017   	} else {								/* No heading separator */
;;;2018   		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
;;;2019   	}
;;;2020   #else
;;;2021   	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
000006  9801              LDR      r0,[sp,#4]
000008  7800              LDRB     r0,[r0,#0]
00000a  282f              CMP      r0,#0x2f
00000c  d003              BEQ      |L35.22|
00000e  9801              LDR      r0,[sp,#4]
000010  7800              LDRB     r0,[r0,#0]
000012  285c              CMP      r0,#0x5c
000014  d102              BNE      |L35.28|
                  |L35.22|
;;;2022   		path++;
000016  9801              LDR      r0,[sp,#4]
000018  1c40              ADDS     r0,r0,#1
00001a  9001              STR      r0,[sp,#4]
                  |L35.28|
;;;2023   	dp->sclust = 0;							/* Always start from the root directory */
00001c  2000              MOVS     r0,#0
00001e  60a0              STR      r0,[r4,#8]
;;;2024   #endif
;;;2025   
;;;2026   	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
000020  9801              LDR      r0,[sp,#4]
000022  7800              LDRB     r0,[r0,#0]
000024  2820              CMP      r0,#0x20
000026  d207              BCS      |L35.56|
;;;2027   		res = dir_sdi(dp, 0);
000028  2100              MOVS     r1,#0
00002a  4620              MOV      r0,r4
00002c  f7fffffe          BL       dir_sdi
000030  4605              MOV      r5,r0
;;;2028   		dp->dir = 0;
000032  2000              MOVS     r0,#0
000034  6160              STR      r0,[r4,#0x14]
000036  e028              B        |L35.138|
                  |L35.56|
;;;2029   	} else {								/* Follow path */
;;;2030   		for (;;) {
000038  bf00              NOP      
                  |L35.58|
;;;2031   			res = create_name(dp, &path);	/* Get a segment name of the path */
00003a  a901              ADD      r1,sp,#4
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       create_name
000042  4605              MOV      r5,r0
;;;2032   			if (res != FR_OK) break;
000044  b105              CBZ      r5,|L35.72|
000046  e01f              B        |L35.136|
                  |L35.72|
;;;2033   			res = dir_find(dp);				/* Find an object with the sagment name */
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       dir_find
00004e  4605              MOV      r5,r0
;;;2034   			ns = dp->fn[NSFLAG];
000050  69a0              LDR      r0,[r4,#0x18]
000052  7ac6              LDRB     r6,[r0,#0xb]
;;;2035   			if (res != FR_OK) {				/* Failed to find the object */
000054  b13d              CBZ      r5,|L35.102|
;;;2036   				if (res == FR_NO_FILE) {	/* Object is not found */
000056  2d04              CMP      r5,#4
000058  d104              BNE      |L35.100|
;;;2037   					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
00005a  bf00              NOP      
;;;2038   						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
;;;2039   						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
;;;2040   						res = FR_OK;					/* Ended at the root directroy. Function completed. */
;;;2041   					} else {							/* Could not find the object */
;;;2042   						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
00005c  f0060004          AND      r0,r6,#4
000060  b900              CBNZ     r0,|L35.100|
000062  2505              MOVS     r5,#5
                  |L35.100|
;;;2043   					}
;;;2044   				}
;;;2045   				break;
000064  e010              B        |L35.136|
                  |L35.102|
;;;2046   			}
;;;2047   			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
000066  f0060004          AND      r0,r6,#4
00006a  b100              CBZ      r0,|L35.110|
00006c  e00c              B        |L35.136|
                  |L35.110|
;;;2048   			dir = dp->dir;						/* Follow the sub-directory */
00006e  6967              LDR      r7,[r4,#0x14]
;;;2049   			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
000070  7af8              LDRB     r0,[r7,#0xb]
000072  f0000010          AND      r0,r0,#0x10
000076  b908              CBNZ     r0,|L35.124|
;;;2050   				res = FR_NO_PATH; break;
000078  2505              MOVS     r5,#5
00007a  e005              B        |L35.136|
                  |L35.124|
;;;2051   			}
;;;2052   			dp->sclust = ld_clust(dp->fs, dir);
00007c  4639              MOV      r1,r7
00007e  6820              LDR      r0,[r4,#0]
000080  f7fffffe          BL       ld_clust
000084  60a0              STR      r0,[r4,#8]
000086  e7d8              B        |L35.58|
                  |L35.136|
000088  bf00              NOP                            ;2032
                  |L35.138|
;;;2053   		}
;;;2054   	}
;;;2055   
;;;2056   	return res;
00008a  4628              MOV      r0,r5
;;;2057   }
00008c  e8bd81fc          POP      {r2-r8,pc}
;;;2058   
                          ENDP


                          AREA ||i.get_fat||, CODE, READONLY, ALIGN=1

                  get_fat PROC
;;;772    
;;;773    DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;774    	FATFS* fs,	/* File system object */
;;;775    	DWORD clst	/* FAT index number (cluster number) to get the value */
;;;776    )
;;;777    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;778    	UINT wc, bc;
;;;779    	BYTE *p;
;;;780    	DWORD val;
;;;781    
;;;782    
;;;783    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2c02              CMP      r4,#2
00000a  d302              BCC      |L36.18|
00000c  6968              LDR      r0,[r5,#0x14]
00000e  42a0              CMP      r0,r4
000010  d802              BHI      |L36.24|
                  |L36.18|
;;;784    		val = 1;	/* Internal error */
000012  f04f0901          MOV      r9,#1
000016  e069              B        |L36.236|
                  |L36.24|
;;;785    
;;;786    	} else {
;;;787    		val = 0xFFFFFFFF;	/* Default value falls on disk error */
000018  f04f39ff          MOV      r9,#0xffffffff
;;;788    
;;;789    		switch (fs->fs_type) {
00001c  7828              LDRB     r0,[r5,#0]
00001e  2801              CMP      r0,#1
000020  d004              BEQ      |L36.44|
000022  2802              CMP      r0,#2
000024  d02e              BEQ      |L36.132|
000026  2803              CMP      r0,#3
000028  d15c              BNE      |L36.228|
00002a  e03f              B        |L36.172|
                  |L36.44|
;;;790    		case FS_FAT12 :
;;;791    			bc = (UINT)clst; bc += bc / 2;
00002c  4627              MOV      r7,r4
00002e  eb070757          ADD      r7,r7,r7,LSR #1
;;;792    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
000032  6a28              LDR      r0,[r5,#0x20]
000034  eb002157          ADD      r1,r0,r7,LSR #9
000038  4628              MOV      r0,r5
00003a  f7fffffe          BL       move_window
00003e  b100              CBZ      r0,|L36.66|
000040  e053              B        |L36.234|
                  |L36.66|
;;;793    			wc = fs->win[bc++ % SS(fs)];
000042  4638              MOV      r0,r7
000044  1c7f              ADDS     r7,r7,#1
000046  f3c00108          UBFX     r1,r0,#0,#9
00004a  f1050030          ADD      r0,r5,#0x30
00004e  f8108001          LDRB     r8,[r0,r1]
;;;794    			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
000052  6a28              LDR      r0,[r5,#0x20]
000054  eb002157          ADD      r1,r0,r7,LSR #9
000058  4628              MOV      r0,r5
00005a  f7fffffe          BL       move_window
00005e  b100              CBZ      r0,|L36.98|
000060  e043              B        |L36.234|
                  |L36.98|
;;;795    			wc |= fs->win[bc % SS(fs)] << 8;
000062  f3c70108          UBFX     r1,r7,#0,#9
000066  f1050030          ADD      r0,r5,#0x30
00006a  5c40              LDRB     r0,[r0,r1]
00006c  ea482800          ORR      r8,r8,r0,LSL #8
;;;796    			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
000070  f0040001          AND      r0,r4,#1
000074  b110              CBZ      r0,|L36.124|
000076  ea4f1018          LSR      r0,r8,#4
00007a  e001              B        |L36.128|
                  |L36.124|
00007c  f3c8000b          UBFX     r0,r8,#0,#12
                  |L36.128|
000080  4681              MOV      r9,r0
;;;797    			break;
000082  e032              B        |L36.234|
                  |L36.132|
;;;798    
;;;799    		case FS_FAT16 :
;;;800    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
000084  6a28              LDR      r0,[r5,#0x20]
000086  eb002114          ADD      r1,r0,r4,LSR #8
00008a  4628              MOV      r0,r5
00008c  f7fffffe          BL       move_window
000090  b100              CBZ      r0,|L36.148|
000092  e02a              B        |L36.234|
                  |L36.148|
;;;801    			p = &fs->win[clst * 2 % SS(fs)];
000094  f24010ff          MOV      r0,#0x1ff
000098  ea000144          AND      r1,r0,r4,LSL #1
00009c  f1050030          ADD      r0,r5,#0x30
0000a0  180e              ADDS     r6,r1,r0
;;;802    			val = LD_WORD(p);
0000a2  7830              LDRB     r0,[r6,#0]
0000a4  7871              LDRB     r1,[r6,#1]
0000a6  ea402901          ORR      r9,r0,r1,LSL #8
;;;803    			break;
0000aa  e01e              B        |L36.234|
                  |L36.172|
;;;804    
;;;805    		case FS_FAT32 :
;;;806    			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
0000ac  6a28              LDR      r0,[r5,#0x20]
0000ae  eb0011d4          ADD      r1,r0,r4,LSR #7
0000b2  4628              MOV      r0,r5
0000b4  f7fffffe          BL       move_window
0000b8  b100              CBZ      r0,|L36.188|
0000ba  e016              B        |L36.234|
                  |L36.188|
;;;807    			p = &fs->win[clst * 4 % SS(fs)];
0000bc  f24010ff          MOV      r0,#0x1ff
0000c0  ea000184          AND      r1,r0,r4,LSL #2
0000c4  f1050030          ADD      r0,r5,#0x30
0000c8  180e              ADDS     r6,r1,r0
;;;808    			val = LD_DWORD(p) & 0x0FFFFFFF;
0000ca  78f0              LDRB     r0,[r6,#3]
0000cc  0600              LSLS     r0,r0,#24
0000ce  78b1              LDRB     r1,[r6,#2]
0000d0  ea404001          ORR      r0,r0,r1,LSL #16
0000d4  7871              LDRB     r1,[r6,#1]
0000d6  ea402001          ORR      r0,r0,r1,LSL #8
0000da  7831              LDRB     r1,[r6,#0]
0000dc  4308              ORRS     r0,r0,r1
0000de  f0204970          BIC      r9,r0,#0xf0000000
;;;809    			break;
0000e2  e002              B        |L36.234|
                  |L36.228|
;;;810    
;;;811    		default:
;;;812    			val = 1;	/* Internal error */
0000e4  f04f0901          MOV      r9,#1
0000e8  bf00              NOP                            ;789
                  |L36.234|
0000ea  bf00              NOP                            ;792
                  |L36.236|
;;;813    		}
;;;814    	}
;;;815    
;;;816    	return val;
0000ec  4648              MOV      r0,r9
;;;817    }
0000ee  e8bd87f0          POP      {r4-r10,pc}
;;;818    
                          ENDP


                          AREA ||i.get_fileinfo||, CODE, READONLY, ALIGN=1

                  get_fileinfo PROC
;;;1654   static
;;;1655   void get_fileinfo (		/* No return code */
000000  b5f0              PUSH     {r4-r7,lr}
;;;1656   	DIR* dp,			/* Pointer to the directory object */
;;;1657   	FILINFO* fno	 	/* Pointer to the file information to be filled */
;;;1658   )
;;;1659   {
000002  4604              MOV      r4,r0
;;;1660   	UINT i;
;;;1661   	TCHAR *p, c;
;;;1662   	BYTE *dir;
;;;1663   #if _USE_LFN
;;;1664   	WCHAR w, *lfn;
;;;1665   #endif
;;;1666   
;;;1667   	p = fno->fname;
000004  f1010209          ADD      r2,r1,#9
;;;1668   	if (dp->sect) {		/* Get SFN */
000008  6926              LDR      r6,[r4,#0x10]
00000a  2e00              CMP      r6,#0
00000c  d02c              BEQ      |L37.104|
;;;1669   		dir = dp->dir;
00000e  6960              LDR      r0,[r4,#0x14]
;;;1670   		i = 0;
000010  2300              MOVS     r3,#0
;;;1671   		while (i < 11) {		/* Copy name body and extension */
000012  e010              B        |L37.54|
                  |L37.20|
;;;1672   			c = (TCHAR)dir[i++];
000014  461e              MOV      r6,r3
000016  1c5b              ADDS     r3,r3,#1
000018  5d85              LDRB     r5,[r0,r6]
;;;1673   			if (c == ' ') continue;				/* Skip padding spaces */
00001a  2d20              CMP      r5,#0x20
00001c  d100              BNE      |L37.32|
00001e  e00a              B        |L37.54|
                  |L37.32|
;;;1674   			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
000020  2d05              CMP      r5,#5
000022  d100              BNE      |L37.38|
000024  25e5              MOVS     r5,#0xe5
                  |L37.38|
;;;1675   			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
000026  2b09              CMP      r3,#9
000028  d102              BNE      |L37.48|
00002a  262e              MOVS     r6,#0x2e
00002c  f8026b01          STRB     r6,[r2],#1
                  |L37.48|
;;;1676   #if _USE_LFN
;;;1677   			if (IsUpper(c) && (dir[DIR_NTres] & (i >= 9 ? NS_EXT : NS_BODY)))
;;;1678   				c += 0x20;			/* To lower */
;;;1679   #if _LFN_UNICODE
;;;1680   			if (IsDBCS1(c) && i != 8 && i != 11 && IsDBCS2(dir[i]))
;;;1681   				c = c << 8 | dir[i++];
;;;1682   			c = ff_convert(c, 1);	/* OEM -> Unicode */
;;;1683   			if (!c) c = '?';
;;;1684   #endif
;;;1685   #endif
;;;1686   			*p++ = c;
000030  f8025b01          STRB     r5,[r2],#1
000034  bf00              NOP                            ;1673
                  |L37.54|
000036  2b0b              CMP      r3,#0xb               ;1671
000038  d3ec              BCC      |L37.20|
;;;1687   		}
;;;1688   		fno->fattrib = dir[DIR_Attr];				/* Attribute */
00003a  7ac6              LDRB     r6,[r0,#0xb]
00003c  720e              STRB     r6,[r1,#8]
;;;1689   		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
00003e  7fc6              LDRB     r6,[r0,#0x1f]
000040  0637              LSLS     r7,r6,#24
000042  7f86              LDRB     r6,[r0,#0x1e]
000044  ea474706          ORR      r7,r7,r6,LSL #16
000048  7f46              LDRB     r6,[r0,#0x1d]
00004a  ea472606          ORR      r6,r7,r6,LSL #8
00004e  7f07              LDRB     r7,[r0,#0x1c]
000050  433e              ORRS     r6,r6,r7
000052  600e              STR      r6,[r1,#0]
;;;1690   		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
000054  7e07              LDRB     r7,[r0,#0x18]
000056  7e46              LDRB     r6,[r0,#0x19]
000058  ea472606          ORR      r6,r7,r6,LSL #8
00005c  808e              STRH     r6,[r1,#4]
;;;1691   		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
00005e  7d87              LDRB     r7,[r0,#0x16]
000060  7dc6              LDRB     r6,[r0,#0x17]
000062  ea472606          ORR      r6,r7,r6,LSL #8
000066  80ce              STRH     r6,[r1,#6]
                  |L37.104|
;;;1692   	}
;;;1693   	*p = 0;		/* Terminate SFN string by a \0 */
000068  2600              MOVS     r6,#0
00006a  7016              STRB     r6,[r2,#0]
;;;1694   
;;;1695   #if _USE_LFN
;;;1696   	if (fno->lfname) {
;;;1697   		i = 0; p = fno->lfname;
;;;1698   		if (dp->sect && fno->lfsize && dp->lfn_idx != 0xFFFF) {	/* Get LFN if available */
;;;1699   			lfn = dp->lfn;
;;;1700   			while ((w = *lfn++) != 0) {		/* Get an LFN character */
;;;1701   #if !_LFN_UNICODE
;;;1702   				w = ff_convert(w, 0);		/* Unicode -> OEM */
;;;1703   				if (!w) { i = 0; break; }	/* No LFN if it could not be converted */
;;;1704   				if (_DF1S && w >= 0x100)	/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
;;;1705   					p[i++] = (TCHAR)(w >> 8);
;;;1706   #endif
;;;1707   				if (i >= fno->lfsize - 1) { i = 0; break; }	/* No LFN if buffer overflow */
;;;1708   				p[i++] = (TCHAR)w;
;;;1709   			}
;;;1710   		}
;;;1711   		p[i] = 0;	/* Terminate LFN string by a \0 */
;;;1712   	}
;;;1713   #endif
;;;1714   }
00006c  bdf0              POP      {r4-r7,pc}
;;;1715   #endif /* _FS_MINIMIZE <= 1 || _FS_RPATH >= 2 */
                          ENDP


                          AREA ||i.get_ldnumber||, CODE, READONLY, ALIGN=1

                  get_ldnumber PROC
;;;2066   static
;;;2067   int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
000000  b570              PUSH     {r4-r6,lr}
;;;2068   	const TCHAR** path	/* Pointer to pointer to the path name */
;;;2069   )
;;;2070   {
000002  4602              MOV      r2,r0
;;;2071   	const TCHAR *tp, *tt;
;;;2072   	UINT i;
;;;2073   	int vol = -1;
000004  f04f30ff          MOV      r0,#0xffffffff
;;;2074   #if _STR_VOLUME_ID		/* Find string drive id */
;;;2075   	static const char* const str[] = {_VOLUME_STRS};
;;;2076   	const char *sp;
;;;2077   	char c;
;;;2078   	TCHAR tc;
;;;2079   #endif
;;;2080   
;;;2081   
;;;2082   	if (*path) {	/* If the pointer is not a null */
000008  6815              LDR      r5,[r2,#0]
00000a  b1e5              CBZ      r5,|L38.70|
;;;2083   		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
00000c  6811              LDR      r1,[r2,#0]
00000e  e000              B        |L38.18|
                  |L38.16|
000010  1c49              ADDS     r1,r1,#1
                  |L38.18|
000012  780d              LDRB     r5,[r1,#0]
000014  2d21              CMP      r5,#0x21
000016  d302              BCC      |L38.30|
000018  780d              LDRB     r5,[r1,#0]
00001a  2d3a              CMP      r5,#0x3a
00001c  d1f8              BNE      |L38.16|
                  |L38.30|
;;;2084   		if (*tt == ':') {	/* If a ':' is exist in the path name */
00001e  780d              LDRB     r5,[r1,#0]
000020  2d3a              CMP      r5,#0x3a
000022  d10f              BNE      |L38.68|
;;;2085   			tp = *path;
000024  6814              LDR      r4,[r2,#0]
;;;2086   			i = *tp++ - '0'; 
000026  f8145b01          LDRB     r5,[r4],#1
00002a  f1a50330          SUB      r3,r5,#0x30
;;;2087   			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
00002e  2b0a              CMP      r3,#0xa
000030  d207              BCS      |L38.66|
000032  428c              CMP      r4,r1
000034  d105              BNE      |L38.66|
;;;2088   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
000036  2b03              CMP      r3,#3
000038  d203              BCS      |L38.66|
;;;2089   					vol = (int)i;
00003a  4618              MOV      r0,r3
;;;2090   					*path = ++tt;
00003c  1c4d              ADDS     r5,r1,#1
00003e  4629              MOV      r1,r5
000040  6015              STR      r5,[r2,#0]
                  |L38.66|
;;;2091   				}
;;;2092   			}
;;;2093   #if _STR_VOLUME_ID
;;;2094   			 else {	/* No numeric drive number, find string drive id */
;;;2095   				i = 0; tt++;
;;;2096   				do {
;;;2097   					sp = str[i]; tp = *path;
;;;2098   					do {	/* Compare a string drive id with path name */
;;;2099   						c = *sp++; tc = *tp++;
;;;2100   						if (IsLower(tc)) tc -= 0x20;
;;;2101   					} while (c && (TCHAR)c == tc);
;;;2102   				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
;;;2103   				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
;;;2104   					vol = (int)i;
;;;2105   					*path = tt;
;;;2106   				}
;;;2107   			}
;;;2108   #endif
;;;2109   			return vol;
;;;2110   		}
;;;2111   #if _FS_RPATH && _VOLUMES >= 2
;;;2112   		vol = CurrVol;	/* Current drive */
;;;2113   #else
;;;2114   		vol = 0;		/* Drive 0 */
;;;2115   #endif
;;;2116   	}
;;;2117   	return vol;
;;;2118   }
000042  bd70              POP      {r4-r6,pc}
                  |L38.68|
000044  2000              MOVS     r0,#0                 ;2114
                  |L38.70|
000046  bf00              NOP                            ;2117
000048  e7fb              B        |L38.66|
;;;2119   
                          ENDP


                          AREA ||i.ld_clust||, CODE, READONLY, ALIGN=1

                  ld_clust PROC
;;;1189   static
;;;1190   DWORD ld_clust (
000000  b510              PUSH     {r4,lr}
;;;1191   	FATFS* fs,	/* Pointer to the fs object */
;;;1192   	BYTE* dir	/* Pointer to the directory entry */
;;;1193   )
;;;1194   {
000002  4602              MOV      r2,r0
;;;1195   	DWORD cl;
;;;1196   
;;;1197   	cl = LD_WORD(dir + DIR_FstClusLO);
000004  7e8c              LDRB     r4,[r1,#0x1a]
000006  7ecb              LDRB     r3,[r1,#0x1b]
000008  ea442003          ORR      r0,r4,r3,LSL #8
;;;1198   	if (fs->fs_type == FS_FAT32)
00000c  7813              LDRB     r3,[r2,#0]
00000e  2b03              CMP      r3,#3
000010  d105              BNE      |L39.30|
;;;1199   		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
000012  7d0c              LDRB     r4,[r1,#0x14]
000014  7d4b              LDRB     r3,[r1,#0x15]
000016  ea442303          ORR      r3,r4,r3,LSL #8
00001a  ea404003          ORR      r0,r0,r3,LSL #16
                  |L39.30|
;;;1200   
;;;1201   	return cl;
;;;1202   }
00001e  bd10              POP      {r4,pc}
;;;1203   
                          ENDP


                          AREA ||i.mem_cmp||, CODE, READONLY, ALIGN=1

                  mem_cmp PROC
;;;487    static
;;;488    int mem_cmp (const void* dst, const void* src, UINT cnt) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
;;;489    	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
000004  461c              MOV      r4,r3
000006  460d              MOV      r5,r1
;;;490    	int r = 0;
000008  2000              MOVS     r0,#0
;;;491    
;;;492    	while (cnt-- && (r = *d++ - *s++) == 0) ;
00000a  bf00              NOP      
                  |L40.12|
00000c  0016              MOVS     r6,r2
00000e  f1a20201          SUB      r2,r2,#1
000012  d007              BEQ      |L40.36|
000014  f8147b01          LDRB     r7,[r4],#1
000018  f815cb01          LDRB     r12,[r5],#1
00001c  eba7060c          SUB      r6,r7,r12
000020  0030              MOVS     r0,r6
000022  d0f3              BEQ      |L40.12|
                  |L40.36|
;;;493    	return r;
;;;494    }
000024  bdf0              POP      {r4-r7,pc}
;;;495    
                          ENDP


                          AREA ||i.mem_cpy||, CODE, READONLY, ALIGN=1

                  mem_cpy PROC
;;;461    static
;;;462    void mem_cpy (void* dst, const void* src, UINT cnt) {
000000  b570              PUSH     {r4-r6,lr}
;;;463    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;464    	const BYTE *s = (const BYTE*)src;
000004  460c              MOV      r4,r1
;;;465    
;;;466    #if _WORD_ACCESS == 1
;;;467    	while (cnt >= sizeof (int)) {
;;;468    		*(int*)d = *(int*)s;
;;;469    		d += sizeof (int); s += sizeof (int);
;;;470    		cnt -= sizeof (int);
;;;471    	}
;;;472    #endif
;;;473    	while (cnt--)
000006  e003              B        |L41.16|
                  |L41.8|
;;;474    		*d++ = *s++;
000008  f8145b01          LDRB     r5,[r4],#1
00000c  f8035b01          STRB     r5,[r3],#1
                  |L41.16|
000010  0015              MOVS     r5,r2                 ;473
000012  f1a20201          SUB      r2,r2,#1              ;473
000016  d1f7              BNE      |L41.8|
;;;475    }
000018  bd70              POP      {r4-r6,pc}
;;;476    
                          ENDP


                          AREA ||i.mem_set||, CODE, READONLY, ALIGN=1

                  mem_set PROC
;;;478    static
;;;479    void mem_set (void* dst, int val, UINT cnt) {
000000  b530              PUSH     {r4,r5,lr}
;;;480    	BYTE *d = (BYTE*)dst;
000002  4603              MOV      r3,r0
;;;481    
;;;482    	while (cnt--)
000004  e001              B        |L42.10|
                  |L42.6|
;;;483    		*d++ = (BYTE)val;
000006  f8031b01          STRB     r1,[r3],#1
                  |L42.10|
00000a  0014              MOVS     r4,r2                 ;482
00000c  f1a20201          SUB      r2,r2,#1              ;482
000010  d1f9              BNE      |L42.6|
;;;484    }
000012  bd30              POP      {r4,r5,pc}
;;;485    
                          ENDP


                          AREA ||i.move_window||, CODE, READONLY, ALIGN=1

                  move_window PROC
;;;683    static
;;;684    FRESULT move_window (
000000  b570              PUSH     {r4-r6,lr}
;;;685    	FATFS* fs,		/* File system object */
;;;686    	DWORD sector	/* Sector number to make appearance in the fs->win[] */
;;;687    )
;;;688    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;689    	FRESULT res = FR_OK;
000006  2600              MOVS     r6,#0
;;;690    
;;;691    
;;;692    	if (sector != fs->winsect) {	/* Window offset changed? */
000008  6ae0              LDR      r0,[r4,#0x2c]
00000a  42a8              CMP      r0,r5
00000c  d010              BEQ      |L43.48|
;;;693    #if !_FS_READONLY
;;;694    		res = sync_window(fs);		/* Write-back changes */
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       sync_window
000014  4606              MOV      r6,r0
;;;695    #endif
;;;696    		if (res == FR_OK) {			/* Fill sector window with new data */
000016  b95e              CBNZ     r6,|L43.48|
;;;697    			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
000018  7860              LDRB     r0,[r4,#1]
00001a  2301              MOVS     r3,#1
00001c  462a              MOV      r2,r5
00001e  f1040130          ADD      r1,r4,#0x30
000022  f7fffffe          BL       disk_read
000026  b110              CBZ      r0,|L43.46|
;;;698    				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
000028  f04f35ff          MOV      r5,#0xffffffff
;;;699    				res = FR_DISK_ERR;
00002c  2601              MOVS     r6,#1
                  |L43.46|
;;;700    			}
;;;701    			fs->winsect = sector;
00002e  62e5              STR      r5,[r4,#0x2c]
                  |L43.48|
;;;702    		}
;;;703    	}
;;;704    	return res;
000030  4630              MOV      r0,r6
;;;705    }
000032  bd70              POP      {r4-r6,pc}
;;;706    
                          ENDP


                          AREA ||i.put_fat||, CODE, READONLY, ALIGN=1

                  put_fat PROC
;;;827    #if !_FS_READONLY
;;;828    FRESULT put_fat (
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;829    	FATFS* fs,	/* File system object */
;;;830    	DWORD clst,	/* FAT index number (cluster number) to be changed */
;;;831    	DWORD val	/* New value to be set to the entry */
;;;832    )
;;;833    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;834    	UINT bc;
;;;835    	BYTE *p;
;;;836    	FRESULT res;
;;;837    
;;;838    
;;;839    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
00000a  2e02              CMP      r6,#2
00000c  d302              BCC      |L44.20|
00000e  6968              LDR      r0,[r5,#0x14]
000010  42b0              CMP      r0,r6
000012  d802              BHI      |L44.26|
                  |L44.20|
;;;840    		res = FR_INT_ERR;
000014  f04f0802          MOV      r8,#2
000018  e090              B        |L44.316|
                  |L44.26|
;;;841    
;;;842    	} else {
;;;843    		switch (fs->fs_type) {
00001a  7828              LDRB     r0,[r5,#0]
00001c  2801              CMP      r0,#1
00001e  d004              BEQ      |L44.42|
000020  2802              CMP      r0,#2
000022  d044              BEQ      |L44.174|
000024  2803              CMP      r0,#3
000026  d17d              BNE      |L44.292|
000028  e059              B        |L44.222|
                  |L44.42|
;;;844    		case FS_FAT12 :
;;;845    			bc = (UINT)clst; bc += bc / 2;
00002a  46b1              MOV      r9,r6
00002c  eb090959          ADD      r9,r9,r9,LSR #1
;;;846    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
000030  6a28              LDR      r0,[r5,#0x20]
000032  eb002159          ADD      r1,r0,r9,LSR #9
000036  4628              MOV      r0,r5
000038  f7fffffe          BL       move_window
00003c  4680              MOV      r8,r0
;;;847    			if (res != FR_OK) break;
00003e  f1b80f00          CMP      r8,#0
000042  d000              BEQ      |L44.70|
000044  e079              B        |L44.314|
                  |L44.70|
;;;848    			p = &fs->win[bc++ % SS(fs)];
000046  4648              MOV      r0,r9
000048  f1090901          ADD      r9,r9,#1
00004c  f3c00108          UBFX     r1,r0,#0,#9
000050  f1050030          ADD      r0,r5,#0x30
000054  180c              ADDS     r4,r1,r0
;;;849    			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
000056  f0060001          AND      r0,r6,#1
00005a  b120              CBZ      r0,|L44.102|
00005c  b2f9              UXTB     r1,r7
00005e  7820              LDRB     r0,[r4,#0]
000060  f361101f          BFI      r0,r1,#4,#28
000064  e000              B        |L44.104|
                  |L44.102|
000066  4638              MOV      r0,r7
                  |L44.104|
000068  7020              STRB     r0,[r4,#0]
;;;850    			fs->wflag = 1;
00006a  2001              MOVS     r0,#1
00006c  7128              STRB     r0,[r5,#4]
;;;851    			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
00006e  6a28              LDR      r0,[r5,#0x20]
000070  eb002159          ADD      r1,r0,r9,LSR #9
000074  4628              MOV      r0,r5
000076  f7fffffe          BL       move_window
00007a  4680              MOV      r8,r0
;;;852    			if (res != FR_OK) break;
00007c  f1b80f00          CMP      r8,#0
000080  d000              BEQ      |L44.132|
000082  e05a              B        |L44.314|
                  |L44.132|
;;;853    			p = &fs->win[bc % SS(fs)];
000084  f3c90108          UBFX     r1,r9,#0,#9
000088  f1050030          ADD      r0,r5,#0x30
00008c  180c              ADDS     r4,r1,r0
;;;854    			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
00008e  f0060001          AND      r0,r6,#1
000092  b110              CBZ      r0,|L44.154|
000094  f3c71007          UBFX     r0,r7,#4,#8
000098  e005              B        |L44.166|
                  |L44.154|
00009a  7820              LDRB     r0,[r4,#0]
00009c  f00000f0          AND      r0,r0,#0xf0
0000a0  f3c72103          UBFX     r1,r7,#8,#4
0000a4  4308              ORRS     r0,r0,r1
                  |L44.166|
0000a6  7020              STRB     r0,[r4,#0]
;;;855    			fs->wflag = 1;
0000a8  2001              MOVS     r0,#1
0000aa  7128              STRB     r0,[r5,#4]
;;;856    			break;
0000ac  e045              B        |L44.314|
                  |L44.174|
;;;857    
;;;858    		case FS_FAT16 :
;;;859    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
0000ae  6a28              LDR      r0,[r5,#0x20]
0000b0  eb002116          ADD      r1,r0,r6,LSR #8
0000b4  4628              MOV      r0,r5
0000b6  f7fffffe          BL       move_window
0000ba  4680              MOV      r8,r0
;;;860    			if (res != FR_OK) break;
0000bc  f1b80f00          CMP      r8,#0
0000c0  d000              BEQ      |L44.196|
0000c2  e03a              B        |L44.314|
                  |L44.196|
;;;861    			p = &fs->win[clst * 2 % SS(fs)];
0000c4  f24010ff          MOV      r0,#0x1ff
0000c8  ea000146          AND      r1,r0,r6,LSL #1
0000cc  f1050030          ADD      r0,r5,#0x30
0000d0  180c              ADDS     r4,r1,r0
;;;862    			ST_WORD(p, (WORD)val);
0000d2  7027              STRB     r7,[r4,#0]
0000d4  0a38              LSRS     r0,r7,#8
0000d6  7060              STRB     r0,[r4,#1]
;;;863    			fs->wflag = 1;
0000d8  2001              MOVS     r0,#1
0000da  7128              STRB     r0,[r5,#4]
;;;864    			break;
0000dc  e02d              B        |L44.314|
                  |L44.222|
;;;865    
;;;866    		case FS_FAT32 :
;;;867    			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
0000de  6a28              LDR      r0,[r5,#0x20]
0000e0  eb0011d6          ADD      r1,r0,r6,LSR #7
0000e4  4628              MOV      r0,r5
0000e6  f7fffffe          BL       move_window
0000ea  4680              MOV      r8,r0
;;;868    			if (res != FR_OK) break;
0000ec  f1b80f00          CMP      r8,#0
0000f0  d000              BEQ      |L44.244|
0000f2  e022              B        |L44.314|
                  |L44.244|
;;;869    			p = &fs->win[clst * 4 % SS(fs)];
0000f4  f24010ff          MOV      r0,#0x1ff
0000f8  ea000186          AND      r1,r0,r6,LSL #2
0000fc  f1050030          ADD      r0,r5,#0x30
000100  180c              ADDS     r4,r1,r0
;;;870    			val |= LD_DWORD(p) & 0xF0000000;
000102  78e0              LDRB     r0,[r4,#3]
000104  0600              LSLS     r0,r0,#24
000106  78a1              LDRB     r1,[r4,#2]
000108  ea404001          ORR      r0,r0,r1,LSL #16
00010c  7861              LDRB     r1,[r4,#1]
00010e  ea402001          ORR      r0,r0,r1,LSL #8
000112  7821              LDRB     r1,[r4,#0]
000114  4308              ORRS     r0,r0,r1
000116  f0004070          AND      r0,r0,#0xf0000000
00011a  4307              ORRS     r7,r7,r0
;;;871    			ST_DWORD(p, val);
00011c  7027              STRB     r7,[r4,#0]
00011e  0a38              LSRS     r0,r7,#8
000120  7060              STRB     r0,[r4,#1]
000122  e000              B        |L44.294|
                  |L44.292|
000124  e006              B        |L44.308|
                  |L44.294|
000126  0c38              LSRS     r0,r7,#16
000128  70a0              STRB     r0,[r4,#2]
00012a  0e38              LSRS     r0,r7,#24
00012c  70e0              STRB     r0,[r4,#3]
;;;872    			fs->wflag = 1;
00012e  2001              MOVS     r0,#1
000130  7128              STRB     r0,[r5,#4]
;;;873    			break;
000132  e002              B        |L44.314|
                  |L44.308|
;;;874    
;;;875    		default :
;;;876    			res = FR_INT_ERR;
000134  f04f0802          MOV      r8,#2
000138  bf00              NOP                            ;843
                  |L44.314|
00013a  bf00              NOP                            ;847
                  |L44.316|
;;;877    		}
;;;878    	}
;;;879    
;;;880    	return res;
00013c  4640              MOV      r0,r8
;;;881    }
00013e  e8bd87f0          POP      {r4-r10,pc}
;;;882    #endif /* !_FS_READONLY */
                          ENDP


                          AREA ||i.remove_chain||, CODE, READONLY, ALIGN=1

                  remove_chain PROC
;;;891    static
;;;892    FRESULT remove_chain (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;893    	FATFS* fs,			/* File system object */
;;;894    	DWORD clst			/* Cluster# to remove a chain from */
;;;895    )
;;;896    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;897    	FRESULT res;
;;;898    	DWORD nxt;
;;;899    #if _USE_TRIM
;;;900    	DWORD scl = clst, ecl = clst, rt[2];
;;;901    #endif
;;;902    
;;;903    	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
000008  2e02              CMP      r6,#2
00000a  d302              BCC      |L45.18|
00000c  6960              LDR      r0,[r4,#0x14]
00000e  42b0              CMP      r0,r6
000010  d801              BHI      |L45.22|
                  |L45.18|
;;;904    		res = FR_INT_ERR;
000012  2702              MOVS     r7,#2
000014  e027              B        |L45.102|
                  |L45.22|
;;;905    
;;;906    	} else {
;;;907    		res = FR_OK;
000016  2700              MOVS     r7,#0
;;;908    		while (clst < fs->n_fatent) {			/* Not a last link? */
000018  e021              B        |L45.94|
                  |L45.26|
;;;909    			nxt = get_fat(fs, clst);			/* Get cluster status */
00001a  4631              MOV      r1,r6
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       get_fat
000022  4605              MOV      r5,r0
;;;910    			if (nxt == 0) break;				/* Empty cluster? */
000024  b905              CBNZ     r5,|L45.40|
000026  e01d              B        |L45.100|
                  |L45.40|
;;;911    			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
000028  2d01              CMP      r5,#1
00002a  d101              BNE      |L45.48|
00002c  2702              MOVS     r7,#2
00002e  e019              B        |L45.100|
                  |L45.48|
;;;912    			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L45.56|
000034  2701              MOVS     r7,#1
000036  e015              B        |L45.100|
                  |L45.56|
;;;913    			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
000038  2200              MOVS     r2,#0
00003a  4631              MOV      r1,r6
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       put_fat
000042  4607              MOV      r7,r0
;;;914    			if (res != FR_OK) break;
000044  b107              CBZ      r7,|L45.72|
000046  e00d              B        |L45.100|
                  |L45.72|
;;;915    			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
000048  6920              LDR      r0,[r4,#0x10]
00004a  1c40              ADDS     r0,r0,#1
00004c  b130              CBZ      r0,|L45.92|
;;;916    				fs->free_clust++;
00004e  6920              LDR      r0,[r4,#0x10]
000050  1c40              ADDS     r0,r0,#1
000052  6120              STR      r0,[r4,#0x10]
;;;917    				fs->fsi_flag |= 1;
000054  7960              LDRB     r0,[r4,#5]
000056  f0400001          ORR      r0,r0,#1
00005a  7160              STRB     r0,[r4,#5]
                  |L45.92|
;;;918    			}
;;;919    #if _USE_TRIM
;;;920    			if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
;;;921    				ecl = nxt;
;;;922    			} else {				/* End of contiguous clusters */ 
;;;923    				rt[0] = clust2sect(fs, scl);					/* Start sector */
;;;924    				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
;;;925    				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
;;;926    				scl = ecl = nxt;
;;;927    			}
;;;928    #endif
;;;929    			clst = nxt;	/* Next cluster */
00005c  462e              MOV      r6,r5
                  |L45.94|
00005e  6960              LDR      r0,[r4,#0x14]         ;908
000060  42b0              CMP      r0,r6                 ;908
000062  d8da              BHI      |L45.26|
                  |L45.100|
000064  bf00              NOP                            ;910
                  |L45.102|
;;;930    		}
;;;931    	}
;;;932    
;;;933    	return res;
000066  4638              MOV      r0,r7
;;;934    }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;935    #endif
                          ENDP


                          AREA ||i.st_clust||, CODE, READONLY, ALIGN=1

                  st_clust PROC
;;;1206   static
;;;1207   void st_clust (
000000  7681              STRB     r1,[r0,#0x1a]
;;;1208   	BYTE* dir,	/* Pointer to the directory entry */
;;;1209   	DWORD cl	/* Value to be set */
;;;1210   )
;;;1211   {
;;;1212   	ST_WORD(dir + DIR_FstClusLO, cl);
000002  0a0b              LSRS     r3,r1,#8
000004  76c3              STRB     r3,[r0,#0x1b]
;;;1213   	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
000006  0c0a              LSRS     r2,r1,#16
000008  7502              STRB     r2,[r0,#0x14]
00000a  0e0b              LSRS     r3,r1,#24
00000c  7543              STRB     r3,[r0,#0x15]
;;;1214   }
00000e  4770              BX       lr
;;;1215   #endif
                          ENDP


                          AREA ||i.sync_fs||, CODE, READONLY, ALIGN=1

                  sync_fs PROC
;;;714    static
;;;715    FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
000000  b570              PUSH     {r4-r6,lr}
;;;716    	FATFS* fs		/* File system object */
;;;717    )
;;;718    {
000002  4604              MOV      r4,r0
;;;719    	FRESULT res;
;;;720    
;;;721    
;;;722    	res = sync_window(fs);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       sync_window
00000a  4605              MOV      r5,r0
;;;723    	if (res == FR_OK) {
00000c  2d00              CMP      r5,#0
00000e  d159              BNE      |L47.196|
;;;724    		/* Update FSINFO sector if needed */
;;;725    		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
000010  7820              LDRB     r0,[r4,#0]
000012  2803              CMP      r0,#3
000014  d14f              BNE      |L47.182|
000016  7960              LDRB     r0,[r4,#5]
000018  2801              CMP      r0,#1
00001a  d14c              BNE      |L47.182|
;;;726    			/* Create FSINFO structure */
;;;727    			mem_set(fs->win, 0, SS(fs));
00001c  0242              LSLS     r2,r0,#9
00001e  2100              MOVS     r1,#0
000020  f1040030          ADD      r0,r4,#0x30
000024  f7fffffe          BL       mem_set
;;;728    			ST_WORD(fs->win + BS_55AA, 0xAA55);
000028  2155              MOVS     r1,#0x55
00002a  f884122e          STRB     r1,[r4,#0x22e]
00002e  21aa              MOVS     r1,#0xaa
000030  f884122f          STRB     r1,[r4,#0x22f]
;;;729    			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
000034  2052              MOVS     r0,#0x52
000036  f8840030          STRB     r0,[r4,#0x30]
00003a  2152              MOVS     r1,#0x52
00003c  2031              MOVS     r0,#0x31
00003e  5501              STRB     r1,[r0,r4]
000040  2161              MOVS     r1,#0x61
000042  2032              MOVS     r0,#0x32
000044  5501              STRB     r1,[r0,r4]
000046  2141              MOVS     r1,#0x41
000048  2033              MOVS     r0,#0x33
00004a  5501              STRB     r1,[r0,r4]
;;;730    			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
00004c  2172              MOVS     r1,#0x72
00004e  f8841214          STRB     r1,[r4,#0x214]
000052  f8841215          STRB     r1,[r4,#0x215]
000056  2141              MOVS     r1,#0x41
000058  f8841216          STRB     r1,[r4,#0x216]
00005c  2161              MOVS     r1,#0x61
00005e  f8841217          STRB     r1,[r4,#0x217]
;;;731    			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
000062  7c21              LDRB     r1,[r4,#0x10]
000064  f8841218          STRB     r1,[r4,#0x218]
000068  8a20              LDRH     r0,[r4,#0x10]
00006a  0a01              LSRS     r1,r0,#8
00006c  f8841219          STRB     r1,[r4,#0x219]
000070  6920              LDR      r0,[r4,#0x10]
000072  0c01              LSRS     r1,r0,#16
000074  f884121a          STRB     r1,[r4,#0x21a]
000078  6920              LDR      r0,[r4,#0x10]
00007a  0e01              LSRS     r1,r0,#24
00007c  f884121b          STRB     r1,[r4,#0x21b]
;;;732    			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
000080  7b21              LDRB     r1,[r4,#0xc]
000082  f884121c          STRB     r1,[r4,#0x21c]
000086  89a0              LDRH     r0,[r4,#0xc]
000088  0a01              LSRS     r1,r0,#8
00008a  f884121d          STRB     r1,[r4,#0x21d]
00008e  68e0              LDR      r0,[r4,#0xc]
000090  0c01              LSRS     r1,r0,#16
000092  f884121e          STRB     r1,[r4,#0x21e]
000096  68e0              LDR      r0,[r4,#0xc]
000098  0e01              LSRS     r1,r0,#24
00009a  f884121f          STRB     r1,[r4,#0x21f]
;;;733    			/* Write it into the FSINFO sector */
;;;734    			fs->winsect = fs->volbase + 1;
00009e  69e0              LDR      r0,[r4,#0x1c]
0000a0  1c40              ADDS     r0,r0,#1
0000a2  62e0              STR      r0,[r4,#0x2c]
;;;735    			disk_write(fs->drv, fs->win, fs->winsect, 1);
0000a4  7860              LDRB     r0,[r4,#1]
0000a6  2301              MOVS     r3,#1
0000a8  f1040130          ADD      r1,r4,#0x30
0000ac  6ae2              LDR      r2,[r4,#0x2c]
0000ae  f7fffffe          BL       disk_write
;;;736    			fs->fsi_flag = 0;
0000b2  2000              MOVS     r0,#0
0000b4  7160              STRB     r0,[r4,#5]
                  |L47.182|
;;;737    		}
;;;738    		/* Make sure that no pending write process in the physical drive */
;;;739    		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
0000b6  7860              LDRB     r0,[r4,#1]
0000b8  2200              MOVS     r2,#0
0000ba  4611              MOV      r1,r2
0000bc  f7fffffe          BL       disk_ioctl
0000c0  b100              CBZ      r0,|L47.196|
;;;740    			res = FR_DISK_ERR;
0000c2  2501              MOVS     r5,#1
                  |L47.196|
;;;741    	}
;;;742    
;;;743    	return res;
0000c4  4628              MOV      r0,r5
;;;744    }
0000c6  bd70              POP      {r4-r6,pc}
;;;745    #endif
                          ENDP


                          AREA ||i.sync_window||, CODE, READONLY, ALIGN=1

                  sync_window PROC
;;;654    static
;;;655    FRESULT sync_window (
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;656    	FATFS* fs		/* File system object */
;;;657    )
;;;658    {
000004  4604              MOV      r4,r0
;;;659    	DWORD wsect;
;;;660    	UINT nf;
;;;661    	FRESULT res = FR_OK;
000006  2700              MOVS     r7,#0
;;;662    
;;;663    
;;;664    	if (fs->wflag) {	/* Write back the sector if it is dirty */
000008  7920              LDRB     r0,[r4,#4]
00000a  b1f8              CBZ      r0,|L48.76|
;;;665    		wsect = fs->winsect;	/* Current sector number */
00000c  6ae5              LDR      r5,[r4,#0x2c]
;;;666    		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
00000e  7860              LDRB     r0,[r4,#1]
000010  2301              MOVS     r3,#1
000012  462a              MOV      r2,r5
000014  f1040130          ADD      r1,r4,#0x30
000018  f7fffffe          BL       disk_write
00001c  b108              CBZ      r0,|L48.34|
;;;667    			res = FR_DISK_ERR;
00001e  2701              MOVS     r7,#1
000020  e014              B        |L48.76|
                  |L48.34|
;;;668    		} else {
;;;669    			fs->wflag = 0;
000022  2000              MOVS     r0,#0
000024  7120              STRB     r0,[r4,#4]
;;;670    			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
000026  6a20              LDR      r0,[r4,#0x20]
000028  1a28              SUBS     r0,r5,r0
00002a  69a1              LDR      r1,[r4,#0x18]
00002c  4288              CMP      r0,r1
00002e  d20d              BCS      |L48.76|
;;;671    				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
000030  78e6              LDRB     r6,[r4,#3]
000032  e009              B        |L48.72|
                  |L48.52|
;;;672    					wsect += fs->fsize;
000034  69a0              LDR      r0,[r4,#0x18]
000036  4405              ADD      r5,r5,r0
;;;673    					disk_write(fs->drv, fs->win, wsect, 1);
000038  7860              LDRB     r0,[r4,#1]
00003a  2301              MOVS     r3,#1
00003c  462a              MOV      r2,r5
00003e  f1040130          ADD      r1,r4,#0x30
000042  f7fffffe          BL       disk_write
000046  1e76              SUBS     r6,r6,#1              ;671
                  |L48.72|
000048  2e02              CMP      r6,#2                 ;671
00004a  d2f3              BCS      |L48.52|
                  |L48.76|
;;;674    				}
;;;675    			}
;;;676    		}
;;;677    	}
;;;678    	return res;
00004c  4638              MOV      r0,r7
;;;679    }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;680    #endif
                          ENDP


                          AREA ||i.validate||, CODE, READONLY, ALIGN=1

                  validate PROC
;;;2324   static
;;;2325   FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
000000  b570              PUSH     {r4-r6,lr}
;;;2326   	void* obj		/* Pointer to the object FIL/DIR to check validity */
;;;2327   )
;;;2328   {
000002  4605              MOV      r5,r0
;;;2329   	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
000004  462c              MOV      r4,r5
;;;2330   
;;;2331   
;;;2332   	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
000006  b14c              CBZ      r4,|L49.28|
000008  6820              LDR      r0,[r4,#0]
00000a  b138              CBZ      r0,|L49.28|
00000c  6820              LDR      r0,[r4,#0]
00000e  7800              LDRB     r0,[r0,#0]
000010  b120              CBZ      r0,|L49.28|
000012  6820              LDR      r0,[r4,#0]
000014  88c0              LDRH     r0,[r0,#6]
000016  88a1              LDRH     r1,[r4,#4]
000018  4288              CMP      r0,r1
00001a  d001              BEQ      |L49.32|
                  |L49.28|
;;;2333   		return FR_INVALID_OBJECT;
00001c  2009              MOVS     r0,#9
                  |L49.30|
;;;2334   
;;;2335   	ENTER_FF(fil->fs);		/* Lock file system */
;;;2336   
;;;2337   	if (disk_status(fil->fs->drv) & STA_NOINIT)
;;;2338   		return FR_NOT_READY;
;;;2339   
;;;2340   	return FR_OK;
;;;2341   }
00001e  bd70              POP      {r4-r6,pc}
                  |L49.32|
000020  6821              LDR      r1,[r4,#0]            ;2337
000022  7848              LDRB     r0,[r1,#1]            ;2337
000024  f7fffffe          BL       disk_status
000028  f0000001          AND      r0,r0,#1              ;2337
00002c  b108              CBZ      r0,|L49.50|
00002e  2003              MOVS     r0,#3                 ;2338
000030  e7f5              B        |L49.30|
                  |L49.50|
000032  2000              MOVS     r0,#0                 ;2340
000034  e7f3              B        |L49.30|
;;;2342   
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  FatFs
                          %        12

                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  vst
000000  04000200          DCW      0x0400,0x0200
000004  01000080          DCW      0x0100,0x0080
000008  00400020          DCW      0x0040,0x0020
00000c  00100008          DCW      0x0010,0x0008
000010  00040002          DCW      0x0004,0x0002
000014  0000              DCW      0x0000
                  ||cst||
000016  8000              DCW      0x8000
000018  40002000          DCW      0x4000,0x2000
00001c  10000800          DCW      0x1000,0x0800
000020  40002000          DCW      0x4000,0x2000
000024  10000800          DCW      0x1000,0x0800
000028  04000200          DCW      0x0400,0x0200

                          AREA ||.data||, DATA, ALIGN=1

                  Fsid
000000  0000              DCB      0x00,0x00
